Implementation smell,Namespace,Class,File,Method,Description
Long Method,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,MeasureOverride,The method has 203 lines of code.
Long Method,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,ArrangeOverride,The method has 159 lines of code.
Long Method,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The method has 199 lines of code.
Long Method,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The method has 150 lines of code.
Long Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The method has 80 lines of code.
Long Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The method has 88 lines of code.
Long Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The method has 71 lines of code.
Long Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The method has 68 lines of code.
Long Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,ToggleAutoHide,The method has 68 lines of code.
Long Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The method has 238 lines of code.
Long Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,UpdateFlyoutWindowPosition,The method has 87 lines of code.
Long Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The method has 113 lines of code.
Long Method,AvalonDock,FloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingWindow.cs,OnApplyTemplate,The method has 101 lines of code.
Long Method,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,OnApplyTemplate,The method has 71 lines of code.
Long Method,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,CloseWidthAnimation,The method has 95 lines of code.
Long Method,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,OpenWidthAnimation,The method has 95 lines of code.
Long Method,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,ShowOverlayPaneDockingOptions,The method has 61 lines of code.
Long Method,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,OnDragOver,The method has 76 lines of code.
Complex Method,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,AdjustPanelSizes,Cyclomatic complexity of the method is 7
Complex Method,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,MeasureOverride,Cyclomatic complexity of the method is 37
Complex Method,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,ArrangeOverride,Cyclomatic complexity of the method is 36
Complex Method,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,SetupSplitters,Cyclomatic complexity of the method is 7
Complex Method,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,Cyclomatic complexity of the method is 40
Complex Method,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,RemoveChild,Cyclomatic complexity of the method is 9
Complex Method,AvalonDock,WindowInteropWrapper,D:\newReposJune17\tltjr_Wish\AvalonDock\WindowInteropWrapper.cs,HookHandler,Cyclomatic complexity of the method is 15
Complex Method,AvalonDock,ThemeFactory,D:\newReposJune17\tltjr_Wish\AvalonDock\ThemeFactory.cs,ChangeBrush,Cyclomatic complexity of the method is 11
Complex Method,AvalonDock,ThemeFactory,D:\newReposJune17\tltjr_Wish\AvalonDock\ThemeFactory.cs,ChangeKeysInResourceDictionary,Cyclomatic complexity of the method is 7
Complex Method,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,CanExecuteCommand,Cyclomatic complexity of the method is 15
Complex Method,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,RestoreLayout,Cyclomatic complexity of the method is 8
Complex Method,AvalonDock,DockableFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableFloatingWindow.cs,FilterMessage,Cyclomatic complexity of the method is 9
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,OnActiveDocumentChanged,Cyclomatic complexity of the method is 7
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,DocumentsSourceCollectionChanged,Cyclomatic complexity of the method is 13
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,OnKeyUp,Cyclomatic complexity of the method is 8
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,Cyclomatic complexity of the method is 13
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,Cyclomatic complexity of the method is 8
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,Cyclomatic complexity of the method is 11
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,Cyclomatic complexity of the method is 7
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,Cyclomatic complexity of the method is 10
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,ToggleAutoHide,Cyclomatic complexity of the method is 22
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Hide,Cyclomatic complexity of the method is 9
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,Cyclomatic complexity of the method is 8
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,Cyclomatic complexity of the method is 55
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,UpdateFlyoutWindowPosition,Cyclomatic complexity of the method is 17
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreDocumentPaneLayout,Cyclomatic complexity of the method is 12
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreDockablePaneLayout,Cyclomatic complexity of the method is 13
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreResizingPanel,Cyclomatic complexity of the method is 15
Complex Method,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,Cyclomatic complexity of the method is 20
Complex Method,AvalonDock,DocumentContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentContent.cs,InternalClose,Cyclomatic complexity of the method is 7
Complex Method,AvalonDock,DocumentFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentFloatingWindow.cs,FilterMessage,Cyclomatic complexity of the method is 8
Complex Method,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,OnItemsChanged,Cyclomatic complexity of the method is 8
Complex Method,AvalonDock,DragPaneServices,D:\newReposJune17\tltjr_Wish\AvalonDock\DragPaneServices.cs,EndDrag,Cyclomatic complexity of the method is 7
Complex Method,AvalonDock,FloatingDockablePane,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingDockablePane.cs,OnInitialized,Cyclomatic complexity of the method is 9
Complex Method,AvalonDock,FloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingWindow.cs,OnApplyTemplate,Cyclomatic complexity of the method is 12
Complex Method,AvalonDock,FloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingWindow.cs,OnClosing,Cyclomatic complexity of the method is 7
Complex Method,AvalonDock,FloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingWindow.cs,FilterMessage,Cyclomatic complexity of the method is 11
Complex Method,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,ShowResizerOverlayWindow,Cyclomatic complexity of the method is 8
Complex Method,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,OpenPane,Cyclomatic complexity of the method is 15
Complex Method,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,ApplyRegion,Cyclomatic complexity of the method is 7
Complex Method,AvalonDock,ManagedContent,D:\newReposJune17\tltjr_Wish\AvalonDock\ManagedContent.cs,OnDragMouseLeave,Cyclomatic complexity of the method is 9
Complex Method,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,OnApplyTemplate,Cyclomatic complexity of the method is 9
Complex Method,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,OnDrop,Cyclomatic complexity of the method is 36
Complex Method,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,ShowOverlayPaneDockingOptions,Cyclomatic complexity of the method is 13
Complex Method,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,OnDragOver,Cyclomatic complexity of the method is 16
Complex Method,AvalonDock,Pane,D:\newReposJune17\tltjr_Wish\AvalonDock\Pane.cs,OnItemsChanged,Cyclomatic complexity of the method is 10
Complex Method,AvalonDock,Pane,D:\newReposJune17\tltjr_Wish\AvalonDock\Pane.cs,OpenOptionsMenu,Cyclomatic complexity of the method is 9
Long Parameter List,AvalonDock,InteropHelper,D:\newReposJune17\tltjr_Wish\AvalonDock\InteropHelper.cs,CreateRectRgn,The method has 4 parameters.
Long Parameter List,AvalonDock,InteropHelper,D:\newReposJune17\tltjr_Wish\AvalonDock\InteropHelper.cs,CombineRgn,The method has 4 parameters.
Long Parameter List,AvalonDock,WindowInteropWrapper,D:\newReposJune17\tltjr_Wish\AvalonDock\WindowInteropWrapper.cs,SendMessage,The method has 4 parameters.
Long Parameter List,AvalonDock,WindowInteropWrapper,D:\newReposJune17\tltjr_Wish\AvalonDock\WindowInteropWrapper.cs,HookHandler,The method has 5 parameters.
Long Parameter List,AvalonDock,FilterMessageEventArgs,D:\newReposJune17\tltjr_Wish\AvalonDock\WindowInteropWrapper.cs,FilterMessageEventArgs,The method has 4 parameters.
Long Parameter List,AvalonDock,AlignedImage,D:\newReposJune17\tltjr_Wish\AvalonDock\AlignedImage.cs,TryApplyVisualTransform,The method has 5 parameters.
Long Parameter List,AvalonDock,BoolToVisibilityConverter,D:\newReposJune17\tltjr_Wish\AvalonDock\Converters.cs,Convert,The method has 4 parameters.
Long Parameter List,AvalonDock,BoolToVisibilityConverter,D:\newReposJune17\tltjr_Wish\AvalonDock\Converters.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,AvalonDock,ObjectToImageConverter,D:\newReposJune17\tltjr_Wish\AvalonDock\Converters.cs,Convert,The method has 4 parameters.
Long Parameter List,AvalonDock,ObjectToImageConverter,D:\newReposJune17\tltjr_Wish\AvalonDock\Converters.cs,ConvertBack,The method has 4 parameters.
Long Parameter List,AvalonDock,DockableContentStateAndPosition,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,DockableContentStateAndPosition,The method has 6 parameters.
Long Parameter List,AvalonDock,DockableContentStateAndPosition,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,DockableContentStateAndPosition,The method has 6 parameters.
Long Parameter List,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreResizingPanel,The method has 4 parameters.
Long Parameter List,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The method has 4 parameters.
Long Statement,AvalonDock,GreyableImage,D:\newReposJune17\tltjr_Wish\AvalonDock\GreyableImage.cs,OnPropertyChanged,The length of the statement  "	} else if (e.Property.Name.Equals ("Source") && !object.ReferenceEquals (Source' _sourceC) && !object.ReferenceEquals (Source' _sourceG))// only recache Source if it's the new one from outside " is 192.
Long Statement,AvalonDock,GreyableImage,D:\newReposJune17\tltjr_Wish\AvalonDock\GreyableImage.cs,OnPropertyChanged,The length of the statement  "	} else if (e.Property.Name.Equals ("OpacityMask") && !object.ReferenceEquals (OpacityMask' _opacityMaskC) && !object.ReferenceEquals (OpacityMask' _opacityMaskG))// only recache opacityMask if it's the new one from outside " is 222.
Long Statement,AvalonDock,GreyableImage,D:\newReposJune17\tltjr_Wish\AvalonDock\GreyableImage.cs,SetSources,The length of the statement  "		System.Diagnostics.Debug.Fail ("The Image used cannot be greyed out."' "Use BitmapImage or URI as a Source in order to allow greyscaling. Make sure the absolute Uri is used as relative Uri may sometimes resolve incorrectly.\n\nException: " + e.Message); " is 253.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,CorrectSizes,The length of the statement  "	IEnumerable<FrameworkElement> children = Children.OfType<FrameworkElement> ().Where<FrameworkElement> (c => !(c is Resizer)); " is 125.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,AdjustPanelSizes,The length of the statement  "	IEnumerable<FrameworkElement> children = Children.OfType<FrameworkElement> ().Where<FrameworkElement> (c => !(c is Resizer)); " is 125.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,AdjustPanelSizes,The length of the statement  "			double totSum = children.Sum<FrameworkElement> (f => f.IsAbsolute () ? f.GetAbsoluteValue () : GetEffectiveSize (f).Width); " is 123.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,AdjustPanelSizes,The length of the statement  "				SetResizeWidth (c' new GridLength ((c.IsAbsolute () ? c.GetAbsoluteValue () : GetEffectiveSize (c).Width) / totSum' GridUnitType.Star)); " is 136.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,AdjustPanelSizes,The length of the statement  "			double totSum = children.Sum<FrameworkElement> (f => f.IsAbsolute () ? f.GetAbsoluteValue () : GetEffectiveSize (f).Height); " is 124.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,AdjustPanelSizes,The length of the statement  "				SetResizeHeight (c' new GridLength ((c.IsAbsolute () ? c.GetAbsoluteValue () : GetEffectiveSize (c).Height) / totSum' GridUnitType.Star)); " is 138.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,MeasureOverride,The length of the statement  "			double starsFinalWidth = availableSize.Width - splitters.Sum<FrameworkElement> (s => s.MinWidth) - childAbsolutes.Sum<FrameworkElement> (a => a.GetAbsoluteValue ()) - childAutoSizes.Sum<FrameworkElement> (a => a.DesiredSize.Width); " is 231.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,MeasureOverride,The length of the statement  "			double starsFinalHeight = availableSize.Height - splitters.Sum<FrameworkElement> (s => s.MinHeight) - childAbsolutes.Sum<FrameworkElement> (a => a.GetAbsoluteValue ()) - childAutoSizes.Sum<FrameworkElement> (a => a.DesiredSize.Height); " is 235.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,ArrangeOverride,The length of the statement  "			double starsFinalWidth = finalSize.Width - splitters.Sum<FrameworkElement> (s => s.MinWidth) - childAbsolutes.Sum<FrameworkElement> (a => a.GetAbsoluteValue ()) - childAutoSizes.Sum<FrameworkElement> (a => a.DesiredSize.Width); " is 227.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,ArrangeOverride,The length of the statement  "			double starsFinalHeight = finalSize.Height - splitters.Sum<FrameworkElement> (s => s.MinHeight) - childAbsolutes.Sum<FrameworkElement> (a => a.GetAbsoluteValue ()) - childAutoSizes.Sum<FrameworkElement> (a => a.DesiredSize.Height); " is 231.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The length of the statement  "	Vector transformedDelta = trToWnd.Transform (new Point (e.HorizontalChange' e.VerticalChange)) - trToWnd.Transform (new Point ()); " is 130.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The length of the statement  "	//double prevMinSize = prevChildren.Sum<FrameworkElement>(c => Orientation == Orientation.Horizontal ? c.MinWidth : c.MinHeight); " is 129.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The length of the statement  "	//double nextMinSize = nextChildren.Sum<FrameworkElement>(c => Orientation == Orientation.Horizontal ? c.MinWidth : c.MinHeight); " is 129.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The length of the statement  "	//double prevMaxSize = prevChildren.Sum<FrameworkElement>(c => Orientation == Orientation.Horizontal ? c.MaxWidth : c.MaxHeight); " is 129.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The length of the statement  "	//double nextMaxSize = nextChildren.Sum<FrameworkElement>(c => Orientation == Orientation.Horizontal ? c.MaxWidth : c.MaxHeight); " is 129.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The length of the statement  "	//double prevSize = prevChildren.Sum<FrameworkElement>(c => Orientation == Orientation.Horizontal ? currentSizes[visibleChildren.IndexOf(c)].Width : currentSizes[visibleChildren.IndexOf(c)].Height); " is 198.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The length of the statement  "	//double nextSize = nextChildren.Sum<FrameworkElement>(c => Orientation == Orientation.Horizontal ? currentSizes[visibleChildren.IndexOf(c)].Width : currentSizes[visibleChildren.IndexOf(c)].Height); " is 198.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The length of the statement  "	//        prevChildren.Count<FrameworkElement>(c => delta > 0 ? true : (Orientation == Orientation.Horizontal ? currentSizes[visibleChildren.IndexOf(c)].Width > c.MinWidth : currentSizes[visibleChildren.IndexOf(c)].Height > c.MinHeight)); " is 238.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The length of the statement  "	//        nextChildren.Count<FrameworkElement>(c => delta < 0 ? true : (Orientation == Orientation.Horizontal ? currentSizes[visibleChildren.IndexOf(c)].Width > c.MinWidth : currentSizes[visibleChildren.IndexOf(c)].Height > c.MinHeight)); " is 238.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The length of the statement  "	//                new GridLength(HelperFunc.MultiplyCheckNaN(currentSizes[i].Width' starsScaleFactor)' GridUnitType.Star)); " is 123.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragDelta,The length of the statement  "	//                new GridLength(HelperFunc.MultiplyCheckNaN(currentSizes[i].Height' starsScaleFactor)' GridUnitType.Star)); " is 124.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The length of the statement  "	Vector transformedDelta = trToWnd.Transform (new Point (e.HorizontalChange' e.VerticalChange)) - trToWnd.Transform (new Point ()); " is 130.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The length of the statement  "	double prevMinSize = prevChildren.Sum<FrameworkElement> (c => Orientation == Orientation.Horizontal ? c.MinWidth : c.MinHeight); " is 128.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The length of the statement  "	double nextMinSize = nextChildren.Sum<FrameworkElement> (c => Orientation == Orientation.Horizontal ? c.MinWidth : c.MinHeight); " is 128.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The length of the statement  "	double prevMaxSize = prevChildren.Sum<FrameworkElement> (c => Orientation == Orientation.Horizontal ? c.MaxWidth : c.MaxHeight); " is 128.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The length of the statement  "	double nextMaxSize = nextChildren.Sum<FrameworkElement> (c => Orientation == Orientation.Horizontal ? c.MaxWidth : c.MaxHeight); " is 128.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The length of the statement  "	double prevSize = prevChildren.Sum<FrameworkElement> (c => Orientation == Orientation.Horizontal ? currentSizes [visibleChildren.IndexOf (c)].Width : currentSizes [visibleChildren.IndexOf (c)].Height); " is 201.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The length of the statement  "	double nextSize = nextChildren.Sum<FrameworkElement> (c => Orientation == Orientation.Horizontal ? currentSizes [visibleChildren.IndexOf (c)].Width : currentSizes [visibleChildren.IndexOf (c)].Height); " is 201.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The length of the statement  "		int prevChildrenCountWithNoMinLen = prevChildren.Count<FrameworkElement> (c => delta > 0 ? true : (Orientation == Orientation.Horizontal ? currentSizes [visibleChildren.IndexOf (c)].Width > c.MinWidth : currentSizes [visibleChildren.IndexOf (c)].Height > c.MinHeight)); " is 269.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The length of the statement  "		int nextChildrenCountWithNoMinLen = nextChildren.Count<FrameworkElement> (c => delta < 0 ? true : (Orientation == Orientation.Horizontal ? currentSizes [visibleChildren.IndexOf (c)].Width > c.MinWidth : currentSizes [visibleChildren.IndexOf (c)].Height > c.MinHeight)); " is 269.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The length of the statement  "				SetResizeWidth (child' new GridLength (HelperFunc.MultiplyCheckNaN (currentSizes [i].Width' starsScaleFactor)' GridUnitType.Star)); " is 131.
Long Statement,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The length of the statement  "				SetResizeHeight (child' new GridLength (HelperFunc.MultiplyCheckNaN (currentSizes [i].Height' starsScaleFactor)' GridUnitType.Star)); " is 133.
Long Statement,AvalonDock,ResizingPanelExFuncs,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,GetAbsoluteValue,The length of the statement  "	GridLength len = parentPanel.Orientation == Orientation.Horizontal ? ResizingPanel.GetResizeWidth (child) : ResizingPanel.GetResizeHeight (child); " is 146.
Long Statement,AvalonDock,ResizingPanelExFuncs,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,GetStarValue,The length of the statement  "	GridLength len = parentPanel.Orientation == Orientation.Horizontal ? ResizingPanel.GetResizeWidth (child) : ResizingPanel.GetResizeHeight (child); " is 146.
Long Statement,AvalonDock,ResizingPanelExFuncs,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,IsStar,The length of the statement  "	return parentPanel.Orientation == Orientation.Horizontal ? ResizingPanel.GetResizeWidth (child).IsStar : ResizingPanel.GetResizeHeight (child).IsStar; " is 150.
Long Statement,AvalonDock,ResizingPanelExFuncs,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,IsAbsolute,The length of the statement  "	return parentPanel.Orientation == Orientation.Horizontal ? ResizingPanel.GetResizeWidth (child).IsAbsolute : ResizingPanel.GetResizeHeight (child).IsAbsolute; " is 158.
Long Statement,AvalonDock,ResizingPanelExFuncs,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,IsAuto,The length of the statement  "	return parentPanel.Orientation == Orientation.Horizontal ? ResizingPanel.GetResizeWidth (child).IsAuto : ResizingPanel.GetResizeHeight (child).IsAuto; " is 150.
Long Statement,AvalonDock,ThemeFactory,D:\newReposJune17\tltjr_Wish\AvalonDock\ThemeFactory.cs,GetColor,The length of the statement  "	return Color.FromArgb (c.A' GetSmoothColor (brighness' newCol.R)' GetSmoothColor (brighness' newCol.G)' GetSmoothColor (brighness' newCol.B)); " is 142.
Long Statement,AvalonDock,ThemeFactory,D:\newReposJune17\tltjr_Wish\AvalonDock\ThemeFactory.cs,GetSmoothColor,The length of the statement  "	return Color.FromArgb (c.A' GetSmoothColor (c.R' light.R)' GetSmoothColor (c.G' light.G)' GetSmoothColor (c.B' light.B)); " is 121.
Long Statement,AvalonDock,BoolToVisibilityConverter,D:\newReposJune17\tltjr_Wish\AvalonDock\Converters.cs,Convert,The length of the statement  "	return System.Convert.ToBoolean (value) ? Visibility.Visible : (parameter != null && ((string)parameter) == "Hidden" ? Visibility.Hidden : Visibility.Collapsed); " is 161.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,OnDragStart,The length of the statement  "	if (DockableStyle != DockableStyle.None && (State == DockableContentState.Docked || State == DockableContentState.Document || State == DockableContentState.DockableWindow) && !Manager.DragPaneServices.IsDragging) { " is 214.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,SetStateToDockableWindow,The length of the statement  "	Debug.Assert (State == DockableContentState.None || State == DockableContentState.Document || State == DockableContentState.Docked || State == DockableContentState.FloatingWindow || State == DockableContentState.Hidden); " is 220.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,SetStateToFloatingWindow,The length of the statement  "	Debug.Assert (State == DockableContentState.Document || State == DockableContentState.Docked || State == DockableContentState.DockableWindow); " is 142.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DockableContentCommands.FloatingWindow' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 136.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DockableContentCommands.DockableFloatingWindow' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 144.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (ManagedContentCommands.Show' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 125.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DockableContentCommands.ShowAsDocument' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 136.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DockableContentCommands.ToggleAutoHide' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 136.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (ManagedContentCommands.Hide' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 125.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,Show,The length of the statement  "		throw new InvalidOperationException ("Please remove the content from previous DockingManager (using the Close method)"); " is 120.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,ShowAsDocument,The length of the statement  "		throw new InvalidOperationException ("Please remove the content from previous DockingManager (using the Close method)"); " is 120.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,ShowAsFloatingWindow,The length of the statement  "		throw new InvalidOperationException ("Please remove the content from previous DockingManager (using the Close method)"); " is 120.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,CanExecuteCommand,The length of the statement  "		if (State == DockableContentState.AutoHide || State == DockableContentState.Document || State == DockableContentState.FloatingWindow || State == DockableContentState.DockableWindow) { " is 183.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,SaveLayout,The length of the statement  "		storeWriter.WriteAttributeString ("FloatingWindowSize"' new SizeConverter ().ConvertToInvariantString (FloatingWindowSize)); " is 124.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,SaveLayout,The length of the statement  "		storeWriter.WriteAttributeString ("FlyoutWindowSize"' new SizeConverter ().ConvertToInvariantString (FlyoutWindowSize)); " is 120.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,RestoreLayout,The length of the statement  "		FloatingWindowSize = (Size)(new SizeConverter ()).ConvertFromInvariantString (contentElement.GetAttribute ("FloatingWindowSize")); " is 130.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,RestoreLayout,The length of the statement  "		FlyoutWindowSize = (Size)(new SizeConverter ()).ConvertFromInvariantString (contentElement.GetAttribute ("FlyoutWindowSize")); " is 126.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,RestoreLayout,The length of the statement  "		effectiveSize = (Size)(new SizeConverter ()).ConvertFromInvariantString (contentElement.GetAttribute ("EffectiveSize")); " is 120.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,RestoreLayout,The length of the statement  "				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (Manager).Descendants ().FirstOrDefault (el => el.Item is DockablePane && ((el.Item as DockablePane).ID == containerPaneGuid)); " is 192.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,RestoreLayout,The length of the statement  "			_savedStateAndPosition = new DockableContentStateAndPosition (paneRef' int.Parse (contentElement.GetAttribute ("ChildIndex"))' double.Parse (contentElement.GetAttribute ("Width"))' double.Parse (contentElement.GetAttribute ("Height"))' (AnchorStyle)Enum.Parse (typeof(AnchorStyle)' contentElement.GetAttribute ("Anchor"))' (DockableContentState)Enum.Parse (typeof(DockableContentState)' contentElement.GetAttribute ("State"))); " is 427.
Long Statement,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,RestoreLayout,The length of the statement  "			_savedStateAndPosition = new DockableContentStateAndPosition (containerPaneGuid' int.Parse (contentElement.GetAttribute ("ChildIndex"))' double.Parse (contentElement.GetAttribute ("Width"))' double.Parse (contentElement.GetAttribute ("Height"))' (AnchorStyle)Enum.Parse (typeof(AnchorStyle)' contentElement.GetAttribute ("Anchor"))' (DockableContentState)Enum.Parse (typeof(DockableContentState)' contentElement.GetAttribute ("State"))); " is 437.
Long Statement,AvalonDock,DockableFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableFloatingWindow.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DockableFloatingWindowCommands.SetAsDockableWindow' OnExecuteCommand' OnCanExecuteCommand)); " is 138.
Long Statement,AvalonDock,DockableFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableFloatingWindow.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DockableFloatingWindowCommands.SetAsFloatingWindow' OnExecuteCommand' OnCanExecuteCommand)); " is 138.
Long Statement,AvalonDock,DockableFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableFloatingWindow.cs,OpenContextMenu,The length of the statement  "	ContextMenu cxMenu = FindResource (new ComponentResourceKey (typeof(DockingManager)' ContextMenuElement.DockableFloatingWindow)) as ContextMenu; " is 144.
Long Statement,AvalonDock,DockablePane,D:\newReposJune17\tltjr_Wish\AvalonDock\DockablePane.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DockablePaneCommands.ToggleAutoHide' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 133.
Long Statement,AvalonDock,DockablePane,D:\newReposJune17\tltjr_Wish\AvalonDock\DockablePane.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DockablePaneCommands.Close' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 124.
Long Statement,AvalonDock,DockablePane,D:\newReposJune17\tltjr_Wish\AvalonDock\DockablePane.cs,UpdateCanAutohideProperty,The length of the statement  "		bool flag = c.State == DockableContentState.Docked || c.State == DockableContentState.Document || c.State == DockableContentState.AutoHide; " is 139.
Long Statement,AvalonDock,DockablePane,D:\newReposJune17\tltjr_Wish\AvalonDock\DockablePane.cs,OpenOptionsMenu,The length of the statement  "		cxOptions = TryFindResource (new ComponentResourceKey (typeof(DockingManager)' ContextMenuElement.DockablePane)) as ContextMenu; " is 128.
Long Statement,AvalonDock,DockablePane,D:\newReposJune17\tltjr_Wish\AvalonDock\DockablePane.cs,OnHeaderMouseMove,The length of the statement  "				if (Math.Abs (ptMouseMove.X - ptStartDrag.X) > SystemParameters.MinimumHorizontalDragDistance || Math.Abs (ptMouseMove.Y - ptStartDrag.Y) > SystemParameters.MinimumVerticalDragDistance) { " is 187.
Long Statement,AvalonDock,DockablePane,D:\newReposJune17\tltjr_Wish\AvalonDock\DockablePane.cs,RemoveContent,The length of the statement  "	if (((dockableContent == null) || (dockableContent != null && dockableContent.SavedStateAndPosition == null) || (dockableContent != null && dockableContent.SavedStateAndPosition.ContainerPane != this)) && Items.Count == 0) { " is 224.
Long Statement,AvalonDock,DockablePane,D:\newReposJune17\tltjr_Wish\AvalonDock\DockablePane.cs,ToggleAutoHide,The length of the statement  "	bool flag = Items.OfType<DockableContent> ().FirstOrDefault (c => (c.DockableStyle & DockableStyle.AutoHide) == 0) == null; " is 123.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,CoerceActiveDocumentValue,The length of the statement  "	if (contentToCoerce != null && (contentToCoerce.ContainerPane == null || contentToCoerce.ContainerPane.GetManager () != d)) { " is 125.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,DocumentsSourceCollectionChanged,The length of the statement  "		docs.Where (d => d.Parent != null && !((DocumentPane)d.Parent).IsMainDocumentPane.GetValueOrDefault ()).ForEach (d => d.InternalClose ()); " is 138.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,DocumentsSourceCollectionChanged,The length of the statement  "	if (e.OldItems != null && (e.Action == NotifyCollectionChangedAction.Remove || e.Action == NotifyCollectionChangedAction.Replace)) { " is 132.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,DocumentsSourceCollectionChanged,The length of the statement  "	if (e.NewItems != null && (e.Action == NotifyCollectionChangedAction.Add || e.Action == NotifyCollectionChangedAction.Replace)) { " is 129.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RefreshContents,The length of the statement  "	var contentsFoundUnderMe = new LogicalTreeAdapter (this).Descendants<DependencyObject> ().Where (d => d.Item is ManagedContent).Select (d => d.Item).Cast<ManagedContent> (); " is 173.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RefreshContents,The length of the statement  "		ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants<DependencyObject> ().FirstOrDefault (d => d.Item is DocumentPane); " is 150.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,ClearEmptyPanes,The length of the statement  "		var emptyDockablePanes = new LogicalTreeAdapter (this).Descendants<DependencyObject> ().Where (i => (i.Item is DockablePane) && (i.Item as DockablePane).Items.Count == 0).Select (i => i.Item).Cast<DockablePane> ().ToArray (); " is 225.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,ClearEmptyPanes,The length of the statement  "				if (dc.SavedStateAndPosition != null && (dc.SavedStateAndPosition.ContainerPane == dp || dc.SavedStateAndPosition.ContainerPaneID == dp.ID)) " is 140.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,OnKeyUp,The length of the statement  "					var docSelected = (navigatorWindow.Documents.CurrentItem as NavigatorWindowDocumentItem).ItemContent as DocumentContent; " is 120.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "	Orientation requestedOrientation = (anchor == AnchorStyle.Bottom || anchor == AnchorStyle.Top) ? Orientation.Vertical : Orientation.Horizontal; " is 143.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "			toplevelPanel.InsertChildRelativeTo (paneToAnchor' toplevelPanel.Children [toplevelPanel.Children.Count - 1] as FrameworkElement' true); " is 136.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "	Orientation requestedOrientation = (anchor == AnchorStyle.Bottom || anchor == AnchorStyle.Top) ? Orientation.Vertical : Orientation.Horizontal; " is 143.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "	//Debug.Assert(relativePaneContainer is DocumentPaneResizingPanel' "By now we can't have a pane without a resizing panel containing it"); " is 137.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "			newPanel.InsertChildRelativeTo (paneToAnchor' relativeDocumentPaneContainer' anchor == AnchorStyle.Right || anchor == AnchorStyle.Bottom); " is 138.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "		double w = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Width / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Width); " is 133.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "		double h = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Height / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Height); " is 135.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "	Orientation requestedOrientation = (anchor == AnchorStyle.Bottom || anchor == AnchorStyle.Top) ? Orientation.Vertical : Orientation.Horizontal; " is 143.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "			newPanel.InsertChildRelativeTo (paneToAnchor' relativePane' anchor == AnchorStyle.Right || anchor == AnchorStyle.Bottom); " is 121.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "			//    paneToAnchor.SetValue(ResizingPanel.ResizeWidthProperty' new GridLength(approxStarForNewPane' GridUnitType.Star)); " is 120.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "	Orientation requestedOrientation = (anchor == AnchorStyle.Bottom || anchor == AnchorStyle.Top) ? Orientation.Vertical : Orientation.Horizontal; " is 143.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "			newPanel.InsertChildRelativeTo (paneToAnchor' relativePane' anchor == AnchorStyle.Right || anchor == AnchorStyle.Bottom); " is 121.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "		double w = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Width / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Width); " is 133.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The length of the statement  "		double h = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Height / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Height); " is 135.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,ToggleAutoHide,The length of the statement  "		DockableContent selectedContent = _flyoutWindow != null && _flyoutWindow.ReferencedPane != null && _flyoutWindow.ReferencedPane.Items.Count > 0 ? _flyoutWindow.ReferencedPane.Items [0] as DockableContent : pane.Items [0] as DockableContent; " is 240.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "	Debug.WriteLine (string.Format ("Show Content={0}' desideredState={1}' desideredAnchor={2}"' content.Name' desideredState' desideredAnchor)); " is 141.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "	} else if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) { " is 154.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "				//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right); " is 129.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked); " is 227.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0); " is 205.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "			//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane)); " is 140.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "			//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane)); " is 143.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "			} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) { " is 125.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "	} else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) { " is 170.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "			if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) { " is 266.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "				if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None) " is 141.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "					ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked); " is 227.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "						itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0); " is 205.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "					if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide)) " is 158.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "						if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width)) " is 157.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "						if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height)) " is 159.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "		} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) { " is 124.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "			if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) { " is 170.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The length of the statement  "							hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State); " is 331.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,UpdateFlyoutWindowPosition,The length of the statement  "	double leftTabsWidth = FlowDirection == FlowDirection.LeftToRight ? _leftAnchorTabPanel.TransformedActualSize ().Width : _rightAnchorTabPanel.TransformedActualSize ().Width; " is 173.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,UpdateFlyoutWindowPosition,The length of the statement  "	double rightTabsWidth = FlowDirection == FlowDirection.LeftToRight ? _rightAnchorTabPanel.TransformedActualSize ().Width : _leftAnchorTabPanel.TransformedActualSize ().Width; " is 174.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,UpdateFlyoutWindowPosition,The length of the statement  "	bool hOrientation = _flyoutWindow.ReferencedPane.Anchor == AnchorStyle.Right || _flyoutWindow.ReferencedPane.Anchor == AnchorStyle.Left; " is 136.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,UpdateFlyoutWindowPosition,The length of the statement  "			_flyoutWindow.Left = (FlowDirection == FlowDirection.LeftToRight ? locDockingManager.X + actualSize.Width - rightTabsWidth : locDockingManager.X + leftTabsWidth); " is 162.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,UpdateFlyoutWindowPosition,The length of the statement  "				_flyoutWindow.Left = (FlowDirection == FlowDirection.LeftToRight ? locDockingManager.X + actualSize.Width - rightTabsWidth - _flyoutWindow.Width : locDockingManager.X + leftTabsWidth); " is 184.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,UpdateFlyoutWindowPosition,The length of the statement  "			_flyoutWindow.Left = FlowDirection == FlowDirection.RightToLeft ? locDockingManager.X + actualSize.Width - rightTabsWidth : locDockingManager.X + leftTabsWidth; " is 160.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,UpdateFlyoutWindowPosition,The length of the statement  "				_flyoutWindow.Left = FlowDirection == FlowDirection.RightToLeft ? locDockingManager.X + actualSize.Width - rightTabsWidth - _flyoutWindow.Width : locDockingManager.X + leftTabsWidth; " is 182.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,UpdateFlyoutWindowPosition,The length of the statement  "	Debug.WriteLine (string.Format ("UpdateFlyoutWindowPosition() Rect->{0} InitialSetup={1}"' new Rect (_flyoutWindow.Left' _flyoutWindow.Top' _flyoutWindow.Width' _flyoutWindow.Height)' initialSetup)); " is 199.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,SaveLayout,The length of the statement  "	if (DockableContents.FirstOrDefault (d => d.SavedStateAndPosition != null && d.SavedStateAndPosition.ContainerPane == pane) != null) " is 132.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,SaveLayout,The length of the statement  "		xmlWriter.WriteAttributeString ("EffectiveSize"' new SizeConverter ().ConvertToInvariantString (ResizingPanel.GetEffectiveSize (pane))); " is 136.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,SaveLayout,The length of the statement  "	Debug.Assert (!string.IsNullOrEmpty (content.Name)' "DockableContent must have a Name to save its content.\n" + "Click Ignore to skip this element and continue with save."); " is 173.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,SaveLayout,The length of the statement  "	xmlWriter.WriteAttributeString ("EffectiveSize"' new SizeConverter ().ConvertToInvariantString (ResizingPanel.GetEffectiveSize (pane))); " is 136.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,SaveLayout,The length of the statement  "	//    xmlWriter.WriteAttributeString("ResizeWidth"' XmlConvert.ToString(ResizingPanel.GetResizeWidth(panelToSerialize))); " is 121.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,SaveLayout,The length of the statement  "	//    xmlWriter.WriteAttributeString("ResizeHeight"' XmlConvert.ToString(ResizingPanel.GetResizeHeight(panelToSerialize))); " is 123.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,SaveLayout,The length of the statement  "	xmlWriter.WriteAttributeString ("EffectiveSize"' new SizeConverter ().ConvertToInvariantString (ResizingPanel.GetEffectiveSize (panelToSerialize))); " is 148.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreDocumentPaneLayout,The length of the statement  "		ResizingPanel.SetResizeWidth (documentPane' (GridLength)GLConverter.ConvertFromInvariantString (mainElement.GetAttribute ("ResizeWidth"))); " is 139.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreDocumentPaneLayout,The length of the statement  "		ResizingPanel.SetResizeHeight (documentPane' (GridLength)GLConverter.ConvertFromInvariantString (mainElement.GetAttribute ("ResizeHeight"))); " is 141.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreDocumentPaneLayout,The length of the statement  "		ResizingPanel.SetEffectiveSize (documentPane' (Size)(new SizeConverter ()).ConvertFromInvariantString (mainElement.GetAttribute ("EffectiveSize"))); " is 148.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreDockablePaneLayout,The length of the statement  "		ResizingPanel.SetResizeWidth (pane' (GridLength)GLConverter.ConvertFromInvariantString (mainElement.GetAttribute ("ResizeWidth"))); " is 131.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreDockablePaneLayout,The length of the statement  "		ResizingPanel.SetResizeHeight (pane' (GridLength)GLConverter.ConvertFromInvariantString (mainElement.GetAttribute ("ResizeHeight"))); " is 133.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreDockablePaneLayout,The length of the statement  "		ResizingPanel.SetEffectiveSize (pane' (Size)(new SizeConverter ()).ConvertFromInvariantString (mainElement.GetAttribute ("EffectiveSize"))); " is 140.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreResizingPanel,The length of the statement  "		ResizingPanel.SetResizeWidth (panel' (GridLength)GLConverter.ConvertFromInvariantString (mainElement.GetAttribute ("ResizeWidth"))); " is 132.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreResizingPanel,The length of the statement  "		ResizingPanel.SetResizeHeight (panel' (GridLength)GLConverter.ConvertFromInvariantString (mainElement.GetAttribute ("ResizeHeight"))); " is 134.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreResizingPanel,The length of the statement  "		ResizingPanel.SetEffectiveSize (panel' (Size)(new SizeConverter ()).ConvertFromInvariantString (mainElement.GetAttribute ("EffectiveSize"))); " is 141.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreResizingPanel,The length of the statement  "			//restore dockable panes even if no contents are inside (an hidden content could refer this pane in SaveStateAndPosition) " is 121.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "		throw new InvalidOperationException ("Unable to deserialize a docking layout while DockingManager control is unloaded"); " is 120.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "	if (doc.DocumentElement.ChildNodes.Count != 3 || //(doc.DocumentElement.ChildNodes[0].Name != "ResizingPanel" && doc.DocumentElement.ChildNodes[0].Name != "DocumentPane") || " is 173.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "	(doc.DocumentElement.ChildNodes [0].Name != "ResizingPanel" && doc.DocumentElement.ChildNodes [0].Name != "DocumentPane" && doc.DocumentElement.ChildNodes [0].Name != "DocumentPaneResizingPanel") || doc.DocumentElement.ChildNodes [1].Name != "Hidden" || doc.DocumentElement.ChildNodes [2].Name != "Windows") { " is 309.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "	var panesAutoHidden = DockableContents.Where (c => c.State == DockableContentState.AutoHide).Select (c => c.ContainerPane).Distinct (); " is 135.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "		var hiddenContent = actualContents.FirstOrDefault (c => c.Name == hiddenContentName && c.State != DockableContentState.Hidden); " is 127.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "		Point location = new Point (XmlConvert.ToDouble (flWindowElement.GetAttribute ("Left"))' XmlConvert.ToDouble (flWindowElement.GetAttribute ("Top"))); " is 149.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "		Size size = new Size (XmlConvert.ToDouble (flWindowElement.GetAttribute ("Width"))' XmlConvert.ToDouble (flWindowElement.GetAttribute ("Height"))); " is 147.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "			ResizingPanel.SetResizeWidth (paneForFloatingWindow' (GridLength)GLConverter.ConvertFromInvariantString (paneElement.GetAttribute ("ResizeWidth"))); " is 148.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "			ResizingPanel.SetResizeHeight (paneForFloatingWindow' (GridLength)GLConverter.ConvertFromInvariantString (paneElement.GetAttribute ("ResizeHeight"))); " is 150.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "	var documentsNotTransferred = actualDocuments.Where (d => d.ContainerPane == null || d.ContainerPane.GetManager () != this).ToArray (); " is 135.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "	var contentsNotTransferred = actualContents.Where (c => c.ContainerPane == null || c.ContainerPane.GetManager () != this).ToArray (); " is 133.
Long Statement,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The length of the statement  "	if (ActiveDocument != null && (ActiveDocument.ContainerPane == null || ActiveDocument.ContainerPane.GetManager () != this)) { " is 125.
Long Statement,AvalonDock,DocumentContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DocumentContentCommands.FloatingDocument' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 138.
Long Statement,AvalonDock,DocumentContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DocumentContentCommands.TabbedDocument' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 136.
Long Statement,AvalonDock,DocumentContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentContent.cs,Show,The length of the statement  "		throw new InvalidOperationException ("Please remove the content from previous DockingManager (using the Close method)"); " is 120.
Long Statement,AvalonDock,DocumentFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentFloatingWindow.cs,FilterMessage,The length of the statement  "			WindowState = WindowState == System.Windows.WindowState.Maximized ? System.Windows.WindowState.Normal : System.Windows.WindowState.Maximized; " is 141.
Long Statement,AvalonDock,DocumentFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentFloatingWindow.cs,OpenContextMenu,The length of the statement  "	ContextMenu cxMenu = FindResource (new ComponentResourceKey (typeof(DockingManager)' ContextMenuElement.DocumentFloatingWindow)) as ContextMenu; " is 144.
Long Statement,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,RefreshContainsActiveDocumentProperty,The length of the statement  "		Debug.WriteLine (string.Format ("{0} ContainsActiveDocument ={1}"' (Items [0] as ManagedContent).Title' ContainsActiveDocument)); " is 129.
Long Statement,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DocumentPaneCommands.CloseAllButThis' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 134.
Long Statement,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DocumentPaneCommands.NewHorizontalTabGroup' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 140.
Long Statement,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (DocumentPaneCommands.NewVerticalTabGroup' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 138.
Long Statement,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,OnCanExecuteCommand,The length of the statement  "		if (e.Command == DocumentPaneCommands.NewHorizontalTabGroup || e.Command == DocumentPaneCommands.NewVerticalTabGroup || e.Command == DocumentPaneCommands.CloseAllButThis) { " is 172.
Long Statement,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,ShowDocumentsListMenu,The length of the statement  "		//cxMenuDocuments.CommandBindings.Add(new CommandBinding(ActivateDocumentCommand' new ExecutedRoutedEventHandler(this.ExecutedActivateDocumentCommand)' new CanExecuteRoutedEventHandler(CanExecuteActivateDocumentCommand))); " is 222.
Long Statement,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,OnItemsChanged,The length of the statement  "	//    Debug.WriteLine(string.Format("Activated Document '{0}'"' documentToActivate != null ? documentToActivate.Title : "<none>")); " is 131.
Long Statement,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,OnItemsChanged,The length of the statement  "	//foreach (var pi in GetType().GetFields(System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static)) " is 173.
Long Statement,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,OnItemsChanged,The length of the statement  "	//        Debug.WriteLine(string.Format("{0} - {1}"' dkpi.DependencyProperty.Name' dkpi.DependencyProperty.GlobalIndex)); " is 121.
Long Statement,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,OpenOptionsMenu,The length of the statement  "		cxOptions = TryFindResource (new ComponentResourceKey (typeof(DockingManager)' ContextMenuElement.DocumentPane)) as ContextMenu; " is 128.
Long Statement,AvalonDock,FloatingDockablePane,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingDockablePane.cs,OnInitialized,The length of the statement  "			_contentToTransfer.FloatingWindowSize = new Size (_contentToTransfer.ContainerPane.ActualWidth' _contentToTransfer.ContainerPane.ActualHeight); " is 143.
Long Statement,AvalonDock,FloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingWindow.cs,OnApplyTemplate,The length of the statement  "				if (Math.Abs (ptMouseMove.X - ptStartDrag.X) > SystemParameters.MinimumHorizontalDragDistance || Math.Abs (ptMouseMove.Y - ptStartDrag.Y) > SystemParameters.MinimumVerticalDragDistance) { " is 187.
Long Statement,AvalonDock,FloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingWindow.cs,CheckContents,The length of the statement  "		if (cnt.Manager == null || cnt.Manager != Manager || (!cnt.Manager.DockableContents.Contains (cnt as DockableContent) && !cnt.Manager.Documents.Contains (cnt as DocumentContent))) " is 179.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,SaveFlyoutSizeToContent,The length of the statement  "			flyoutContent.FlyoutWindowSize = new Size (ReferencedPane.ActualWidth' flyoutContent.FlyoutWindowSize.Height <= 0 ? ReferencedPane.ActualHeight : flyoutContent.FlyoutWindowSize.Height); " is 185.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,SaveFlyoutSizeToContent,The length of the statement  "			flyoutContent.FlyoutWindowSize = new Size (flyoutContent.FlyoutWindowSize.Width <= 0 ? ReferencedPane.ActualWidth : flyoutContent.FlyoutWindowSize.Width' ReferencedPane.ActualHeight); " is 183.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,SaveFlyoutSizeToContent,The length of the statement  "		Debug.WriteLine (string.Format ("Save flyout size for content '{0}' -> {1}"' flyoutContent.Name' flyoutContent.FlyoutWindowSize)); " is 130.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,InitClosingTimer,The length of the statement  "		_closingTimer = new DispatcherTimer (new TimeSpan (0' 0' 1)' DispatcherPriority.Background' new EventHandler (ForceCloseWindow)' Dispatcher.CurrentDispatcher); " is 159.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,ForceCloseWindow,The length of the statement  "	if (ReferencedPane.IsOptionsMenuOpen || IsMouseOverPane || (_winFormsHost != null && _winFormsHost.IsFocused && _refPane.Items.Count > 0 && ((ManagedContent)_refPane.Items [0]).IsActiveContent) || IsActive || _refPane.IsKeyboardFocusWithin || _refPane.ContainsActiveContent || (AnchorTabActivating != null && AnchorTabActivating.IsMouseOver) || IsResizing || (_resizerPopup != null && _resizerPopup.IsMouseOver)) { " is 414.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,CloseWidthAnimation,The length of the statement  "			//SetWindowRgn(new WindowInteropHelper(this).Handle' CreateRectRgn((int)(wnd_Left - this.Left)' 0' (int)(wnd_Width)' wnd_TrimHeight)' true); " is 140.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,CloseWidthAnimation,The length of the statement  "			//SetWindowRgn(new WindowInteropHelper(this).Handle' CreateRectRgn(0' (int)(wnd_Top - this.Top)' wnd_TrimWidth' (int)(wnd_Height))' true); " is 138.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,OpenWidthAnimation,The length of the statement  "		InteropHelper.SetWindowRgn (new WindowInteropHelper (this).Handle' InteropHelper.CreateRectRgn (0' 0' 0' (int)wnd_Height - wnd_TrimHeight)' true); " is 146.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,OpenWidthAnimation,The length of the statement  "		InteropHelper.SetWindowRgn (new WindowInteropHelper (this).Handle' InteropHelper.CreateRectRgn (0' 0' (int)wnd_Width - wnd_TrimWidth' 0)' true); " is 144.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,ApplyRegion,The length of the statement  "			Rect flRect = new Rect (PointFromScreen (new Point (fl.Left' fl.Top))' PointFromScreen (new Point (fl.Left + fl.RestoreBounds.Width' fl.Top + fl.RestoreBounds.Height))); " is 169.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,ApplyRegion,The length of the statement  "		IntPtr hDestRegn = InteropHelper.CreateRectRgn ((int)wndRect.Left' (int)wndRect.Top' (int)wndRect.Right' (int)wndRect.Bottom); " is 126.
Long Statement,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,ApplyRegion,The length of the statement  "			IntPtr otherWin32Rect = InteropHelper.CreateRectRgn ((int)otherRect.Left' (int)otherRect.Top' (int)otherRect.Right' (int)otherRect.Bottom); " is 139.
Long Statement,AvalonDock,ManagedContent,D:\newReposJune17\tltjr_Wish\AvalonDock\ManagedContent.cs,OnApplyTemplate,The length of the statement  "		_dragEnabledArea.InputBindings.Add (new InputBinding (ManagedContentCommands.Close' new MouseGesture (MouseAction.MiddleClick))); " is 129.
Long Statement,AvalonDock,ManagedContent,D:\newReposJune17\tltjr_Wish\AvalonDock\ManagedContent.cs,OnDragMouseLeave,The length of the statement  "			} else if (Math.Abs (ptMouseMove.X - StartDragPoint.X) > SystemParameters.MinimumHorizontalDragDistance || Math.Abs (ptMouseMove.Y - StartDragPoint.Y) > SystemParameters.MinimumVerticalDragDistance) { " is 200.
Long Statement,AvalonDock,ManagedContent,D:\newReposJune17\tltjr_Wish\AvalonDock\ManagedContent.cs,OnGotKeyboardFocus,The length of the statement  "	Debug.WriteLine (string.Format ("[{0}].OnGotKeyboardFocus() Source={1} NewFocus={2} OldFocus={3}"' this.Name' e.Source.GetType ().ToString ()' e.NewFocus.GetType ().ToString ()' e.OldFocus == null ? "<null>" : e.OldFocus.GetType ().ToString ())); " is 246.
Long Statement,AvalonDock,ManagedContent,D:\newReposJune17\tltjr_Wish\AvalonDock\ManagedContent.cs,OnLostKeyboardFocus,The length of the statement  "	Debug.WriteLine (string.Format ("[{0}].OnLostKeyboardFocus() Source={1} NewFocus={2} OldFocus={3}"' this.Name' e.Source.GetType ().ToString ()' e.NewFocus == null ? "<null>" : e.NewFocus.GetType ().ToString ()' e.OldFocus == null ? "<null>" : e.OldFocus.GetType ().ToString ())); " is 279.
Long Statement,AvalonDock,ManagedContent,D:\newReposJune17\tltjr_Wish\AvalonDock\ManagedContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (ManagedContentCommands.Hide' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 125.
Long Statement,AvalonDock,ManagedContent,D:\newReposJune17\tltjr_Wish\AvalonDock\ManagedContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (ManagedContentCommands.Close' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 126.
Long Statement,AvalonDock,ManagedContent,D:\newReposJune17\tltjr_Wish\AvalonDock\ManagedContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (ManagedContentCommands.Show' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 125.
Long Statement,AvalonDock,ManagedContent,D:\newReposJune17\tltjr_Wish\AvalonDock\ManagedContent.cs,OnInitialized,The length of the statement  "	this.CommandBindings.Add (new CommandBinding (ManagedContentCommands.Activate' this.OnExecuteCommand' this.OnCanExecuteCommand)); " is 129.
Long Statement,AvalonDock,ManagedContent,D:\newReposJune17\tltjr_Wish\AvalonDock\ManagedContent.cs,OnCanExecuteCommand,The length of the statement  "	//Debug.WriteLine("ManagedContent.OnCanExecuteCommand({0}) = {1} (ContinueRouting={2})"' (e.Command as RoutedUICommand).Name' e.CanExecute' e.ContinueRouting); " is 159.
Long Statement,AvalonDock,NavigatorWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\NavigatorWindow.cs,DockableContents_CurrentChanged,The length of the statement  "	Debug.WriteLine (string.Format ("DockContent current changed to {0}"' (DockableContents.CurrentItem as NavigatorWindowItem).ItemContent.Title)); " is 144.
Long Statement,AvalonDock,NavigatorWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\NavigatorWindow.cs,Documents_CurrentChanged,The length of the statement  "	Debug.WriteLine (string.Format ("Document current changed to {0}"' (Documents.CurrentItem as NavigatorWindowItem).ItemContent.Title)); " is 134.
Long Statement,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,OnDrop,The length of the statement  "	var desideredWidth = Math.Min (rectPane.Width / 2.0' ResizingPanel.GetEffectiveSize (_manager.DragPaneServices.FloatingWindow.HostedPane).Width); " is 145.
Long Statement,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,OnDrop,The length of the statement  "	var desideredHeight = Math.Min (rectPane.Height / 2.0' ResizingPanel.GetEffectiveSize (_manager.DragPaneServices.FloatingWindow.HostedPane).Height); " is 148.
Long Statement,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,ShowOverlayPaneDockingOptions,The length of the statement  "	DockableStyle currentPaneDockableStyle = isDraggingADocumentPane ? DockableStyle.Document : (draggingPane as DockablePane).GetCumulativeDockableStyle (); " is 153.
Long Statement,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,ShowOverlayPaneDockingOptions,The length of the statement  "	//gridPaneRelativeDockingOptions.SetValue(Canvas.LeftProperty' rectPane.Left + rectPane.Width / 2 - gridPaneRelativeDockingOptions.Width / 2); " is 142.
Long Statement,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,ShowOverlayPaneDockingOptions,The length of the statement  "	//gridPaneRelativeDockingOptions.SetValue(Canvas.TopProperty' rectPane.Top + rectPane.Height / 2 - gridPaneRelativeDockingOptions.Height / 2); " is 142.
Long Statement,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,OnActivated,The length of the statement  "	DockableStyle currentPaneDockableStyle = _manager.DragPaneServices.FloatingWindow.HostedPane is FloatingDocumentPane ? DockableStyle.Document : (_manager.DragPaneServices.FloatingWindow.HostedPane as DockablePane).GetCumulativeDockableStyle (); " is 244.
Long Statement,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,OnDragOver,The length of the statement  "	double selectionBoxWidth = Math.Min (rectPane.Width / 2.0' ResizingPanel.GetEffectiveSize (_manager.DragPaneServices.FloatingWindow.HostedPane).Width); " is 151.
Long Statement,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,OnDragOver,The length of the statement  "	double selectionBoxHeight = Math.Min (rectPane.Height / 2.0' ResizingPanel.GetEffectiveSize (_manager.DragPaneServices.FloatingWindow.HostedPane).Height); " is 154.
Long Statement,AvalonDock,Pane,D:\newReposJune17\tltjr_Wish\AvalonDock\Pane.cs,RefreshContainsActiveContentProperty,The length of the statement  "		Debug.WriteLine (string.Format ("{0} ContainsActiveContent ={1}"' (Items [0] as ManagedContent).Title' ContainsActiveContent)); " is 127.
Long Statement,AvalonDock,Pane,D:\newReposJune17\tltjr_Wish\AvalonDock\Pane.cs,OnCanExecuteCommand,The length of the statement  "	Debug.WriteLine (string.Format ("Pane.OnCanExecuteCommand({0}) = {1} (ContinueRouting={2})"' e.Command' e.CanExecute' e.ContinueRouting)); " is 138.
Complex Conditional,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,OnDragStart,The conditional expression  "DockableStyle != DockableStyle.None && (State == DockableContentState.Docked || State == DockableContentState.Document || State == DockableContentState.DockableWindow) && !Manager.DragPaneServices.IsDragging"  is complex.
Complex Conditional,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,CanExecuteCommand,The conditional expression  "State == DockableContentState.AutoHide || State == DockableContentState.Document || State == DockableContentState.FloatingWindow || State == DockableContentState.DockableWindow"  is complex.
Complex Conditional,AvalonDock,DockablePane,D:\newReposJune17\tltjr_Wish\AvalonDock\DockablePane.cs,RemoveContent,The conditional expression  "((dockableContent == null) || (dockableContent != null && dockableContent.SavedStateAndPosition == null) || (dockableContent != null && dockableContent.SavedStateAndPosition.ContainerPane != this)) && Items.Count == 0"  is complex.
Complex Conditional,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,ClearEmptyPanes,The conditional expression  "!DockableContents.Any (dc => {  	if (dc.SavedStateAndPosition != null && (dc.SavedStateAndPosition.ContainerPane == dp || dc.SavedStateAndPosition.ContainerPaneID == dp.ID))  		return true;  	if (dc.State == DockableContentState.AutoHide) {  		var flyoutDocPane = dc.ContainerPane as FlyoutDockablePane;  		if (flyoutDocPane != null && flyoutDocPane.ReferencedPane == dp)  			return true;  	}  	return false;  })"  is complex.
Complex Conditional,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The conditional expression  "content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked"  is complex.
Complex Conditional,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The conditional expression  "(foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide)"  is complex.
Complex Conditional,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The conditional expression  "doc.DocumentElement.ChildNodes.Count != 3 || //(doc.DocumentElement.ChildNodes[0].Name != "ResizingPanel" && doc.DocumentElement.ChildNodes[0].Name != "DocumentPane") ||  (doc.DocumentElement.ChildNodes [0].Name != "ResizingPanel" && doc.DocumentElement.ChildNodes [0].Name != "DocumentPane" && doc.DocumentElement.ChildNodes [0].Name != "DocumentPaneResizingPanel") || doc.DocumentElement.ChildNodes [1].Name != "Hidden" || doc.DocumentElement.ChildNodes [2].Name != "Windows""  is complex.
Complex Conditional,AvalonDock,FloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingWindow.cs,CheckContents,The conditional expression  "cnt.Manager == null || cnt.Manager != Manager || (!cnt.Manager.DockableContents.Contains (cnt as DockableContent) && !cnt.Manager.Documents.Contains (cnt as DocumentContent))"  is complex.
Complex Conditional,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,ForceCloseWindow,The conditional expression  "ReferencedPane.IsOptionsMenuOpen || IsMouseOverPane || (_winFormsHost != null && _winFormsHost.IsFocused && _refPane.Items.Count > 0 && ((ManagedContent)_refPane.Items [0]).IsActiveContent) || IsActive || _refPane.IsKeyboardFocusWithin || _refPane.ContainsActiveContent || (AnchorTabActivating != null && AnchorTabActivating.IsMouseOver) || IsResizing || (_resizerPopup != null && _resizerPopup.IsMouseOver)"  is complex.
Complex Conditional,AvalonDock,ManagedContent,D:\newReposJune17\tltjr_Wish\AvalonDock\ManagedContent.cs,OnDragMouseLeave,The conditional expression  "!e.Handled && isMouseDown && e.LeftButton == MouseButtonState.Pressed && Manager != null"  is complex.
Complex Conditional,AvalonDock,OverlayWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\OverlayWindow.cs,OnDragOver,The conditional expression  "owdDock == owdBottom || owdDock == owdLeft || owdDock == owdTop || owdDock == owdRight"  is complex.
Complex Conditional,AvalonDock,Pane,D:\newReposJune17\tltjr_Wish\AvalonDock\Pane.cs,OnSelectionChanged,The conditional expression  "e.RemovedItems != null && e.RemovedItems.Count > 0 && e.AddedItems != null && e.AddedItems.Count > 0"  is complex.
Complex Conditional,AvalonDock,Pane,D:\newReposJune17\tltjr_Wish\AvalonDock\Pane.cs,OnItemsChanged,The conditional expression  "(e.NewItems == null || e.NewItems.Count == 0) && (e.OldItems != null && e.OldItems.Count > 0)"  is complex.
Magic Number,AvalonDock,FloatingDocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingDocumentPane.cs,OnInitialized,The following statement contains a magic number: if (_documentToTransfer != null && _documentToTransfer.FloatingWindowSize.IsEmpty) {  	if (_previousPane != null)  		_documentToTransfer.FloatingWindowSize = new Size (_previousPane.ActualWidth' _previousPane.ActualHeight);  	else  		_documentToTransfer.FloatingWindowSize = new Size (400.0' 400.0);  }  
Magic Number,AvalonDock,FloatingDocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingDocumentPane.cs,OnInitialized,The following statement contains a magic number: if (_documentToTransfer != null && _documentToTransfer.FloatingWindowSize.IsEmpty) {  	if (_previousPane != null)  		_documentToTransfer.FloatingWindowSize = new Size (_previousPane.ActualWidth' _previousPane.ActualHeight);  	else  		_documentToTransfer.FloatingWindowSize = new Size (400.0' 400.0);  }  
Magic Number,AvalonDock,FloatingDocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingDocumentPane.cs,OnInitialized,The following statement contains a magic number: if (_previousPane != null)  	_documentToTransfer.FloatingWindowSize = new Size (_previousPane.ActualWidth' _previousPane.ActualHeight);  else  	_documentToTransfer.FloatingWindowSize = new Size (400.0' 400.0);  
Magic Number,AvalonDock,FloatingDocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingDocumentPane.cs,OnInitialized,The following statement contains a magic number: if (_previousPane != null)  	_documentToTransfer.FloatingWindowSize = new Size (_previousPane.ActualWidth' _previousPane.ActualHeight);  else  	_documentToTransfer.FloatingWindowSize = new Size (400.0' 400.0);  
Magic Number,AvalonDock,FloatingDocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingDocumentPane.cs,OnInitialized,The following statement contains a magic number: _documentToTransfer.FloatingWindowSize = new Size (400.0' 400.0);  
Magic Number,AvalonDock,FloatingDocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingDocumentPane.cs,OnInitialized,The following statement contains a magic number: _documentToTransfer.FloatingWindowSize = new Size (400.0' 400.0);  
Magic Number,AvalonDock,GreyableImage,D:\newReposJune17\tltjr_Wish\AvalonDock\GreyableImage.cs,SetSources,The following statement contains a magic number: _opacityMaskG.Opacity = 0.6;  
Magic Number,AvalonDock,GreyableImage,D:\newReposJune17\tltjr_Wish\AvalonDock\GreyableImage.cs,SetSources,The following statement contains a magic number: try {  	// get the string Uri for the original image source first  	String stringUri = TypeDescriptor.GetConverter (Source).ConvertTo (Source' typeof(string)) as string;  	Uri uri = null;  	// try to resolve it as an absolute Uri (if it is relative and used it as is  	// it is likely to point in a wrong direction)  	if (!Uri.TryCreate (stringUri' UriKind.Absolute' out uri)) {  		// it seems that the Uri is relative' at this stage we can only assume that  		// the image requested is in the same assembly as this oblect'  		// so we modify the string Uri to make it absolute ...  		stringUri = "pack://application:'''/" + stringUri.TrimStart (new char[2] {  			System.IO.Path.DirectorySeparatorChar'  			System.IO.Path.AltDirectorySeparatorChar  		});  		// ... and try to resolve again  		uri = new Uri (stringUri);  	}  	// create and cache greyscale ImageSource  	_sourceG = new FormatConvertedBitmap (new BitmapImage (uri)' PixelFormats.Gray8' null' 0);  } catch (Exception e) {  	System.Diagnostics.Debug.Fail ("The Image used cannot be greyed out."' "Use BitmapImage or URI as a Source in order to allow greyscaling. Make sure the absolute Uri is used as relative Uri may sometimes resolve incorrectly.\n\nException: " + e.Message);  }  
Magic Number,AvalonDock,GreyableImage,D:\newReposJune17\tltjr_Wish\AvalonDock\GreyableImage.cs,SetSources,The following statement contains a magic number: if (!Uri.TryCreate (stringUri' UriKind.Absolute' out uri)) {  	// it seems that the Uri is relative' at this stage we can only assume that  	// the image requested is in the same assembly as this oblect'  	// so we modify the string Uri to make it absolute ...  	stringUri = "pack://application:'''/" + stringUri.TrimStart (new char[2] {  		System.IO.Path.DirectorySeparatorChar'  		System.IO.Path.AltDirectorySeparatorChar  	});  	// ... and try to resolve again  	uri = new Uri (stringUri);  }  
Magic Number,AvalonDock,GreyableImage,D:\newReposJune17\tltjr_Wish\AvalonDock\GreyableImage.cs,SetSources,The following statement contains a magic number: stringUri = "pack://application:'''/" + stringUri.TrimStart (new char[2] {  	System.IO.Path.DirectorySeparatorChar'  	System.IO.Path.AltDirectorySeparatorChar  });  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,SetupSplitters,The following statement contains a magic number: while (i < Children.Count - 1) {  	if (j == _splitterList.Count) {  		Resizer splitter = new Resizer ();  		splitter.Cursor = this.Orientation == Orientation.Horizontal ? Cursors.SizeWE : Cursors.SizeNS;  		_splitterList.Add (splitter);  		splitter.DragStarted += new DragStartedEventHandler (splitter_DragStarted);  		splitter.DragDelta += new DragDeltaEventHandler (splitter_DragDelta);  		splitter.DragCompleted += new DragCompletedEventHandler (splitter_DragCompleted);  		Children.Insert (i + 1' splitter);  	}  	i += 2;  	j++;  }  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,SetupSplitters,The following statement contains a magic number: i += 2;  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,SetupSplitters,The following statement contains a magic number: for (j = 0; j < _splitterList.Count; j++) {  	_splitterList [j].Width = (Orientation == Orientation.Horizontal) ? 6 : double.NaN;  	_splitterList [j].Height = (Orientation == Orientation.Vertical) ? 6 : double.NaN;  }  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,SetupSplitters,The following statement contains a magic number: for (j = 0; j < _splitterList.Count; j++) {  	_splitterList [j].Width = (Orientation == Orientation.Horizontal) ? 6 : double.NaN;  	_splitterList [j].Height = (Orientation == Orientation.Vertical) ? 6 : double.NaN;  }  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,SetupSplitters,The following statement contains a magic number: _splitterList [j].Width = (Orientation == Orientation.Horizontal) ? 6 : double.NaN;  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,SetupSplitters,The following statement contains a magic number: _splitterList [j].Height = (Orientation == Orientation.Vertical) ? 6 : double.NaN;  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,SetupSplitters,The following statement contains a magic number: Debug.Assert (_splitterList.Count == Children.Count / 2);  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The following statement contains a magic number: while (!HelperFunc.AreClose (delta' 0.0)) {  	int prevChildrenCountWithNoMinLen = prevChildren.Count<FrameworkElement> (c => delta > 0 ? true : (Orientation == Orientation.Horizontal ? currentSizes [visibleChildren.IndexOf (c)].Width > c.MinWidth : currentSizes [visibleChildren.IndexOf (c)].Height > c.MinHeight));  	int nextChildrenCountWithNoMinLen = nextChildren.Count<FrameworkElement> (c => delta < 0 ? true : (Orientation == Orientation.Horizontal ? currentSizes [visibleChildren.IndexOf (c)].Width > c.MinWidth : currentSizes [visibleChildren.IndexOf (c)].Height > c.MinHeight));  	delta = remDelta / 2.0;  	for (i = 0; i < currentSizes.Length; i++) {  		FrameworkElement child = visibleChildren [i] as FrameworkElement;  		if (child is Resizer)  			continue;  		if (Orientation == Orientation.Horizontal) {  			if (prevChildren.Contains (child) && prevChildrenCountWithNoMinLen > 0) {  				double s = delta / prevChildrenCountWithNoMinLen;  				if (currentSizes [i].Width + s < child.MinWidth)  					s = child.MinWidth - currentSizes [i].Width;  				currentSizes [i].Width += s;  				remDelta -= s;  			}  			if (nextChildren.Contains (child) && nextChildrenCountWithNoMinLen > 0) {  				double s = delta / nextChildrenCountWithNoMinLen;  				if (currentSizes [i].Width - s < child.MinWidth)  					s = currentSizes [i].Width - child.MinWidth;  				currentSizes [i].Width -= s;  				remDelta -= s;  			}  		} else {  			if (prevChildren.Contains (child) && prevChildrenCountWithNoMinLen > 0) {  				double s = delta / prevChildrenCountWithNoMinLen;  				if (currentSizes [i].Height + s < child.MinHeight)  					s = child.MinHeight - currentSizes [i].Height;  				currentSizes [i].Height += s;  				remDelta -= s;  			}  			if (nextChildren.Contains (child) && nextChildrenCountWithNoMinLen > 0) {  				double s = delta / nextChildrenCountWithNoMinLen;  				if (currentSizes [i].Height - s < child.MinHeight)  					s = currentSizes [i].Height - child.MinHeight;  				currentSizes [i].Height -= s;  				remDelta -= s;  			}  		}  	}  }  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,splitter_DragCompleted,The following statement contains a magic number: delta = remDelta / 2.0;  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,ShowResizerOverlayWindow,The following statement contains a magic number: _resizerGhost = new Border () {  	Background = Brushes.Black'  	Opacity = 0.7  };  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,ShowResizerOverlayWindow,The following statement contains a magic number: if (Orientation == System.Windows.Controls.Orientation.Horizontal) {  	_resizerGhost.Width = 5.0;  	_resizerGhost.Height = actualSize.Height;  } else {  	_resizerGhost.Height = 5.0;  	_resizerGhost.Width = actualSize.Width;  }  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,ShowResizerOverlayWindow,The following statement contains a magic number: if (Orientation == System.Windows.Controls.Orientation.Horizontal) {  	_resizerGhost.Width = 5.0;  	_resizerGhost.Height = actualSize.Height;  } else {  	_resizerGhost.Height = 5.0;  	_resizerGhost.Width = actualSize.Width;  }  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,ShowResizerOverlayWindow,The following statement contains a magic number: _resizerGhost.Width = 5.0;  
Magic Number,AvalonDock,ResizingPanel,D:\newReposJune17\tltjr_Wish\AvalonDock\ResizingPanel.cs,ShowResizerOverlayWindow,The following statement contains a magic number: _resizerGhost.Height = 5.0;  
Magic Number,AvalonDock,Resizer,D:\newReposJune17\tltjr_Wish\AvalonDock\Resizer.cs,Resizer,The following statement contains a magic number: MinWidthProperty.OverrideMetadata (typeof(Resizer)' new FrameworkPropertyMetadata (6.0' FrameworkPropertyMetadataOptions.AffectsParentMeasure));  
Magic Number,AvalonDock,Resizer,D:\newReposJune17\tltjr_Wish\AvalonDock\Resizer.cs,Resizer,The following statement contains a magic number: MinHeightProperty.OverrideMetadata (typeof(Resizer)' new FrameworkPropertyMetadata (6.0' FrameworkPropertyMetadataOptions.AffectsParentMeasure));  
Magic Number,AvalonDock,AlignedImage,D:\newReposJune17\tltjr_Wish\AvalonDock\AlignedImage.cs,AreClose,The following statement contains a magic number: return ((delta < 1.53E-06) && (delta > -1.53E-06));  
Magic Number,AvalonDock,AlignedImage,D:\newReposJune17\tltjr_Wish\AvalonDock\AlignedImage.cs,AreClose,The following statement contains a magic number: return ((delta < 1.53E-06) && (delta > -1.53E-06));  
Magic Number,AvalonDock,ThemeFactory,D:\newReposJune17\tltjr_Wish\AvalonDock\ThemeFactory.cs,GetSmoothColor,The following statement contains a magic number: return (byte)(c + a * (255 - ((255 - a) * (255 - b) / 255) - c) / 255);  
Magic Number,AvalonDock,ThemeFactory,D:\newReposJune17\tltjr_Wish\AvalonDock\ThemeFactory.cs,GetSmoothColor,The following statement contains a magic number: return (byte)(c + a * (255 - ((255 - a) * (255 - b) / 255) - c) / 255);  
Magic Number,AvalonDock,ThemeFactory,D:\newReposJune17\tltjr_Wish\AvalonDock\ThemeFactory.cs,GetSmoothColor,The following statement contains a magic number: return (byte)(c + a * (255 - ((255 - a) * (255 - b) / 255) - c) / 255);  
Magic Number,AvalonDock,ThemeFactory,D:\newReposJune17\tltjr_Wish\AvalonDock\ThemeFactory.cs,GetSmoothColor,The following statement contains a magic number: return (byte)(c + a * (255 - ((255 - a) * (255 - b) / 255) - c) / 255);  
Magic Number,AvalonDock,ThemeFactory,D:\newReposJune17\tltjr_Wish\AvalonDock\ThemeFactory.cs,GetSmoothColor,The following statement contains a magic number: return (byte)(c + a * (255 - ((255 - a) * (255 - b) / 255) - c) / 255);  
Magic Number,AvalonDock,DockableContentStateAndPosition,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,DockableContentStateAndPosition,The following statement contains a magic number: Width = Math.Max (width' 100.0);  
Magic Number,AvalonDock,DockableContentStateAndPosition,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,DockableContentStateAndPosition,The following statement contains a magic number: Height = Math.Max (height' 100.0);  
Magic Number,AvalonDock,DockableContentStateAndPosition,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,DockableContentStateAndPosition,The following statement contains a magic number: Width = Math.Max (width' 100.0);  
Magic Number,AvalonDock,DockableContentStateAndPosition,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,DockableContentStateAndPosition,The following statement contains a magic number: Height = Math.Max (height' 100.0);  
Magic Number,AvalonDock,DockableContentStateAndPosition,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,DockableContentStateAndPosition,The following statement contains a magic number: Width = Math.Max (ContainerPane.ActualWidth' 100.0);  
Magic Number,AvalonDock,DockableContentStateAndPosition,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,DockableContentStateAndPosition,The following statement contains a magic number: Height = Math.Max (ContainerPane.ActualHeight' 100.0);  
Magic Number,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,CoerceFlyoutWindowSizeValue,The following statement contains a magic number: newSize.Width = Math.Max (100.0' newSize.Width);  
Magic Number,AvalonDock,DockableContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableContent.cs,CoerceFlyoutWindowSizeValue,The following statement contains a magic number: newSize.Height = Math.Max (100.0' newSize.Height);  
Magic Number,AvalonDock,DockableFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableFloatingWindow.cs,FilterMessage,The following statement contains a magic number: switch (e.Msg) {  case WM_NCLBUTTONDOWN:  	//Left button down on title -> start dragging over docking manager  	if (IsDockableWindow && e.WParam.ToInt32 () == HTCAPTION) {  		short x = (short)((e.LParam.ToInt32 () & 0xFFFF));  		short y = (short)((e.LParam.ToInt32 () >> 16));  		Point clickPoint = this.TransformToDeviceDPI (new Point (x' y));  		Manager.Drag (this' clickPoint' new Point (clickPoint.X - Left' clickPoint.Y - Top));  		e.Handled = true;  	}  	break;  case WM_NCLBUTTONDBLCLK:  	//Left Button Double Click -> dock to docking manager  	if (IsDockableWindow && e.WParam.ToInt32 () == HTCAPTION) {  		if (IsDockableWindow) {  			Dock ();  			e.Handled = true;  		}  	}  	break;  }  
Magic Number,AvalonDock,DockableFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableFloatingWindow.cs,FilterMessage,The following statement contains a magic number: if (IsDockableWindow && e.WParam.ToInt32 () == HTCAPTION) {  	short x = (short)((e.LParam.ToInt32 () & 0xFFFF));  	short y = (short)((e.LParam.ToInt32 () >> 16));  	Point clickPoint = this.TransformToDeviceDPI (new Point (x' y));  	Manager.Drag (this' clickPoint' new Point (clickPoint.X - Left' clickPoint.Y - Top));  	e.Handled = true;  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The following statement contains a magic number: if (anchor == AnchorStyle.Left || anchor == AnchorStyle.Right) {  	double w = Math.Min (ActualWidth / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Width);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (w' GridUnitType.Pixel));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  } else {  	double h = Math.Min (ActualHeight / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Height);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (h' GridUnitType.Pixel));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The following statement contains a magic number: if (anchor == AnchorStyle.Left || anchor == AnchorStyle.Right) {  	double w = Math.Min (ActualWidth / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Width);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (w' GridUnitType.Pixel));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  } else {  	double h = Math.Min (ActualHeight / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Height);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (h' GridUnitType.Pixel));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The following statement contains a magic number: if (anchor == AnchorStyle.Left || anchor == AnchorStyle.Right) {  	double w = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Width / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Width);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (w' GridUnitType.Pixel));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  } else {  	double h = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Height / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Height);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (h' GridUnitType.Pixel));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The following statement contains a magic number: if (anchor == AnchorStyle.Left || anchor == AnchorStyle.Right) {  	double w = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Width / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Width);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (w' GridUnitType.Pixel));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  } else {  	double h = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Height / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Height);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (h' GridUnitType.Pixel));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The following statement contains a magic number: if (anchor == AnchorStyle.Left || anchor == AnchorStyle.Right) {  	double w = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Width / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Width);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (w' GridUnitType.Pixel));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  } else {  	double h = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Height / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Height);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (h' GridUnitType.Pixel));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Anchor,The following statement contains a magic number: if (anchor == AnchorStyle.Left || anchor == AnchorStyle.Right) {  	double w = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Width / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Width);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (w' GridUnitType.Pixel));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  } else {  	double h = Math.Min (ResizingPanel.GetEffectiveSize (relativePane).Height / 2.0' ResizingPanel.GetEffectiveSize (paneToAnchor).Height);  	ResizingPanel.SetResizeWidth (paneToAnchor' new GridLength (1.0' GridUnitType.Star));  	ResizingPanel.SetResizeHeight (paneToAnchor' new GridLength (h' GridUnitType.Pixel));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,ToggleAutoHide,The following statement contains a magic number: if (RemovePaneFromTabGroups (pane)) {  	#region Pane is present in tab anchor panels  	DockableContent selectedContent = _flyoutWindow != null && _flyoutWindow.ReferencedPane != null && _flyoutWindow.ReferencedPane.Items.Count > 0 ? _flyoutWindow.ReferencedPane.Items [0] as DockableContent : pane.Items [0] as DockableContent;  	HideFlyoutWindow ();  	ResizingPanel parentPanel = pane.Parent as ResizingPanel;  	if (parentPanel != null && parentPanel.Children.Count >= 3) {  		parentPanel.AdjustPanelSizes ();  	}  	//reset content state to docked  	foreach (DockableContent content in pane.Items) {  		content.SetStateToDock ();  	}  	pane.Focus ();  	pane.SelectedItem = selectedContent;  	ActiveContent = selectedContent;  	#endregion  } else {  	#region Pane is not auto hidden  	//Create e new group  	DockablePaneAnchorTabGroup group = new DockablePaneAnchorTabGroup ();  	//associate it to the pane  	group.ReferencedPane = pane;  	DockableContent selectedContent = pane.SelectedItem as DockableContent;  	//add contents to it  	foreach (DockableContent content in pane.Items) {  		DockablePaneAnchorTab tab = new DockablePaneAnchorTab ();  		tab.ReferencedContent = content;  		//tab.Anchor = pane.Anchor;  		//tab.Icon = content.Icon;  		group.Children.Add (tab);  		content.SetStateToAutoHide ();  	}  	//place group under correct anchor tabpanel  	switch (pane.Anchor) {  	case AnchorStyle.Left:  		if (_leftAnchorTabPanel != null)  			_leftAnchorTabPanel.Children.Add (group);  		break;  	case AnchorStyle.Top:  		if (_topAnchorTabPanel != null)  			_topAnchorTabPanel.Children.Add (group);  		break;  	case AnchorStyle.Right:  		if (_rightAnchorTabPanel != null)  			_rightAnchorTabPanel.Children.Add (group);  		break;  	case AnchorStyle.Bottom:  		if (_bottomAnchorTabPanel != null)  			_bottomAnchorTabPanel.Children.Add (group);  		break;  	}  	#endregion  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,ToggleAutoHide,The following statement contains a magic number: if (parentPanel != null && parentPanel.Children.Count >= 3) {  	parentPanel.AdjustPanelSizes ();  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.AutoHide) {  	//first redock the content  	(content.ContainerPane as DockablePane).ToggleAutoHide ();  	//then show it as desidered  	Show (content' desideredState' desideredAnchor);  } else if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.AutoHide) {  	//first redock the content  	(content.ContainerPane as DockablePane).ToggleAutoHide ();  	//then show it as desidered  	Show (content' desideredState' desideredAnchor);  } else if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.AutoHide) {  	//first redock the content  	(content.ContainerPane as DockablePane).ToggleAutoHide ();  	//then show it as desidered  	Show (content' desideredState' desideredAnchor);  } else if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.AutoHide) {  	//first redock the content  	(content.ContainerPane as DockablePane).ToggleAutoHide ();  	//then show it as desidered  	Show (content' desideredState' desideredAnchor);  } else if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.AutoHide) {  	//first redock the content  	(content.ContainerPane as DockablePane).ToggleAutoHide ();  	//then show it as desidered  	Show (content' desideredState' desideredAnchor);  } else if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.AutoHide) {  	//first redock the content  	(content.ContainerPane as DockablePane).ToggleAutoHide ();  	//then show it as desidered  	Show (content' desideredState' desideredAnchor);  } else if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.AutoHide) {  	//first redock the content  	(content.ContainerPane as DockablePane).ToggleAutoHide ();  	//then show it as desidered  	Show (content' desideredState' desideredAnchor);  } else if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.AutoHide) {  	//first redock the content  	(content.ContainerPane as DockablePane).ToggleAutoHide ();  	//then show it as desidered  	Show (content' desideredState' desideredAnchor);  } else if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Docked || content.State == DockableContentState.Document || content.State == DockableContentState.None) {  	if (content.ContainerPane == null || content.State == DockableContentState.None) {  		//Problem!? try to rescue  		if (content.State == DockableContentState.Docked || content.State == DockableContentState.None) {  			//find the the pane which the desidered anchor style  			//DockablePane foundPane = this.FindChildDockablePane(desideredAnchor != AnchorStyle.None ? desideredAnchor : AnchorStyle.Right);  			//first search for a pane with other contents (avoiding empty panes which are containers for hidden contents)  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//search for all panes (even empty)  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			DockablePane foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				var containerPanel = foundPane.Parent as ResizingPanel;  				if (containerPanel != null)  					containerPanel.InvalidateMeasure ();  			} else {  				//if no suitable pane was found create e new one on the fly  				if (content.ContainerPane != null) {  					content.ContainerPane.RemoveContent (content);  				}  				DockablePane pane = new DockablePane ();  				pane.Items.Add (content);  				Anchor (pane' desideredAnchor);  			}  		} else {  			//add to main document pane  			MainDocumentPane.Items.Add (content);  		}  	}  	if (content.ContainerPane.GetManager () == null) {  		//disconnect the parent pane from previous panel  		//((Panel)content.ContainerPane.Parent).Children.Remove(content.ContainerPane);  		if (content.ContainerPane.Parent != null) {  			((Panel)content.ContainerPane.Parent).Children.Remove (content.ContainerPane);  		}  		Anchor (content.ContainerPane as DockablePane' desideredAnchor);  	}  	if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  		//if (content.Content != null)  		//{  		//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  		//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  		//}  		//else  		////{  		//    floatingWindow.Width = 400;  		//    floatingWindow.Height = 400;  		//}  		floatingWindow.Show ();  	} else if (desideredState == DockableContentState.AutoHide) {  		var paneContainer = content.ContainerPane as DockablePane;  		Debug.Assert (paneContainer != null);  		if (paneContainer != null)  			paneContainer.ToggleAutoHide ();  		content.Activate ();  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content.DetachFromContainerPane ());  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	} else {  		content.ContainerPane.SelectedItem = content;  		content.Activate ();  		DockablePane dockParent = content.ContainerPane as DockablePane;  		if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  			ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  			ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  			ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  		}  	}  } else if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  	var floatingWindow = new DockableFloatingWindow (this);  	floatingWindow.Content = content;  	var mainWindow = Window.GetWindow (this);  	if (mainWindow.IsVisible)  		floatingWindow.Owner = mainWindow;  	//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  	//if (content.Content != null)  	//{  	//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  	//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  	//}  	//else  	////{  	//    floatingWindow.Width = 400;  	//    floatingWindow.Height = 400;  	//}  	floatingWindow.Show ();  } else if (desideredState == DockableContentState.AutoHide) {  	var paneContainer = content.ContainerPane as DockablePane;  	Debug.Assert (paneContainer != null);  	if (paneContainer != null)  		paneContainer.ToggleAutoHide ();  	content.Activate ();  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  	var floatingWindow = new DockableFloatingWindow (this);  	floatingWindow.Content = content;  	var mainWindow = Window.GetWindow (this);  	if (mainWindow.IsVisible)  		floatingWindow.Owner = mainWindow;  	//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  	//if (content.Content != null)  	//{  	//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  	//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  	//}  	//else  	////{  	//    floatingWindow.Width = 400;  	//    floatingWindow.Height = 400;  	//}  	floatingWindow.Show ();  } else if (desideredState == DockableContentState.AutoHide) {  	var paneContainer = content.ContainerPane as DockablePane;  	Debug.Assert (paneContainer != null);  	if (paneContainer != null)  		paneContainer.ToggleAutoHide ();  	content.Activate ();  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  	var floatingWindow = new DockableFloatingWindow (this);  	floatingWindow.Content = content;  	var mainWindow = Window.GetWindow (this);  	if (mainWindow.IsVisible)  		floatingWindow.Owner = mainWindow;  	//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  	//if (content.Content != null)  	//{  	//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  	//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  	//}  	//else  	////{  	//    floatingWindow.Width = 400;  	//    floatingWindow.Height = 400;  	//}  	floatingWindow.Show ();  } else if (desideredState == DockableContentState.AutoHide) {  	var paneContainer = content.ContainerPane as DockablePane;  	Debug.Assert (paneContainer != null);  	if (paneContainer != null)  		paneContainer.ToggleAutoHide ();  	content.Activate ();  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  	var floatingWindow = new DockableFloatingWindow (this);  	floatingWindow.Content = content;  	var mainWindow = Window.GetWindow (this);  	if (mainWindow.IsVisible)  		floatingWindow.Owner = mainWindow;  	//floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterOwner;  	//if (content.Content != null)  	//{  	//    floatingWindow.Width = Math.Min(((FrameworkElement)content.Content).ActualWidth' ResizingPanel.GetResizeWidth(content.ContainerPane));  	//    floatingWindow.Height = Math.Min(((FrameworkElement)content.Content).ActualHeight' ResizingPanel.GetResizeHeight(content.ContainerPane));  	//}  	//else  	////{  	//    floatingWindow.Width = 400;  	//    floatingWindow.Height = 400;  	//}  	floatingWindow.Show ();  } else if (desideredState == DockableContentState.AutoHide) {  	var paneContainer = content.ContainerPane as DockablePane;  	Debug.Assert (paneContainer != null);  	if (paneContainer != null)  		paneContainer.ToggleAutoHide ();  	content.Activate ();  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.AutoHide) {  	var paneContainer = content.ContainerPane as DockablePane;  	Debug.Assert (paneContainer != null);  	if (paneContainer != null)  		paneContainer.ToggleAutoHide ();  	content.Activate ();  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.AutoHide) {  	var paneContainer = content.ContainerPane as DockablePane;  	Debug.Assert (paneContainer != null);  	if (paneContainer != null)  		paneContainer.ToggleAutoHide ();  	content.Activate ();  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.AutoHide) {  	var paneContainer = content.ContainerPane as DockablePane;  	Debug.Assert (paneContainer != null);  	if (paneContainer != null)  		paneContainer.ToggleAutoHide ();  	content.Activate ();  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.AutoHide) {  	var paneContainer = content.ContainerPane as DockablePane;  	Debug.Assert (paneContainer != null);  	if (paneContainer != null)  		paneContainer.ToggleAutoHide ();  	content.Activate ();  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content.DetachFromContainerPane ());  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  } else {  	content.ContainerPane.SelectedItem = content;  	content.Activate ();  	DockablePane dockParent = content.ContainerPane as DockablePane;  	if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  		ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	} else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  		ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  		ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  	ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  	ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  } else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  	ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  	ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  	ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  	ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  } else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  	ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  	ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  	ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  	ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  } else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  	ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  	ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Left || dockParent.Anchor == AnchorStyle.Right)) {  	ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  	ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  } else if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  	ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  	ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: ResizingPanel.SetResizeWidth (dockParent' new GridLength (200));  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  	ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  	ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.ActualWidth == 0.0 && (dockParent.Anchor == AnchorStyle.Top || dockParent.Anchor == AnchorStyle.Bottom)) {  	ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  	ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: ResizingPanel.SetResizeHeight (dockParent' new GridLength (200));  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: ResizingPanel.SetEffectiveSize (dockParent' new Size (200' 0.0));  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Document) {  	if (content.ContainerPane != null)  		content.ContainerPane.SelectedItem = this;  	content.Activate ();  } else if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.State == DockableContentState.Hidden || content.State == DockableContentState.DockableWindow || content.State == DockableContentState.FloatingWindow) {  	if (content.State == DockableContentState.Hidden) {  		//Debug.Assert(HiddenContents.Contains(content));  		//HiddenContents.Remove(content);  	} else {  		FloatingWindow floatingWindow = null;  		floatingWindow = (content.ContainerPane as FloatingDockablePane).FloatingWindow;  		content.DetachFromContainerPane ();  		if (floatingWindow.HostedPane.Items.Count == 0)  			floatingWindow.Close ();  	}  	if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  			//ok previous container pane is here..  			Pane prevPane = content.SavedStateAndPosition.ContainerPane;  			if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  				prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  			} else {  				prevPane.Items.Add (content);  			}  			if (prevPane.Items.Count == 1) {  				if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  					ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  				}  			}  			DockablePane prevDockablePane = prevPane as DockablePane;  			if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  				prevDockablePane.ToggleAutoHide ();  			}  			content.SetStateToDock ();  			content.Activate ();  			(prevPane.Parent as UIElement).InvalidateMeasure ();  		} else {  			if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  				desideredAnchor = content.SavedStateAndPosition.Anchor;  			if (desideredAnchor == AnchorStyle.None)  				desideredAnchor = AnchorStyle.Right;  			DockablePane foundPane = null;  			if (desideredState == DockableContentState.Docked) {  				//first not empty panes  				ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  				if (itemFound == null)  					//look for all panes even empty  					itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  				foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  			}  			if (foundPane != null) {  				content.SetStateToDock ();  				foundPane.Items.Add (content);  				if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  					foundPane.ToggleAutoHide ();  			} else {  				DockablePane newHostpane = new DockablePane ();  				newHostpane.Items.Add (content);  				if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  					double w = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  						w = content.SavedStateAndPosition.Width;  					ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  				} else {  					double h = 200;  					if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  						h = content.SavedStateAndPosition.Height;  					ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  					ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  				}  				Anchor (newHostpane' desideredAnchor);  				if (desideredState == DockableContentState.AutoHide) {  					ToggleAutoHide (newHostpane);  				}  			}  		}  		ActiveContent = content;  	} else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  		DockablePane newHostpane = null;  		FloatingDockablePane prevHostpane = null;  		if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  			prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  			if (!prevHostpane.Items.Contains (content))  				prevHostpane.Items.Add (content);  		} else {  			newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  		}  		if (desideredState == DockableContentState.DockableWindow)  			content.SetStateToDockableWindow ();  		else if (desideredState == DockableContentState.FloatingWindow)  			content.SetStateToFloatingWindow ();  		if (prevHostpane != null) {  			//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  			var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  			if (floatingWindow != null && floatingWindow.IsLoaded) {  				floatingWindow.Activate ();  			} else {  				floatingWindow = new DockableFloatingWindow (this);  				floatingWindow.Content = content;  				floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  				floatingWindow.Top = prevHostpane.FloatingWindow.Top;  				floatingWindow.Left = prevHostpane.FloatingWindow.Left;  				floatingWindow.Width = prevHostpane.FloatingWindow.Width;  				floatingWindow.Height = prevHostpane.FloatingWindow.Height;  				//floatingWindow.Owner = Window.GetWindow(this);  				var mainWindow = Window.GetWindow (this);  				if (mainWindow.IsVisible)  					floatingWindow.Owner = mainWindow;  				//now I've created a new pane to host the hidden content  				//if a an hidden content is shown that has prevHostpane as saved pane  				//I want that it is relocated in this new pane that I've created right now  				var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  				foreach (var hiddenContent in hiddenContents) {  					if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  						hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  					}  				}  				floatingWindow.Show ();  			}  		} else if (newHostpane != null) {  			var floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = newHostpane;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  			floatingWindow.Width = 200;  			floatingWindow.Height = 500;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			floatingWindow.Show ();  		}  	} else if (desideredState == DockableContentState.Document) {  		DocumentPane docPane = MainDocumentPane;  		if (docPane != null) {  			docPane.Items.Add (content);  			docPane.SelectedItem = content;  			content.SetStateToDocument ();  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  	if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  		//ok previous container pane is here..  		Pane prevPane = content.SavedStateAndPosition.ContainerPane;  		if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  			prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  		} else {  			prevPane.Items.Add (content);  		}  		if (prevPane.Items.Count == 1) {  			if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  				ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  			}  		}  		DockablePane prevDockablePane = prevPane as DockablePane;  		if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  			prevDockablePane.ToggleAutoHide ();  		}  		content.SetStateToDock ();  		content.Activate ();  		(prevPane.Parent as UIElement).InvalidateMeasure ();  	} else {  		if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  			desideredAnchor = content.SavedStateAndPosition.Anchor;  		if (desideredAnchor == AnchorStyle.None)  			desideredAnchor = AnchorStyle.Right;  		DockablePane foundPane = null;  		if (desideredState == DockableContentState.Docked) {  			//first not empty panes  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//look for all panes even empty  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  		}  		if (foundPane != null) {  			content.SetStateToDock ();  			foundPane.Items.Add (content);  			if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  				foundPane.ToggleAutoHide ();  		} else {  			DockablePane newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  			if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  				double w = 200;  				if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  					w = content.SavedStateAndPosition.Width;  				ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  				ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  			} else {  				double h = 200;  				if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  					h = content.SavedStateAndPosition.Height;  				ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  				ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  			}  			Anchor (newHostpane' desideredAnchor);  			if (desideredState == DockableContentState.AutoHide) {  				ToggleAutoHide (newHostpane);  			}  		}  	}  	ActiveContent = content;  } else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  	DockablePane newHostpane = null;  	FloatingDockablePane prevHostpane = null;  	if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  		prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  		if (!prevHostpane.Items.Contains (content))  			prevHostpane.Items.Add (content);  	} else {  		newHostpane = new DockablePane ();  		newHostpane.Items.Add (content);  	}  	if (desideredState == DockableContentState.DockableWindow)  		content.SetStateToDockableWindow ();  	else if (desideredState == DockableContentState.FloatingWindow)  		content.SetStateToFloatingWindow ();  	if (prevHostpane != null) {  		//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  		var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  		if (floatingWindow != null && floatingWindow.IsLoaded) {  			floatingWindow.Activate ();  		} else {  			floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = content;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  			floatingWindow.Top = prevHostpane.FloatingWindow.Top;  			floatingWindow.Left = prevHostpane.FloatingWindow.Left;  			floatingWindow.Width = prevHostpane.FloatingWindow.Width;  			floatingWindow.Height = prevHostpane.FloatingWindow.Height;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			//now I've created a new pane to host the hidden content  			//if a an hidden content is shown that has prevHostpane as saved pane  			//I want that it is relocated in this new pane that I've created right now  			var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  			foreach (var hiddenContent in hiddenContents) {  				if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  					hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  				}  			}  			floatingWindow.Show ();  		}  	} else if (newHostpane != null) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = newHostpane;  		floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  		floatingWindow.Width = 200;  		floatingWindow.Height = 500;  		//floatingWindow.Owner = Window.GetWindow(this);  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		floatingWindow.Show ();  	}  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content);  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  	if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  		//ok previous container pane is here..  		Pane prevPane = content.SavedStateAndPosition.ContainerPane;  		if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  			prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  		} else {  			prevPane.Items.Add (content);  		}  		if (prevPane.Items.Count == 1) {  			if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  				ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  			}  		}  		DockablePane prevDockablePane = prevPane as DockablePane;  		if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  			prevDockablePane.ToggleAutoHide ();  		}  		content.SetStateToDock ();  		content.Activate ();  		(prevPane.Parent as UIElement).InvalidateMeasure ();  	} else {  		if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  			desideredAnchor = content.SavedStateAndPosition.Anchor;  		if (desideredAnchor == AnchorStyle.None)  			desideredAnchor = AnchorStyle.Right;  		DockablePane foundPane = null;  		if (desideredState == DockableContentState.Docked) {  			//first not empty panes  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//look for all panes even empty  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  		}  		if (foundPane != null) {  			content.SetStateToDock ();  			foundPane.Items.Add (content);  			if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  				foundPane.ToggleAutoHide ();  		} else {  			DockablePane newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  			if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  				double w = 200;  				if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  					w = content.SavedStateAndPosition.Width;  				ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  				ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  			} else {  				double h = 200;  				if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  					h = content.SavedStateAndPosition.Height;  				ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  				ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  			}  			Anchor (newHostpane' desideredAnchor);  			if (desideredState == DockableContentState.AutoHide) {  				ToggleAutoHide (newHostpane);  			}  		}  	}  	ActiveContent = content;  } else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  	DockablePane newHostpane = null;  	FloatingDockablePane prevHostpane = null;  	if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  		prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  		if (!prevHostpane.Items.Contains (content))  			prevHostpane.Items.Add (content);  	} else {  		newHostpane = new DockablePane ();  		newHostpane.Items.Add (content);  	}  	if (desideredState == DockableContentState.DockableWindow)  		content.SetStateToDockableWindow ();  	else if (desideredState == DockableContentState.FloatingWindow)  		content.SetStateToFloatingWindow ();  	if (prevHostpane != null) {  		//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  		var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  		if (floatingWindow != null && floatingWindow.IsLoaded) {  			floatingWindow.Activate ();  		} else {  			floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = content;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  			floatingWindow.Top = prevHostpane.FloatingWindow.Top;  			floatingWindow.Left = prevHostpane.FloatingWindow.Left;  			floatingWindow.Width = prevHostpane.FloatingWindow.Width;  			floatingWindow.Height = prevHostpane.FloatingWindow.Height;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			//now I've created a new pane to host the hidden content  			//if a an hidden content is shown that has prevHostpane as saved pane  			//I want that it is relocated in this new pane that I've created right now  			var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  			foreach (var hiddenContent in hiddenContents) {  				if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  					hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  				}  			}  			floatingWindow.Show ();  		}  	} else if (newHostpane != null) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = newHostpane;  		floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  		floatingWindow.Width = 200;  		floatingWindow.Height = 500;  		//floatingWindow.Owner = Window.GetWindow(this);  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		floatingWindow.Show ();  	}  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content);  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  	if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  		//ok previous container pane is here..  		Pane prevPane = content.SavedStateAndPosition.ContainerPane;  		if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  			prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  		} else {  			prevPane.Items.Add (content);  		}  		if (prevPane.Items.Count == 1) {  			if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  				ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  			}  		}  		DockablePane prevDockablePane = prevPane as DockablePane;  		if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  			prevDockablePane.ToggleAutoHide ();  		}  		content.SetStateToDock ();  		content.Activate ();  		(prevPane.Parent as UIElement).InvalidateMeasure ();  	} else {  		if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  			desideredAnchor = content.SavedStateAndPosition.Anchor;  		if (desideredAnchor == AnchorStyle.None)  			desideredAnchor = AnchorStyle.Right;  		DockablePane foundPane = null;  		if (desideredState == DockableContentState.Docked) {  			//first not empty panes  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//look for all panes even empty  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  		}  		if (foundPane != null) {  			content.SetStateToDock ();  			foundPane.Items.Add (content);  			if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  				foundPane.ToggleAutoHide ();  		} else {  			DockablePane newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  			if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  				double w = 200;  				if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  					w = content.SavedStateAndPosition.Width;  				ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  				ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  			} else {  				double h = 200;  				if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  					h = content.SavedStateAndPosition.Height;  				ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  				ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  			}  			Anchor (newHostpane' desideredAnchor);  			if (desideredState == DockableContentState.AutoHide) {  				ToggleAutoHide (newHostpane);  			}  		}  	}  	ActiveContent = content;  } else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  	DockablePane newHostpane = null;  	FloatingDockablePane prevHostpane = null;  	if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  		prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  		if (!prevHostpane.Items.Contains (content))  			prevHostpane.Items.Add (content);  	} else {  		newHostpane = new DockablePane ();  		newHostpane.Items.Add (content);  	}  	if (desideredState == DockableContentState.DockableWindow)  		content.SetStateToDockableWindow ();  	else if (desideredState == DockableContentState.FloatingWindow)  		content.SetStateToFloatingWindow ();  	if (prevHostpane != null) {  		//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  		var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  		if (floatingWindow != null && floatingWindow.IsLoaded) {  			floatingWindow.Activate ();  		} else {  			floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = content;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  			floatingWindow.Top = prevHostpane.FloatingWindow.Top;  			floatingWindow.Left = prevHostpane.FloatingWindow.Left;  			floatingWindow.Width = prevHostpane.FloatingWindow.Width;  			floatingWindow.Height = prevHostpane.FloatingWindow.Height;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			//now I've created a new pane to host the hidden content  			//if a an hidden content is shown that has prevHostpane as saved pane  			//I want that it is relocated in this new pane that I've created right now  			var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  			foreach (var hiddenContent in hiddenContents) {  				if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  					hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  				}  			}  			floatingWindow.Show ();  		}  	} else if (newHostpane != null) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = newHostpane;  		floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  		floatingWindow.Width = 200;  		floatingWindow.Height = 500;  		//floatingWindow.Owner = Window.GetWindow(this);  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		floatingWindow.Show ();  	}  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content);  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.Docked || desideredState == DockableContentState.AutoHide) {  	if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  		//ok previous container pane is here..  		Pane prevPane = content.SavedStateAndPosition.ContainerPane;  		if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  			prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  		} else {  			prevPane.Items.Add (content);  		}  		if (prevPane.Items.Count == 1) {  			if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  				ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  			}  		}  		DockablePane prevDockablePane = prevPane as DockablePane;  		if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  			prevDockablePane.ToggleAutoHide ();  		}  		content.SetStateToDock ();  		content.Activate ();  		(prevPane.Parent as UIElement).InvalidateMeasure ();  	} else {  		if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  			desideredAnchor = content.SavedStateAndPosition.Anchor;  		if (desideredAnchor == AnchorStyle.None)  			desideredAnchor = AnchorStyle.Right;  		DockablePane foundPane = null;  		if (desideredState == DockableContentState.Docked) {  			//first not empty panes  			ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  			if (itemFound == null)  				//look for all panes even empty  				itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  			foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  		}  		if (foundPane != null) {  			content.SetStateToDock ();  			foundPane.Items.Add (content);  			if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  				foundPane.ToggleAutoHide ();  		} else {  			DockablePane newHostpane = new DockablePane ();  			newHostpane.Items.Add (content);  			if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  				double w = 200;  				if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  					w = content.SavedStateAndPosition.Width;  				ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  				ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  			} else {  				double h = 200;  				if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  					h = content.SavedStateAndPosition.Height;  				ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  				ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  			}  			Anchor (newHostpane' desideredAnchor);  			if (desideredState == DockableContentState.AutoHide) {  				ToggleAutoHide (newHostpane);  			}  		}  	}  	ActiveContent = content;  } else if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  	DockablePane newHostpane = null;  	FloatingDockablePane prevHostpane = null;  	if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  		prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  		if (!prevHostpane.Items.Contains (content))  			prevHostpane.Items.Add (content);  	} else {  		newHostpane = new DockablePane ();  		newHostpane.Items.Add (content);  	}  	if (desideredState == DockableContentState.DockableWindow)  		content.SetStateToDockableWindow ();  	else if (desideredState == DockableContentState.FloatingWindow)  		content.SetStateToFloatingWindow ();  	if (prevHostpane != null) {  		//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  		var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  		if (floatingWindow != null && floatingWindow.IsLoaded) {  			floatingWindow.Activate ();  		} else {  			floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = content;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  			floatingWindow.Top = prevHostpane.FloatingWindow.Top;  			floatingWindow.Left = prevHostpane.FloatingWindow.Left;  			floatingWindow.Width = prevHostpane.FloatingWindow.Width;  			floatingWindow.Height = prevHostpane.FloatingWindow.Height;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			//now I've created a new pane to host the hidden content  			//if a an hidden content is shown that has prevHostpane as saved pane  			//I want that it is relocated in this new pane that I've created right now  			var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  			foreach (var hiddenContent in hiddenContents) {  				if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  					hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  				}  			}  			floatingWindow.Show ();  		}  	} else if (newHostpane != null) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = newHostpane;  		floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  		floatingWindow.Width = 200;  		floatingWindow.Height = 500;  		//floatingWindow.Owner = Window.GetWindow(this);  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		floatingWindow.Show ();  	}  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content);  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  	//ok previous container pane is here..  	Pane prevPane = content.SavedStateAndPosition.ContainerPane;  	if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  		prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  	} else {  		prevPane.Items.Add (content);  	}  	if (prevPane.Items.Count == 1) {  		if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  			ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  		}  	}  	DockablePane prevDockablePane = prevPane as DockablePane;  	if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  		prevDockablePane.ToggleAutoHide ();  	}  	content.SetStateToDock ();  	content.Activate ();  	(prevPane.Parent as UIElement).InvalidateMeasure ();  } else {  	if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  		desideredAnchor = content.SavedStateAndPosition.Anchor;  	if (desideredAnchor == AnchorStyle.None)  		desideredAnchor = AnchorStyle.Right;  	DockablePane foundPane = null;  	if (desideredState == DockableContentState.Docked) {  		//first not empty panes  		ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  		if (itemFound == null)  			//look for all panes even empty  			itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  		foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  	}  	if (foundPane != null) {  		content.SetStateToDock ();  		foundPane.Items.Add (content);  		if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  			foundPane.ToggleAutoHide ();  	} else {  		DockablePane newHostpane = new DockablePane ();  		newHostpane.Items.Add (content);  		if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  			double w = 200;  			if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  				w = content.SavedStateAndPosition.Width;  			ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  			ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  		} else {  			double h = 200;  			if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  				h = content.SavedStateAndPosition.Height;  			ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  			ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  		}  		Anchor (newHostpane' desideredAnchor);  		if (desideredState == DockableContentState.AutoHide) {  			ToggleAutoHide (newHostpane);  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ChildIndex >= 0 && content.SavedStateAndPosition.ContainerPane.GetManager () == this && desideredState == DockableContentState.Docked) {  	//ok previous container pane is here..  	Pane prevPane = content.SavedStateAndPosition.ContainerPane;  	if (content.SavedStateAndPosition.ChildIndex < prevPane.Items.Count) {  		prevPane.Items.Insert (content.SavedStateAndPosition.ChildIndex' content);  	} else {  		prevPane.Items.Add (content);  	}  	if (prevPane.Items.Count == 1) {  		if (!double.IsNaN (content.SavedStateAndPosition.Width) || !double.IsInfinity (content.SavedStateAndPosition.Width)) {  			ResizingPanel.SetResizeWidth (content' new GridLength (content.SavedStateAndPosition.Width));  		}  	}  	DockablePane prevDockablePane = prevPane as DockablePane;  	if (prevDockablePane != null && prevDockablePane.IsAutoHidden) {  		prevDockablePane.ToggleAutoHide ();  	}  	content.SetStateToDock ();  	content.Activate ();  	(prevPane.Parent as UIElement).InvalidateMeasure ();  } else {  	if (desideredAnchor == AnchorStyle.None && content.SavedStateAndPosition != null && content.SavedStateAndPosition.Anchor != AnchorStyle.None)  		desideredAnchor = content.SavedStateAndPosition.Anchor;  	if (desideredAnchor == AnchorStyle.None)  		desideredAnchor = AnchorStyle.Right;  	DockablePane foundPane = null;  	if (desideredState == DockableContentState.Docked) {  		//first not empty panes  		ILinqToTree<DependencyObject> itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).IsDocked);  		if (itemFound == null)  			//look for all panes even empty  			itemFound = new LogicalTreeAdapter (this).Descendants ().FirstOrDefault (el => el.Item is DockablePane && (el.Item as DockablePane).Anchor == desideredAnchor && (el.Item as DockablePane).Items.Count == 0);  		foundPane = itemFound != null ? itemFound.Item as DockablePane : null;  	}  	if (foundPane != null) {  		content.SetStateToDock ();  		foundPane.Items.Add (content);  		if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  			foundPane.ToggleAutoHide ();  	} else {  		DockablePane newHostpane = new DockablePane ();  		newHostpane.Items.Add (content);  		if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  			double w = 200;  			if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  				w = content.SavedStateAndPosition.Width;  			ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  			ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  		} else {  			double h = 200;  			if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  				h = content.SavedStateAndPosition.Height;  			ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  			ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  		}  		Anchor (newHostpane' desideredAnchor);  		if (desideredState == DockableContentState.AutoHide) {  			ToggleAutoHide (newHostpane);  		}  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (foundPane != null) {  	content.SetStateToDock ();  	foundPane.Items.Add (content);  	if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  		foundPane.ToggleAutoHide ();  } else {  	DockablePane newHostpane = new DockablePane ();  	newHostpane.Items.Add (content);  	if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  		double w = 200;  		if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  			w = content.SavedStateAndPosition.Width;  		ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  		ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  	} else {  		double h = 200;  		if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  			h = content.SavedStateAndPosition.Height;  		ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  		ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  	}  	Anchor (newHostpane' desideredAnchor);  	if (desideredState == DockableContentState.AutoHide) {  		ToggleAutoHide (newHostpane);  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (foundPane != null) {  	content.SetStateToDock ();  	foundPane.Items.Add (content);  	if ((foundPane.IsAutoHidden && desideredState == DockableContentState.Docked) || (!foundPane.IsAutoHidden && desideredState == DockableContentState.AutoHide))  		foundPane.ToggleAutoHide ();  } else {  	DockablePane newHostpane = new DockablePane ();  	newHostpane.Items.Add (content);  	if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  		double w = 200;  		if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  			w = content.SavedStateAndPosition.Width;  		ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  		ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  	} else {  		double h = 200;  		if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  			h = content.SavedStateAndPosition.Height;  		ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  		ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  	}  	Anchor (newHostpane' desideredAnchor);  	if (desideredState == DockableContentState.AutoHide) {  		ToggleAutoHide (newHostpane);  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  	double w = 200;  	if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  		w = content.SavedStateAndPosition.Width;  	ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  	ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  } else {  	double h = 200;  	if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  		h = content.SavedStateAndPosition.Height;  	ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  	ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredAnchor == AnchorStyle.Left || desideredAnchor == AnchorStyle.Right) {  	double w = 200;  	if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Width) && !double.IsNaN (content.SavedStateAndPosition.Width))  		w = content.SavedStateAndPosition.Width;  	ResizingPanel.SetResizeWidth (newHostpane' new GridLength (w));  	ResizingPanel.SetEffectiveSize (newHostpane' new Size (w' 0.0));  } else {  	double h = 200;  	if (content.SavedStateAndPosition != null && !double.IsInfinity (content.SavedStateAndPosition.Height) && !double.IsNaN (content.SavedStateAndPosition.Height))  		h = content.SavedStateAndPosition.Height;  	ResizingPanel.SetResizeHeight (newHostpane' new GridLength (h));  	ResizingPanel.SetEffectiveSize (newHostpane' new Size (0.0' h));  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  	DockablePane newHostpane = null;  	FloatingDockablePane prevHostpane = null;  	if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  		prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  		if (!prevHostpane.Items.Contains (content))  			prevHostpane.Items.Add (content);  	} else {  		newHostpane = new DockablePane ();  		newHostpane.Items.Add (content);  	}  	if (desideredState == DockableContentState.DockableWindow)  		content.SetStateToDockableWindow ();  	else if (desideredState == DockableContentState.FloatingWindow)  		content.SetStateToFloatingWindow ();  	if (prevHostpane != null) {  		//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  		var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  		if (floatingWindow != null && floatingWindow.IsLoaded) {  			floatingWindow.Activate ();  		} else {  			floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = content;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  			floatingWindow.Top = prevHostpane.FloatingWindow.Top;  			floatingWindow.Left = prevHostpane.FloatingWindow.Left;  			floatingWindow.Width = prevHostpane.FloatingWindow.Width;  			floatingWindow.Height = prevHostpane.FloatingWindow.Height;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			//now I've created a new pane to host the hidden content  			//if a an hidden content is shown that has prevHostpane as saved pane  			//I want that it is relocated in this new pane that I've created right now  			var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  			foreach (var hiddenContent in hiddenContents) {  				if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  					hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  				}  			}  			floatingWindow.Show ();  		}  	} else if (newHostpane != null) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = newHostpane;  		floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  		floatingWindow.Width = 200;  		floatingWindow.Height = 500;  		//floatingWindow.Owner = Window.GetWindow(this);  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		floatingWindow.Show ();  	}  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content);  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (desideredState == DockableContentState.DockableWindow || desideredState == DockableContentState.FloatingWindow) {  	DockablePane newHostpane = null;  	FloatingDockablePane prevHostpane = null;  	if (content.SavedStateAndPosition != null && content.SavedStateAndPosition.ContainerPane != null && content.SavedStateAndPosition.ContainerPane is FloatingDockablePane) {  		prevHostpane = content.SavedStateAndPosition.ContainerPane as FloatingDockablePane;  		if (!prevHostpane.Items.Contains (content))  			prevHostpane.Items.Add (content);  	} else {  		newHostpane = new DockablePane ();  		newHostpane.Items.Add (content);  	}  	if (desideredState == DockableContentState.DockableWindow)  		content.SetStateToDockableWindow ();  	else if (desideredState == DockableContentState.FloatingWindow)  		content.SetStateToFloatingWindow ();  	if (prevHostpane != null) {  		//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  		var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  		if (floatingWindow != null && floatingWindow.IsLoaded) {  			floatingWindow.Activate ();  		} else {  			floatingWindow = new DockableFloatingWindow (this);  			floatingWindow.Content = content;  			floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  			floatingWindow.Top = prevHostpane.FloatingWindow.Top;  			floatingWindow.Left = prevHostpane.FloatingWindow.Left;  			floatingWindow.Width = prevHostpane.FloatingWindow.Width;  			floatingWindow.Height = prevHostpane.FloatingWindow.Height;  			//floatingWindow.Owner = Window.GetWindow(this);  			var mainWindow = Window.GetWindow (this);  			if (mainWindow.IsVisible)  				floatingWindow.Owner = mainWindow;  			//now I've created a new pane to host the hidden content  			//if a an hidden content is shown that has prevHostpane as saved pane  			//I want that it is relocated in this new pane that I've created right now  			var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  			foreach (var hiddenContent in hiddenContents) {  				if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  					hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  				}  			}  			floatingWindow.Show ();  		}  	} else if (newHostpane != null) {  		var floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = newHostpane;  		floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  		floatingWindow.Width = 200;  		floatingWindow.Height = 500;  		//floatingWindow.Owner = Window.GetWindow(this);  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		floatingWindow.Show ();  	}  } else if (desideredState == DockableContentState.Document) {  	DocumentPane docPane = MainDocumentPane;  	if (docPane != null) {  		docPane.Items.Add (content);  		docPane.SelectedItem = content;  		content.SetStateToDocument ();  	}  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (prevHostpane != null) {  	//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  	var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  	if (floatingWindow != null && floatingWindow.IsLoaded) {  		floatingWindow.Activate ();  	} else {  		floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  		floatingWindow.Top = prevHostpane.FloatingWindow.Top;  		floatingWindow.Left = prevHostpane.FloatingWindow.Left;  		floatingWindow.Width = prevHostpane.FloatingWindow.Width;  		floatingWindow.Height = prevHostpane.FloatingWindow.Height;  		//floatingWindow.Owner = Window.GetWindow(this);  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//now I've created a new pane to host the hidden content  		//if a an hidden content is shown that has prevHostpane as saved pane  		//I want that it is relocated in this new pane that I've created right now  		var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  		foreach (var hiddenContent in hiddenContents) {  			if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  				hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  			}  		}  		floatingWindow.Show ();  	}  } else if (newHostpane != null) {  	var floatingWindow = new DockableFloatingWindow (this);  	floatingWindow.Content = newHostpane;  	floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  	floatingWindow.Width = 200;  	floatingWindow.Height = 500;  	//floatingWindow.Owner = Window.GetWindow(this);  	var mainWindow = Window.GetWindow (this);  	if (mainWindow.IsVisible)  		floatingWindow.Owner = mainWindow;  	floatingWindow.Show ();  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (prevHostpane != null) {  	//check to see if floating window that host prevHostPane is already loaded (hosting other contents)  	var floatingWindow = prevHostpane.Parent as DockableFloatingWindow;  	if (floatingWindow != null && floatingWindow.IsLoaded) {  		floatingWindow.Activate ();  	} else {  		floatingWindow = new DockableFloatingWindow (this);  		floatingWindow.Content = content;  		floatingWindow.WindowStartupLocation = WindowStartupLocation.Manual;  		floatingWindow.Top = prevHostpane.FloatingWindow.Top;  		floatingWindow.Left = prevHostpane.FloatingWindow.Left;  		floatingWindow.Width = prevHostpane.FloatingWindow.Width;  		floatingWindow.Height = prevHostpane.FloatingWindow.Height;  		//floatingWindow.Owner = Window.GetWindow(this);  		var mainWindow = Window.GetWindow (this);  		if (mainWindow.IsVisible)  			floatingWindow.Owner = mainWindow;  		//now I've created a new pane to host the hidden content  		//if a an hidden content is shown that has prevHostpane as saved pane  		//I want that it is relocated in this new pane that I've created right now  		var hiddenContents = DockableContents.Where (c => c.State == DockableContentState.Hidden).ToArray ();  		foreach (var hiddenContent in hiddenContents) {  			if (hiddenContent.SavedStateAndPosition.ContainerPane == prevHostpane) {  				hiddenContent.SavedStateAndPosition = new DockableContentStateAndPosition ((floatingWindow.Content as Pane)' hiddenContent.SavedStateAndPosition.ChildIndex' hiddenContent.SavedStateAndPosition.Width' hiddenContent.SavedStateAndPosition.Height' hiddenContent.SavedStateAndPosition.Anchor' hiddenContent.SavedStateAndPosition.State);  			}  		}  		floatingWindow.Show ();  	}  } else if (newHostpane != null) {  	var floatingWindow = new DockableFloatingWindow (this);  	floatingWindow.Content = newHostpane;  	floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  	floatingWindow.Width = 200;  	floatingWindow.Height = 500;  	//floatingWindow.Owner = Window.GetWindow(this);  	var mainWindow = Window.GetWindow (this);  	if (mainWindow.IsVisible)  		floatingWindow.Owner = mainWindow;  	floatingWindow.Show ();  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (newHostpane != null) {  	var floatingWindow = new DockableFloatingWindow (this);  	floatingWindow.Content = newHostpane;  	floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  	floatingWindow.Width = 200;  	floatingWindow.Height = 500;  	//floatingWindow.Owner = Window.GetWindow(this);  	var mainWindow = Window.GetWindow (this);  	if (mainWindow.IsVisible)  		floatingWindow.Owner = mainWindow;  	floatingWindow.Show ();  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: if (newHostpane != null) {  	var floatingWindow = new DockableFloatingWindow (this);  	floatingWindow.Content = newHostpane;  	floatingWindow.WindowStartupLocation = WindowStartupLocation.CenterScreen;  	floatingWindow.Width = 200;  	floatingWindow.Height = 500;  	//floatingWindow.Owner = Window.GetWindow(this);  	var mainWindow = Window.GetWindow (this);  	if (mainWindow.IsVisible)  		floatingWindow.Owner = mainWindow;  	floatingWindow.Show ();  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: floatingWindow.Width = 200;  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,Show,The following statement contains a magic number: floatingWindow.Height = 500;  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,SaveLayout,The following statement contains a magic number: sw.Indentation = 4;  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,SaveLayout,The following statement contains a magic number: sw.Indentation = 4;  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The following statement contains a magic number: if (doc.DocumentElement.ChildNodes.Count != 3 || //(doc.DocumentElement.ChildNodes[0].Name != "ResizingPanel" && doc.DocumentElement.ChildNodes[0].Name != "DocumentPane") ||  (doc.DocumentElement.ChildNodes [0].Name != "ResizingPanel" && doc.DocumentElement.ChildNodes [0].Name != "DocumentPane" && doc.DocumentElement.ChildNodes [0].Name != "DocumentPaneResizingPanel") || doc.DocumentElement.ChildNodes [1].Name != "Hidden" || doc.DocumentElement.ChildNodes [2].Name != "Windows") {  	Debug.Assert (false' "Layout file hasn't a valid structure!");  	throw new InvalidOperationException ("Layout file hasn't a valid structure!");  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The following statement contains a magic number: if (doc.DocumentElement.ChildNodes.Count != 3 || //(doc.DocumentElement.ChildNodes[0].Name != "ResizingPanel" && doc.DocumentElement.ChildNodes[0].Name != "DocumentPane") ||  (doc.DocumentElement.ChildNodes [0].Name != "ResizingPanel" && doc.DocumentElement.ChildNodes [0].Name != "DocumentPane" && doc.DocumentElement.ChildNodes [0].Name != "DocumentPaneResizingPanel") || doc.DocumentElement.ChildNodes [1].Name != "Hidden" || doc.DocumentElement.ChildNodes [2].Name != "Windows") {  	Debug.Assert (false' "Layout file hasn't a valid structure!");  	throw new InvalidOperationException ("Layout file hasn't a valid structure!");  }  
Magic Number,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,RestoreLayout,The following statement contains a magic number: foreach (XmlElement flWindowElement in doc.DocumentElement.ChildNodes [2].ChildNodes) {  	if (flWindowElement.ChildNodes.Count != 1)  		continue;  	//handles invalid layouts structures  	bool isDockableWindow = XmlConvert.ToBoolean (flWindowElement.GetAttribute ("IsDockableWindow"));  	Point location = new Point (XmlConvert.ToDouble (flWindowElement.GetAttribute ("Left"))' XmlConvert.ToDouble (flWindowElement.GetAttribute ("Top")));  	Size size = new Size (XmlConvert.ToDouble (flWindowElement.GetAttribute ("Width"))' XmlConvert.ToDouble (flWindowElement.GetAttribute ("Height")));  	XmlElement paneElement = flWindowElement.ChildNodes [0] as XmlElement;  	DockablePane paneForFloatingWindow = new DockablePane ();  	if (paneElement.HasAttribute ("ResizingWidth"))  		ResizingPanel.SetResizeWidth (paneForFloatingWindow' (GridLength)GLConverter.ConvertFromInvariantString (paneElement.GetAttribute ("ResizeWidth")));  	if (paneElement.HasAttribute ("ResizingHeight"))  		ResizingPanel.SetResizeHeight (paneForFloatingWindow' (GridLength)GLConverter.ConvertFromInvariantString (paneElement.GetAttribute ("ResizeHeight")));  	paneForFloatingWindow.Anchor = (AnchorStyle)Enum.Parse (typeof(AnchorStyle)' paneElement.GetAttribute ("Anchor"));  	DockableContent contentToTransfer = null;  	foreach (XmlElement contentElement in paneElement.ChildNodes) {  		#region Find the content to transfer  		string contentToFindName = contentElement.GetAttribute ("Name");  		contentToTransfer = actualContents.FirstOrDefault (c => c.Name == contentToFindName);  		if (contentToTransfer == null && DeserializationCallback != null) {  			DeserializationCallbackEventArgs e = new DeserializationCallbackEventArgs (contentToFindName);  			DeserializationCallback (this' e);  			contentToTransfer = e.Content as DockableContent;  		}  		#endregion  		if (contentToTransfer != null) {  			DetachContentFromDockingManager (contentToTransfer);  			paneForFloatingWindow.Items.Add (contentToTransfer);  			contentToTransfer.RestoreLayout (contentElement);  		}  	}  	if (paneForFloatingWindow.Items.Count > 0) {  		var flWindow = new DockableFloatingWindow (this);  		flWindow.Content = paneForFloatingWindow;  		flWindow.Left = location.X;  		flWindow.Top = location.Y;  		flWindow.Width = size.Width;  		flWindow.Height = size.Height;  		flWindow.Owner = Window.GetWindow (this);  		flWindow.IsDockableWindow = isDockableWindow;  		flWindow.ShowActivated = false;  		flWindow.ApplyTemplate ();  		flWindow.Show ();  	}  }  
Magic Number,AvalonDock,DocumentContent,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentContent.cs,Activate,The following statement contains a magic number: Panel.SetZIndex (this' 2);  
Magic Number,AvalonDock,DocumentFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentFloatingWindow.cs,FilterMessage,The following statement contains a magic number: switch (e.Msg) {  case WM_NCLBUTTONDOWN:  	//Left button down on title -> start dragging over docking manager  	if (e.WParam.ToInt32 () == HTCAPTION) {  		short x = (short)((e.LParam.ToInt32 () & 0xFFFF));  		short y = (short)((e.LParam.ToInt32 () >> 16));  		Point clickPoint = this.TransformToDeviceDPI (new Point (x' y));  		Manager.Drag (this' clickPoint' new Point (clickPoint.X - Left' clickPoint.Y - Top));  		e.Handled = true;  	}  	break;  case WM_NCLBUTTONDBLCLK:  	//Left Button Double Click -> Maximixe/Normal  	if (e.WParam.ToInt32 () == HTCAPTION) {  		WindowState = WindowState == System.Windows.WindowState.Maximized ? System.Windows.WindowState.Normal : System.Windows.WindowState.Maximized;  		e.Handled = true;  	}  	break;  }  
Magic Number,AvalonDock,DocumentFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentFloatingWindow.cs,FilterMessage,The following statement contains a magic number: if (e.WParam.ToInt32 () == HTCAPTION) {  	short x = (short)((e.LParam.ToInt32 () & 0xFFFF));  	short y = (short)((e.LParam.ToInt32 () >> 16));  	Point clickPoint = this.TransformToDeviceDPI (new Point (x' y));  	Manager.Drag (this' clickPoint' new Point (clickPoint.X - Left' clickPoint.Y - Top));  	e.Handled = true;  }  
Magic Number,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,ShowDocumentsListMenu,The following statement contains a magic number: if (cxMenuDocuments != null) {  	//cxMenuDocuments.ItemsSource = Items.OfType<ManagedContent>().OrderBy(c => c.Title);  	cxMenuDocuments.Items.Clear ();  	Items.OfType<ManagedContent> ().OrderBy (c => c.Title).ForEach (c => {  		cxMenuDocuments.Items.Add (new MenuItem () {  			Header = c.Title'  			Command = ManagedContentCommands.Activate'  			CommandTarget = c'  			Icon = new Image () {  				Source = c.Icon'  				Width = 16'  			#if NET4  			                                UseLayoutRounding = true #endif  			}  		});  	});  	//cxMenuDocuments.CommandBindings.Add(new CommandBinding(ActivateDocumentCommand' new ExecutedRoutedEventHandler(this.ExecutedActivateDocumentCommand)' new CanExecuteRoutedEventHandler(CanExecuteActivateDocumentCommand)));  	if (_optionsContextMenuPlacementTarget != null) {  		cxMenuDocuments.Placement = PlacementMode.Bottom;  		cxMenuDocuments.PlacementTarget = _optionsContextMenuPlacementTarget;  	} else {  		cxMenuDocuments.Placement = PlacementMode.MousePoint;  		cxMenuDocuments.PlacementTarget = this;  	}  	cxMenuDocuments.IsOpen = true;  	cxMenuDocuments.Closed += new RoutedEventHandler (cxMenuDocuments_Closed);  }  
Magic Number,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,ShowDocumentsListMenu,The following statement contains a magic number: Items.OfType<ManagedContent> ().OrderBy (c => c.Title).ForEach (c => {  	cxMenuDocuments.Items.Add (new MenuItem () {  		Header = c.Title'  		Command = ManagedContentCommands.Activate'  		CommandTarget = c'  		Icon = new Image () {  			Source = c.Icon'  			Width = 16'  		#if NET4  		                                UseLayoutRounding = true #endif  		}  	});  });  
Magic Number,AvalonDock,DocumentPane,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentPane.cs,ShowDocumentsListMenu,The following statement contains a magic number: cxMenuDocuments.Items.Add (new MenuItem () {  	Header = c.Title'  	Command = ManagedContentCommands.Activate'  	CommandTarget = c'  	Icon = new Image () {  		Source = c.Icon'  		Width = 16'  	#if NET4  	                                UseLayoutRounding = true #endif  	}  });  
Magic Number,AvalonDock,DragPaneServices,D:\newReposJune17\tltjr_Wish\AvalonDock\DragPaneServices.cs,StartDrag,The following statement contains a magic number: if (Offset.X >= _wnd.Width)  	Offset.X = _wnd.Width / 2;  
Magic Number,AvalonDock,DragPaneServices,D:\newReposJune17\tltjr_Wish\AvalonDock\DragPaneServices.cs,StartDrag,The following statement contains a magic number: Offset.X = _wnd.Width / 2;  
Magic Number,AvalonDock,FloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingWindow.cs,FilterMessage,The following statement contains a magic number: switch (e.Msg) {  case WM_SIZE:  case WM_MOVE:  	break;  case WM_NCRBUTTONDOWN:  	//Right button click on title area -> show context menu  	if (e.WParam.ToInt32 () == HTCAPTION) {  		short x = (short)((e.LParam.ToInt32 () & 0xFFFF));  		short y = (short)((e.LParam.ToInt32 () >> 16));  		OpenContextMenu (null' new Point (x' y));  		e.Handled = true;  	}  	break;  case WM_NCRBUTTONUP:  	//set as handled right button click on title area (after showing context menu)  	if (e.WParam.ToInt32 () == HTCAPTION) {  		e.Handled = true;  	}  	break;  }  
Magic Number,AvalonDock,FloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingWindow.cs,FilterMessage,The following statement contains a magic number: if (e.WParam.ToInt32 () == HTCAPTION) {  	short x = (short)((e.LParam.ToInt32 () & 0xFFFF));  	short y = (short)((e.LParam.ToInt32 () >> 16));  	OpenContextMenu (null' new Point (x' y));  	e.Handled = true;  }  
Magic Number,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,ShowResizerOverlayWindow,The following statement contains a magic number: _resizerGhost = new Border () {  	Background = Brushes.Black'  	Opacity = 0.7  };  
Missing Default,AvalonDock,WindowInteropWrapper,D:\newReposJune17\tltjr_Wish\AvalonDock\WindowInteropWrapper.cs,HookHandler,The following switch statement is missing a default case: switch (msg) {  case SC_MOVE:  case WM_WINDOWPOSCHANGING:  	SafeFireEvent<EventArgs> (WindowPosChanging' EventArgs.Empty);  	break;  case WM_MOUSEACTIVATE:  	{  		CancelEventArgs args = new CancelEventArgs ();  		SafeFireEvent<CancelEventArgs> (WindowActivating' args);  		if (args.Cancel) {  			Debug.WriteLine ("Cancelled");  			handled = true;  			return (IntPtr)MA_NOACTIVATE;  		}  	}  	break;  case WM_ACTIVATE:  	{  		if (((int)wParam & 0xFFFF) != WA_INACTIVE) {  			CancelEventArgs args = new CancelEventArgs ();  			SafeFireEvent<CancelEventArgs> (WindowActivating' args);  			if (args.Cancel) {  				if (lParam != IntPtr.Zero) {  					SetActiveWindow (lParam);  				}  				Debug.WriteLine ("Cancelled Activation");  				handled = true;  			}  		}  	}  	break;  }  
Missing Default,AvalonDock,ThemeFactory,D:\newReposJune17\tltjr_Wish\AvalonDock\ThemeFactory.cs,ChangeBrush,The following switch statement is missing a default case: switch (keyTypeName) {  case "ComponentResourceKey":  	str = ((ComponentResourceKey)key).ResourceId.ToString ();  	break;  case "String":  	str = (string)key;  	break;  }  
Missing Default,AvalonDock,DockableFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DockableFloatingWindow.cs,FilterMessage,The following switch statement is missing a default case: switch (e.Msg) {  case WM_NCLBUTTONDOWN:  	//Left button down on title -> start dragging over docking manager  	if (IsDockableWindow && e.WParam.ToInt32 () == HTCAPTION) {  		short x = (short)((e.LParam.ToInt32 () & 0xFFFF));  		short y = (short)((e.LParam.ToInt32 () >> 16));  		Point clickPoint = this.TransformToDeviceDPI (new Point (x' y));  		Manager.Drag (this' clickPoint' new Point (clickPoint.X - Left' clickPoint.Y - Top));  		e.Handled = true;  	}  	break;  case WM_NCLBUTTONDBLCLK:  	//Left Button Double Click -> dock to docking manager  	if (IsDockableWindow && e.WParam.ToInt32 () == HTCAPTION) {  		if (IsDockableWindow) {  			Dock ();  			e.Handled = true;  		}  	}  	break;  }  
Missing Default,AvalonDock,DockingManager,D:\newReposJune17\tltjr_Wish\AvalonDock\DockingManager.cs,ToggleAutoHide,The following switch statement is missing a default case: switch (pane.Anchor) {  case AnchorStyle.Left:  	if (_leftAnchorTabPanel != null)  		_leftAnchorTabPanel.Children.Add (group);  	break;  case AnchorStyle.Top:  	if (_topAnchorTabPanel != null)  		_topAnchorTabPanel.Children.Add (group);  	break;  case AnchorStyle.Right:  	if (_rightAnchorTabPanel != null)  		_rightAnchorTabPanel.Children.Add (group);  	break;  case AnchorStyle.Bottom:  	if (_bottomAnchorTabPanel != null)  		_bottomAnchorTabPanel.Children.Add (group);  	break;  }  
Missing Default,AvalonDock,DocumentFloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\DocumentFloatingWindow.cs,FilterMessage,The following switch statement is missing a default case: switch (e.Msg) {  case WM_NCLBUTTONDOWN:  	//Left button down on title -> start dragging over docking manager  	if (e.WParam.ToInt32 () == HTCAPTION) {  		short x = (short)((e.LParam.ToInt32 () & 0xFFFF));  		short y = (short)((e.LParam.ToInt32 () >> 16));  		Point clickPoint = this.TransformToDeviceDPI (new Point (x' y));  		Manager.Drag (this' clickPoint' new Point (clickPoint.X - Left' clickPoint.Y - Top));  		e.Handled = true;  	}  	break;  case WM_NCLBUTTONDBLCLK:  	//Left Button Double Click -> Maximixe/Normal  	if (e.WParam.ToInt32 () == HTCAPTION) {  		WindowState = WindowState == System.Windows.WindowState.Maximized ? System.Windows.WindowState.Normal : System.Windows.WindowState.Maximized;  		e.Handled = true;  	}  	break;  }  
Missing Default,AvalonDock,FloatingWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FloatingWindow.cs,FilterMessage,The following switch statement is missing a default case: switch (e.Msg) {  case WM_SIZE:  case WM_MOVE:  	break;  case WM_NCRBUTTONDOWN:  	//Right button click on title area -> show context menu  	if (e.WParam.ToInt32 () == HTCAPTION) {  		short x = (short)((e.LParam.ToInt32 () & 0xFFFF));  		short y = (short)((e.LParam.ToInt32 () >> 16));  		OpenContextMenu (null' new Point (x' y));  		e.Handled = true;  	}  	break;  case WM_NCRBUTTONUP:  	//set as handled right button click on title area (after showing context menu)  	if (e.WParam.ToInt32 () == HTCAPTION) {  		e.Handled = true;  	}  	break;  }  
Missing Default,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,OnApplyTemplate,The following switch statement is missing a default case: switch (CorrectedAnchor) {  case AnchorStyle.Left:  case AnchorStyle.Right:  	{  		double newLeft = _initialStartPoint.X + e.HorizontalChange;  		newLeft = Math.Max (newLeft' 0.0);  		newLeft = Math.Min (newLeft' MaxWidth);  		Canvas.SetLeft (_resizerGhost' newLeft);  	}  	break;  case AnchorStyle.Top:  case AnchorStyle.Bottom:  	{  		double newTop = _initialStartPoint.Y + e.VerticalChange;  		newTop = Math.Max (newTop' 0.0);  		newTop = Math.Min (newTop' MaxHeight);  		Canvas.SetTop (_resizerGhost' newTop);  	}  	break;  }  
Missing Default,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,OnApplyTemplate,The following switch statement is missing a default case: switch (CorrectedAnchor) {  case AnchorStyle.Left:  	{  		Width = Canvas.GetLeft (_resizerGhost) + _resizerGhost.Width;  		ApplyRegion (new Rect (0' 0' this.Width' this.Height));  	}  	break;  case AnchorStyle.Right:  	{  		double newWidth = MaxWidth - Canvas.GetLeft (_resizerGhost);  		Left -= newWidth - Width;  		Width = newWidth;  		ApplyRegion (new Rect (0' 0' this.Width' this.Height));  	}  	break;  case AnchorStyle.Top:  	{  		Height = Canvas.GetTop (_resizerGhost) + _resizerGhost.Height;  		ApplyRegion (new Rect (0' 0' this.Width' this.Height));  	}  	break;  case AnchorStyle.Bottom:  	{  		double newHeight = MaxHeight - Canvas.GetTop (_resizerGhost);  		Top -= newHeight - Height;  		Height = newHeight;  		ApplyRegion (new Rect (0' 0' this.Width' this.Height));  	}  	break;  }  
Missing Default,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,CloseWidthAnimation,The following switch statement is missing a default case: switch (CorrectedAnchor) {  case AnchorStyle.Right:  	newLeft = this.Left;  	if (this.Left + stepWidth >= wnd_Left + wnd_Width) {  		newLeft = wnd_Left + wnd_Width;  		wnd_TrimWidth = 0;  		stopTimer = true;  	} else {  		newLeft += stepWidth;  		wnd_TrimWidth -= stepWidth;  		wnd_TrimWidth = Math.Max (wnd_TrimWidth' 0);  	}  	//SetWindowRgn(new WindowInteropHelper(this).Handle' CreateRectRgn(0' 0' wnd_TrimWidth' wnd_TrimHeight)' true);  	ApplyRegion (new Rect (0' 0' wnd_TrimWidth' wnd_TrimHeight));  	this.Left = newLeft;  	break;  case AnchorStyle.Left:  	newLeft = this.Left;  	if (this.Left - stepWidth <= wnd_Left - wnd_Width) {  		newLeft = wnd_Left - wnd_Width;  		wnd_TrimWidth = 0;  		stopTimer = true;  	} else {  		newLeft -= stepWidth;  		wnd_TrimWidth -= stepWidth;  		wnd_TrimWidth = Math.Max (wnd_TrimWidth' 0);  	}  	this.Left = newLeft;  	//SetWindowRgn(new WindowInteropHelper(this).Handle' CreateRectRgn((int)(wnd_Left - this.Left)' 0' (int)(wnd_Width)' wnd_TrimHeight)' true);  	ApplyRegion (new Rect ((int)(wnd_Left - this.Left)' 0' (int)(wnd_Width)' wnd_TrimHeight));  	break;  case AnchorStyle.Bottom:  	newTop = this.Top;  	if (this.Top + stepHeight >= wnd_Top + wnd_Height) {  		newTop = wnd_Top + wnd_Height;  		wnd_TrimHeight = 0;  		stopTimer = true;  	} else {  		newTop += stepHeight;  		wnd_TrimHeight -= stepHeight;  		wnd_TrimHeight = Math.Max (wnd_TrimHeight' 0);  	}  	//SetWindowRgn(new WindowInteropHelper(this).Handle' CreateRectRgn(0' 0' wnd_TrimWidth' wnd_TrimHeight)' true);  	ApplyRegion (new Rect (0' 0' wnd_TrimWidth' wnd_TrimHeight));  	this.Top = newTop;  	break;  case AnchorStyle.Top:  	newTop = this.Top;  	if (this.Top - stepHeight <= wnd_Top - wnd_Height) {  		newTop = wnd_Top - wnd_Height;  		wnd_TrimHeight = 0;  		stopTimer = true;  	} else {  		newTop -= stepHeight;  		wnd_TrimHeight -= stepHeight;  		wnd_TrimHeight = Math.Max (wnd_TrimWidth' 0);  	}  	this.Top = newTop;  	ApplyRegion (new Rect (0' (int)(wnd_Top - this.Top)' wnd_TrimWidth' (int)(wnd_Height)));  	//SetWindowRgn(new WindowInteropHelper(this).Handle' CreateRectRgn(0' (int)(wnd_Top - this.Top)' wnd_TrimWidth' (int)(wnd_Height))' true);  	break;  }  
Missing Default,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,OpenWidthAnimation,The following switch statement is missing a default case: switch (CorrectedAnchor) {  case AnchorStyle.Right:  	{  		double newLeft = this.Left;  		if (this.Left - stepWidth <= wnd_Left - wnd_Width) {  			newLeft = wnd_Left - wnd_Width;  			wnd_TrimWidth = (int)wnd_Width;  			stopTimer = true;  		} else {  			newLeft -= stepWidth;  			wnd_TrimWidth += stepWidth;  		}  		Width = _targetWidth;  		this.Left = newLeft;  		ApplyRegion (new Rect (0' 0' wnd_TrimWidth' (int)wnd_Height - wnd_TrimHeight));  	}  	break;  case AnchorStyle.Left:  	{  		double newLeft = this.Left;  		if (this.Left + stepWidth >= wnd_Left) {  			newLeft = wnd_Left;  			wnd_TrimWidth = (int)wnd_Width;  			stopTimer = true;  		} else {  			newLeft += stepWidth;  			wnd_TrimWidth += stepWidth;  		}  		ApplyRegion (new Rect ((int)(wnd_Left - this.Left)' 0' (int)(wnd_Width)' (int)wnd_Height - wnd_TrimHeight));  		Width = _targetWidth;  		this.Left = newLeft;  	}  	break;  case AnchorStyle.Bottom:  	{  		double newTop = this.Top;  		if (this.Top - stepHeight <= wnd_Top - wnd_Height) {  			newTop = wnd_Top - wnd_Height;  			wnd_TrimHeight = (int)wnd_Height;  			stopTimer = true;  		} else {  			newTop -= stepHeight;  			wnd_TrimHeight += stepHeight;  		}  		ApplyRegion (new Rect (0' 0' (int)wnd_Width - wnd_TrimWidth' wnd_TrimHeight));  		Height = _targetHeight;  		this.Top = newTop;  	}  	break;  case AnchorStyle.Top:  	{  		double newTop = this.Top;  		if (this.Top + stepHeight >= wnd_Top) {  			newTop = wnd_Top;  			wnd_TrimHeight = (int)wnd_Height;  			stopTimer = true;  		} else {  			newTop += stepHeight;  			wnd_TrimHeight += stepHeight;  		}  		ApplyRegion (new Rect (0' (int)(wnd_Top - this.Top)' (int)wnd_Width - wnd_TrimWidth' (int)(wnd_Height)));  		Height = _targetHeight;  		this.Top = newTop;  	}  	break;  }  
Missing Default,AvalonDock,FlyoutPaneWindow,D:\newReposJune17\tltjr_Wish\AvalonDock\FlyoutPaneWindow.cs,OpenPane,The following switch statement is missing a default case: switch (CorrectedAnchor) {  case AnchorStyle.Left:  	Width = this._targetWidth;  	break;  case AnchorStyle.Right:  	Width = this._targetWidth;  	Left -= this.Width;  	break;  case AnchorStyle.Top:  	Height = this._targetHeight;  	break;  case AnchorStyle.Bottom:  	Height = this._targetHeight;  	Top -= this.Height;  	break;  }  
