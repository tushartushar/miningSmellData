Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,Cyclomatic complexity of the method is 24
Complex Method,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,Cyclomatic complexity of the method is 11
Long Statement,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The length of the statement  "						//Console.WriteLine("ReplaceOffset=" + replaceOffset + " RemovalLength="+replaceRemovalLength + " InsertLength=" + replaceInsertLength); " is 136.
Long Statement,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The length of the statement  "							} else if (expectedOffsets[i] == replaceOffset && replaceRemovalLength == 0 && anchors[i].MovementType == AnchorMovementType.AfterInsertion) { " is 142.
Long Statement,ICSharpCode.AvalonEdit.Highlighting,HtmlClipboardTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Highlighting\HtmlClipboardTests.cs,FullDocumentTest,The length of the statement  "			                "System<span style=\"color: #006400; \">.</span>Text<span style=\"color: #006400; \">;</span><br>" + Environment.NewLine + " is 122.
Long Statement,ICSharpCode.AvalonEdit.Highlighting,HtmlClipboardTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Highlighting\HtmlClipboardTests.cs,FullDocumentTest,The length of the statement  "			                "text =&nbsp;<span style=\"color: #191970; font-weight: bold; \">SomeMethod</span><span style=\"color: #006400; \">();</span>"' html); " is 134.
Empty Catch Block,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,CheckAdd10BillionElements,The method has an empty catch block.
Magic Number,ICSharpCode.AvalonEdit.Document,ChangeTrackingTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\ChangeTrackingTest.cs,ForwardChanges,The following statement contains a magic number: document.Replace(0' 7' "nw");
Magic Number,ICSharpCode.AvalonEdit.Document,ChangeTrackingTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\ChangeTrackingTest.cs,ForwardChanges,The following statement contains a magic number: Assert.AreEqual(2' arr.Length);
Magic Number,ICSharpCode.AvalonEdit.Document,ChangeTrackingTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\ChangeTrackingTest.cs,BackwardChanges,The following statement contains a magic number: document.Replace(0' 7' "nw");
Magic Number,ICSharpCode.AvalonEdit.Document,ChangeTrackingTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\ChangeTrackingTest.cs,BackwardChanges,The following statement contains a magic number: Assert.AreEqual(2' arr.Length);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,AnchorsSurviveDeletion,The following statement contains a magic number: document.Text = new string(' '' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,AnchorsSurviveDeletion,The following statement contains a magic number: TextAnchor[] a1 = new TextAnchor[11];
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,AnchorsSurviveDeletion,The following statement contains a magic number: TextAnchor[] a2 = new TextAnchor[11];
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,AnchorsSurviveDeletion,The following statement contains a magic number: i < 11
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,AnchorsSurviveDeletion,The following statement contains a magic number: i < 11
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,AnchorsSurviveDeletion,The following statement contains a magic number: document.Remove(1' 8);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,AnchorsSurviveDeletion,The following statement contains a magic number: i < 11
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAnchors,The following statement contains a magic number: document.Text = new string(' '' 1000);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAnchors,The following statement contains a magic number: int offset = rnd.Next(1000);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAnchors,The following statement contains a magic number: i < 1000
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndGCAnchors,The following statement contains a magic number: document.Text = new string(' '' 1000);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndGCAnchors,The following statement contains a magic number: int c = rnd.Next(50);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndGCAnchors,The following statement contains a magic number: int offset = rnd.Next(1000);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndGCAnchors,The following statement contains a magic number: rnd.Next(2) == 0
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndGCAnchors,The following statement contains a magic number: t < 250
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,MoveAnchorsDuringReplace,The following statement contains a magic number: TextAnchor middleDeletable = document.CreateAnchor(2);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,MoveAnchorsDuringReplace,The following statement contains a magic number: TextAnchor middleSurvivorLeft = document.CreateAnchor(2);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,MoveAnchorsDuringReplace,The following statement contains a magic number: TextAnchor middleSurvivorRight = document.CreateAnchor(2);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,MoveAnchorsDuringReplace,The following statement contains a magic number: TextAnchor end = document.CreateAnchor(3);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,MoveAnchorsDuringReplace,The following statement contains a magic number: document.Replace(1' 2' "BxC");
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,MoveAnchorsDuringReplace,The following statement contains a magic number: Assert.AreEqual(4' middleSurvivorRight.Offset);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,MoveAnchorsDuringReplace,The following statement contains a magic number: Assert.AreEqual(4' end.Offset);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following statement contains a magic number: document.Text = new string(' '' 1000);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following statement contains a magic number: int c = rnd.Next(50);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following statement contains a magic number: switch (rnd.Next(5)) {  					case 0:  						//Console.WriteLine("Add c=" + c + " anchors");  						for (int i = 0; i < c; i++) {  							int offset = rnd.Next(document.TextLength);  							TextAnchor anchor = document.CreateAnchor(offset);  							if (rnd.Next(2) == 0)  								anchor.MovementType = AnchorMovementType.BeforeInsertion;  							else  								anchor.MovementType = AnchorMovementType.AfterInsertion;  							anchor.SurviveDeletion = rnd.Next(2) == 0;  							anchors.Add(anchor);  							expectedOffsets.Add(offset);  						}  						break;  					case 1:  						if (c <= anchors.Count) {  							//Console.WriteLine("Remove c=" + c + " anchors");  							anchors.RemoveRange(0' c);  							expectedOffsets.RemoveRange(0' c);  							GC.Collect();  						}  						break;  					case 2:  						int insertOffset = rnd.Next(document.TextLength);  						int insertLength = rnd.Next(1000);  						//Console.WriteLine("insertOffset=" + insertOffset + " insertLength="+insertLength);  						document.Insert(insertOffset' new string(' '' insertLength));  						for (int i = 0; i < anchors.Count; i++) {  							if (anchors[i].MovementType == AnchorMovementType.BeforeInsertion) {  								if (expectedOffsets[i] > insertOffset)  									expectedOffsets[i] += insertLength;  							} else {  								if (expectedOffsets[i] >= insertOffset)  									expectedOffsets[i] += insertLength;  							}  						}  						break;  					case 3:  						int removalOffset = rnd.Next(document.TextLength);  						int removalLength = rnd.Next(document.TextLength - removalOffset);  						//Console.WriteLine("RemovalOffset=" + removalOffset + " RemovalLength="+removalLength);  						document.Remove(removalOffset' removalLength);  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > removalOffset && expectedOffsets[i] < removalOffset + removalLength) {  								if (anchors[i].SurviveDeletion) {  									expectedOffsets[i] = removalOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > removalOffset) {  								expectedOffsets[i] -= removalLength;  							}  						}  						break;  					case 4:  						int replaceOffset = rnd.Next(document.TextLength);  						int replaceRemovalLength = rnd.Next(document.TextLength - replaceOffset);  						int replaceInsertLength = rnd.Next(1000);  						//Console.WriteLine("ReplaceOffset=" + replaceOffset + " RemovalLength="+replaceRemovalLength + " InsertLength=" + replaceInsertLength);  						document.Replace(replaceOffset' replaceRemovalLength' new string(' '' replaceInsertLength));  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > replaceOffset && expectedOffsets[i] < replaceOffset + replaceRemovalLength) {  								if (anchors[i].SurviveDeletion) {  									if (anchors[i].MovementType == AnchorMovementType.AfterInsertion)  										expectedOffsets[i] = replaceOffset + replaceInsertLength;  									else  										expectedOffsets[i] = replaceOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > replaceOffset) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							} else if (expectedOffsets[i] == replaceOffset && replaceRemovalLength == 0 && anchors[i].MovementType == AnchorMovementType.AfterInsertion) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							}  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following statement contains a magic number: switch (rnd.Next(5)) {  					case 0:  						//Console.WriteLine("Add c=" + c + " anchors");  						for (int i = 0; i < c; i++) {  							int offset = rnd.Next(document.TextLength);  							TextAnchor anchor = document.CreateAnchor(offset);  							if (rnd.Next(2) == 0)  								anchor.MovementType = AnchorMovementType.BeforeInsertion;  							else  								anchor.MovementType = AnchorMovementType.AfterInsertion;  							anchor.SurviveDeletion = rnd.Next(2) == 0;  							anchors.Add(anchor);  							expectedOffsets.Add(offset);  						}  						break;  					case 1:  						if (c <= anchors.Count) {  							//Console.WriteLine("Remove c=" + c + " anchors");  							anchors.RemoveRange(0' c);  							expectedOffsets.RemoveRange(0' c);  							GC.Collect();  						}  						break;  					case 2:  						int insertOffset = rnd.Next(document.TextLength);  						int insertLength = rnd.Next(1000);  						//Console.WriteLine("insertOffset=" + insertOffset + " insertLength="+insertLength);  						document.Insert(insertOffset' new string(' '' insertLength));  						for (int i = 0; i < anchors.Count; i++) {  							if (anchors[i].MovementType == AnchorMovementType.BeforeInsertion) {  								if (expectedOffsets[i] > insertOffset)  									expectedOffsets[i] += insertLength;  							} else {  								if (expectedOffsets[i] >= insertOffset)  									expectedOffsets[i] += insertLength;  							}  						}  						break;  					case 3:  						int removalOffset = rnd.Next(document.TextLength);  						int removalLength = rnd.Next(document.TextLength - removalOffset);  						//Console.WriteLine("RemovalOffset=" + removalOffset + " RemovalLength="+removalLength);  						document.Remove(removalOffset' removalLength);  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > removalOffset && expectedOffsets[i] < removalOffset + removalLength) {  								if (anchors[i].SurviveDeletion) {  									expectedOffsets[i] = removalOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > removalOffset) {  								expectedOffsets[i] -= removalLength;  							}  						}  						break;  					case 4:  						int replaceOffset = rnd.Next(document.TextLength);  						int replaceRemovalLength = rnd.Next(document.TextLength - replaceOffset);  						int replaceInsertLength = rnd.Next(1000);  						//Console.WriteLine("ReplaceOffset=" + replaceOffset + " RemovalLength="+replaceRemovalLength + " InsertLength=" + replaceInsertLength);  						document.Replace(replaceOffset' replaceRemovalLength' new string(' '' replaceInsertLength));  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > replaceOffset && expectedOffsets[i] < replaceOffset + replaceRemovalLength) {  								if (anchors[i].SurviveDeletion) {  									if (anchors[i].MovementType == AnchorMovementType.AfterInsertion)  										expectedOffsets[i] = replaceOffset + replaceInsertLength;  									else  										expectedOffsets[i] = replaceOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > replaceOffset) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							} else if (expectedOffsets[i] == replaceOffset && replaceRemovalLength == 0 && anchors[i].MovementType == AnchorMovementType.AfterInsertion) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							}  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following statement contains a magic number: switch (rnd.Next(5)) {  					case 0:  						//Console.WriteLine("Add c=" + c + " anchors");  						for (int i = 0; i < c; i++) {  							int offset = rnd.Next(document.TextLength);  							TextAnchor anchor = document.CreateAnchor(offset);  							if (rnd.Next(2) == 0)  								anchor.MovementType = AnchorMovementType.BeforeInsertion;  							else  								anchor.MovementType = AnchorMovementType.AfterInsertion;  							anchor.SurviveDeletion = rnd.Next(2) == 0;  							anchors.Add(anchor);  							expectedOffsets.Add(offset);  						}  						break;  					case 1:  						if (c <= anchors.Count) {  							//Console.WriteLine("Remove c=" + c + " anchors");  							anchors.RemoveRange(0' c);  							expectedOffsets.RemoveRange(0' c);  							GC.Collect();  						}  						break;  					case 2:  						int insertOffset = rnd.Next(document.TextLength);  						int insertLength = rnd.Next(1000);  						//Console.WriteLine("insertOffset=" + insertOffset + " insertLength="+insertLength);  						document.Insert(insertOffset' new string(' '' insertLength));  						for (int i = 0; i < anchors.Count; i++) {  							if (anchors[i].MovementType == AnchorMovementType.BeforeInsertion) {  								if (expectedOffsets[i] > insertOffset)  									expectedOffsets[i] += insertLength;  							} else {  								if (expectedOffsets[i] >= insertOffset)  									expectedOffsets[i] += insertLength;  							}  						}  						break;  					case 3:  						int removalOffset = rnd.Next(document.TextLength);  						int removalLength = rnd.Next(document.TextLength - removalOffset);  						//Console.WriteLine("RemovalOffset=" + removalOffset + " RemovalLength="+removalLength);  						document.Remove(removalOffset' removalLength);  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > removalOffset && expectedOffsets[i] < removalOffset + removalLength) {  								if (anchors[i].SurviveDeletion) {  									expectedOffsets[i] = removalOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > removalOffset) {  								expectedOffsets[i] -= removalLength;  							}  						}  						break;  					case 4:  						int replaceOffset = rnd.Next(document.TextLength);  						int replaceRemovalLength = rnd.Next(document.TextLength - replaceOffset);  						int replaceInsertLength = rnd.Next(1000);  						//Console.WriteLine("ReplaceOffset=" + replaceOffset + " RemovalLength="+replaceRemovalLength + " InsertLength=" + replaceInsertLength);  						document.Replace(replaceOffset' replaceRemovalLength' new string(' '' replaceInsertLength));  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > replaceOffset && expectedOffsets[i] < replaceOffset + replaceRemovalLength) {  								if (anchors[i].SurviveDeletion) {  									if (anchors[i].MovementType == AnchorMovementType.AfterInsertion)  										expectedOffsets[i] = replaceOffset + replaceInsertLength;  									else  										expectedOffsets[i] = replaceOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > replaceOffset) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							} else if (expectedOffsets[i] == replaceOffset && replaceRemovalLength == 0 && anchors[i].MovementType == AnchorMovementType.AfterInsertion) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							}  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following statement contains a magic number: switch (rnd.Next(5)) {  					case 0:  						//Console.WriteLine("Add c=" + c + " anchors");  						for (int i = 0; i < c; i++) {  							int offset = rnd.Next(document.TextLength);  							TextAnchor anchor = document.CreateAnchor(offset);  							if (rnd.Next(2) == 0)  								anchor.MovementType = AnchorMovementType.BeforeInsertion;  							else  								anchor.MovementType = AnchorMovementType.AfterInsertion;  							anchor.SurviveDeletion = rnd.Next(2) == 0;  							anchors.Add(anchor);  							expectedOffsets.Add(offset);  						}  						break;  					case 1:  						if (c <= anchors.Count) {  							//Console.WriteLine("Remove c=" + c + " anchors");  							anchors.RemoveRange(0' c);  							expectedOffsets.RemoveRange(0' c);  							GC.Collect();  						}  						break;  					case 2:  						int insertOffset = rnd.Next(document.TextLength);  						int insertLength = rnd.Next(1000);  						//Console.WriteLine("insertOffset=" + insertOffset + " insertLength="+insertLength);  						document.Insert(insertOffset' new string(' '' insertLength));  						for (int i = 0; i < anchors.Count; i++) {  							if (anchors[i].MovementType == AnchorMovementType.BeforeInsertion) {  								if (expectedOffsets[i] > insertOffset)  									expectedOffsets[i] += insertLength;  							} else {  								if (expectedOffsets[i] >= insertOffset)  									expectedOffsets[i] += insertLength;  							}  						}  						break;  					case 3:  						int removalOffset = rnd.Next(document.TextLength);  						int removalLength = rnd.Next(document.TextLength - removalOffset);  						//Console.WriteLine("RemovalOffset=" + removalOffset + " RemovalLength="+removalLength);  						document.Remove(removalOffset' removalLength);  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > removalOffset && expectedOffsets[i] < removalOffset + removalLength) {  								if (anchors[i].SurviveDeletion) {  									expectedOffsets[i] = removalOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > removalOffset) {  								expectedOffsets[i] -= removalLength;  							}  						}  						break;  					case 4:  						int replaceOffset = rnd.Next(document.TextLength);  						int replaceRemovalLength = rnd.Next(document.TextLength - replaceOffset);  						int replaceInsertLength = rnd.Next(1000);  						//Console.WriteLine("ReplaceOffset=" + replaceOffset + " RemovalLength="+replaceRemovalLength + " InsertLength=" + replaceInsertLength);  						document.Replace(replaceOffset' replaceRemovalLength' new string(' '' replaceInsertLength));  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > replaceOffset && expectedOffsets[i] < replaceOffset + replaceRemovalLength) {  								if (anchors[i].SurviveDeletion) {  									if (anchors[i].MovementType == AnchorMovementType.AfterInsertion)  										expectedOffsets[i] = replaceOffset + replaceInsertLength;  									else  										expectedOffsets[i] = replaceOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > replaceOffset) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							} else if (expectedOffsets[i] == replaceOffset && replaceRemovalLength == 0 && anchors[i].MovementType == AnchorMovementType.AfterInsertion) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							}  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following statement contains a magic number: switch (rnd.Next(5)) {  					case 0:  						//Console.WriteLine("Add c=" + c + " anchors");  						for (int i = 0; i < c; i++) {  							int offset = rnd.Next(document.TextLength);  							TextAnchor anchor = document.CreateAnchor(offset);  							if (rnd.Next(2) == 0)  								anchor.MovementType = AnchorMovementType.BeforeInsertion;  							else  								anchor.MovementType = AnchorMovementType.AfterInsertion;  							anchor.SurviveDeletion = rnd.Next(2) == 0;  							anchors.Add(anchor);  							expectedOffsets.Add(offset);  						}  						break;  					case 1:  						if (c <= anchors.Count) {  							//Console.WriteLine("Remove c=" + c + " anchors");  							anchors.RemoveRange(0' c);  							expectedOffsets.RemoveRange(0' c);  							GC.Collect();  						}  						break;  					case 2:  						int insertOffset = rnd.Next(document.TextLength);  						int insertLength = rnd.Next(1000);  						//Console.WriteLine("insertOffset=" + insertOffset + " insertLength="+insertLength);  						document.Insert(insertOffset' new string(' '' insertLength));  						for (int i = 0; i < anchors.Count; i++) {  							if (anchors[i].MovementType == AnchorMovementType.BeforeInsertion) {  								if (expectedOffsets[i] > insertOffset)  									expectedOffsets[i] += insertLength;  							} else {  								if (expectedOffsets[i] >= insertOffset)  									expectedOffsets[i] += insertLength;  							}  						}  						break;  					case 3:  						int removalOffset = rnd.Next(document.TextLength);  						int removalLength = rnd.Next(document.TextLength - removalOffset);  						//Console.WriteLine("RemovalOffset=" + removalOffset + " RemovalLength="+removalLength);  						document.Remove(removalOffset' removalLength);  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > removalOffset && expectedOffsets[i] < removalOffset + removalLength) {  								if (anchors[i].SurviveDeletion) {  									expectedOffsets[i] = removalOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > removalOffset) {  								expectedOffsets[i] -= removalLength;  							}  						}  						break;  					case 4:  						int replaceOffset = rnd.Next(document.TextLength);  						int replaceRemovalLength = rnd.Next(document.TextLength - replaceOffset);  						int replaceInsertLength = rnd.Next(1000);  						//Console.WriteLine("ReplaceOffset=" + replaceOffset + " RemovalLength="+replaceRemovalLength + " InsertLength=" + replaceInsertLength);  						document.Replace(replaceOffset' replaceRemovalLength' new string(' '' replaceInsertLength));  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > replaceOffset && expectedOffsets[i] < replaceOffset + replaceRemovalLength) {  								if (anchors[i].SurviveDeletion) {  									if (anchors[i].MovementType == AnchorMovementType.AfterInsertion)  										expectedOffsets[i] = replaceOffset + replaceInsertLength;  									else  										expectedOffsets[i] = replaceOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > replaceOffset) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							} else if (expectedOffsets[i] == replaceOffset && replaceRemovalLength == 0 && anchors[i].MovementType == AnchorMovementType.AfterInsertion) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							}  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following statement contains a magic number: switch (rnd.Next(5)) {  					case 0:  						//Console.WriteLine("Add c=" + c + " anchors");  						for (int i = 0; i < c; i++) {  							int offset = rnd.Next(document.TextLength);  							TextAnchor anchor = document.CreateAnchor(offset);  							if (rnd.Next(2) == 0)  								anchor.MovementType = AnchorMovementType.BeforeInsertion;  							else  								anchor.MovementType = AnchorMovementType.AfterInsertion;  							anchor.SurviveDeletion = rnd.Next(2) == 0;  							anchors.Add(anchor);  							expectedOffsets.Add(offset);  						}  						break;  					case 1:  						if (c <= anchors.Count) {  							//Console.WriteLine("Remove c=" + c + " anchors");  							anchors.RemoveRange(0' c);  							expectedOffsets.RemoveRange(0' c);  							GC.Collect();  						}  						break;  					case 2:  						int insertOffset = rnd.Next(document.TextLength);  						int insertLength = rnd.Next(1000);  						//Console.WriteLine("insertOffset=" + insertOffset + " insertLength="+insertLength);  						document.Insert(insertOffset' new string(' '' insertLength));  						for (int i = 0; i < anchors.Count; i++) {  							if (anchors[i].MovementType == AnchorMovementType.BeforeInsertion) {  								if (expectedOffsets[i] > insertOffset)  									expectedOffsets[i] += insertLength;  							} else {  								if (expectedOffsets[i] >= insertOffset)  									expectedOffsets[i] += insertLength;  							}  						}  						break;  					case 3:  						int removalOffset = rnd.Next(document.TextLength);  						int removalLength = rnd.Next(document.TextLength - removalOffset);  						//Console.WriteLine("RemovalOffset=" + removalOffset + " RemovalLength="+removalLength);  						document.Remove(removalOffset' removalLength);  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > removalOffset && expectedOffsets[i] < removalOffset + removalLength) {  								if (anchors[i].SurviveDeletion) {  									expectedOffsets[i] = removalOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > removalOffset) {  								expectedOffsets[i] -= removalLength;  							}  						}  						break;  					case 4:  						int replaceOffset = rnd.Next(document.TextLength);  						int replaceRemovalLength = rnd.Next(document.TextLength - replaceOffset);  						int replaceInsertLength = rnd.Next(1000);  						//Console.WriteLine("ReplaceOffset=" + replaceOffset + " RemovalLength="+replaceRemovalLength + " InsertLength=" + replaceInsertLength);  						document.Replace(replaceOffset' replaceRemovalLength' new string(' '' replaceInsertLength));  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > replaceOffset && expectedOffsets[i] < replaceOffset + replaceRemovalLength) {  								if (anchors[i].SurviveDeletion) {  									if (anchors[i].MovementType == AnchorMovementType.AfterInsertion)  										expectedOffsets[i] = replaceOffset + replaceInsertLength;  									else  										expectedOffsets[i] = replaceOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > replaceOffset) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							} else if (expectedOffsets[i] == replaceOffset && replaceRemovalLength == 0 && anchors[i].MovementType == AnchorMovementType.AfterInsertion) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							}  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following statement contains a magic number: switch (rnd.Next(5)) {  					case 0:  						//Console.WriteLine("Add c=" + c + " anchors");  						for (int i = 0; i < c; i++) {  							int offset = rnd.Next(document.TextLength);  							TextAnchor anchor = document.CreateAnchor(offset);  							if (rnd.Next(2) == 0)  								anchor.MovementType = AnchorMovementType.BeforeInsertion;  							else  								anchor.MovementType = AnchorMovementType.AfterInsertion;  							anchor.SurviveDeletion = rnd.Next(2) == 0;  							anchors.Add(anchor);  							expectedOffsets.Add(offset);  						}  						break;  					case 1:  						if (c <= anchors.Count) {  							//Console.WriteLine("Remove c=" + c + " anchors");  							anchors.RemoveRange(0' c);  							expectedOffsets.RemoveRange(0' c);  							GC.Collect();  						}  						break;  					case 2:  						int insertOffset = rnd.Next(document.TextLength);  						int insertLength = rnd.Next(1000);  						//Console.WriteLine("insertOffset=" + insertOffset + " insertLength="+insertLength);  						document.Insert(insertOffset' new string(' '' insertLength));  						for (int i = 0; i < anchors.Count; i++) {  							if (anchors[i].MovementType == AnchorMovementType.BeforeInsertion) {  								if (expectedOffsets[i] > insertOffset)  									expectedOffsets[i] += insertLength;  							} else {  								if (expectedOffsets[i] >= insertOffset)  									expectedOffsets[i] += insertLength;  							}  						}  						break;  					case 3:  						int removalOffset = rnd.Next(document.TextLength);  						int removalLength = rnd.Next(document.TextLength - removalOffset);  						//Console.WriteLine("RemovalOffset=" + removalOffset + " RemovalLength="+removalLength);  						document.Remove(removalOffset' removalLength);  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > removalOffset && expectedOffsets[i] < removalOffset + removalLength) {  								if (anchors[i].SurviveDeletion) {  									expectedOffsets[i] = removalOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > removalOffset) {  								expectedOffsets[i] -= removalLength;  							}  						}  						break;  					case 4:  						int replaceOffset = rnd.Next(document.TextLength);  						int replaceRemovalLength = rnd.Next(document.TextLength - replaceOffset);  						int replaceInsertLength = rnd.Next(1000);  						//Console.WriteLine("ReplaceOffset=" + replaceOffset + " RemovalLength="+replaceRemovalLength + " InsertLength=" + replaceInsertLength);  						document.Replace(replaceOffset' replaceRemovalLength' new string(' '' replaceInsertLength));  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > replaceOffset && expectedOffsets[i] < replaceOffset + replaceRemovalLength) {  								if (anchors[i].SurviveDeletion) {  									if (anchors[i].MovementType == AnchorMovementType.AfterInsertion)  										expectedOffsets[i] = replaceOffset + replaceInsertLength;  									else  										expectedOffsets[i] = replaceOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > replaceOffset) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							} else if (expectedOffsets[i] == replaceOffset && replaceRemovalLength == 0 && anchors[i].MovementType == AnchorMovementType.AfterInsertion) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							}  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following statement contains a magic number: switch (rnd.Next(5)) {  					case 0:  						//Console.WriteLine("Add c=" + c + " anchors");  						for (int i = 0; i < c; i++) {  							int offset = rnd.Next(document.TextLength);  							TextAnchor anchor = document.CreateAnchor(offset);  							if (rnd.Next(2) == 0)  								anchor.MovementType = AnchorMovementType.BeforeInsertion;  							else  								anchor.MovementType = AnchorMovementType.AfterInsertion;  							anchor.SurviveDeletion = rnd.Next(2) == 0;  							anchors.Add(anchor);  							expectedOffsets.Add(offset);  						}  						break;  					case 1:  						if (c <= anchors.Count) {  							//Console.WriteLine("Remove c=" + c + " anchors");  							anchors.RemoveRange(0' c);  							expectedOffsets.RemoveRange(0' c);  							GC.Collect();  						}  						break;  					case 2:  						int insertOffset = rnd.Next(document.TextLength);  						int insertLength = rnd.Next(1000);  						//Console.WriteLine("insertOffset=" + insertOffset + " insertLength="+insertLength);  						document.Insert(insertOffset' new string(' '' insertLength));  						for (int i = 0; i < anchors.Count; i++) {  							if (anchors[i].MovementType == AnchorMovementType.BeforeInsertion) {  								if (expectedOffsets[i] > insertOffset)  									expectedOffsets[i] += insertLength;  							} else {  								if (expectedOffsets[i] >= insertOffset)  									expectedOffsets[i] += insertLength;  							}  						}  						break;  					case 3:  						int removalOffset = rnd.Next(document.TextLength);  						int removalLength = rnd.Next(document.TextLength - removalOffset);  						//Console.WriteLine("RemovalOffset=" + removalOffset + " RemovalLength="+removalLength);  						document.Remove(removalOffset' removalLength);  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > removalOffset && expectedOffsets[i] < removalOffset + removalLength) {  								if (anchors[i].SurviveDeletion) {  									expectedOffsets[i] = removalOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > removalOffset) {  								expectedOffsets[i] -= removalLength;  							}  						}  						break;  					case 4:  						int replaceOffset = rnd.Next(document.TextLength);  						int replaceRemovalLength = rnd.Next(document.TextLength - replaceOffset);  						int replaceInsertLength = rnd.Next(1000);  						//Console.WriteLine("ReplaceOffset=" + replaceOffset + " RemovalLength="+replaceRemovalLength + " InsertLength=" + replaceInsertLength);  						document.Replace(replaceOffset' replaceRemovalLength' new string(' '' replaceInsertLength));  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > replaceOffset && expectedOffsets[i] < replaceOffset + replaceRemovalLength) {  								if (anchors[i].SurviveDeletion) {  									if (anchors[i].MovementType == AnchorMovementType.AfterInsertion)  										expectedOffsets[i] = replaceOffset + replaceInsertLength;  									else  										expectedOffsets[i] = replaceOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > replaceOffset) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							} else if (expectedOffsets[i] == replaceOffset && replaceRemovalLength == 0 && anchors[i].MovementType == AnchorMovementType.AfterInsertion) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							}  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following statement contains a magic number: t < 250
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: document.Text = new string(' '' 1000);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: TextAnchor a = document.CreateAnchor(144);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: TextAnchor b = document.CreateAnchor(157);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: document.Insert(128' new string('a'' 13));
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: document.Insert(128' new string('a'' 13));
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: document.Remove(157' 13);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: document.Remove(157' 13);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: a = document.CreateAnchor(128);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: b = document.CreateAnchor(141);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: document.Insert(157' new string('b'' 13));
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: document.Insert(157' new string('b'' 13));
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: document.Remove(128' 13);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: document.Remove(128' 13);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: (i % 5) == 0
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,RepeatedTextDragDrop,The following statement contains a magic number: i < 20
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceSpacesWithTab,The following statement contains a magic number: TextAnchor after = document.CreateAnchor(5);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceSpacesWithTab,The following statement contains a magic number: TextAnchor survivingMiddle = document.CreateAnchor(2);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceSpacesWithTab,The following statement contains a magic number: TextAnchor deletedMiddle = document.CreateAnchor(3);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceSpacesWithTab,The following statement contains a magic number: document.Replace(1' 4' "\t"' OffsetChangeMappingType.CharacterReplace);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceSpacesWithTab,The following statement contains a magic number: Assert.AreEqual(2' after.Offset);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceSpacesWithTab,The following statement contains a magic number: Assert.AreEqual(2' survivingMiddle.Offset);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceSpacesWithTab,The following statement contains a magic number: Assert.AreEqual(2' deletedMiddle.Offset);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceTwoCharactersWithThree,The following statement contains a magic number: TextAnchor after = document.CreateAnchor(3);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceTwoCharactersWithThree,The following statement contains a magic number: TextAnchor middleB = document.CreateAnchor(2);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceTwoCharactersWithThree,The following statement contains a magic number: TextAnchor middleA = document.CreateAnchor(2);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceTwoCharactersWithThree,The following statement contains a magic number: document.Replace(1' 2' "123"' OffsetChangeMappingType.CharacterReplace);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceTwoCharactersWithThree,The following statement contains a magic number: Assert.AreEqual(4' after.Offset);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceTwoCharactersWithThree,The following statement contains a magic number: Assert.AreEqual(2' middleA.Offset);
Magic Number,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,ReplaceTwoCharactersWithThree,The following statement contains a magic number: Assert.AreEqual(2' middleB.Offset);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindInEmptyTree,The following statement contains a magic number: Assert.AreEqual(0' tree.FindOverlappingSegments(10' 20).Count);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindInEmptyTree,The following statement contains a magic number: Assert.AreEqual(0' tree.FindOverlappingSegments(10' 20).Count);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: var s1 = new TestTextSegment(5' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: var s1 = new TestTextSegment(5' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: var s2 = new TestTextSegment(10' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: var s2 = new TestTextSegment(10' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: Assert.AreSame(s1' tree.FindFirstSegmentWithStartAfter(-100));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: Assert.AreSame(s1' tree.FindFirstSegmentWithStartAfter(4));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: Assert.AreSame(s1' tree.FindFirstSegmentWithStartAfter(5));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: Assert.AreSame(s2' tree.FindFirstSegmentWithStartAfter(6));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: Assert.AreSame(s2' tree.FindFirstSegmentWithStartAfter(9));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: Assert.AreSame(s2' tree.FindFirstSegmentWithStartAfter(10));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: Assert.AreSame(null' tree.FindFirstSegmentWithStartAfter(11));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfter,The following statement contains a magic number: Assert.AreSame(null' tree.FindFirstSegmentWithStartAfter(100));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: var s1 = new TestTextSegment(5' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: var s1 = new TestTextSegment(5' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: var s1b = new TestTextSegment(5' 7);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: var s1b = new TestTextSegment(5' 7);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: var s2 = new TestTextSegment(10' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: var s2 = new TestTextSegment(10' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: var s2b = new TestTextSegment(10' 7);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: var s2b = new TestTextSegment(10' 7);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: Assert.AreSame(s1' tree.FindFirstSegmentWithStartAfter(-100));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: Assert.AreSame(s1' tree.FindFirstSegmentWithStartAfter(4));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: Assert.AreSame(s1' tree.FindFirstSegmentWithStartAfter(5));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: Assert.AreSame(s2' tree.FindFirstSegmentWithStartAfter(6));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: Assert.AreSame(s2' tree.FindFirstSegmentWithStartAfter(9));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: Assert.AreSame(s2' tree.FindFirstSegmentWithStartAfter(10));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: Assert.AreSame(null' tree.FindFirstSegmentWithStartAfter(11));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates,The following statement contains a magic number: Assert.AreSame(null' tree.FindFirstSegmentWithStartAfter(100));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates2,The following statement contains a magic number: var s1 = new TestTextSegment(5' 1);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates2,The following statement contains a magic number: var s2 = new TestTextSegment(5' 2);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates2,The following statement contains a magic number: var s2 = new TestTextSegment(5' 2);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates2,The following statement contains a magic number: var s3 = new TestTextSegment(5' 3);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates2,The following statement contains a magic number: var s3 = new TestTextSegment(5' 3);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates2,The following statement contains a magic number: var s4 = new TestTextSegment(5' 4);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates2,The following statement contains a magic number: var s4 = new TestTextSegment(5' 4);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates2,The following statement contains a magic number: Assert.AreSame(s1' tree.FindFirstSegmentWithStartAfter(4));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates2,The following statement contains a magic number: Assert.AreSame(s1' tree.FindFirstSegmentWithStartAfter(5));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,FindFirstSegmentWithStartAfterWithDuplicates2,The following statement contains a magic number: Assert.AreSame(null' tree.FindFirstSegmentWithStartAfter(6));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,AddSegments,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,AddSegments,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,AddSegments,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,AddSegments,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionBeforeAllSegments,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionBeforeAllSegments,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionBeforeAllSegments,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionBeforeAllSegments,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionBeforeAllSegments,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(5' 0' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionBeforeAllSegments,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(5' 0' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementBeforeAllSegmentsTouchingFirstSegment,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementBeforeAllSegmentsTouchingFirstSegment,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementBeforeAllSegmentsTouchingFirstSegment,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementBeforeAllSegmentsTouchingFirstSegment,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementBeforeAllSegmentsTouchingFirstSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(5' 5' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementBeforeAllSegmentsTouchingFirstSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(5' 5' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementBeforeAllSegmentsTouchingFirstSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(5' 5' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionAfterAllSegments,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionAfterAllSegments,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionAfterAllSegments,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionAfterAllSegments,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionAfterAllSegments,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(45' 0' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,InsertionAfterAllSegments,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(45' 0' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOverlappingWithStartOfSegment,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOverlappingWithStartOfSegment,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOverlappingWithStartOfSegment,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOverlappingWithStartOfSegment,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOverlappingWithStartOfSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(9' 7' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOverlappingWithStartOfSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(9' 7' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOverlappingWithStartOfSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(9' 7' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOfWholeSegment,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOfWholeSegment,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOfWholeSegment,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOfWholeSegment,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOfWholeSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(10' 20' 30));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOfWholeSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(10' 20' 30));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementOfWholeSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(10' 20' 30));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementAtEndOfSegment,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementAtEndOfSegment,The following statement contains a magic number: TestTextSegment s1 = AddSegment(10' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementAtEndOfSegment,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementAtEndOfSegment,The following statement contains a magic number: TestTextSegment s2 = AddSegment(15' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementAtEndOfSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(24' 6' 10));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementAtEndOfSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(24' 6' 10));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,ReplacementAtEndOfSegment,The following statement contains a magic number: ChangeDocument(new OffsetChangeMapEntry(24' 6' 10));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedNoDocumentChanges,The following statement contains a magic number: i < 1000
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedCloseNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(20)' rnd.Next(10));  						break;  					case 1:  						AddSegment(rnd.Next(20)' rnd.Next(20));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedCloseNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(20)' rnd.Next(10));  						break;  					case 1:  						AddSegment(rnd.Next(20)' rnd.Next(20));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedCloseNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(20)' rnd.Next(10));  						break;  					case 1:  						AddSegment(rnd.Next(20)' rnd.Next(20));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedCloseNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(20)' rnd.Next(10));  						break;  					case 1:  						AddSegment(rnd.Next(20)' rnd.Next(20));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedCloseNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(20)' rnd.Next(10));  						break;  					case 1:  						AddSegment(rnd.Next(20)' rnd.Next(20));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedCloseNoDocumentChanges,The following statement contains a magic number: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(20)' rnd.Next(10));  						break;  					case 1:  						AddSegment(rnd.Next(20)' rnd.Next(20));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedCloseNoDocumentChanges,The following statement contains a magic number: i < 1000
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedRetrievalTest,The following statement contains a magic number: AddSegment(rnd.Next(500)' rnd.Next(300));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedRetrievalTest,The following statement contains a magic number: AddSegment(rnd.Next(500)' rnd.Next(300));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedRetrievalTest,The following statement contains a magic number: i < 1000
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedRetrievalTest,The following statement contains a magic number: TestRetrieval(rnd.Next(1000) - 100' rnd.Next(500));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedRetrievalTest,The following statement contains a magic number: TestRetrieval(rnd.Next(1000) - 100' rnd.Next(500));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedRetrievalTest,The following statement contains a magic number: TestRetrieval(rnd.Next(1000) - 100' rnd.Next(500));
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedRetrievalTest,The following statement contains a magic number: i < 1000
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following statement contains a magic number: i < 500
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following statement contains a magic number: i < 500
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfter,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 3)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a \t \tb")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfter,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 3)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a \t \tb")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfter,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 3)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a \t \tb")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfterDoesNotSkipNewLine,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 3)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a \t \tb")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfterDoesNotSkipNewLine,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 3)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a \t \tb")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfterDoesNotSkipNewLine,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 3)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a \t \tb")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfterEmptyResult,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 0)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a b")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfterEmptyResult,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 0)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a b")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfterEndOfString,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 0)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a ")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfterEndOfString,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 0)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a ")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfterUntilEndOfString,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 3)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a \t \t")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfterUntilEndOfString,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 3)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a \t \t")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceAfterUntilEndOfString,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 3)' TextUtilities.GetWhitespaceAfter(new StringTextSource("a \t \t")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceBefore,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(1' 3)' TextUtilities.GetWhitespaceBefore(new StringTextSource("a\t \t b")' 4));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceBefore,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(1' 3)' TextUtilities.GetWhitespaceBefore(new StringTextSource("a\t \t b")' 4));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceBeforeDoesNotSkipNewLine,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 1)' TextUtilities.GetWhitespaceBefore(new StringTextSource("a\n b")' 3));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceBeforeDoesNotSkipNewLine,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 1)' TextUtilities.GetWhitespaceBefore(new StringTextSource("a\n b")' 3));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceBeforeEmptyResult,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 0)' TextUtilities.GetWhitespaceBefore(new StringTextSource(" a b")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceBeforeEmptyResult,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(2' 0)' TextUtilities.GetWhitespaceBefore(new StringTextSource(" a b")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceBeforeUntilStartOfString,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(0' 2)' TextUtilities.GetWhitespaceBefore(new StringTextSource(" \t a")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,TextUtilitiesTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextUtilitiesTests.cs,TestGetWhitespaceBeforeUntilStartOfString,The following statement contains a magic number: Assert.AreEqual(new SimpleSegment(0' 2)' TextUtilities.GetWhitespaceBefore(new StringTextSource(" \t a")' 2));
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,Setup,The following statement contains a magic number: heightTree = new HeightTree(document' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,SimpleCheck,The following statement contains a magic number: i <= 10
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,SimpleCheck,The following statement contains a magic number: SimpleCheck(4' 6);
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,SimpleCheck,The following statement contains a magic number: SimpleCheck(4' 6);
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,SimpleUncollapse,The following statement contains a magic number: CollapsedLineSection sec1 = heightTree.CollapseText(document.GetLineByNumber(4)' document.GetLineByNumber(6));
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,SimpleUncollapse,The following statement contains a magic number: CollapsedLineSection sec1 = heightTree.CollapseText(document.GetLineByNumber(4)' document.GetLineByNumber(6));
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,SimpleUncollapse,The following statement contains a magic number: i <= 10
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,FullCheck,The following statement contains a magic number: i <= 10
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,FullCheck,The following statement contains a magic number: to <= 10
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,FullCheck,The following statement contains a magic number: from <= 10
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,InsertInCollapsedSection,The following statement contains a magic number: CollapsedLineSection sec1 = heightTree.CollapseText(document.GetLineByNumber(4)' document.GetLineByNumber(6));
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,InsertInCollapsedSection,The following statement contains a magic number: CollapsedLineSection sec1 = heightTree.CollapseText(document.GetLineByNumber(4)' document.GetLineByNumber(6));
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,InsertInCollapsedSection,The following statement contains a magic number: document.Insert(document.GetLineByNumber(5).Offset' "a\nb\nc");
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,InsertInCollapsedSection,The following statement contains a magic number: i < 4
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,InsertInCollapsedSection,The following statement contains a magic number: i <= 8
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,InsertInCollapsedSection,The following statement contains a magic number: i <= 12
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveInCollapsedSection,The following statement contains a magic number: CollapsedLineSection sec1 = heightTree.CollapseText(document.GetLineByNumber(3)' document.GetLineByNumber(7));
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveInCollapsedSection,The following statement contains a magic number: CollapsedLineSection sec1 = heightTree.CollapseText(document.GetLineByNumber(3)' document.GetLineByNumber(7));
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveInCollapsedSection,The following statement contains a magic number: int line4Offset = document.GetLineByNumber(4).Offset;
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveInCollapsedSection,The following statement contains a magic number: int line6Offset = document.GetLineByNumber(6).Offset;
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveInCollapsedSection,The following statement contains a magic number: i < 3
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveInCollapsedSection,The following statement contains a magic number: i <= 5
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveInCollapsedSection,The following statement contains a magic number: i <= 8
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveEndOfCollapsedSection,The following statement contains a magic number: CollapsedLineSection sec1 = heightTree.CollapseText(document.GetLineByNumber(3)' document.GetLineByNumber(6));
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveEndOfCollapsedSection,The following statement contains a magic number: CollapsedLineSection sec1 = heightTree.CollapseText(document.GetLineByNumber(3)' document.GetLineByNumber(6));
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveEndOfCollapsedSection,The following statement contains a magic number: int line5Offset = document.GetLineByNumber(5).Offset;
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveEndOfCollapsedSection,The following statement contains a magic number: int line8Offset = document.GetLineByNumber(8).Offset;
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveEndOfCollapsedSection,The following statement contains a magic number: i < 3
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveEndOfCollapsedSection,The following statement contains a magic number: i <= 5
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveEndOfCollapsedSection,The following statement contains a magic number: i <= 7
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveCollapsedSection,The following statement contains a magic number: CollapsedLineSection sec1 = heightTree.CollapseText(document.GetLineByNumber(3)' document.GetLineByNumber(3));
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveCollapsedSection,The following statement contains a magic number: CollapsedLineSection sec1 = heightTree.CollapseText(document.GetLineByNumber(3)' document.GetLineByNumber(3));
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveCollapsedSection,The following statement contains a magic number: int line3Offset = document.GetLineByNumber(3).Offset;
Magic Number,ICSharpCode.AvalonEdit.Document,CollapsingTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\CollapsingTests.cs,RemoveCollapsedSection,The following statement contains a magic number: i <= 9
Magic Number,ICSharpCode.AvalonEdit.Document,HeightTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\HeightTests.cs,Setup,The following statement contains a magic number: heightTree = new HeightTree(document' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,HeightTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\HeightTests.cs,TestLinesRemoved,The following statement contains a magic number: document.Remove(5' 4);
Magic Number,ICSharpCode.AvalonEdit.Document,HeightTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\HeightTests.cs,TestLinesRemoved,The following statement contains a magic number: document.Remove(5' 4);
Magic Number,ICSharpCode.AvalonEdit.Document,HeightTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\HeightTests.cs,TestHeightChanged,The following statement contains a magic number: heightTree.SetHeight(document.GetLineByNumber(4)' 100);
Magic Number,ICSharpCode.AvalonEdit.Document,HeightTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\HeightTests.cs,TestHeightChanged,The following statement contains a magic number: heightTree.SetHeight(document.GetLineByNumber(4)' 100);
Magic Number,ICSharpCode.AvalonEdit.Document,HeightTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\HeightTests.cs,TestLinesInserted,The following statement contains a magic number: heightTree.SetHeight(document.Lines[0]' 100);
Magic Number,ICSharpCode.AvalonEdit.Document,HeightTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\HeightTests.cs,TestLinesInserted,The following statement contains a magic number: heightTree.SetHeight(document.Lines[1]' 1000);
Magic Number,ICSharpCode.AvalonEdit.Document,HeightTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\HeightTests.cs,TestLinesInserted,The following statement contains a magic number: heightTree.SetHeight(document.Lines[2]' 10000);
Magic Number,ICSharpCode.AvalonEdit.Document,HeightTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\HeightTests.cs,TestLinesInserted,The following statement contains a magic number: heightTree.SetHeight(document.Lines[2]' 10000);
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,ShortReplacements,The following statement contains a magic number: char[] buffer = new char[20];
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,ShortReplacements,The following statement contains a magic number: int newTextLength = rnd.Next(0' 20);
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,ShortReplacements,The following statement contains a magic number: i < 2500
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,LargeReplacements,The following statement contains a magic number: char[] buffer = new char[1000];
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,LargeReplacements,The following statement contains a magic number: int length = rnd.Next(0' (document.TextLength - offset) / 4);
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,LargeReplacements,The following statement contains a magic number: int newTextLength = rnd.Next(0' 1000);
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,LargeReplacements,The following statement contains a magic number: i < 20
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CheckLines,The following statement contains a magic number: Assert.AreEqual(2' line.DelimiterLength);
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: char[] buffer = new char[20];
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: HeightTree heightTree = new HeightTree(document' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: switch (rnd.Next(0' 10)) {  					case 0:  					case 1:  					case 2:  					case 3:  					case 4:  					case 5:  						int offset = rnd.Next(0' document.TextLength);  						int length = rnd.Next(0' document.TextLength - offset);  						int newTextLength = rnd.Next(0' 20);  						for (int j = 0; j < newTextLength; j++) {  							buffer[j] = chars[rnd.Next(0' chars.Length)];  						}  						  						document.Replace(offset' length' new string(buffer' 0' newTextLength));  						break;  					case 6:  					case 7:  						int startLine = rnd.Next(1' document.LineCount + 1);  						int endLine = rnd.Next(startLine' document.LineCount + 1);  						collapsedSections.Add(heightTree.CollapseText(document.GetLineByNumber(startLine)' document.GetLineByNumber(endLine)));  						break;  					case 8:  						if (collapsedSections.Count > 0) {  							CollapsedLineSection cs = collapsedSections[rnd.Next(0' collapsedSections.Count)];  							// unless the text section containing the CollapsedSection was deleted:  							if (cs.Start != null) {  								cs.Uncollapse();  							}  							collapsedSections.Remove(cs);  						}  						break;  					case 9:  						foreach (DocumentLine ls in document.Lines) {  							heightTree.SetHeight(ls' ls.LineNumber);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: switch (rnd.Next(0' 10)) {  					case 0:  					case 1:  					case 2:  					case 3:  					case 4:  					case 5:  						int offset = rnd.Next(0' document.TextLength);  						int length = rnd.Next(0' document.TextLength - offset);  						int newTextLength = rnd.Next(0' 20);  						for (int j = 0; j < newTextLength; j++) {  							buffer[j] = chars[rnd.Next(0' chars.Length)];  						}  						  						document.Replace(offset' length' new string(buffer' 0' newTextLength));  						break;  					case 6:  					case 7:  						int startLine = rnd.Next(1' document.LineCount + 1);  						int endLine = rnd.Next(startLine' document.LineCount + 1);  						collapsedSections.Add(heightTree.CollapseText(document.GetLineByNumber(startLine)' document.GetLineByNumber(endLine)));  						break;  					case 8:  						if (collapsedSections.Count > 0) {  							CollapsedLineSection cs = collapsedSections[rnd.Next(0' collapsedSections.Count)];  							// unless the text section containing the CollapsedSection was deleted:  							if (cs.Start != null) {  								cs.Uncollapse();  							}  							collapsedSections.Remove(cs);  						}  						break;  					case 9:  						foreach (DocumentLine ls in document.Lines) {  							heightTree.SetHeight(ls' ls.LineNumber);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: switch (rnd.Next(0' 10)) {  					case 0:  					case 1:  					case 2:  					case 3:  					case 4:  					case 5:  						int offset = rnd.Next(0' document.TextLength);  						int length = rnd.Next(0' document.TextLength - offset);  						int newTextLength = rnd.Next(0' 20);  						for (int j = 0; j < newTextLength; j++) {  							buffer[j] = chars[rnd.Next(0' chars.Length)];  						}  						  						document.Replace(offset' length' new string(buffer' 0' newTextLength));  						break;  					case 6:  					case 7:  						int startLine = rnd.Next(1' document.LineCount + 1);  						int endLine = rnd.Next(startLine' document.LineCount + 1);  						collapsedSections.Add(heightTree.CollapseText(document.GetLineByNumber(startLine)' document.GetLineByNumber(endLine)));  						break;  					case 8:  						if (collapsedSections.Count > 0) {  							CollapsedLineSection cs = collapsedSections[rnd.Next(0' collapsedSections.Count)];  							// unless the text section containing the CollapsedSection was deleted:  							if (cs.Start != null) {  								cs.Uncollapse();  							}  							collapsedSections.Remove(cs);  						}  						break;  					case 9:  						foreach (DocumentLine ls in document.Lines) {  							heightTree.SetHeight(ls' ls.LineNumber);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: switch (rnd.Next(0' 10)) {  					case 0:  					case 1:  					case 2:  					case 3:  					case 4:  					case 5:  						int offset = rnd.Next(0' document.TextLength);  						int length = rnd.Next(0' document.TextLength - offset);  						int newTextLength = rnd.Next(0' 20);  						for (int j = 0; j < newTextLength; j++) {  							buffer[j] = chars[rnd.Next(0' chars.Length)];  						}  						  						document.Replace(offset' length' new string(buffer' 0' newTextLength));  						break;  					case 6:  					case 7:  						int startLine = rnd.Next(1' document.LineCount + 1);  						int endLine = rnd.Next(startLine' document.LineCount + 1);  						collapsedSections.Add(heightTree.CollapseText(document.GetLineByNumber(startLine)' document.GetLineByNumber(endLine)));  						break;  					case 8:  						if (collapsedSections.Count > 0) {  							CollapsedLineSection cs = collapsedSections[rnd.Next(0' collapsedSections.Count)];  							// unless the text section containing the CollapsedSection was deleted:  							if (cs.Start != null) {  								cs.Uncollapse();  							}  							collapsedSections.Remove(cs);  						}  						break;  					case 9:  						foreach (DocumentLine ls in document.Lines) {  							heightTree.SetHeight(ls' ls.LineNumber);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: switch (rnd.Next(0' 10)) {  					case 0:  					case 1:  					case 2:  					case 3:  					case 4:  					case 5:  						int offset = rnd.Next(0' document.TextLength);  						int length = rnd.Next(0' document.TextLength - offset);  						int newTextLength = rnd.Next(0' 20);  						for (int j = 0; j < newTextLength; j++) {  							buffer[j] = chars[rnd.Next(0' chars.Length)];  						}  						  						document.Replace(offset' length' new string(buffer' 0' newTextLength));  						break;  					case 6:  					case 7:  						int startLine = rnd.Next(1' document.LineCount + 1);  						int endLine = rnd.Next(startLine' document.LineCount + 1);  						collapsedSections.Add(heightTree.CollapseText(document.GetLineByNumber(startLine)' document.GetLineByNumber(endLine)));  						break;  					case 8:  						if (collapsedSections.Count > 0) {  							CollapsedLineSection cs = collapsedSections[rnd.Next(0' collapsedSections.Count)];  							// unless the text section containing the CollapsedSection was deleted:  							if (cs.Start != null) {  								cs.Uncollapse();  							}  							collapsedSections.Remove(cs);  						}  						break;  					case 9:  						foreach (DocumentLine ls in document.Lines) {  							heightTree.SetHeight(ls' ls.LineNumber);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: switch (rnd.Next(0' 10)) {  					case 0:  					case 1:  					case 2:  					case 3:  					case 4:  					case 5:  						int offset = rnd.Next(0' document.TextLength);  						int length = rnd.Next(0' document.TextLength - offset);  						int newTextLength = rnd.Next(0' 20);  						for (int j = 0; j < newTextLength; j++) {  							buffer[j] = chars[rnd.Next(0' chars.Length)];  						}  						  						document.Replace(offset' length' new string(buffer' 0' newTextLength));  						break;  					case 6:  					case 7:  						int startLine = rnd.Next(1' document.LineCount + 1);  						int endLine = rnd.Next(startLine' document.LineCount + 1);  						collapsedSections.Add(heightTree.CollapseText(document.GetLineByNumber(startLine)' document.GetLineByNumber(endLine)));  						break;  					case 8:  						if (collapsedSections.Count > 0) {  							CollapsedLineSection cs = collapsedSections[rnd.Next(0' collapsedSections.Count)];  							// unless the text section containing the CollapsedSection was deleted:  							if (cs.Start != null) {  								cs.Uncollapse();  							}  							collapsedSections.Remove(cs);  						}  						break;  					case 9:  						foreach (DocumentLine ls in document.Lines) {  							heightTree.SetHeight(ls' ls.LineNumber);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: switch (rnd.Next(0' 10)) {  					case 0:  					case 1:  					case 2:  					case 3:  					case 4:  					case 5:  						int offset = rnd.Next(0' document.TextLength);  						int length = rnd.Next(0' document.TextLength - offset);  						int newTextLength = rnd.Next(0' 20);  						for (int j = 0; j < newTextLength; j++) {  							buffer[j] = chars[rnd.Next(0' chars.Length)];  						}  						  						document.Replace(offset' length' new string(buffer' 0' newTextLength));  						break;  					case 6:  					case 7:  						int startLine = rnd.Next(1' document.LineCount + 1);  						int endLine = rnd.Next(startLine' document.LineCount + 1);  						collapsedSections.Add(heightTree.CollapseText(document.GetLineByNumber(startLine)' document.GetLineByNumber(endLine)));  						break;  					case 8:  						if (collapsedSections.Count > 0) {  							CollapsedLineSection cs = collapsedSections[rnd.Next(0' collapsedSections.Count)];  							// unless the text section containing the CollapsedSection was deleted:  							if (cs.Start != null) {  								cs.Uncollapse();  							}  							collapsedSections.Remove(cs);  						}  						break;  					case 9:  						foreach (DocumentLine ls in document.Lines) {  							heightTree.SetHeight(ls' ls.LineNumber);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: switch (rnd.Next(0' 10)) {  					case 0:  					case 1:  					case 2:  					case 3:  					case 4:  					case 5:  						int offset = rnd.Next(0' document.TextLength);  						int length = rnd.Next(0' document.TextLength - offset);  						int newTextLength = rnd.Next(0' 20);  						for (int j = 0; j < newTextLength; j++) {  							buffer[j] = chars[rnd.Next(0' chars.Length)];  						}  						  						document.Replace(offset' length' new string(buffer' 0' newTextLength));  						break;  					case 6:  					case 7:  						int startLine = rnd.Next(1' document.LineCount + 1);  						int endLine = rnd.Next(startLine' document.LineCount + 1);  						collapsedSections.Add(heightTree.CollapseText(document.GetLineByNumber(startLine)' document.GetLineByNumber(endLine)));  						break;  					case 8:  						if (collapsedSections.Count > 0) {  							CollapsedLineSection cs = collapsedSections[rnd.Next(0' collapsedSections.Count)];  							// unless the text section containing the CollapsedSection was deleted:  							if (cs.Start != null) {  								cs.Uncollapse();  							}  							collapsedSections.Remove(cs);  						}  						break;  					case 9:  						foreach (DocumentLine ls in document.Lines) {  							heightTree.SetHeight(ls' ls.LineNumber);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: switch (rnd.Next(0' 10)) {  					case 0:  					case 1:  					case 2:  					case 3:  					case 4:  					case 5:  						int offset = rnd.Next(0' document.TextLength);  						int length = rnd.Next(0' document.TextLength - offset);  						int newTextLength = rnd.Next(0' 20);  						for (int j = 0; j < newTextLength; j++) {  							buffer[j] = chars[rnd.Next(0' chars.Length)];  						}  						  						document.Replace(offset' length' new string(buffer' 0' newTextLength));  						break;  					case 6:  					case 7:  						int startLine = rnd.Next(1' document.LineCount + 1);  						int endLine = rnd.Next(startLine' document.LineCount + 1);  						collapsedSections.Add(heightTree.CollapseText(document.GetLineByNumber(startLine)' document.GetLineByNumber(endLine)));  						break;  					case 8:  						if (collapsedSections.Count > 0) {  							CollapsedLineSection cs = collapsedSections[rnd.Next(0' collapsedSections.Count)];  							// unless the text section containing the CollapsedSection was deleted:  							if (cs.Start != null) {  								cs.Uncollapse();  							}  							collapsedSections.Remove(cs);  						}  						break;  					case 9:  						foreach (DocumentLine ls in document.Lines) {  							heightTree.SetHeight(ls' ls.LineNumber);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: switch (rnd.Next(0' 10)) {  					case 0:  					case 1:  					case 2:  					case 3:  					case 4:  					case 5:  						int offset = rnd.Next(0' document.TextLength);  						int length = rnd.Next(0' document.TextLength - offset);  						int newTextLength = rnd.Next(0' 20);  						for (int j = 0; j < newTextLength; j++) {  							buffer[j] = chars[rnd.Next(0' chars.Length)];  						}  						  						document.Replace(offset' length' new string(buffer' 0' newTextLength));  						break;  					case 6:  					case 7:  						int startLine = rnd.Next(1' document.LineCount + 1);  						int endLine = rnd.Next(startLine' document.LineCount + 1);  						collapsedSections.Add(heightTree.CollapseText(document.GetLineByNumber(startLine)' document.GetLineByNumber(endLine)));  						break;  					case 8:  						if (collapsedSections.Count > 0) {  							CollapsedLineSection cs = collapsedSections[rnd.Next(0' collapsedSections.Count)];  							// unless the text section containing the CollapsedSection was deleted:  							if (cs.Start != null) {  								cs.Uncollapse();  							}  							collapsedSections.Remove(cs);  						}  						break;  					case 9:  						foreach (DocumentLine ls in document.Lines) {  							heightTree.SetHeight(ls' ls.LineNumber);  						}  						break;  				}
Magic Number,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following statement contains a magic number: i < 2500
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,CheckClearingDocument,The following statement contains a magic number: Assert.AreEqual(2' document.LineCount);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,LineIndexOfTest,The following statement contains a magic number: DocumentLine middleLine = document.GetLineByNumber(2);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,LineIndexOfTest,The following statement contains a magic number: document.Remove(1' 3);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,InsertAfterEndOffset,The following statement contains a magic number: document.Insert(4' "text");
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveNegativeAmount,The following statement contains a magic number: document.Remove(2' -1);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveTooMuch,The following statement contains a magic number: document.Remove(2' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveTooMuch,The following statement contains a magic number: document.Remove(2' 10);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,GetLineByNumberTooHigh,The following statement contains a magic number: document.GetLineByNumber(3);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,GetLineByOffsetToHigh,The following statement contains a magic number: document.GetLineByOffset(10);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,InsertAtEndOffset,The following statement contains a magic number: document.Insert(3' "text");
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,GetCharAt,The following statement contains a magic number: Assert.AreEqual('\n'' document.GetCharAt(2));
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,GetCharAt,The following statement contains a magic number: Assert.AreEqual('b'' document.GetCharAt(3));
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,CheckMixedNewLineTest,The following statement contains a magic number: Assert.AreEqual(4' document.LineCount);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,CheckMixedNewLineTest,The following statement contains a magic number: i < 4
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,CheckMixedNewLineTest,The following statement contains a magic number: Assert.AreEqual(2' document.GetLineByNumber(2).DelimiterLength);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,CheckMixedNewLineTest,The following statement contains a magic number: Assert.AreEqual(2' document.GetLineByNumber(2).DelimiterLength);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,CheckMixedNewLineTest,The following statement contains a magic number: Assert.AreEqual(1' document.GetLineByNumber(3).DelimiterLength);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,CheckMixedNewLineTest,The following statement contains a magic number: Assert.AreEqual(0' document.GetLineByNumber(4).DelimiterLength);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveLineContentAndJoinDelimiters,The following statement contains a magic number: document.Remove(2' 1);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveLineContentAndJoinDelimiters2,The following statement contains a magic number: document.Remove(2' 3);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveLineContentAndJoinDelimiters2,The following statement contains a magic number: document.Remove(2' 3);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveLineContentAndJoinDelimiters3,The following statement contains a magic number: document.Remove(2' 2);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveLineContentAndJoinDelimiters3,The following statement contains a magic number: document.Remove(2' 2);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveLineContentAndJoinNonMatchingDelimiters,The following statement contains a magic number: document.Remove(2' 1);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveLineContentAndJoinNonMatchingDelimiters2,The following statement contains a magic number: document.Remove(2' 1);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveMultilineUpToFirstPartOfDelimiter,The following statement contains a magic number: document.Remove(1' 3);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveSecondPartOfDelimiter,The following statement contains a magic number: document.Remove(2' 1);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveFromSecondPartOfDelimiter,The following statement contains a magic number: document.Remove(2' 3);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveFromSecondPartOfDelimiter,The following statement contains a magic number: document.Remove(2' 3);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveFromSecondPartOfDelimiterToDocumentEnd,The following statement contains a magic number: document.Remove(2' 2);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveFromSecondPartOfDelimiterToDocumentEnd,The following statement contains a magic number: document.Remove(2' 2);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveUpToMatchingDelimiter1,The following statement contains a magic number: document.Remove(2' 2);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveUpToMatchingDelimiter1,The following statement contains a magic number: document.Remove(2' 2);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveUpToMatchingDelimiter2,The following statement contains a magic number: document.Remove(2' 3);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveUpToMatchingDelimiter2,The following statement contains a magic number: document.Remove(2' 3);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveUpToNonMatchingDelimiter,The following statement contains a magic number: document.Remove(2' 2);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveUpToNonMatchingDelimiter,The following statement contains a magic number: document.Remove(2' 2);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,RemoveTwoCharDelimiter,The following statement contains a magic number: document.Remove(1' 2);
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,FixUpSecondPartOfDelimiter,The following statement contains a magic number: document.Replace(2' 1' "\n");
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,InsertInsideDelimiter,The following statement contains a magic number: document.Insert(2' "b");
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,InsertInsideDelimiter2,The following statement contains a magic number: document.Insert(2' "b\nc");
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,InsertInsideDelimiter3,The following statement contains a magic number: document.Insert(2' "b\r");
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,ExtendDelimiter2,The following statement contains a magic number: document.Insert(2' "\nb");
Magic Number,ICSharpCode.AvalonEdit.Document,LineManagerTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\LineManagerTests.cs,ReplaceLineContentBetweenMatchingDelimiters,The following statement contains a magic number: document.Replace(2' 1' "x");
Magic Number,ICSharpCode.AvalonEdit.Editing,ChangeDocumentTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\ChangeDocumentTests.cs,ClearCaretAndSelectionOnDocumentChange,The following statement contains a magic number: textArea.Caret.Offset = 6;
Magic Number,ICSharpCode.AvalonEdit.Editing,ChangeDocumentTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\ChangeDocumentTests.cs,ClearCaretAndSelectionOnDocumentChange,The following statement contains a magic number: textArea.Selection = new SimpleSelection(3' 6);
Magic Number,ICSharpCode.AvalonEdit.Editing,ChangeDocumentTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\ChangeDocumentTests.cs,ClearCaretAndSelectionOnDocumentChange,The following statement contains a magic number: textArea.Selection = new SimpleSelection(3' 6);
Magic Number,ICSharpCode.AvalonEdit.Editing,ChangeDocumentTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\ChangeDocumentTests.cs,SetDocumentToNull,The following statement contains a magic number: textArea.Caret.Offset = 6;
Magic Number,ICSharpCode.AvalonEdit.Editing,ChangeDocumentTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\ChangeDocumentTests.cs,SetDocumentToNull,The following statement contains a magic number: textArea.Selection = new SimpleSelection(3' 6);
Magic Number,ICSharpCode.AvalonEdit.Editing,ChangeDocumentTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\ChangeDocumentTests.cs,SetDocumentToNull,The following statement contains a magic number: textArea.Selection = new SimpleSelection(3' 6);
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleWhenNothingIsReadOnly,The following statement contains a magic number: Assert.IsTrue(provider.CanInsert(100));
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionPossibleWhenNothingIsReadOnly,The following statement contains a magic number: var result = provider.GetDeletableSegments(new SimpleSegment(10' 20)).ToList();
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionPossibleWhenNothingIsReadOnly,The following statement contains a magic number: var result = provider.GetDeletableSegments(new SimpleSegment(10' 20)).ToList();
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionPossibleWhenNothingIsReadOnly,The following statement contains a magic number: Assert.AreEqual(10' result[0].Offset);
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionPossibleWhenNothingIsReadOnly,The following statement contains a magic number: Assert.AreEqual(20' result[0].Length);
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleBeforeReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' EndOffset = 15 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleBeforeReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' EndOffset = 15 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleBeforeReadOnlySegment,The following statement contains a magic number: Assert.IsTrue(provider.CanInsert(5));
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleAtStartOfReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' EndOffset = 15 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleAtStartOfReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' EndOffset = 15 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleAtStartOfReadOnlySegment,The following statement contains a magic number: Assert.IsTrue(provider.CanInsert(10));
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionImpossibleInsideReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' EndOffset = 15 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionImpossibleInsideReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' EndOffset = 15 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionImpossibleInsideReadOnlySegment,The following statement contains a magic number: Assert.IsFalse(provider.CanInsert(11));
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionImpossibleInsideReadOnlySegment,The following statement contains a magic number: Assert.IsFalse(provider.CanInsert(12));
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionImpossibleInsideReadOnlySegment,The following statement contains a magic number: Assert.IsFalse(provider.CanInsert(13));
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionImpossibleInsideReadOnlySegment,The following statement contains a magic number: Assert.IsFalse(provider.CanInsert(14));
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleAtEndOfReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' EndOffset = 15 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleAtEndOfReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' EndOffset = 15 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleAtEndOfReadOnlySegment,The following statement contains a magic number: Assert.IsTrue(provider.CanInsert(15));
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleBetweenReadOnlySegments,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' EndOffset = 15 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleBetweenReadOnlySegments,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' EndOffset = 15 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleBetweenReadOnlySegments,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 15' EndOffset = 20 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleBetweenReadOnlySegments,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 15' EndOffset = 20 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,InsertionPossibleBetweenReadOnlySegments,The following statement contains a magic number: Assert.IsTrue(provider.CanInsert(15));
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionImpossibleInReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' Length = 5 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionImpossibleInReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 10' Length = 5 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionImpossibleInReadOnlySegment,The following statement contains a magic number: var result = provider.GetDeletableSegments(new SimpleSegment(11' 2)).ToList();
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionImpossibleInReadOnlySegment,The following statement contains a magic number: var result = provider.GetDeletableSegments(new SimpleSegment(11' 2)).ToList();
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionAroundReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 20' Length = 5 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionAroundReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 20' Length = 5 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionAroundReadOnlySegment,The following statement contains a magic number: var result = provider.GetDeletableSegments(new SimpleSegment(15' 16)).ToList();
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionAroundReadOnlySegment,The following statement contains a magic number: var result = provider.GetDeletableSegments(new SimpleSegment(15' 16)).ToList();
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionAroundReadOnlySegment,The following statement contains a magic number: Assert.AreEqual(2' result.Count);
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionAroundReadOnlySegment,The following statement contains a magic number: Assert.AreEqual(15' result[0].Offset);
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionAroundReadOnlySegment,The following statement contains a magic number: Assert.AreEqual(5' result[0].Length);
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionAroundReadOnlySegment,The following statement contains a magic number: Assert.AreEqual(25' result[1].Offset);
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeletionAroundReadOnlySegment,The following statement contains a magic number: Assert.AreEqual(6' result[1].Length);
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeleteLastCharacterInReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 20' Length = 5 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeleteLastCharacterInReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 20' Length = 5 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeleteLastCharacterInReadOnlySegment,The following statement contains a magic number: var result = provider.GetDeletableSegments(new SimpleSegment(24' 1)).ToList();
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeleteFirstCharacterInReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 20' Length = 5 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeleteFirstCharacterInReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 20' Length = 5 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeleteFirstCharacterInReadOnlySegment,The following statement contains a magic number: var result = provider.GetDeletableSegments(new SimpleSegment(20' 1)).ToList();
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeleteWholeReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 20' Length = 5 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeleteWholeReadOnlySegment,The following statement contains a magic number: segments.Add(new TextSegment { StartOffset = 20' Length = 5 });
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeleteWholeReadOnlySegment,The following statement contains a magic number: var result = provider.GetDeletableSegments(new SimpleSegment(20' 5)).ToList();
Magic Number,ICSharpCode.AvalonEdit.Editing,TextSegmentReadOnlySectionTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Editing\TextSegmentReadOnlySectionTests.cs,DeleteWholeReadOnlySegment,The following statement contains a magic number: var result = provider.GetDeletableSegments(new SimpleSegment(20' 5)).ToList();
Magic Number,ICSharpCode.AvalonEdit.Highlighting,HtmlClipboardTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Highlighting\HtmlClipboardTests.cs,PartOfHighlightedWordTest,The following statement contains a magic number: var segment = new TextSegment { StartOffset = 1' Length = 3 };
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetNextCaretStop("word"' 3' CaretPositioningMode.Normal));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetNextCaretStop("word"' 3' CaretPositioningMode.Normal));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentWordBorder,The following statement contains a magic number: Assert.AreEqual(-1' GetNextCaretStop("word"' 3' CaretPositioningMode.WordStart));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetNextCaretStop("word"' 3' CaretPositioningMode.WordBorder));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetNextCaretStop("word"' 3' CaretPositioningMode.WordBorder));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetPrevCaretStop("word"' 5' CaretPositioningMode.Normal));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetPrevCaretStop("word"' 5' CaretPositioningMode.Normal));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentWordBorder,The following statement contains a magic number: Assert.AreEqual(0' GetPrevCaretStop("word"' 5' CaretPositioningMode.WordStart));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetPrevCaretStop("word"' 5' CaretPositioningMode.WordBorder));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetPrevCaretStop("word"' 5' CaretPositioningMode.WordBorder));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentNoWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetNextCaretStop("txt "' 3' CaretPositioningMode.Normal));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentNoWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetNextCaretStop("txt "' 3' CaretPositioningMode.Normal));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentNoWordBorder,The following statement contains a magic number: Assert.AreEqual(-1' GetNextCaretStop("txt "' 3' CaretPositioningMode.WordStart));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentNoWordBorder,The following statement contains a magic number: Assert.AreEqual(-1' GetNextCaretStop("txt "' 3' CaretPositioningMode.WordBorder));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentNoWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetPrevCaretStop("txt "' 5' CaretPositioningMode.Normal));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentNoWordBorder,The following statement contains a magic number: Assert.AreEqual(4' GetPrevCaretStop("txt "' 5' CaretPositioningMode.Normal));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentNoWordBorder,The following statement contains a magic number: Assert.AreEqual(0' GetPrevCaretStop("txt "' 5' CaretPositioningMode.WordStart));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentNoWordBorder,The following statement contains a magic number: Assert.AreEqual(3' GetPrevCaretStop("txt "' 5' CaretPositioningMode.WordBorder));
Magic Number,ICSharpCode.AvalonEdit.Utils,CaretNavigationTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CaretNavigationTests.cs,EndOfDocumentNoWordBorder,The following statement contains a magic number: Assert.AreEqual(3' GetPrevCaretStop("txt "' 5' CaretPositioningMode.WordBorder));
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,CheckAdd10BillionElements,The following statement contains a magic number: const int billion = 1000000000;
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,CheckAdd10BillionElements,The following statement contains a magic number: Assert.AreEqual(2 * billion' list.Count);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,CheckAdd10BillionElements,The following statement contains a magic number: list.InsertRange(2' billion' "C");
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,AddRepeated,The following statement contains a magic number: list.Add(42);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,AddRepeated,The following statement contains a magic number: list.Add(42);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,AddRepeated,The following statement contains a magic number: list.Add(42);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,AddRepeated,The following statement contains a magic number: list.Insert(0' 42);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,AddRepeated,The following statement contains a magic number: list.Insert(1' 42);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,AddRepeated,The following statement contains a magic number: Assert.AreEqual(new[] { 42' 42' 42' 42' 42 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,AddRepeated,The following statement contains a magic number: Assert.AreEqual(new[] { 42' 42' 42' 42' 42 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,AddRepeated,The following statement contains a magic number: Assert.AreEqual(new[] { 42' 42' 42' 42' 42 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,AddRepeated,The following statement contains a magic number: Assert.AreEqual(new[] { 42' 42' 42' 42' 42 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,AddRepeated,The following statement contains a magic number: Assert.AreEqual(new[] { 42' 42' 42' 42' 42 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: list.InsertRange(list.Count' 2' i);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: i <= 3
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: list.RemoveRange(1' 4);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: list.InsertRange(2' 2' 2);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: list.InsertRange(2' 2' 2);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: list.InsertRange(2' 2' 2);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: list.Insert(4' 1);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 1' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 1' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 1' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: list.RemoveRange(2' 2);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: list.RemoveRange(2' 2);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveRange,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 1' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtEnd,The following statement contains a magic number: list.InsertRange(list.Count' 2' i);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtEnd,The following statement contains a magic number: i <= 3
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtEnd,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtEnd,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtEnd,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtEnd,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtEnd,The following statement contains a magic number: list.RemoveRange(3' 3);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtEnd,The following statement contains a magic number: list.RemoveRange(3' 3);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtEnd,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart,The following statement contains a magic number: list.InsertRange(list.Count' 2' i);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart,The following statement contains a magic number: i <= 3
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart2,The following statement contains a magic number: list.InsertRange(list.Count' 2' i);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart2,The following statement contains a magic number: i <= 3
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart2,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart2,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart2,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart2,The following statement contains a magic number: Assert.AreEqual(new[] { 1' 1' 2' 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart2,The following statement contains a magic number: list.RemoveRange(0' 3);
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart2,The following statement contains a magic number: Assert.AreEqual(new[] { 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart2,The following statement contains a magic number: Assert.AreEqual(new[] { 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,CompressingTreeListTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\CompressingTreeListTests.cs,RemoveAtStart2,The following statement contains a magic number: Assert.AreEqual(new[] { 2' 3' 3 }' list.ToArray());
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWithSingleTab,The following statement contains a magic number: var options = new TextEditorOptions { IndentationSize = 4' ConvertTabsToSpaces = false };
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWithSingleTab,The following statement contains a magic number: Assert.AreEqual("\t"' options.GetIndentationString(2));
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWithSingleTab,The following statement contains a magic number: Assert.AreEqual("\t"' options.GetIndentationString(3));
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWithSingleTab,The following statement contains a magic number: Assert.AreEqual("\t"' options.GetIndentationString(4));
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWithSingleTab,The following statement contains a magic number: Assert.AreEqual("\t"' options.GetIndentationString(5));
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWithSingleTab,The following statement contains a magic number: Assert.AreEqual("\t"' options.GetIndentationString(6));
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWith4Spaces,The following statement contains a magic number: var options = new TextEditorOptions { IndentationSize = 4' ConvertTabsToSpaces = true };
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWith4Spaces,The following statement contains a magic number: Assert.AreEqual("   "' options.GetIndentationString(2));
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWith4Spaces,The following statement contains a magic number: Assert.AreEqual("  "' options.GetIndentationString(3));
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWith4Spaces,The following statement contains a magic number: Assert.AreEqual(" "' options.GetIndentationString(4));
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWith4Spaces,The following statement contains a magic number: Assert.AreEqual("    "' options.GetIndentationString(5));
Magic Number,ICSharpCode.AvalonEdit.Utils,IndentationStringTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\IndentationStringTests.cs,IndentWith4Spaces,The following statement contains a magic number: Assert.AreEqual("   "' options.GetIndentationString(6));
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,InitializeRopeFromShortString,The following statement contains a magic number: Assert.AreEqual(12' rope.Length);
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,InitializeRopeFromLongString,The following statement contains a magic number: string text = BuildLongString(1000);
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,TestToArrayAndToStringWithParts,The following statement contains a magic number: string text = BuildLongString(1000);
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,TestToArrayAndToStringWithParts,The following statement contains a magic number: string textPart = text.Substring(1200' 600);
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,TestToArrayAndToStringWithParts,The following statement contains a magic number: string textPart = text.Substring(1200' 600);
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,TestToArrayAndToStringWithParts,The following statement contains a magic number: Assert.AreEqual(textPart' rope.ToString(1200' 600));
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,TestToArrayAndToStringWithParts,The following statement contains a magic number: Assert.AreEqual(textPart' rope.ToString(1200' 600));
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,TestToArrayAndToStringWithParts,The following statement contains a magic number: Assert.AreEqual(arrayPart' rope.ToArray(1200' 600));
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,TestToArrayAndToStringWithParts,The following statement contains a magic number: Assert.AreEqual(arrayPart' rope.ToArray(1200' 600));
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,TestToArrayAndToStringWithParts,The following statement contains a magic number: Rope<char> partialRope = rope.GetRange(1200' 600);
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,TestToArrayAndToStringWithParts,The following statement contains a magic number: Rope<char> partialRope = rope.GetRange(1200' 600);
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateStringToRope,The following statement contains a magic number: i <= 1000
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateSmallRopesToRope,The following statement contains a magic number: i <= 1000
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,AppendLongTextToEmptyRope,The following statement contains a magic number: string text = BuildLongString(1000);
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateStringToRopeBackwards,The following statement contains a magic number: i <= 1000
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateSmallRopesToRopeBackwards,The following statement contains a magic number: i <= 1000
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateStringToRopeByInsertionInMiddle,The following statement contains a magic number: i <= 998
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateStringToRopeByInsertionInMiddle,The following statement contains a magic number: middle += 3;
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateStringToRopeByInsertionInMiddle,The following statement contains a magic number: rope.InsertText(middle' (999-i).ToString("d3"));
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateStringToRopeByInsertionInMiddle,The following statement contains a magic number: rope.Insert(middle + 3' ' ');
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateStringToRopeByInsertionInMiddle,The following statement contains a magic number: i <= 499
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateSmallRopesByInsertionInMiddle,The following statement contains a magic number: i <= 1000
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateSmallRopesByInsertionInMiddle,The following statement contains a magic number: middle += 4;
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateSmallRopesByInsertionInMiddle,The following statement contains a magic number: rope.InsertRange(middle' CharRope.Create((1001-i).ToString("d3") + " "));
Magic Number,ICSharpCode.AvalonEdit.Utils,RopeTests,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Utils\RopeTests.cs,ConcatenateSmallRopesByInsertionInMiddle,The following statement contains a magic number: i <= 500
Missing Default,ICSharpCode.AvalonEdit.Document,TextAnchorTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextAnchorTest.cs,CreateAndMoveAnchors,The following switch statement is missing a default case: switch (rnd.Next(5)) {  					case 0:  						//Console.WriteLine("Add c=" + c + " anchors");  						for (int i = 0; i < c; i++) {  							int offset = rnd.Next(document.TextLength);  							TextAnchor anchor = document.CreateAnchor(offset);  							if (rnd.Next(2) == 0)  								anchor.MovementType = AnchorMovementType.BeforeInsertion;  							else  								anchor.MovementType = AnchorMovementType.AfterInsertion;  							anchor.SurviveDeletion = rnd.Next(2) == 0;  							anchors.Add(anchor);  							expectedOffsets.Add(offset);  						}  						break;  					case 1:  						if (c <= anchors.Count) {  							//Console.WriteLine("Remove c=" + c + " anchors");  							anchors.RemoveRange(0' c);  							expectedOffsets.RemoveRange(0' c);  							GC.Collect();  						}  						break;  					case 2:  						int insertOffset = rnd.Next(document.TextLength);  						int insertLength = rnd.Next(1000);  						//Console.WriteLine("insertOffset=" + insertOffset + " insertLength="+insertLength);  						document.Insert(insertOffset' new string(' '' insertLength));  						for (int i = 0; i < anchors.Count; i++) {  							if (anchors[i].MovementType == AnchorMovementType.BeforeInsertion) {  								if (expectedOffsets[i] > insertOffset)  									expectedOffsets[i] += insertLength;  							} else {  								if (expectedOffsets[i] >= insertOffset)  									expectedOffsets[i] += insertLength;  							}  						}  						break;  					case 3:  						int removalOffset = rnd.Next(document.TextLength);  						int removalLength = rnd.Next(document.TextLength - removalOffset);  						//Console.WriteLine("RemovalOffset=" + removalOffset + " RemovalLength="+removalLength);  						document.Remove(removalOffset' removalLength);  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > removalOffset && expectedOffsets[i] < removalOffset + removalLength) {  								if (anchors[i].SurviveDeletion) {  									expectedOffsets[i] = removalOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > removalOffset) {  								expectedOffsets[i] -= removalLength;  							}  						}  						break;  					case 4:  						int replaceOffset = rnd.Next(document.TextLength);  						int replaceRemovalLength = rnd.Next(document.TextLength - replaceOffset);  						int replaceInsertLength = rnd.Next(1000);  						//Console.WriteLine("ReplaceOffset=" + replaceOffset + " RemovalLength="+replaceRemovalLength + " InsertLength=" + replaceInsertLength);  						document.Replace(replaceOffset' replaceRemovalLength' new string(' '' replaceInsertLength));  						for (int i = anchors.Count - 1; i >= 0; i--) {  							if (expectedOffsets[i] > replaceOffset && expectedOffsets[i] < replaceOffset + replaceRemovalLength) {  								if (anchors[i].SurviveDeletion) {  									if (anchors[i].MovementType == AnchorMovementType.AfterInsertion)  										expectedOffsets[i] = replaceOffset + replaceInsertLength;  									else  										expectedOffsets[i] = replaceOffset;  								} else {  									Assert.IsTrue(anchors[i].IsDeleted);  									anchors.RemoveAt(i);  									expectedOffsets.RemoveAt(i);  								}  							} else if (expectedOffsets[i] > replaceOffset) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							} else if (expectedOffsets[i] == replaceOffset && replaceRemovalLength == 0 && anchors[i].MovementType == AnchorMovementType.AfterInsertion) {  								expectedOffsets[i] += replaceInsertLength - replaceRemovalLength;  							}  						}  						break;  				}
Missing Default,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedNoDocumentChanges,The following switch statement is missing a default case: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Missing Default,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedCloseNoDocumentChanges,The following switch statement is missing a default case: switch (rnd.Next(3)) {  					case 0:  						AddSegment(rnd.Next(20)' rnd.Next(10));  						break;  					case 1:  						AddSegment(rnd.Next(20)' rnd.Next(20));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  				}
Missing Default,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChanges,The following switch statement is missing a default case: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(500)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(500)' rnd.Next(300));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' rnd.Next(50)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' 0' rnd.Next(50)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(800)' rnd.Next(50)' 0));  						break;  				}
Missing Default,ICSharpCode.AvalonEdit.Document,TextSegmentTreeTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\TextSegmentTreeTest.cs,RandomizedWithDocumentChangesClose,The following switch statement is missing a default case: switch (rnd.Next(6)) {  					case 0:  						AddSegment(rnd.Next(50)' rnd.Next(30));  						break;  					case 1:  						AddSegment(rnd.Next(50)' rnd.Next(3));  						break;  					case 2:  						if (tree.Count > 0) {  							RemoveSegment(expectedSegments[rnd.Next(tree.Count)]);  						}  						break;  					case 3:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' rnd.Next(10)));  						break;  					case 4:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' 0' rnd.Next(10)));  						break;  					case 5:  						ChangeDocument(new OffsetChangeMapEntry(rnd.Next(80)' rnd.Next(10)' 0));  						break;  				}
Missing Default,ICSharpCode.AvalonEdit.Document,RandomizedLineManagerTest,D:\research\architectureSmells\repos1\tltjr_Wish\ICSharpCode.AvalonEdit.Tests\Document\RandomizedLineManagerTest.cs,CollapsingTest,The following switch statement is missing a default case: switch (rnd.Next(0' 10)) {  					case 0:  					case 1:  					case 2:  					case 3:  					case 4:  					case 5:  						int offset = rnd.Next(0' document.TextLength);  						int length = rnd.Next(0' document.TextLength - offset);  						int newTextLength = rnd.Next(0' 20);  						for (int j = 0; j < newTextLength; j++) {  							buffer[j] = chars[rnd.Next(0' chars.Length)];  						}  						  						document.Replace(offset' length' new string(buffer' 0' newTextLength));  						break;  					case 6:  					case 7:  						int startLine = rnd.Next(1' document.LineCount + 1);  						int endLine = rnd.Next(startLine' document.LineCount + 1);  						collapsedSections.Add(heightTree.CollapseText(document.GetLineByNumber(startLine)' document.GetLineByNumber(endLine)));  						break;  					case 8:  						if (collapsedSections.Count > 0) {  							CollapsedLineSection cs = collapsedSections[rnd.Next(0' collapsedSections.Count)];  							// unless the text section containing the CollapsedSection was deleted:  							if (cs.Start != null) {  								cs.Uncollapse();  							}  							collapsedSections.Remove(cs);  						}  						break;  					case 9:  						foreach (DocumentLine ls in document.Lines) {  							heightTree.SetHeight(ls' ls.LineNumber);  						}  						break;  				}
