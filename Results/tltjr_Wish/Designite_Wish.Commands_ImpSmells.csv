Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Wish.Commands.Runner,CmdDirectoryManager,D:\newReposJune17\tltjr_Wish\Wish.Commands\Runner\CmdDirectoryManager.cs,UpdateWorkingDirectory,Cyclomatic complexity of the method is 15
Complex Method,Wish.Commands.Runner,Powershell,D:\newReposJune17\tltjr_Wish\Wish.Commands\Runner\Powershell.cs,Execute,Cyclomatic complexity of the method is 7
Magic Number,Wish.Commands.Runner,Cmd,D:\newReposJune17\tltjr_Wish\Wish.Commands\Runner\Cmd.cs,Execute,The following statement contains a magic number: if (!process.WaitForExit (1000)) {  	process.Kill ();  	return "An error has occurred";  }  
Magic Number,Wish.Commands.Runner,CmdDirectoryManager,D:\newReposJune17\tltjr_Wish\Wish.Commands\Runner\CmdDirectoryManager.cs,UpdateWorkingDirectory,The following statement contains a magic number: switch (CommandType (script)) {  case CdCommand.Prompt:  	_workingDirectory = commandLine.Function.ToUpper () + "\\";  	break;  case CdCommand.Slash:  	_workingDirectory = WorkingDirectory.Substring (0' 3);  	break;  case CdCommand.Regular:  	var args = commandLine.Arguments;  	if (args != null && args.Count > 0) {  		var arg = args.First ();  		if (arg.Contains (":")) {  			_workingDirectory = arg;  		} else {  			if (arg.Contains ("..")) {  				var levels = Regex.Matches (arg' @"\.\.").Count;  				var segments = WorkingDirectory.Split ('\\');  				var argSegs = arg.Split ('\\');  				var trailingDirs = argSegs.SkipWhile (o => o.Equals (".."));  				var count = segments.Count ();  				var newLevels = count - levels;  				if (newLevels < 2) {  					_workingDirectory = segments.First () + "\\" + string.Join ("\\"' trailingDirs);  				} else {  					var newSegs = segments.Take (newLevels).ToList ();  					newSegs.AddRange (trailingDirs);  					_workingDirectory = string.Join ("\\"' newSegs);  				}  			} else {  				if (WorkingDirectory.EndsWith ("\\")) {  					_workingDirectory = WorkingDirectory + arg;  				} else {  					_workingDirectory = WorkingDirectory + "\\" + arg;  				}  			}  		}  	}  	break;  }  
Magic Number,Wish.Commands.Runner,CmdDirectoryManager,D:\newReposJune17\tltjr_Wish\Wish.Commands\Runner\CmdDirectoryManager.cs,UpdateWorkingDirectory,The following statement contains a magic number: switch (CommandType (script)) {  case CdCommand.Prompt:  	_workingDirectory = commandLine.Function.ToUpper () + "\\";  	break;  case CdCommand.Slash:  	_workingDirectory = WorkingDirectory.Substring (0' 3);  	break;  case CdCommand.Regular:  	var args = commandLine.Arguments;  	if (args != null && args.Count > 0) {  		var arg = args.First ();  		if (arg.Contains (":")) {  			_workingDirectory = arg;  		} else {  			if (arg.Contains ("..")) {  				var levels = Regex.Matches (arg' @"\.\.").Count;  				var segments = WorkingDirectory.Split ('\\');  				var argSegs = arg.Split ('\\');  				var trailingDirs = argSegs.SkipWhile (o => o.Equals (".."));  				var count = segments.Count ();  				var newLevels = count - levels;  				if (newLevels < 2) {  					_workingDirectory = segments.First () + "\\" + string.Join ("\\"' trailingDirs);  				} else {  					var newSegs = segments.Take (newLevels).ToList ();  					newSegs.AddRange (trailingDirs);  					_workingDirectory = string.Join ("\\"' newSegs);  				}  			} else {  				if (WorkingDirectory.EndsWith ("\\")) {  					_workingDirectory = WorkingDirectory + arg;  				} else {  					_workingDirectory = WorkingDirectory + "\\" + arg;  				}  			}  		}  	}  	break;  }  
Magic Number,Wish.Commands.Runner,CmdDirectoryManager,D:\newReposJune17\tltjr_Wish\Wish.Commands\Runner\CmdDirectoryManager.cs,UpdateWorkingDirectory,The following statement contains a magic number: _workingDirectory = WorkingDirectory.Substring (0' 3);  
Magic Number,Wish.Commands.Runner,CmdDirectoryManager,D:\newReposJune17\tltjr_Wish\Wish.Commands\Runner\CmdDirectoryManager.cs,UpdateWorkingDirectory,The following statement contains a magic number: if (args != null && args.Count > 0) {  	var arg = args.First ();  	if (arg.Contains (":")) {  		_workingDirectory = arg;  	} else {  		if (arg.Contains ("..")) {  			var levels = Regex.Matches (arg' @"\.\.").Count;  			var segments = WorkingDirectory.Split ('\\');  			var argSegs = arg.Split ('\\');  			var trailingDirs = argSegs.SkipWhile (o => o.Equals (".."));  			var count = segments.Count ();  			var newLevels = count - levels;  			if (newLevels < 2) {  				_workingDirectory = segments.First () + "\\" + string.Join ("\\"' trailingDirs);  			} else {  				var newSegs = segments.Take (newLevels).ToList ();  				newSegs.AddRange (trailingDirs);  				_workingDirectory = string.Join ("\\"' newSegs);  			}  		} else {  			if (WorkingDirectory.EndsWith ("\\")) {  				_workingDirectory = WorkingDirectory + arg;  			} else {  				_workingDirectory = WorkingDirectory + "\\" + arg;  			}  		}  	}  }  
Magic Number,Wish.Commands.Runner,CmdDirectoryManager,D:\newReposJune17\tltjr_Wish\Wish.Commands\Runner\CmdDirectoryManager.cs,UpdateWorkingDirectory,The following statement contains a magic number: if (arg.Contains (":")) {  	_workingDirectory = arg;  } else {  	if (arg.Contains ("..")) {  		var levels = Regex.Matches (arg' @"\.\.").Count;  		var segments = WorkingDirectory.Split ('\\');  		var argSegs = arg.Split ('\\');  		var trailingDirs = argSegs.SkipWhile (o => o.Equals (".."));  		var count = segments.Count ();  		var newLevels = count - levels;  		if (newLevels < 2) {  			_workingDirectory = segments.First () + "\\" + string.Join ("\\"' trailingDirs);  		} else {  			var newSegs = segments.Take (newLevels).ToList ();  			newSegs.AddRange (trailingDirs);  			_workingDirectory = string.Join ("\\"' newSegs);  		}  	} else {  		if (WorkingDirectory.EndsWith ("\\")) {  			_workingDirectory = WorkingDirectory + arg;  		} else {  			_workingDirectory = WorkingDirectory + "\\" + arg;  		}  	}  }  
Magic Number,Wish.Commands.Runner,CmdDirectoryManager,D:\newReposJune17\tltjr_Wish\Wish.Commands\Runner\CmdDirectoryManager.cs,UpdateWorkingDirectory,The following statement contains a magic number: if (arg.Contains ("..")) {  	var levels = Regex.Matches (arg' @"\.\.").Count;  	var segments = WorkingDirectory.Split ('\\');  	var argSegs = arg.Split ('\\');  	var trailingDirs = argSegs.SkipWhile (o => o.Equals (".."));  	var count = segments.Count ();  	var newLevels = count - levels;  	if (newLevels < 2) {  		_workingDirectory = segments.First () + "\\" + string.Join ("\\"' trailingDirs);  	} else {  		var newSegs = segments.Take (newLevels).ToList ();  		newSegs.AddRange (trailingDirs);  		_workingDirectory = string.Join ("\\"' newSegs);  	}  } else {  	if (WorkingDirectory.EndsWith ("\\")) {  		_workingDirectory = WorkingDirectory + arg;  	} else {  		_workingDirectory = WorkingDirectory + "\\" + arg;  	}  }  
Magic Number,Wish.Commands.Runner,CmdDirectoryManager,D:\newReposJune17\tltjr_Wish\Wish.Commands\Runner\CmdDirectoryManager.cs,UpdateWorkingDirectory,The following statement contains a magic number: if (newLevels < 2) {  	_workingDirectory = segments.First () + "\\" + string.Join ("\\"' trailingDirs);  } else {  	var newSegs = segments.Take (newLevels).ToList ();  	newSegs.AddRange (trailingDirs);  	_workingDirectory = string.Join ("\\"' newSegs);  }  
Missing Default,Wish.Commands.Runner,CmdDirectoryManager,D:\newReposJune17\tltjr_Wish\Wish.Commands\Runner\CmdDirectoryManager.cs,UpdateWorkingDirectory,The following switch statement is missing a default case: switch (CommandType (script)) {  case CdCommand.Prompt:  	_workingDirectory = commandLine.Function.ToUpper () + "\\";  	break;  case CdCommand.Slash:  	_workingDirectory = WorkingDirectory.Substring (0' 3);  	break;  case CdCommand.Regular:  	var args = commandLine.Arguments;  	if (args != null && args.Count > 0) {  		var arg = args.First ();  		if (arg.Contains (":")) {  			_workingDirectory = arg;  		} else {  			if (arg.Contains ("..")) {  				var levels = Regex.Matches (arg' @"\.\.").Count;  				var segments = WorkingDirectory.Split ('\\');  				var argSegs = arg.Split ('\\');  				var trailingDirs = argSegs.SkipWhile (o => o.Equals (".."));  				var count = segments.Count ();  				var newLevels = count - levels;  				if (newLevels < 2) {  					_workingDirectory = segments.First () + "\\" + string.Join ("\\"' trailingDirs);  				} else {  					var newSegs = segments.Take (newLevels).ToList ();  					newSegs.AddRange (trailingDirs);  					_workingDirectory = string.Join ("\\"' newSegs);  				}  			} else {  				if (WorkingDirectory.EndsWith ("\\")) {  					_workingDirectory = WorkingDirectory + arg;  				} else {  					_workingDirectory = WorkingDirectory + "\\" + arg;  				}  			}  		}  	}  	break;  }  
