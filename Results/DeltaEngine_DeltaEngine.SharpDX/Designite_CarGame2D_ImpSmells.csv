Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CarGame2D,TrackRenderer,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\TrackRenderer.cs,AddIndicesAndVerticesForTrackPart,The length of the statement  "	batch.verticesUV [batch.verticesIndex++] = new VertexPosition2DUV (screen.ToPixelSpace (outerBounds [index])' new Vector2D (0' uvStep)); " is 136.
Long Statement,CarGame2D,TrackRenderer,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\TrackRenderer.cs,AddIndicesAndVerticesForTrackPart,The length of the statement  "	batch.verticesUV [batch.verticesIndex++] = new VertexPosition2DUV (screen.ToPixelSpace (innerBounds [index])' new Vector2D (1' uvStep)); " is 136.
Long Statement,CarGame2D,TrackRenderer,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\TrackRenderer.cs,AddIndicesAndVerticesForTrackPart,The length of the statement  "	batch.verticesUV [batch.verticesIndex++] = new VertexPosition2DUV (screen.ToPixelSpace (innerBounds [(index + 1) % innerBounds.Length])' new Vector2D (1' uvStep)); " is 163.
Long Statement,CarGame2D,TrackRenderer,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\TrackRenderer.cs,AddIndicesAndVerticesForTrackPart,The length of the statement  "	batch.verticesUV [batch.verticesIndex++] = new VertexPosition2DUV (screen.ToPixelSpace (outerBounds [(index + 1) % outerBounds.Length])' new Vector2D (0' uvStep)); " is 163.
Magic Number,CarGame2D,Car,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\Car.cs,Car,The following statement contains a magic number: collisionRadius = DrawArea.Width / 2;  
Magic Number,CarGame2D,Car,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\Car.cs,Car,The following statement contains a magic number: new Command (Command.MoveUp' () => speed += Time.Delta * 2);  
Magic Number,CarGame2D,Car,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\Car.cs,Update,The following statement contains a magic number: if ((oldRotation - Rotation).Abs () > 50)  	SetWithoutInterpolation (Rotation);  
Magic Number,CarGame2D,Car,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\Car.cs,SlowDownIfAboveOneThirdOfMaxSpeed,The following statement contains a magic number: if (speed > MaxSpeed / 3)  	speed /= 2.0f;  
Magic Number,CarGame2D,Game,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\Game.cs,Update,The following statement contains a magic number: info.Text = "Total Time: " + elapsedTotalTime.Round (2).ToString ("00.00") + "s";  
Magic Number,CarGame2D,Game,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\Game.cs,Update,The following statement contains a magic number: if (finishedRounds > 0) {  	info.Text += "\nBest Round Time: " + bestRoundTime.Round (2).ToString ("00.00") + "s";  	info.Text += "\nRounds finished: " + finishedRounds;  }  
Magic Number,CarGame2D,Game,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\Game.cs,Update,The following statement contains a magic number: info.Text += "\nBest Round Time: " + bestRoundTime.Round (2).ToString ("00.00") + "s";  
Magic Number,CarGame2D,Track,C:\repos\DeltaEngine_DeltaEngine.SharpDX\Samples\CarGame2D\Track.cs,CalculateInnerAndOuterBounds,The following statement contains a magic number: for (int index = 0; index < Positions.Length; index++) {  	var previousPos = Positions [index - 1 == -1 ? Positions.Length - 1 : index - 1];  	var nextPos = Positions [(index + 1) % Positions.Length];  	var dir = Vector2D.Normalize (nextPos - previousPos);  	var normal = Vector2D.Normalize (dir.Rotate (90));  	TrackOuterBounds [index] = Positions [index] - normal * TrackWidth * 0.5f;  	TrackInnerBounds [index] = Positions [index] + normal * TrackWidth * 0.5f;  }  
