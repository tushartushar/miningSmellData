Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,ProcessContentLengthHeader,Cyclomatic complexity of the method is 10
Complex Method,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,BuildResponseHeaders,Cyclomatic complexity of the method is 8
Complex Method,NHttp,HttpMultiPartRequestParser,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpMultiPartRequestParser.cs,ParseHeaders,Cyclomatic complexity of the method is 9
Complex Method,NHttp,HttpReadBuffer,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpReadBuffer.cs,CopyToStream,Cyclomatic complexity of the method is 11
Complex Method,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParseHeaders,Cyclomatic complexity of the method is 12
Complex Method,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParseMultiPartItems,Cyclomatic complexity of the method is 10
Complex Method,NHttp,HttpServer,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpServer.cs,StopClients,Cyclomatic complexity of the method is 9
Complex Method,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,HtmlDecode,Cyclomatic complexity of the method is 13
Long Parameter List,NHttp,HttpOutputStream,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpOutputStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,NHttp,HttpOutputStream,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpOutputStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Complex Conditional,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,ProcessRequestCompleted,The conditional expression  "!_errored &&                  Server.State == HttpServerState.Started &&                  Headers.TryGetValue("Connection"' out connectionHeader) &&                  String.Equals(connectionHeader' "keep-alive"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,UriDecode,The conditional expression  "value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])"  is complex.
Empty Catch Block,NHttp,HttpServer,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpServer.cs,AcceptTcpClientCallback,The method has an empty catch block.
Empty Catch Block,NHttp,HttpTimeoutManager,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpTimeoutManager.cs,ProcessQueue,The method has an empty catch block.
Empty Catch Block,NHttp,LogManager,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\LogManager.cs,LogManager,The method has an empty catch block.
Magic Number,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,ProcessProlog,The following statement contains a magic number: Request = match.Groups[2].Value;
Magic Number,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,ProcessProlog,The following statement contains a magic number: Protocol = match.Groups[3].Value;
Magic Number,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,ProcessHeaders,The following statement contains a magic number: string[] parts = line.Split(new[] { ':' }' 2);
Magic Number,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,ProcessHeaders,The following statement contains a magic number: parts.Length != 2
Magic Number,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,ProcessContentLengthHeader,The following statement contains a magic number: string[] parts = contentTypeHeader.Split(new[] { ';' }' 2);
Magic Number,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,ProcessContentLengthHeader,The following statement contains a magic number: contentTypeExtra = parts.Length == 2 ? parts[1].Trim() : null;
Magic Number,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,ProcessContentLengthHeader,The following statement contains a magic number: switch (contentType)                  {                      case "application/x-www-form-urlencoded":                          _parser = new HttpUrlEncodedRequestParser(this' contentLength);                          break;                        case "multipart/form-data":                          string boundary = null;                            if (contentTypeExtra != null)                          {                              string[] parts = contentTypeExtra.Split(new[] { '=' }' 2);                                if (                                  parts.Length == 2 &&                                  String.Equals(parts[0]' "boundary"' StringComparison.OrdinalIgnoreCase)                              )                                  boundary = parts[1];                          }                            if (boundary == null)                              throw new ProtocolException("Expected boundary with multipart content type");                            _parser = new HttpMultiPartRequestParser(this' contentLength' boundary);                          break;                        default:                          _parser = new HttpUnknownRequestParser(this' contentLength);                          break;                  }
Magic Number,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,ProcessContentLengthHeader,The following statement contains a magic number: switch (contentType)                  {                      case "application/x-www-form-urlencoded":                          _parser = new HttpUrlEncodedRequestParser(this' contentLength);                          break;                        case "multipart/form-data":                          string boundary = null;                            if (contentTypeExtra != null)                          {                              string[] parts = contentTypeExtra.Split(new[] { '=' }' 2);                                if (                                  parts.Length == 2 &&                                  String.Equals(parts[0]' "boundary"' StringComparison.OrdinalIgnoreCase)                              )                                  boundary = parts[1];                          }                            if (boundary == null)                              throw new ProtocolException("Expected boundary with multipart content type");                            _parser = new HttpMultiPartRequestParser(this' contentLength' boundary);                          break;                        default:                          _parser = new HttpUnknownRequestParser(this' contentLength);                          break;                  }
Magic Number,NHttp,HttpClient,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpClient.cs,ProcessException,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,NHttp,HttpCookie,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpCookie.cs,HttpCookie,The following statement contains a magic number: string[] partParts = part.Split(new[] { '=' }' 2);
Magic Number,NHttp,HttpMultiPartRequestParser,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpMultiPartRequestParser.cs,ParseHeaders,The following statement contains a magic number: _fileStream = File.Create(_fileName' 4096' FileOptions.DeleteOnClose);
Magic Number,NHttp,HttpMultiPartRequestParser,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpMultiPartRequestParser.cs,ParseHeaders,The following statement contains a magic number: parts = line.Split(new[] { ':' }' 2);
Magic Number,NHttp,HttpMultiPartRequestParser,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpMultiPartRequestParser.cs,ParseHeaders,The following statement contains a magic number: parts.Length != 2
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParseHeaders,The following statement contains a magic number: string[] parts = header.Split(new[] { ';' }' 2);
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParseHeaders,The following statement contains a magic number: string[] encoding = parts[1].Trim().Split(new[] { '=' }' 2);
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParseHeaders,The following statement contains a magic number: encoding.Length == 2 && String.Equals(encoding[0]' "charset"' StringComparison.OrdinalIgnoreCase)
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParseHeaders,The following statement contains a magic number: parts.Length == 2
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParseHeaders,The following statement contains a magic number: string[] partParts = part.Split(new[] { '=' }' 2);
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParseMultiPartItems,The following statement contains a magic number: name = ParseContentDispositionItem(part.Substring(5));
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParseContentDispositionItem,The following statement contains a magic number: value = value.Substring(1' value.Length - 2);
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParseContentDispositionItem,The following statement contains a magic number: value.Length >= 2 && value[0] == '"' && value[value.Length - 1] == '"'
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParsePath,The following statement contains a magic number: string[] parts = client.Request.Split(new[] { '?' }' 2);
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParsePath,The following statement contains a magic number: parts.Length == 2
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParsePath,The following statement contains a magic number: parts = hostHeader.Split(new[] { ':' }' 2);
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,ParsePath,The following statement contains a magic number: parts.Length == 2
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,BuildServerVariables,The following statement contains a magic number: string[] parts = client.Request.Split(new[] { '?' }' 2);
Magic Number,NHttp,HttpRequest,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpRequest.cs,BuildServerVariables,The following statement contains a magic number: ServerVariables["QUERY_STRING"] = parts.Length == 2 ? parts[1] : "";
Magic Number,NHttp,HttpResponse,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpResponse.cs,HttpResponse,The following statement contains a magic number: StatusCode = 200;
Magic Number,NHttp,HttpResponse,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpResponse.cs,Redirect,The following statement contains a magic number: StatusCode = permanent ? 301 : 302;
Magic Number,NHttp,HttpResponse,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpResponse.cs,Redirect,The following statement contains a magic number: StatusCode = permanent ? 301 : 302;
Magic Number,NHttp,HttpServer,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpServer.cs,HttpServer,The following statement contains a magic number: ReadBufferSize = 4096;
Magic Number,NHttp,HttpServer,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpServer.cs,HttpServer,The following statement contains a magic number: WriteBufferSize = 4096;
Magic Number,NHttp,HttpServer,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpServer.cs,HttpServer,The following statement contains a magic number: ShutdownTimeout = TimeSpan.FromSeconds(30);
Magic Number,NHttp,HttpServer,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpServer.cs,HttpServer,The following statement contains a magic number: ReadTimeout = TimeSpan.FromSeconds(90);
Magic Number,NHttp,HttpServer,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpServer.cs,HttpServer,The following statement contains a magic number: WriteTimeout = TimeSpan.FromSeconds(90);
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,UrlDecodeTo,The following statement contains a magic number: string[] item = part.Split(new[] { '=' }' 2);
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,UriDecode,The following statement contains a magic number: result[length++] = (byte)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]));
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,UriDecode,The following statement contains a magic number: result[length++] = (byte)(HexToInt(value[i + 1]) * 16 + HexToInt(value[i + 2]));
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,UriDecode,The following statement contains a magic number: i += 2;
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,UriDecode,The following statement contains a magic number: value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,UriDecode,The following statement contains a magic number: value[i] == '%' &&                      i < value.Length - 2 &&                      IsHex(value[i + 1]) &&                      IsHex(value[i + 2])
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,HexToInt,The following statement contains a magic number: switch (value)              {                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return value - '0';                    case 'a':                  case 'b':                  case 'c':                  case 'd':                  case 'e':                  case 'f':                      return (value - 'a') + 10;                    case 'A':                  case 'B':                  case 'C':                  case 'D':                  case 'E':                  case 'F':                      return (value - 'A') + 10;                    default:                      throw new ArgumentOutOfRangeException("value");              }
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,HexToInt,The following statement contains a magic number: switch (value)              {                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return value - '0';                    case 'a':                  case 'b':                  case 'c':                  case 'd':                  case 'e':                  case 'f':                      return (value - 'a') + 10;                    case 'A':                  case 'B':                  case 'C':                  case 'D':                  case 'E':                  case 'F':                      return (value - 'A') + 10;                    default:                      throw new ArgumentOutOfRangeException("value");              }
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,HtmlDecode,The following statement contains a magic number: int maxSearch = Math.Min(value.Length' i + _longestHtmlEntity + 2);
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,HtmlDecode,The following statement contains a magic number: int offset = 2;
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,HtmlDecode,The following statement contains a magic number: value[i + 2] == 'x' || value[i + 2] == 'X'
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,HtmlDecode,The following statement contains a magic number: value[i + 2] == 'x' || value[i + 2] == 'X'
Magic Number,NHttp,HttpUtil,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpUtil.cs,HtmlDecode,The following statement contains a magic number: value[i] == '&' && value.Length > i + 2
Missing Default,NHttp,HttpMultiPartRequestParser,C:\research\architectureSmells\repos\pvginkel_NHttp\NHttp\HttpMultiPartRequestParser.cs,Parse,The following switch statement is missing a default case: switch (_state)              {                  case ParserState.BeforeFirstHeaders:                      ParseFirstHeader();                      break;                    case ParserState.ReadingHeaders:                      ParseHeaders();                      break;                    case ParserState.ReadingContent:                      ParseContent();                      break;                    case ParserState.ReadingBoundary:                      ParseBoundary();                      break;              }
