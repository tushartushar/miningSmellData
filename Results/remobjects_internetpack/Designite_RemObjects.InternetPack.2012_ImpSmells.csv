Implementation smell,Namespace,Class,File,Method,Description
Long Method,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The method has 128 lines of code.
Long Method,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,HeaderLinesCallback,The method has 100 lines of code.
Long Method,RemObjects.InternetPack.Messages.Mime.Header,MessageHeader,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Header\MessageHeader.cs,ParseHeader,The method has 133 lines of code.
Complex Method,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,Cyclomatic complexity of the method is 11
Complex Method,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,Cyclomatic complexity of the method is 62
Complex Method,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseFilter,Cyclomatic complexity of the method is 14
Complex Method,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseValue,Cyclomatic complexity of the method is 16
Complex Method,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseSimple,Cyclomatic complexity of the method is 24
Complex Method,RemObjects.InternetPack.Ldap,BerValue,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,Read,Cyclomatic complexity of the method is 33
Complex Method,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,Cyclomatic complexity of the method is 62
Complex Method,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Bind,Cyclomatic complexity of the method is 14
Complex Method,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Search,Cyclomatic complexity of the method is 53
Complex Method,RemObjects.InternetPack.Ldap,LdapUserLookup,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Login,Cyclomatic complexity of the method is 18
Complex Method,RemObjects.InternetPack.Ldap,LdapUserLookup,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,StripGroupBase,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,HeaderFirstLineCallback,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,HeaderLinesCallback,Cyclomatic complexity of the method is 19
Complex Method,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendResponse,Cyclomatic complexity of the method is 39
Complex Method,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,ResponseBodyCallback,Cyclomatic complexity of the method is 11
Complex Method,RemObjects.InternetPack.Http,HttpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpClient.cs,TryDispatch,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHeader,Cyclomatic complexity of the method is 10
Complex Method,RemObjects.InternetPack.Http,HttpOutgoingRequestResponse,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,FinalizeHeader,Cyclomatic complexity of the method is 13
Complex Method,RemObjects.InternetPack.Http,HttpOutgoingRequestResponse,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,WriteBodyToConnection,Cyclomatic complexity of the method is 20
Complex Method,RemObjects.InternetPack.Http,HttpClientRequest,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,FinalizeHeader,Cyclomatic complexity of the method is 17
Complex Method,RemObjects.InternetPack.Http,UrlParser,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,RemObjects.InternetPack,AsyncServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncServer.cs,AcceptCallback,Cyclomatic complexity of the method is 12
Complex Method,RemObjects.InternetPack,Client,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Client.cs,GetConnection,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BeginReadLine,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,IntReadLineCallback,Cyclomatic complexity of the method is 10
Complex Method,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,IntReadCallback,Cyclomatic complexity of the method is 14
Complex Method,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,Cyclomatic complexity of the method is 11
Complex Method,RemObjects.InternetPack,ConnectionPool,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\ConnectionPool.cs,GetNewConnection,Cyclomatic complexity of the method is 11
Complex Method,RemObjects.InternetPack,Listener,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Server.cs,Listen,Cyclomatic complexity of the method is 14
Complex Method,RemObjects.InternetPack.Dns,DnsLookup,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Dns.cs,TryStringAsIPAddress,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,Cyclomatic complexity of the method is 40
Complex Method,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,Cyclomatic complexity of the method is 41
Complex Method,RemObjects.InternetPack.Ftp,FtpListing,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,ValidateDirectory,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_RNTO,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_DELE,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_RMD,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_MKD,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_STOR,Cyclomatic complexity of the method is 12
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_APPE,Cyclomatic complexity of the method is 12
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_RETR,Cyclomatic complexity of the method is 12
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_LIST,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_TYPE,Cyclomatic complexity of the method is 13
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_CWD,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_CDUP,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,EncodeMessage,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,ParseHeader,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Messages,HeaderField,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\MessageHeaderField.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Messages.Mime.Decode,EncodedWord,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\EncodedWord.cs,Decode,Cyclomatic complexity of the method is 11
Complex Method,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Messages.Mime.Decode,Rfc2231Decoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\Rfc2231Decoder.cs,DecodePairs,Cyclomatic complexity of the method is 9
Complex Method,RemObjects.InternetPack.Messages.Mime.Decode,Rfc2822DateTime,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\Rfc2822DateTime.cs,MatchEvaluator,Cyclomatic complexity of the method is 38
Complex Method,RemObjects.InternetPack.Messages.Mime.Decode,StreamUtility,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\Utility.cs,ReadLineAsBytes,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Messages.Mime.Header,HeaderExtractor,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Header\HeaderExtractor.cs,ExtractHeaders,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Messages.Mime.Header,HeaderFieldParser,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Header\HeaderFieldParser.cs,ParseImportance,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Messages.Mime.Header,HeaderFieldParser,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Header\HeaderFieldParser.cs,ParseContentType,Cyclomatic complexity of the method is 19
Complex Method,RemObjects.InternetPack.Messages.Mime.Header,HeaderFieldParser,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Header\HeaderFieldParser.cs,ParseContentDisposition,Cyclomatic complexity of the method is 26
Complex Method,RemObjects.InternetPack.Messages.Mime.Header,MessageHeader,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Header\MessageHeader.cs,ParseHeader,Cyclomatic complexity of the method is 78
Complex Method,RemObjects.InternetPack.Messages.Mime,MessagePart,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\MessagePart.cs,DecodeBody,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,Cyclomatic complexity of the method is 8
Complex Method,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,SendMessage,Cyclomatic complexity of the method is 9
Long Parameter List,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseFilter,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseValue,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseAnd,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseOr,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseNot,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseFilterList,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseSimple,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Search,The method has 8 parameters.
Long Parameter List,RemObjects.InternetPack.Http,HttpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpClient.cs,GetHttpConnection,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,IntBeginRead,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,IntBeginWrite,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BeginRead,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BeginWrite,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateCertificateRequest,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack,SslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnection.cs,IntBeginRead,The method has 5 parameters.
Long Parameter List,RemObjects.InternetPack,SslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnection.cs,IntBeginWrite,The method has 5 parameters.
Long Identifier,RemObjects.InternetPack,MonoCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\MonoCertificateBuilder.cs,CreateKeyUseSection,The length of the parameter lExtendedKeyUsageExtensionType is 30.
Long Identifier,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateKeyUseSection,The length of the parameter lExtensionEnhancedKeyUsageType is 30.
Long Identifier,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateCertificateRequest,The length of the parameter lCertificateRequestCertificateType is 34.
Long Identifier,RemObjects.InternetPack.Messages.Mime,MessagePart,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\MessagePart.cs,GetMultiPartParts,The length of the parameter lastMultipartBoundaryEncountered is 32.
Long Statement,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The length of the statement  "		return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ()); " is 139.
Long Statement,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The length of the statement  "		return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ()); " is 132.
Long Statement,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The length of the statement  "				sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ()))); " is 121.
Long Statement,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseSimple,The length of the statement  "			result = new BerSequence (Asn1.LDAPFILTEREQUALITYMATCH' new BerString (OCTETSTRING' attributename)' new BerString (OCTETSTRING' currval)); " is 138.
Long Statement,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseSimple,The length of the statement  "		result = new BerSequence (Asn1.LDAPFILTERAPPROXMATCH' new BerString (OCTETSTRING' attributename)' new BerString (OCTETSTRING' ParseValue (filter' ref pos' ref len' ref tok' ref res))); " is 184.
Long Statement,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseSimple,The length of the statement  "		result = new BerSequence (Asn1.LDAPFILTERGREATEROREQUAL' new BerString (OCTETSTRING' attributename)' new BerString (OCTETSTRING' ParseValue (filter' ref pos' ref len' ref tok' ref res))); " is 187.
Long Statement,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,ParseSimple,The length of the statement  "		result = new BerSequence (Asn1.LDAPFILTERLESSOREQUAL' new BerString (OCTETSTRING' attributename)' new BerString (OCTETSTRING' ParseValue (filter' ref pos' ref len' ref tok' ref res))); " is 184.
Long Statement,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Escape,The length of the statement  "	return s.Replace ("\\"' "\\5c").Replace ("*"' "\\2a").Replace ("("' "\\28").Replace (")"' "\\29").Replace ("\0"' "\\00").Replace ("/"' "\\2f"); " is 143.
Long Statement,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The length of the statement  "	if (lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer) { " is 157.
Long Statement,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Bind,The length of the statement  "		Int32 lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' "")' new BerSequence (Asn1.LDAPBINDSASL' new BerString (Asn1.OCTETSTRING' "DIGEST-MD5"))); " is 208.
Long Statement,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Bind,The length of the statement  "		lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' "")' new BerSequence (Asn1.LDAPBINDSASL' new BerString (Asn1.OCTETSTRING' lEncodedResult))); " is 204.
Long Statement,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Bind,The length of the statement  "		lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' "")' new BerSequence (Asn1.LDAPBINDSASL' new BerString (Asn1.OCTETSTRING' "DIGEST-MD5"))); " is 202.
Long Statement,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Bind,The length of the statement  "		Int32 lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' dn)' new BerString (Asn1.LDAPBINDPASSWORD' password)); " is 172.
Long Statement,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Search,The length of the statement  "	Int32 lSequenceId = SendLdapRequest (Asn1.LDAPSEARCHREQ' new BerString (Asn1.OCTETSTRING' baseObject)' new BerEnumerated ((Int32)scope)' new BerEnumerated ((Int32)aliases)' new BerInteger (size)' new BerInteger (time)' new BerBoolean (typesOnly)' Asn1.ParseFilter (String.IsNullOrEmpty (filter) ? "(objectclass=*)" : filter)' new BerSequence (Asn1.SEQUENCE' attributevalues)); " is 376.
Long Statement,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Search,The length of the statement  "						if (attribute.Type == BerType.Sequence && ((BerSequence)attribute).Items.Count > 0 && ((BerSequence)attribute).Items [0].Type == BerType.String) { " is 146.
Long Statement,RemObjects.InternetPack.Ldap,LdapUserLookup,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Login,The length of the statement  "		foreach (LdapObject obj in lClient.Search (fUserSearchBase' fSearchSubTree ? LdapClient.SearchScope.FullSubtree : LdapClient.SearchScope.SingleLevel' LdapClient.AliasDereferencing.Always' 0' 0' false' fUserFilter' new String[] { " is 228.
Long Statement,RemObjects.InternetPack.Ldap,LdapUserLookup,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Login,The length of the statement  "		foreach (LdapObject obj in lClient.Search (lResult.DN' LdapClient.SearchScope.BaseObject' LdapClient.AliasDereferencing.Always' 0' 0' false' null' null)) { " is 155.
Long Statement,RemObjects.InternetPack.Ldap,LdapUserLookup,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Login,The length of the statement  "			foreach (LdapObject obj in lClient.Search (fGroupSearchBase' fSearchSubTree ? LdapClient.SearchScope.FullSubtree : LdapClient.SearchScope.SingleLevel' LdapClient.AliasDereferencing.Always' 0' 0' false' s' new String[] { " is 219.
Long Statement,RemObjects.InternetPack.Ldap,LdapUserLookup,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,StripGroupBase,The length of the statement  "		if (0 != String.Compare (lItems [lItems.Length - lGroupDN.Length + i]' lGroupDN [i]' StringComparison.InvariantCultureIgnoreCase)) " is 130.
Long Statement,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,HeaderLinesCallback,The length of the statement  "					((AsyncHttpServer)this.Owner).TriggerBeforeHaveData (new AsyncHttpRequestEventArgs (this.DataConnection' this.fContext)); " is 121.
Long Statement,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,HeaderLinesCallback,The length of the statement  "		if (fContext.CurrentRequest.Header.Count >= fContext.CurrentRequest.Header.MaxHeaderLines && fContext.CurrentRequest.Header.MaxHeaderLinesEnabled) { " is 148.
Long Statement,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendInvalidRequest,The length of the statement  "		this.fContext.CurrentResponse.SendError (HttpStatusCode.InternalServerError' "Server Error while processing HTTP request."); " is 124.
Long Statement,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendInvalidRequest,The length of the statement  "		this.fContext.CurrentResponse.ContentBytes = this.fContext.CurrentResponse.ContentString != null ? this.fContext.CurrentResponse.Encoding.GetBytes (fContext.CurrentResponse.ContentString) : new Byte[0]; " is 202.
Long Statement,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendInvalidRequest,The length of the statement  "	Array.Copy (fContext.CurrentResponse.ContentBytes' 0' lData' lHeader.Length' fContext.CurrentResponse.ContentBytes.Length); " is 123.
Long Statement,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendResponse,The length of the statement  "				DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' fContext.CurrentResponse.ContentBytes); " is 134.
Long Statement,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendResponse,The length of the statement  "				DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' fContext.CurrentResponse.ContentStream); " is 135.
Long Statement,RemObjects.InternetPack.Http,HttpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpClient.cs,TryDispatch,The length of the statement  "		HttpClient.SetAuthorizationHeader (request.Header' "Proxy-Authorization"' this.ProxySettings.UserName' this.ProxySettings.Password); " is 132.
Long Statement,RemObjects.InternetPack.Http,HttpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpClient.cs,TryDispatch,The length of the statement  "	Connection lConnection = this.GetHttpConnection (lSslConnection' request.Url.Hostname' request.Url.Port' lHostname' lPort); " is 123.
Long Statement,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHttpMethodName,The length of the statement  "	if ((lHttpMethodName == "POST") || (lHttpMethodName == "GET ") || (lHttpMethodName == "HTTP") || (lHttpMethodName == "HEAD") || (lHttpMethodName == "PUT ")) " is 156.
Long Statement,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHeader,The length of the statement  "		throw new HttpRequestInvalidException (HttpStatusCode.InternalServerError' "Invalid HTTP Request' 'POST'' 'MERGE'' 'GET'' 'DELETE'' 'PUT' or 'HEAD' header expected."); " is 167.
Long Statement,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHeader,The length of the statement  "		if (this.MaxHeaderLinesEnabled && this.fHeaders.Count > this.MaxHeaderLines - 1)// -1 because FirstHeader is not in hashtable " is 125.
Long Statement,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHeader,The length of the statement  "			throw new HttpHeaderException (String.Format ("Too many header lines received (maximum is set to {0})"' MaxHeaderLines)); " is 121.
Long Statement,RemObjects.InternetPack.Http,HttpIncomingRequestResponse,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,Validate,The length of the statement  "			throw new HttpRequestInvalidException (HttpStatusCode.InternalServerError' "Bad Request: Chunked encoding not supported' yet"); " is 127.
Long Statement,RemObjects.InternetPack.Http,HttpServerResponse,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,SendError,The length of the statement  "	String lMessageHtml = String.Format ("<h1>Error {0} {1}</h1><p>{2}</p><hr /><p>{3}</p>"' this.HttpCode' this.ResponseText' message' DEFAULT_SERVER_NAME); " is 153.
Long Statement,RemObjects.InternetPack.Http,HttpServerResponse,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,SendError,The length of the statement  "	String lMessageHtml = String.Format ("<h1>Error {0} {1}</h1><p>{2}: {3}</p><p>{4}</p><hr /><p>{3}</p>"' responseCode' ex.GetType ().Name' ex.GetType ().FullName' ex.Message' ex.StackTrace); " is 189.
Long Statement,RemObjects.InternetPack.Http,HttpClientRequest,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,FinalizeHeader,The length of the statement  "	this.Header.SetRequestHeader ("1.1"' lRequestTypeString' this.UseProxy ? this.Url.ToString () : this.Url.PathAndParams); " is 120.
Long Statement,RemObjects.InternetPack.Http,HttpSslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Http\HttpSslConnection.cs,ComposeSslTunnelRequest,The length of the statement  "		Byte[] lByteData = Encoding.UTF8.GetBytes (this.fHttpsConnectionFactory.ProxySettings.UserName + ":" + this.fHttpsConnectionFactory.ProxySettings.Password); " is 156.
Long Statement,RemObjects.InternetPack.Http,SimpleHttpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SimpleHttpServer.cs,HandleHttpRequest,The length of the statement  "		response.SendError (HttpStatusCode.BadRequest' String.Format ("Request Type '{0}' not supported."' request.Header.RequestType)); " is 128.
Long Statement,RemObjects.InternetPack.Http,SimpleHttpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SimpleHttpServer.cs,HandleHttpRequest,The length of the statement  "		response.SendError (HttpStatusCode.Forbidden' String.Format ("Bad Request: Path '{0}' contains '..' which is invalid."' lPath)); " is 128.
Long Statement,RemObjects.InternetPack.Http,UrlConverter,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,ConvertTo,The length of the statement  "	return destinationType == typeof(String) && value is UrlParser ? ((UrlParser)value).ToString () : base.ConvertTo (context' culture' value' destinationType); " is 156.
Long Statement,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ResetStatistics,The length of the statement  "	/* if we have still bytes in the buffer' we'll still want to count then against future "received" counts */if (fBuffer != null) " is 127.
Long Statement,RemObjects.InternetPack,Listener,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Server.cs,Listen,The length of the statement  "					// mono can fail in that code if the remote side has been disconnected. Since we already create a thread we have to run it (leak otherwise) " is 139.
Long Statement,RemObjects.InternetPack,CertificateBuilderFactory,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\CertificateBuilderFactory.cs,Create,The length of the statement  "	return Environment.OSVersion.Platform == PlatformID.Win32NT ? (ICertificateBuilder)new NetCertificateBuilder (hashAlgorithm) : new MonoCertificateBuilder (new MonoSecurityTypeProvider ()' hashAlgorithm); " is 203.
Long Statement,RemObjects.InternetPack,MonoCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\MonoCertificateBuilder.cs,CreateKeyUseSection,The length of the statement  "	//Mono.Security.X509.Extensions.ExtendedKeyUsageExtension usageExtension = new Mono.Security.X509.Extensions.ExtendedKeyUsageExtension(); " is 137.
Long Statement,RemObjects.InternetPack,MonoCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\MonoCertificateBuilder.cs,CreateKeyUseSection,The length of the statement  "	Type lExtendedKeyUsageExtensionType = this.fTypeProvider.GetType ("Mono.Security.X509.Extensions.ExtendedKeyUsageExtension"); " is 125.
Long Statement,RemObjects.InternetPack,MonoCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\MonoCertificateBuilder.cs,CreateKeyUseSection,The length of the statement  "	Object lKeyPurpose = lExtendedKeyUsageExtensionType.InvokeMember ("KeyPurpose"' BindingFlags.GetProperty' null' lKeyUsage' new Object[] { " is 137.
Long Statement,RemObjects.InternetPack,MonoCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\MonoCertificateBuilder.cs,CreateNativeCertificateBuilder,The length of the statement  "	lCertificateBuilderType.InvokeMember ("SerialNumber"' BindingFlags.SetProperty' null' lCertificateBuilder' new Object[] { " is 121.
Long Statement,RemObjects.InternetPack,MonoCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\MonoCertificateBuilder.cs,CreateNativeCertificateBuilder,The length of the statement  "	lCertificateBuilderType.InvokeMember ("SubjectName"' BindingFlags.SetProperty' null' lCertificateBuilder' new Object[] { " is 120.
Long Statement,RemObjects.InternetPack,MonoCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\MonoCertificateBuilder.cs,CreateNativeCertificateBuilder,The length of the statement  "	lCertificateBuilderType.InvokeMember ("SubjectPublicKey"' BindingFlags.SetProperty' null' lCertificateBuilder' new Object[] { " is 125.
Long Statement,RemObjects.InternetPack,MonoCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\MonoCertificateBuilder.cs,CreateNativeCertificateBuilder,The length of the statement  "	Object lExtensions = lCertificateBuilderType.InvokeMember ("Extensions"' BindingFlags.GetProperty' null' lCertificateBuilder' new Object[] { " is 140.
Long Statement,RemObjects.InternetPack,MonoCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\MonoCertificateBuilder.cs,BuildCertificate,The length of the statement  "	Object lRawData = lCertificateBuilderType.InvokeMember ("Sign"' BindingFlags.InvokeMethod' null' builder' new Object[] { " is 120.
Long Statement,RemObjects.InternetPack,MonoCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\MonoCertificateBuilder.cs,Export,The length of the statement  "	Object lCertificateBuilder = this.CreateNativeCertificateBuilder (lSubjectName' lIssuerName' lSubjectKey' lKeyUseSection); " is 122.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateHashAlgorithm,The length of the statement  "	//lHashAlgorithm.InitializeFromAlgorithmName(ObjectIdGroupId.XCN_CRYPT_HASH_ALG_OID_GROUP_ID' ObjectIdPublicKeyFlags.XCN_CRYPT_OID_INFO_PUBKEY_ANY' " is 147.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateHashAlgorithm,The length of the statement  "	lCObjectIdType.InvokeMember ("InitializeFromAlgorithmName"' BindingFlags.InvokeMethod' null' lHashAlgorithm' new Object[] { " is 123.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateKeyUseSection,The length of the statement  "	lExtensionEnhancedKeyUsageType.InvokeMember ("InitializeEncode"' BindingFlags.InvokeMethod' null' lKeyUsage' new Object[] { " is 123.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateCertificateRequest,The length of the statement  "	lCertificateRequestCertificateType.InvokeMember ("InitializeFromPrivateKey"' BindingFlags.InvokeMethod' null' lCertificateRequest' new Object[] { " is 145.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateCertificateRequest,The length of the statement  "	lCertificateRequestCertificateType.InvokeMember ("Subject"' BindingFlags.SetProperty' null' lCertificateRequest' new Object[] { " is 127.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateCertificateRequest,The length of the statement  "	lCertificateRequestCertificateType.InvokeMember ("Issuer"' BindingFlags.SetProperty' null' lCertificateRequest' new Object[] { " is 126.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateCertificateRequest,The length of the statement  "	lCertificateRequestCertificateType.InvokeMember ("NotBefore"' BindingFlags.SetProperty' null' lCertificateRequest' new Object[] { " is 129.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateCertificateRequest,The length of the statement  "	lCertificateRequestCertificateType.InvokeMember ("NotAfter"' BindingFlags.SetProperty' null' lCertificateRequest' new Object[] { " is 128.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateCertificateRequest,The length of the statement  "	Object lExtensions = lCertificateRequestCertificateType.InvokeMember ("X509Extensions"' BindingFlags.GetProperty' null' lCertificateRequest' new Object[] { " is 155.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateCertificateRequest,The length of the statement  "	lCertificateRequestCertificateType.InvokeMember ("HashAlgorithm"' BindingFlags.SetProperty' null' lCertificateRequest' new Object[] { " is 133.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateCertificateRequest,The length of the statement  "	lCertificateRequestCertificateType.InvokeMember ("SuppressDefaults"' BindingFlags.SetProperty' null' lCertificateRequest' new Object[] { " is 136.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreateCertificateRequest,The length of the statement  "	lCertificateRequestCertificateType.InvokeMember ("Encode"' BindingFlags.InvokeMethod' null' lCertificateRequest' new Object[] { " is 127.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,EnrollCertificate,The length of the statement  "	//lEnroll.InstallResponse(InstallResponseRestrictionFlags.XCN_ALLOW_UNTRUSTED' csr' EncodingType.XCN_CRYPT_STRING_BASE64' password); " is 132.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,EnrollCertificate,The length of the statement  "	String lCertificateBase64encoded = (String)lEnrollmentType.InvokeMember ("CreatePFX"' BindingFlags.InvokeMethod' null' lEnroll' new Object[] { " is 142.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,EnrollCertificate,The length of the statement  "	return new X509Certificate2 (Convert.FromBase64String (lCertificateBase64encoded)' password' X509KeyStorageFlags.Exportable); " is 125.
Long Statement,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,Export,The length of the statement  "	Object lCertificateRequest = this.CreateCertificateRequest (lSubjectName' lIssuerName' lPrivateKey' lKeyUseSection' lHashAlgorithm); " is 132.
Long Statement,RemObjects.InternetPack,SslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnection.cs,GetNetSecurityProtocol,The length of the statement  "			SslConnection.fNetSecurityProtocolTls = System.Security.Authentication.SslProtocols.Tls | (System.Security.Authentication.SslProtocols)Enum.Parse (typeof(System.Security.Authentication.SslProtocols)' "Tls12"); " is 209.
Long Statement,RemObjects.InternetPack,SslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnection.cs,GetNetSecurityProtocol,The length of the statement  "	return this.fFactory.UseTls ? SslConnection.fNetSecurityProtocolTls : System.Security.Authentication.SslProtocols.Default; " is 122.
Long Statement,RemObjects.InternetPack,SslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnection.cs,BeginInitializeServerConnection,The length of the statement  "	return this.fSslStream.BeginAuthenticateAsServer (this.fFactory.Certificate' false' this.GetNetSecurityProtocol ()' false' callback' state); " is 140.
Long Statement,RemObjects.InternetPack,SslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnection.cs,InitializeClientConnection,The length of the statement  "	this.fSslStream.AuthenticateAsClient (this.fFactory.TargetHostName' new X509CertificateCollection ()' this.GetNetSecurityProtocol ()' false); " is 141.
Long Statement,RemObjects.InternetPack,SslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnection.cs,BeginInitializeClientConnection,The length of the statement  "	return this.fSslStream.BeginAuthenticateAsClient (this.fFactory.TargetHostName' new X509CertificateCollection ()' this.GetNetSecurityProtocol ()' false' callback' state); " is 170.
Long Statement,RemObjects.InternetPack,SslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnection.cs,DataSocketReceiveWhatsAvaiable,The length of the statement  "	return (this.fFactory.UseMono && this.TimeoutEnabled) ? this.MonoDataSocketReceiveWhatsAvaiable (buffer' offset' size) : this.NativeDataSocketReceiveWhatsAvaiable (buffer' offset' size); " is 186.
Long Statement,RemObjects.InternetPack,SslConnectionFactory,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnectionFactory.cs,LoadCertificate,The length of the statement  "		throw new CryptographicException ("Certificate not set. Either set the certificate directly or provide its file name or thumbprint"); " is 133.
Long Statement,RemObjects.InternetPack,SslConnectionFactory,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnectionFactory.cs,LoadCertificateFromFile,The length of the statement  "	this.Certificate = new X509Certificate2 (this.CertificateFileName' lEventArgs.Password' X509KeyStorageFlags.Exportable); " is 120.
Long Statement,RemObjects.InternetPack,SslConnectionFactory,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnectionFactory.cs,LoadCertificateFromStore,The length of the statement  "	X509Certificate2 lCertificate = SslConnectionFactory.LoadCertificateFromStore (lThumbprint' StoreLocation.CurrentUser) ?? SslConnectionFactory.LoadCertificateFromStore (lThumbprint' StoreLocation.LocalMachine); " is 210.
Long Statement,RemObjects.InternetPack,SslConnectionFactory,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnectionFactory.cs,LoadCertificateFromStore,The length of the statement  "		X509Certificate2Collection lCertificates = lCertificateStore.Certificates.Find (X509FindType.FindByThumbprint' thumbprint' false); " is 130.
Long Statement,RemObjects.InternetPack.StandardServers,EchoWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\EchoServer.cs,DoWork,The length of the statement  "		/* a tiny buffer is good enough for echo server */lReceived = this.DataConnection.Read (lReceiveBuffer' 0' lReceiveBuffer.Length); " is 130.
Long Statement,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,StartPassiveConnection,The length of the statement  "	this.fDataAddress = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lGroups ["A1"].Value' lGroups ["A2"].Value' lGroups ["A3"].Value' lGroups ["A4"].Value)); " is 160.
Long Statement,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,StartActiveConnection,The length of the statement  "	String lPortCommand = String.Format ("PORT {0}'{1}'{2}'{3}'{4}'{5}"' lAddress [0]' lAddress [1]' lAddress [2]' lAddress [3]' unchecked((Byte)(lPort >> 8))' unchecked((Byte)lPort)); " is 180.
Long Statement,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,TriggerOnBytesReceived,The length of the statement  "		this.OnTransferProgress (sender' new TransferProgressEventArgs (TransferDirection.Receive' ((Connection)sender).BytesReceived)); " is 128.
Long Statement,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,InternalOnBytesSent,The length of the statement  "		this.OnTransferProgress (sender' new TransferProgressEventArgs (TransferDirection.Send' ((Connection)sender).BytesSent)); " is 121.
Long Statement,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The length of the statement  "	return String.Format ("{0} {1'3} {2'8} {3'8} {4'7} {5} {6}"' new String (lRights)' this.SubItemCount' this.User' this.Group' this.Size' FtpListingItem.FtpDateToString (this.FileDate)' this.FileName); " is 199.
Long Statement,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PASV,The length of the statement  "		e.Connection.WriteLine ("227 Entering Passive Mode ({0}'{1}'{2}'{3}'{4}'{5})."' lAddress [0]' lAddress [1]' lAddress [2]' lAddress [3]' unchecked((Byte)(lPort >> 8))' unchecked((Byte)lPort)); " is 191.
Long Statement,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_REST,The length of the statement  "				e.Connection.WriteLine (String.Format ("350 Restarting at {0}. Send STORE or RETRIEVE to initiate transfer."' lRestPoint)); " is 123.
Long Statement,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,HandleCommandException,The length of the statement  "		connection.WriteLine (String.Format ("500 Internal Error: ({0}) {1}"' exception.GetType ().FullName' CleanStringForCommandResponse (exception.Message))); " is 153.
Long Statement,RemObjects.InternetPack.Messages,MailMessage,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,GetDateHome,The length of the statement  "		return DateTime.Parse (lDate' new System.Globalization.DateTimeFormatInfo ()' System.Globalization.DateTimeStyles.AllowWhiteSpaces); " is 132.
Long Statement,RemObjects.InternetPack.Messages,MailMessage,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,GetDateHome,The length of the statement  "		return DateTime.ParseExact (lDate' "ddd' d MMM yyyy HH':'mm':'ss zzz"' new System.Globalization.DateTimeFormatInfo ()' System.Globalization.DateTimeStyles.AllowWhiteSpaces); " is 173.
Long Statement,RemObjects.InternetPack.Messages,HeaderField,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\MessageHeaderField.cs,Parse,The length of the statement  "					lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder; " is 151.
Long Statement,RemObjects.InternetPack.Messages,HeaderField,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\MessageHeaderField.cs,Parse,The length of the statement  "			lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder; " is 151.
Long Statement,RemObjects.InternetPack.Messages.Mime.Decode,Rfc2231Decoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\Rfc2231Decoder.cs,Decode,The length of the statement  "			throw new ArgumentException ("When splitting the part \"" + part + "\" by = there was " + keyValue.Length + " parts. Only 1 and 2 are supported"); " is 146.
Long Statement,RemObjects.InternetPack.Messages.Mime.Decode,Rfc2231Decoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\Rfc2231Decoder.cs,DecodePairs,The length of the statement  "		if (key.EndsWith ("*0"' StringComparison.OrdinalIgnoreCase) || key.EndsWith ("*0*"' StringComparison.OrdinalIgnoreCase)) { " is 122.
Long Statement,RemObjects.InternetPack.Messages.Mime,MessagePart,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\MessagePart.cs,GetMultiPartParts,The length of the statement  "		Int32 startLocation = FindPositionOfNextMultiPartBoundary (stream' multipPartBoundary' out lastMultipartBoundaryEncountered) + ("--" + multipPartBoundary + "\r\n").Length; " is 171.
Long Statement,RemObjects.InternetPack.Messages.Mime,MessagePart,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\MessagePart.cs,GetMultiPartParts,The length of the statement  "			Int32 stopLocation = FindPositionOfNextMultiPartBoundary (stream' multipPartBoundary' out lastMultipartBoundaryEncountered) - "\r\n".Length; " is 140.
Long Statement,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The length of the statement  "			throw new Exception (String.Format ("Invalid AUTH username reply: {0} {1}"' this.LastResponseNo' this.LastResponseText)); " is 121.
Long Statement,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The length of the statement  "			throw new Exception (String.Format ("Invalid AUTH password reply: {0} {1}"' this.LastResponseNo' this.LastResponseText)); " is 121.
Complex Conditional,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Open,The conditional expression  "(SslOptions.Enabled || UseStartTLS) && SslOptions.TargetHostName == null && HostName != null"  is complex.
Complex Conditional,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The conditional expression  "lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer"  is complex.
Complex Conditional,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHttpMethodName,The conditional expression  "(lHttpMethodName == "POST") || (lHttpMethodName == "GET ") || (lHttpMethodName == "HTTP") || (lHttpMethodName == "HEAD") || (lHttpMethodName == "PUT ")"  is complex.
Complex Conditional,RemObjects.InternetPack.Messages.Mime.Header,HeaderExtractor,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Header\HeaderExtractor.cs,ExtractHeaders,The conditional expression  "lIsFirstLine && lSeparatorPos != -1 && (line.IndexOf (':') == -1 || line.IndexOf (':') > line.IndexOf (' '))"  is complex.
Empty Catch Block,RemObjects.InternetPack.Http,HttpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpClient.cs,Abort,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,AsyncServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncServer.cs,AcceptCallback,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,AsyncServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncServer.cs,AcceptCallback,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,AsyncServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncServer.cs,Close,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,AsyncServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncServer.cs,Close,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,AsyncServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncServer.cs,Close,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,Abort,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,DataSocketClose,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,DataSocketClose,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,DataSocketClose,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,DataSocketClose,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,IntReadLineCallback,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,ConnectionPool,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\ConnectionPool.cs,Dispose,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,Listener,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Server.cs,Listen,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,TcpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\TcpServer.cs,DoWork,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack,Worker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Worker.cs,Work,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack.CommandBased,CommandBasedWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CommandBasedServer.cs,DoWork,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack.Ftp,FtpListing,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack.Ftp,FtpListing,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,InvokeOnClientDisconnected,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,InvokeOnClientDisconnected,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,InvokeOnClientDisconnected,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack.Ftp,FtpTransferThread,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Abort,The method has an empty catch block.
Empty Catch Block,RemObjects.InternetPack.Ftp,FtpTransferThread,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Execute,The method has an empty catch block.
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,Decode,The following statement contains a magic number: if (0 == (lLength & 0x80)) {  	length = lLength;  }  else {  	lLength &= ~0x80;  	length = 0;  	for (Int32 i = 0; i < lLength; i++)  		length = length << 8 | reader.ReadByte ();  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,Decode,The following statement contains a magic number: for (Int32 i = 0; i < lLength; i++)  	length = length << 8 | reader.ReadByte ();  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,Decode,The following statement contains a magic number: length = length << 8 | reader.ReadByte ();  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,Encode,The following statement contains a magic number: if (length < 0x80) {  	writer.Write ((Byte)length);  }  else {  	Byte t1 = (Byte)length;  	Byte t2 = (Byte)(length >> 8);  	Byte t3 = (Byte)(length >> 16);  	Byte t4 = (Byte)(length >> 24);  	if (t4 != 0) {  		writer.Write ((Byte)0x84);  		writer.Write (t4);  		writer.Write (t3);  		writer.Write (t2);  		writer.Write (t1);  	}  	else if (t3 != 0) {  		writer.Write ((Byte)0x83);  		writer.Write (t3);  		writer.Write (t2);  		writer.Write (t1);  	}  	else if (t2 != 0) {  		writer.Write ((Byte)0x82);  		writer.Write (t2);  		writer.Write (t1);  	}  	else {  		writer.Write ((Byte)0x81);  		writer.Write (t1);  	}  	// Long form. Two to 127 octets.   	// Bit 8 of first octet has value "1" and bits 7-1 give   	// the number of additional length octets. Second and   	// following octets give the length' base 256' most   	// significant digit first.   }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,Encode,The following statement contains a magic number: if (length < 0x80) {  	writer.Write ((Byte)length);  }  else {  	Byte t1 = (Byte)length;  	Byte t2 = (Byte)(length >> 8);  	Byte t3 = (Byte)(length >> 16);  	Byte t4 = (Byte)(length >> 24);  	if (t4 != 0) {  		writer.Write ((Byte)0x84);  		writer.Write (t4);  		writer.Write (t3);  		writer.Write (t2);  		writer.Write (t1);  	}  	else if (t3 != 0) {  		writer.Write ((Byte)0x83);  		writer.Write (t3);  		writer.Write (t2);  		writer.Write (t1);  	}  	else if (t2 != 0) {  		writer.Write ((Byte)0x82);  		writer.Write (t2);  		writer.Write (t1);  	}  	else {  		writer.Write ((Byte)0x81);  		writer.Write (t1);  	}  	// Long form. Two to 127 octets.   	// Bit 8 of first octet has value "1" and bits 7-1 give   	// the number of additional length octets. Second and   	// following octets give the length' base 256' most   	// significant digit first.   }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,Encode,The following statement contains a magic number: if (length < 0x80) {  	writer.Write ((Byte)length);  }  else {  	Byte t1 = (Byte)length;  	Byte t2 = (Byte)(length >> 8);  	Byte t3 = (Byte)(length >> 16);  	Byte t4 = (Byte)(length >> 24);  	if (t4 != 0) {  		writer.Write ((Byte)0x84);  		writer.Write (t4);  		writer.Write (t3);  		writer.Write (t2);  		writer.Write (t1);  	}  	else if (t3 != 0) {  		writer.Write ((Byte)0x83);  		writer.Write (t3);  		writer.Write (t2);  		writer.Write (t1);  	}  	else if (t2 != 0) {  		writer.Write ((Byte)0x82);  		writer.Write (t2);  		writer.Write (t1);  	}  	else {  		writer.Write ((Byte)0x81);  		writer.Write (t1);  	}  	// Long form. Two to 127 octets.   	// Bit 8 of first octet has value "1" and bits 7-1 give   	// the number of additional length octets. Second and   	// following octets give the length' base 256' most   	// significant digit first.   }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadSByte ();  case 2:  	return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  case 3: {  	UInt32 lResult = ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  	if (0 != (lResult & (1 << 23)))  		lResult = lResult | 0xff000000;  	return (Int32)lResult;  }  case 4:  	return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default: {  	UInt32 lResult = reader.ReadByte ();  	if (0 != (lResult & 0x80))  		lResult = lResult | 0xffffff00;  	for (Int32 i = 1; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return (Int32)lResult;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadSByte ();  case 2:  	return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  case 3: {  	UInt32 lResult = ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  	if (0 != (lResult & (1 << 23)))  		lResult = lResult | 0xff000000;  	return (Int32)lResult;  }  case 4:  	return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default: {  	UInt32 lResult = reader.ReadByte ();  	if (0 != (lResult & 0x80))  		lResult = lResult | 0xffffff00;  	for (Int32 i = 1; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return (Int32)lResult;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadSByte ();  case 2:  	return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  case 3: {  	UInt32 lResult = ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  	if (0 != (lResult & (1 << 23)))  		lResult = lResult | 0xff000000;  	return (Int32)lResult;  }  case 4:  	return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default: {  	UInt32 lResult = reader.ReadByte ();  	if (0 != (lResult & 0x80))  		lResult = lResult | 0xffffff00;  	for (Int32 i = 1; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return (Int32)lResult;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadSByte ();  case 2:  	return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  case 3: {  	UInt32 lResult = ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  	if (0 != (lResult & (1 << 23)))  		lResult = lResult | 0xff000000;  	return (Int32)lResult;  }  case 4:  	return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default: {  	UInt32 lResult = reader.ReadByte ();  	if (0 != (lResult & 0x80))  		lResult = lResult | 0xffffff00;  	for (Int32 i = 1; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return (Int32)lResult;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadSByte ();  case 2:  	return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  case 3: {  	UInt32 lResult = ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  	if (0 != (lResult & (1 << 23)))  		lResult = lResult | 0xff000000;  	return (Int32)lResult;  }  case 4:  	return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default: {  	UInt32 lResult = reader.ReadByte ();  	if (0 != (lResult & 0x80))  		lResult = lResult | 0xffffff00;  	for (Int32 i = 1; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return (Int32)lResult;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadSByte ();  case 2:  	return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  case 3: {  	UInt32 lResult = ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  	if (0 != (lResult & (1 << 23)))  		lResult = lResult | 0xff000000;  	return (Int32)lResult;  }  case 4:  	return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default: {  	UInt32 lResult = reader.ReadByte ();  	if (0 != (lResult & 0x80))  		lResult = lResult | 0xffffff00;  	for (Int32 i = 1; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return (Int32)lResult;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadSByte ();  case 2:  	return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  case 3: {  	UInt32 lResult = ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  	if (0 != (lResult & (1 << 23)))  		lResult = lResult | 0xff000000;  	return (Int32)lResult;  }  case 4:  	return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default: {  	UInt32 lResult = reader.ReadByte ();  	if (0 != (lResult & 0x80))  		lResult = lResult | 0xffffff00;  	for (Int32 i = 1; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return (Int32)lResult;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadSByte ();  case 2:  	return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  case 3: {  	UInt32 lResult = ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  	if (0 != (lResult & (1 << 23)))  		lResult = lResult | 0xff000000;  	return (Int32)lResult;  }  case 4:  	return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default: {  	UInt32 lResult = reader.ReadByte ();  	if (0 != (lResult & 0x80))  		lResult = lResult | 0xffffff00;  	for (Int32 i = 1; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return (Int32)lResult;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadSByte ();  case 2:  	return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  case 3: {  	UInt32 lResult = ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  	if (0 != (lResult & (1 << 23)))  		lResult = lResult | 0xff000000;  	return (Int32)lResult;  }  case 4:  	return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default: {  	UInt32 lResult = reader.ReadByte ();  	if (0 != (lResult & 0x80))  		lResult = lResult | 0xffffff00;  	for (Int32 i = 1; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return (Int32)lResult;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadSByte ();  case 2:  	return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  case 3: {  	UInt32 lResult = ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  	if (0 != (lResult & (1 << 23)))  		lResult = lResult | 0xff000000;  	return (Int32)lResult;  }  case 4:  	return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default: {  	UInt32 lResult = reader.ReadByte ();  	if (0 != (lResult & 0x80))  		lResult = lResult | 0xffffff00;  	for (Int32 i = 1; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return (Int32)lResult;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadSByte ();  case 2:  	return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  case 3: {  	UInt32 lResult = ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  	if (0 != (lResult & (1 << 23)))  		lResult = lResult | 0xff000000;  	return (Int32)lResult;  }  case 4:  	return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default: {  	UInt32 lResult = reader.ReadByte ();  	if (0 != (lResult & 0x80))  		lResult = lResult | 0xffffff00;  	for (Int32 i = 1; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return (Int32)lResult;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: return (Int16)((UInt16)reader.ReadByte () << 8 | reader.ReadByte ());  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: if (0 != (lResult & (1 << 23)))  	lResult = lResult | 0xff000000;  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: return (Int32)((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: for (Int32 i = 1; i < maxLength; i++)  	lResult = lResult << 8 | reader.ReadByte ();  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeInt,The following statement contains a magic number: lResult = lResult << 8 | reader.ReadByte ();  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadByte ();  case 2:  	return (UInt16)((UInt16)reader.ReadByte () << 8 | (UInt16)reader.ReadByte ());  case 3:  	return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  case 4:  	return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default:  	UInt32 lResult = 0;  	for (Int32 i = 0; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return lResult;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadByte ();  case 2:  	return (UInt16)((UInt16)reader.ReadByte () << 8 | (UInt16)reader.ReadByte ());  case 3:  	return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  case 4:  	return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default:  	UInt32 lResult = 0;  	for (Int32 i = 0; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return lResult;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadByte ();  case 2:  	return (UInt16)((UInt16)reader.ReadByte () << 8 | (UInt16)reader.ReadByte ());  case 3:  	return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  case 4:  	return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default:  	UInt32 lResult = 0;  	for (Int32 i = 0; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return lResult;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadByte ();  case 2:  	return (UInt16)((UInt16)reader.ReadByte () << 8 | (UInt16)reader.ReadByte ());  case 3:  	return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  case 4:  	return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default:  	UInt32 lResult = 0;  	for (Int32 i = 0; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return lResult;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadByte ();  case 2:  	return (UInt16)((UInt16)reader.ReadByte () << 8 | (UInt16)reader.ReadByte ());  case 3:  	return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  case 4:  	return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default:  	UInt32 lResult = 0;  	for (Int32 i = 0; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return lResult;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadByte ();  case 2:  	return (UInt16)((UInt16)reader.ReadByte () << 8 | (UInt16)reader.ReadByte ());  case 3:  	return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  case 4:  	return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default:  	UInt32 lResult = 0;  	for (Int32 i = 0; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return lResult;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadByte ();  case 2:  	return (UInt16)((UInt16)reader.ReadByte () << 8 | (UInt16)reader.ReadByte ());  case 3:  	return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  case 4:  	return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default:  	UInt32 lResult = 0;  	for (Int32 i = 0; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return lResult;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadByte ();  case 2:  	return (UInt16)((UInt16)reader.ReadByte () << 8 | (UInt16)reader.ReadByte ());  case 3:  	return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  case 4:  	return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default:  	UInt32 lResult = 0;  	for (Int32 i = 0; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return lResult;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadByte ();  case 2:  	return (UInt16)((UInt16)reader.ReadByte () << 8 | (UInt16)reader.ReadByte ());  case 3:  	return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  case 4:  	return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default:  	UInt32 lResult = 0;  	for (Int32 i = 0; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return lResult;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: switch (maxLength) {  case 1:  	return reader.ReadByte ();  case 2:  	return (UInt16)((UInt16)reader.ReadByte () << 8 | (UInt16)reader.ReadByte ());  case 3:  	return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  case 4:  	return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  default:  	UInt32 lResult = 0;  	for (Int32 i = 0; i < maxLength; i++)  		lResult = lResult << 8 | reader.ReadByte ();  	return lResult;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: return (UInt16)((UInt16)reader.ReadByte () << 8 | (UInt16)reader.ReadByte ());  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: return ((UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: return ((UInt32)reader.ReadByte () << 24 | (UInt32)reader.ReadByte () << 16 | (UInt32)reader.ReadByte () << 8 | reader.ReadByte ());  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: for (Int32 i = 0; i < maxLength; i++)  	lResult = lResult << 8 | reader.ReadByte ();  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,DecodeUInt,The following statement contains a magic number: lResult = lResult << 8 | reader.ReadByte ();  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos]) {  case '\0':  	tok = RFC1960Token.EOF;  	break;  case '(':  	tok = RFC1960Token.OpeningParenthesis;  	len = 1;  	break;  case ')':  	tok = RFC1960Token.ClosingParenthesis;  	len = 1;  	break;  case '&':  	tok = RFC1960Token.And;  	len = 1;  	break;  case '|':  	tok = RFC1960Token.Or;  	len = 1;  	break;  case '!':  	tok = RFC1960Token.Not;  	len = 1;  	break;  case '=':  	switch (value [pos + 1]) {  	case '~':  		len = 2;  		tok = RFC1960Token.AproxEqual;  		break;  	case '*':  		len = 2;  		tok = RFC1960Token.Present;  		break;  	default:  		len = 1;  		tok = RFC1960Token.Equal;  		break;  	}  	break;  case '>':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.GreaterOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '<':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.LessOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '*':  	len = 1;  	tok = RFC1960Token.Any;  	break;  default: {  	tok = RFC1960Token.Value;  	StringBuilder sb = new StringBuilder (8);  	Boolean stop = false;  	while (!stop) {  		switch (value [pos + len]) {  		case '<':  		case '~':  		case '>':  		case '=':  		case '\0':  		case '*':  		case '(':  		case ')':  		case '/':  			stop = true;  			break;  		case '\\':  			sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  			len += 2;  			break;  		default:  			sb.Append (value [pos + len]);  			break;  		}  		len++;  	}  	len--;  	result = sb.ToString ();  	break;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos]) {  case '\0':  	tok = RFC1960Token.EOF;  	break;  case '(':  	tok = RFC1960Token.OpeningParenthesis;  	len = 1;  	break;  case ')':  	tok = RFC1960Token.ClosingParenthesis;  	len = 1;  	break;  case '&':  	tok = RFC1960Token.And;  	len = 1;  	break;  case '|':  	tok = RFC1960Token.Or;  	len = 1;  	break;  case '!':  	tok = RFC1960Token.Not;  	len = 1;  	break;  case '=':  	switch (value [pos + 1]) {  	case '~':  		len = 2;  		tok = RFC1960Token.AproxEqual;  		break;  	case '*':  		len = 2;  		tok = RFC1960Token.Present;  		break;  	default:  		len = 1;  		tok = RFC1960Token.Equal;  		break;  	}  	break;  case '>':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.GreaterOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '<':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.LessOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '*':  	len = 1;  	tok = RFC1960Token.Any;  	break;  default: {  	tok = RFC1960Token.Value;  	StringBuilder sb = new StringBuilder (8);  	Boolean stop = false;  	while (!stop) {  		switch (value [pos + len]) {  		case '<':  		case '~':  		case '>':  		case '=':  		case '\0':  		case '*':  		case '(':  		case ')':  		case '/':  			stop = true;  			break;  		case '\\':  			sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  			len += 2;  			break;  		default:  			sb.Append (value [pos + len]);  			break;  		}  		len++;  	}  	len--;  	result = sb.ToString ();  	break;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos]) {  case '\0':  	tok = RFC1960Token.EOF;  	break;  case '(':  	tok = RFC1960Token.OpeningParenthesis;  	len = 1;  	break;  case ')':  	tok = RFC1960Token.ClosingParenthesis;  	len = 1;  	break;  case '&':  	tok = RFC1960Token.And;  	len = 1;  	break;  case '|':  	tok = RFC1960Token.Or;  	len = 1;  	break;  case '!':  	tok = RFC1960Token.Not;  	len = 1;  	break;  case '=':  	switch (value [pos + 1]) {  	case '~':  		len = 2;  		tok = RFC1960Token.AproxEqual;  		break;  	case '*':  		len = 2;  		tok = RFC1960Token.Present;  		break;  	default:  		len = 1;  		tok = RFC1960Token.Equal;  		break;  	}  	break;  case '>':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.GreaterOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '<':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.LessOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '*':  	len = 1;  	tok = RFC1960Token.Any;  	break;  default: {  	tok = RFC1960Token.Value;  	StringBuilder sb = new StringBuilder (8);  	Boolean stop = false;  	while (!stop) {  		switch (value [pos + len]) {  		case '<':  		case '~':  		case '>':  		case '=':  		case '\0':  		case '*':  		case '(':  		case ')':  		case '/':  			stop = true;  			break;  		case '\\':  			sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  			len += 2;  			break;  		default:  			sb.Append (value [pos + len]);  			break;  		}  		len++;  	}  	len--;  	result = sb.ToString ();  	break;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos]) {  case '\0':  	tok = RFC1960Token.EOF;  	break;  case '(':  	tok = RFC1960Token.OpeningParenthesis;  	len = 1;  	break;  case ')':  	tok = RFC1960Token.ClosingParenthesis;  	len = 1;  	break;  case '&':  	tok = RFC1960Token.And;  	len = 1;  	break;  case '|':  	tok = RFC1960Token.Or;  	len = 1;  	break;  case '!':  	tok = RFC1960Token.Not;  	len = 1;  	break;  case '=':  	switch (value [pos + 1]) {  	case '~':  		len = 2;  		tok = RFC1960Token.AproxEqual;  		break;  	case '*':  		len = 2;  		tok = RFC1960Token.Present;  		break;  	default:  		len = 1;  		tok = RFC1960Token.Equal;  		break;  	}  	break;  case '>':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.GreaterOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '<':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.LessOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '*':  	len = 1;  	tok = RFC1960Token.Any;  	break;  default: {  	tok = RFC1960Token.Value;  	StringBuilder sb = new StringBuilder (8);  	Boolean stop = false;  	while (!stop) {  		switch (value [pos + len]) {  		case '<':  		case '~':  		case '>':  		case '=':  		case '\0':  		case '*':  		case '(':  		case ')':  		case '/':  			stop = true;  			break;  		case '\\':  			sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  			len += 2;  			break;  		default:  			sb.Append (value [pos + len]);  			break;  		}  		len++;  	}  	len--;  	result = sb.ToString ();  	break;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos]) {  case '\0':  	tok = RFC1960Token.EOF;  	break;  case '(':  	tok = RFC1960Token.OpeningParenthesis;  	len = 1;  	break;  case ')':  	tok = RFC1960Token.ClosingParenthesis;  	len = 1;  	break;  case '&':  	tok = RFC1960Token.And;  	len = 1;  	break;  case '|':  	tok = RFC1960Token.Or;  	len = 1;  	break;  case '!':  	tok = RFC1960Token.Not;  	len = 1;  	break;  case '=':  	switch (value [pos + 1]) {  	case '~':  		len = 2;  		tok = RFC1960Token.AproxEqual;  		break;  	case '*':  		len = 2;  		tok = RFC1960Token.Present;  		break;  	default:  		len = 1;  		tok = RFC1960Token.Equal;  		break;  	}  	break;  case '>':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.GreaterOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '<':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.LessOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '*':  	len = 1;  	tok = RFC1960Token.Any;  	break;  default: {  	tok = RFC1960Token.Value;  	StringBuilder sb = new StringBuilder (8);  	Boolean stop = false;  	while (!stop) {  		switch (value [pos + len]) {  		case '<':  		case '~':  		case '>':  		case '=':  		case '\0':  		case '*':  		case '(':  		case ')':  		case '/':  			stop = true;  			break;  		case '\\':  			sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  			len += 2;  			break;  		default:  			sb.Append (value [pos + len]);  			break;  		}  		len++;  	}  	len--;  	result = sb.ToString ();  	break;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos]) {  case '\0':  	tok = RFC1960Token.EOF;  	break;  case '(':  	tok = RFC1960Token.OpeningParenthesis;  	len = 1;  	break;  case ')':  	tok = RFC1960Token.ClosingParenthesis;  	len = 1;  	break;  case '&':  	tok = RFC1960Token.And;  	len = 1;  	break;  case '|':  	tok = RFC1960Token.Or;  	len = 1;  	break;  case '!':  	tok = RFC1960Token.Not;  	len = 1;  	break;  case '=':  	switch (value [pos + 1]) {  	case '~':  		len = 2;  		tok = RFC1960Token.AproxEqual;  		break;  	case '*':  		len = 2;  		tok = RFC1960Token.Present;  		break;  	default:  		len = 1;  		tok = RFC1960Token.Equal;  		break;  	}  	break;  case '>':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.GreaterOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '<':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.LessOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '*':  	len = 1;  	tok = RFC1960Token.Any;  	break;  default: {  	tok = RFC1960Token.Value;  	StringBuilder sb = new StringBuilder (8);  	Boolean stop = false;  	while (!stop) {  		switch (value [pos + len]) {  		case '<':  		case '~':  		case '>':  		case '=':  		case '\0':  		case '*':  		case '(':  		case ')':  		case '/':  			stop = true;  			break;  		case '\\':  			sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  			len += 2;  			break;  		default:  			sb.Append (value [pos + len]);  			break;  		}  		len++;  	}  	len--;  	result = sb.ToString ();  	break;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos]) {  case '\0':  	tok = RFC1960Token.EOF;  	break;  case '(':  	tok = RFC1960Token.OpeningParenthesis;  	len = 1;  	break;  case ')':  	tok = RFC1960Token.ClosingParenthesis;  	len = 1;  	break;  case '&':  	tok = RFC1960Token.And;  	len = 1;  	break;  case '|':  	tok = RFC1960Token.Or;  	len = 1;  	break;  case '!':  	tok = RFC1960Token.Not;  	len = 1;  	break;  case '=':  	switch (value [pos + 1]) {  	case '~':  		len = 2;  		tok = RFC1960Token.AproxEqual;  		break;  	case '*':  		len = 2;  		tok = RFC1960Token.Present;  		break;  	default:  		len = 1;  		tok = RFC1960Token.Equal;  		break;  	}  	break;  case '>':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.GreaterOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '<':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.LessOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '*':  	len = 1;  	tok = RFC1960Token.Any;  	break;  default: {  	tok = RFC1960Token.Value;  	StringBuilder sb = new StringBuilder (8);  	Boolean stop = false;  	while (!stop) {  		switch (value [pos + len]) {  		case '<':  		case '~':  		case '>':  		case '=':  		case '\0':  		case '*':  		case '(':  		case ')':  		case '/':  			stop = true;  			break;  		case '\\':  			sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  			len += 2;  			break;  		default:  			sb.Append (value [pos + len]);  			break;  		}  		len++;  	}  	len--;  	result = sb.ToString ();  	break;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos]) {  case '\0':  	tok = RFC1960Token.EOF;  	break;  case '(':  	tok = RFC1960Token.OpeningParenthesis;  	len = 1;  	break;  case ')':  	tok = RFC1960Token.ClosingParenthesis;  	len = 1;  	break;  case '&':  	tok = RFC1960Token.And;  	len = 1;  	break;  case '|':  	tok = RFC1960Token.Or;  	len = 1;  	break;  case '!':  	tok = RFC1960Token.Not;  	len = 1;  	break;  case '=':  	switch (value [pos + 1]) {  	case '~':  		len = 2;  		tok = RFC1960Token.AproxEqual;  		break;  	case '*':  		len = 2;  		tok = RFC1960Token.Present;  		break;  	default:  		len = 1;  		tok = RFC1960Token.Equal;  		break;  	}  	break;  case '>':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.GreaterOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '<':  	if (value [pos + 1] == '=') {  		len = 2;  		tok = RFC1960Token.LessOrEqual;  		break;  	}  	len = 0;  	tok = RFC1960Token.Error;  	break;  case '*':  	len = 1;  	tok = RFC1960Token.Any;  	break;  default: {  	tok = RFC1960Token.Value;  	StringBuilder sb = new StringBuilder (8);  	Boolean stop = false;  	while (!stop) {  		switch (value [pos + len]) {  		case '<':  		case '~':  		case '>':  		case '=':  		case '\0':  		case '*':  		case '(':  		case ')':  		case '/':  			stop = true;  			break;  		case '\\':  			sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  			len += 2;  			break;  		default:  			sb.Append (value [pos + len]);  			break;  		}  		len++;  	}  	len--;  	result = sb.ToString ();  	break;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos + 1]) {  case '~':  	len = 2;  	tok = RFC1960Token.AproxEqual;  	break;  case '*':  	len = 2;  	tok = RFC1960Token.Present;  	break;  default:  	len = 1;  	tok = RFC1960Token.Equal;  	break;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos + 1]) {  case '~':  	len = 2;  	tok = RFC1960Token.AproxEqual;  	break;  case '*':  	len = 2;  	tok = RFC1960Token.Present;  	break;  default:  	len = 1;  	tok = RFC1960Token.Equal;  	break;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: len = 2;  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: len = 2;  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: if (value [pos + 1] == '=') {  	len = 2;  	tok = RFC1960Token.GreaterOrEqual;  	break;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: len = 2;  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: if (value [pos + 1] == '=') {  	len = 2;  	tok = RFC1960Token.LessOrEqual;  	break;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: len = 2;  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: while (!stop) {  	switch (value [pos + len]) {  	case '<':  	case '~':  	case '>':  	case '=':  	case '\0':  	case '*':  	case '(':  	case ')':  	case '/':  		stop = true;  		break;  	case '\\':  		sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  		len += 2;  		break;  	default:  		sb.Append (value [pos + len]);  		break;  	}  	len++;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: while (!stop) {  	switch (value [pos + len]) {  	case '<':  	case '~':  	case '>':  	case '=':  	case '\0':  	case '*':  	case '(':  	case ')':  	case '/':  		stop = true;  		break;  	case '\\':  		sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  		len += 2;  		break;  	default:  		sb.Append (value [pos + len]);  		break;  	}  	len++;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: while (!stop) {  	switch (value [pos + len]) {  	case '<':  	case '~':  	case '>':  	case '=':  	case '\0':  	case '*':  	case '(':  	case ')':  	case '/':  		stop = true;  		break;  	case '\\':  		sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  		len += 2;  		break;  	default:  		sb.Append (value [pos + len]);  		break;  	}  	len++;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos + len]) {  case '<':  case '~':  case '>':  case '=':  case '\0':  case '*':  case '(':  case ')':  case '/':  	stop = true;  	break;  case '\\':  	sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  	len += 2;  	break;  default:  	sb.Append (value [pos + len]);  	break;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos + len]) {  case '<':  case '~':  case '>':  case '=':  case '\0':  case '*':  case '(':  case ')':  case '/':  	stop = true;  	break;  case '\\':  	sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  	len += 2;  	break;  default:  	sb.Append (value [pos + len]);  	break;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: switch (value [pos + len]) {  case '<':  case '~':  case '>':  case '=':  case '\0':  case '*':  case '(':  case ')':  case '/':  	stop = true;  	break;  case '\\':  	sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  	len += 2;  	break;  default:  	sb.Append (value [pos + len]);  	break;  }  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: sb.Append ((char)(Byte.Parse (value [pos + len + 1].ToString ()) * 16 + Byte.Parse (value [pos + len + 2].ToString ())));  
Magic Number,RemObjects.InternetPack.Ldap,Asn1,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,RFC1960Next,The following statement contains a magic number: len += 2;  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 0) {  	if (this.Value >= -128) {  		writer.Write ((Byte)this.Value);  	}  	else if (this.Value >= -32768) {  		UInt16 lValue = (UInt16)this.Value;  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else if (Value >= -8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  else {  	if (this.Value < 128) {  		writer.Write ((Byte)this.Value);  	}  	else if (Value < 32768) {  		UInt16 newval = (UInt16)Value;  		writer.Write ((Byte)(newval >> 8));  		writer.Write ((Byte)(newval));  	}  	else if (this.Value < 8388608) {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  	else {  		UInt32 lValue = (UInt32)this.Value;  		writer.Write ((Byte)(lValue >> 24));  		writer.Write ((Byte)(lValue >> 16));  		writer.Write ((Byte)(lValue >> 8));  		writer.Write ((Byte)(lValue));  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -128) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -128) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -128) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -128) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -128) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -128) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -128) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -128) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -128) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value >= -32768) {  	UInt16 lValue = (UInt16)this.Value;  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(lValue >> 8));  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value >= -8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(lValue >> 16));  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(lValue >> 8));  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(lValue >> 24));  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(lValue >> 16));  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(lValue >> 8));  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 128) {  	writer.Write ((Byte)this.Value);  }  else if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 128) {  	writer.Write ((Byte)this.Value);  }  else if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 128) {  	writer.Write ((Byte)this.Value);  }  else if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 128) {  	writer.Write ((Byte)this.Value);  }  else if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 128) {  	writer.Write ((Byte)this.Value);  }  else if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 128) {  	writer.Write ((Byte)this.Value);  }  else if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 128) {  	writer.Write ((Byte)this.Value);  }  else if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 128) {  	writer.Write ((Byte)this.Value);  }  else if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 128) {  	writer.Write ((Byte)this.Value);  }  else if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (Value < 32768) {  	UInt16 newval = (UInt16)Value;  	writer.Write ((Byte)(newval >> 8));  	writer.Write ((Byte)(newval));  }  else if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(newval >> 8));  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 8388608) {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  else {  	UInt32 lValue = (UInt32)this.Value;  	writer.Write ((Byte)(lValue >> 24));  	writer.Write ((Byte)(lValue >> 16));  	writer.Write ((Byte)(lValue >> 8));  	writer.Write ((Byte)(lValue));  }  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(lValue >> 16));  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(lValue >> 8));  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(lValue >> 24));  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(lValue >> 16));  
Magic Number,RemObjects.InternetPack.Ldap,BerInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(lValue >> 8));  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 256) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 256) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 256) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 256) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 256) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 256) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 256) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 256) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 256) {  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 65536) {  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(this.Value >> 8));  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.Value < 16777216) {  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  else {  	writer.Write ((Byte)(this.Value >> 24));  	writer.Write ((Byte)(this.Value >> 16));  	writer.Write ((Byte)(this.Value >> 8));  	writer.Write ((Byte)this.Value);  }  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(this.Value >> 16));  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(this.Value >> 8));  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(this.Value >> 24));  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(this.Value >> 16));  
Magic Number,RemObjects.InternetPack.Ldap,BerUInteger,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write ((Byte)(this.Value >> 8));  
Magic Number,RemObjects.InternetPack.Ldap,BerIpAddress,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.fValue.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6)  	writer.Write (lValue' 0' 16);  else  	writer.Write (lValue' 0' 4);  
Magic Number,RemObjects.InternetPack.Ldap,BerIpAddress,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: if (this.fValue.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6)  	writer.Write (lValue' 0' 16);  else  	writer.Write (lValue' 0' 4);  
Magic Number,RemObjects.InternetPack.Ldap,BerIpAddress,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write (lValue' 0' 16);  
Magic Number,RemObjects.InternetPack.Ldap,BerIpAddress,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Asn1.cs,IntWrite,The following statement contains a magic number: writer.Write (lValue' 0' 4);  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ErrorToString,The following statement contains a magic number: switch (code) {  case 0:  	return "Success";  case 1:  	return "Operations Error";  case 2:  	return "Protocol Error";  case 3:  	return "Timelimit Exceeded";  case 4:  	return "Sizelimit Exceeded";  case 5:  	return "Compare False";  case 6:  	return "Compare True";  case 7:  	return "Authentication Method Not Supported";  case 8:  	return "Strong Authentication Required";  case 9:  	return "Partial Results";  case 10:  	return "Referral";  case 11:  	return "Administrative Limit Exceeded";  case 12:  	return "Unavailable Critical Extension";  case 13:  	return "Confidentiality Required";  case 14:  	return "SASL Bind In Progress";  case 16:  	return "No Such Attribute";  case 17:  	return "Undefined Attribute Type";  case 18:  	return "Inappropriate Matching";  case 19:  	return "Constraint Violation";  case 20:  	return "Attribute Or Value Exists";  case 21:  	return "Invalid Attribute Syntax";  case 32:  	return "No Such Object";  case 33:  	return "Alias Problem";  case 34:  	return "Invalid DN Syntax";  case 35:  	return "Is Leaf";  case 36:  	return "Alias Dereferencing Problem";  case 48:  	return "Inappropriate Authentication";  case 49:  	return "Invalid Credentials";  case 50:  	return "Insufficient Access Rights";  case 51:  	return "Busy";  case 52:  	return "Unavailable";  case 53:  	return "Unwilling To Perform";  case 54:  	return "Loop Detect";  case 64:  	return "Naming Violation";  case 65:  	return "Object Class Violation";  case 66:  	return "Not Allowed On Non-leaf";  case 67:  	return "Not Allowed On RDN";  case 68:  	return "Entry Already Exists";  case 69:  	return "Object Class Modifications Prohibited";  case 71:  	return "Affects Multiple DSAs";  case 80:  	return "Other";  case 81:  	return "Server Down";  case 82:  	return "Local Error";  case 83:  	return "Encoding Error";  case 84:  	return "Decoding Error";  case 85:  	return "Ldap Timeout";  case 86:  	return "Authentication Unknown";  case 87:  	return "Filter Error";  case 88:  	return "User Cancelled";  case 89:  	return "Parameter Error";  case 90:  	return "No Memory";  case 91:  	return "Connect Error";  case 92:  	return "Ldap Not Supported";  case 93:  	return "Control Not Found";  case 94:  	return "No Results Returned";  case 95:  	return "More Results To Return";  case 96:  	return "Client Loop";  case 97:  	return "Referral Limit Exceeded";  case 112:  	return "TLS not supported";  case 113:  	return "SSL handshake failed";  case 114:  	return "SSL Provider not found";  default:  	return "Unknown Error";  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,LdapClient,The following statement contains a magic number: this.LdapVersion = 3;  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadBerValue,The following statement contains a magic number: if (lLength >= 0x80) {  	Byte[] lBuffer = new Byte[lLength & ~0x80];  	fCurrentConnection.Read (lBuffer' 0' lBuffer.Length);  	lLength = 0;  	for (Int32 i = 0; i < lBuffer.Length; i++)  		lLength = lLength << 8 | lBuffer [i];  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadBerValue,The following statement contains a magic number: for (Int32 i = 0; i < lBuffer.Length; i++)  	lLength = lLength << 8 | lBuffer [i];  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadBerValue,The following statement contains a magic number: lLength = lLength << 8 | lBuffer [i];  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer) {  	Response lResponse = new Response ();  	lResponse.SequenceId = ((BerInteger)((BerSequence)lValue).Items [0]).Value;  	BerSequence lSubValue = ((BerSequence)lValue).Items [1] as BerSequence;  	if (lSubValue == null)  		return null;  	lResponse.TypeCode = lSubValue.TypeCodeTag;  	if (lSubValue.Items.Count == 0)  		return null;  	if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  		lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  	}  	else {  		if (!(lSubValue.Items [0] is BerInteger))  			return null;  		// Int32 or sequence  		lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  		if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  			lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  		if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  			lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  		if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  		 {  			lResponse.Referers = lSubValue.Items [3] as BerSequence;  		}  		else if (lSubValue.Items.Count > 3) {  			lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  			for (Int32 i = 0; i < lResponse.RestData.Length; i++)  				lResponse.RestData [i] = lSubValue.Items [i + 3];  		}  	}  	return lResponse;  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer) {  	Response lResponse = new Response ();  	lResponse.SequenceId = ((BerInteger)((BerSequence)lValue).Items [0]).Value;  	BerSequence lSubValue = ((BerSequence)lValue).Items [1] as BerSequence;  	if (lSubValue == null)  		return null;  	lResponse.TypeCode = lSubValue.TypeCodeTag;  	if (lSubValue.Items.Count == 0)  		return null;  	if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  		lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  	}  	else {  		if (!(lSubValue.Items [0] is BerInteger))  			return null;  		// Int32 or sequence  		lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  		if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  			lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  		if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  			lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  		if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  		 {  			lResponse.Referers = lSubValue.Items [3] as BerSequence;  		}  		else if (lSubValue.Items.Count > 3) {  			lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  			for (Int32 i = 0; i < lResponse.RestData.Length; i++)  				lResponse.RestData [i] = lSubValue.Items [i + 3];  		}  	}  	return lResponse;  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer) {  	Response lResponse = new Response ();  	lResponse.SequenceId = ((BerInteger)((BerSequence)lValue).Items [0]).Value;  	BerSequence lSubValue = ((BerSequence)lValue).Items [1] as BerSequence;  	if (lSubValue == null)  		return null;  	lResponse.TypeCode = lSubValue.TypeCodeTag;  	if (lSubValue.Items.Count == 0)  		return null;  	if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  		lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  	}  	else {  		if (!(lSubValue.Items [0] is BerInteger))  			return null;  		// Int32 or sequence  		lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  		if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  			lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  		if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  			lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  		if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  		 {  			lResponse.Referers = lSubValue.Items [3] as BerSequence;  		}  		else if (lSubValue.Items.Count > 3) {  			lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  			for (Int32 i = 0; i < lResponse.RestData.Length; i++)  				lResponse.RestData [i] = lSubValue.Items [i + 3];  		}  	}  	return lResponse;  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer) {  	Response lResponse = new Response ();  	lResponse.SequenceId = ((BerInteger)((BerSequence)lValue).Items [0]).Value;  	BerSequence lSubValue = ((BerSequence)lValue).Items [1] as BerSequence;  	if (lSubValue == null)  		return null;  	lResponse.TypeCode = lSubValue.TypeCodeTag;  	if (lSubValue.Items.Count == 0)  		return null;  	if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  		lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  	}  	else {  		if (!(lSubValue.Items [0] is BerInteger))  			return null;  		// Int32 or sequence  		lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  		if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  			lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  		if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  			lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  		if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  		 {  			lResponse.Referers = lSubValue.Items [3] as BerSequence;  		}  		else if (lSubValue.Items.Count > 3) {  			lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  			for (Int32 i = 0; i < lResponse.RestData.Length; i++)  				lResponse.RestData [i] = lSubValue.Items [i + 3];  		}  	}  	return lResponse;  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer) {  	Response lResponse = new Response ();  	lResponse.SequenceId = ((BerInteger)((BerSequence)lValue).Items [0]).Value;  	BerSequence lSubValue = ((BerSequence)lValue).Items [1] as BerSequence;  	if (lSubValue == null)  		return null;  	lResponse.TypeCode = lSubValue.TypeCodeTag;  	if (lSubValue.Items.Count == 0)  		return null;  	if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  		lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  	}  	else {  		if (!(lSubValue.Items [0] is BerInteger))  			return null;  		// Int32 or sequence  		lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  		if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  			lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  		if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  			lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  		if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  		 {  			lResponse.Referers = lSubValue.Items [3] as BerSequence;  		}  		else if (lSubValue.Items.Count > 3) {  			lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  			for (Int32 i = 0; i < lResponse.RestData.Length; i++)  				lResponse.RestData [i] = lSubValue.Items [i + 3];  		}  	}  	return lResponse;  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer) {  	Response lResponse = new Response ();  	lResponse.SequenceId = ((BerInteger)((BerSequence)lValue).Items [0]).Value;  	BerSequence lSubValue = ((BerSequence)lValue).Items [1] as BerSequence;  	if (lSubValue == null)  		return null;  	lResponse.TypeCode = lSubValue.TypeCodeTag;  	if (lSubValue.Items.Count == 0)  		return null;  	if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  		lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  	}  	else {  		if (!(lSubValue.Items [0] is BerInteger))  			return null;  		// Int32 or sequence  		lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  		if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  			lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  		if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  			lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  		if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  		 {  			lResponse.Referers = lSubValue.Items [3] as BerSequence;  		}  		else if (lSubValue.Items.Count > 3) {  			lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  			for (Int32 i = 0; i < lResponse.RestData.Length; i++)  				lResponse.RestData [i] = lSubValue.Items [i + 3];  		}  	}  	return lResponse;  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer) {  	Response lResponse = new Response ();  	lResponse.SequenceId = ((BerInteger)((BerSequence)lValue).Items [0]).Value;  	BerSequence lSubValue = ((BerSequence)lValue).Items [1] as BerSequence;  	if (lSubValue == null)  		return null;  	lResponse.TypeCode = lSubValue.TypeCodeTag;  	if (lSubValue.Items.Count == 0)  		return null;  	if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  		lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  	}  	else {  		if (!(lSubValue.Items [0] is BerInteger))  			return null;  		// Int32 or sequence  		lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  		if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  			lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  		if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  			lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  		if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  		 {  			lResponse.Referers = lSubValue.Items [3] as BerSequence;  		}  		else if (lSubValue.Items.Count > 3) {  			lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  			for (Int32 i = 0; i < lResponse.RestData.Length; i++)  				lResponse.RestData [i] = lSubValue.Items [i + 3];  		}  	}  	return lResponse;  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer) {  	Response lResponse = new Response ();  	lResponse.SequenceId = ((BerInteger)((BerSequence)lValue).Items [0]).Value;  	BerSequence lSubValue = ((BerSequence)lValue).Items [1] as BerSequence;  	if (lSubValue == null)  		return null;  	lResponse.TypeCode = lSubValue.TypeCodeTag;  	if (lSubValue.Items.Count == 0)  		return null;  	if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  		lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  	}  	else {  		if (!(lSubValue.Items [0] is BerInteger))  			return null;  		// Int32 or sequence  		lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  		if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  			lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  		if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  			lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  		if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  		 {  			lResponse.Referers = lSubValue.Items [3] as BerSequence;  		}  		else if (lSubValue.Items.Count > 3) {  			lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  			for (Int32 i = 0; i < lResponse.RestData.Length; i++)  				lResponse.RestData [i] = lSubValue.Items [i + 3];  		}  	}  	return lResponse;  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer) {  	Response lResponse = new Response ();  	lResponse.SequenceId = ((BerInteger)((BerSequence)lValue).Items [0]).Value;  	BerSequence lSubValue = ((BerSequence)lValue).Items [1] as BerSequence;  	if (lSubValue == null)  		return null;  	lResponse.TypeCode = lSubValue.TypeCodeTag;  	if (lSubValue.Items.Count == 0)  		return null;  	if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  		lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  	}  	else {  		if (!(lSubValue.Items [0] is BerInteger))  			return null;  		// Int32 or sequence  		lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  		if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  			lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  		if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  			lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  		if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  		 {  			lResponse.Referers = lSubValue.Items [3] as BerSequence;  		}  		else if (lSubValue.Items.Count > 3) {  			lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  			for (Int32 i = 0; i < lResponse.RestData.Length; i++)  				lResponse.RestData [i] = lSubValue.Items [i + 3];  		}  	}  	return lResponse;  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lValue != null && lValue.Type == BerType.Sequence && ((BerSequence)lValue).Items.Count >= 2 && ((BerSequence)lValue).Items [0].Type == BerType.Integer) {  	Response lResponse = new Response ();  	lResponse.SequenceId = ((BerInteger)((BerSequence)lValue).Items [0]).Value;  	BerSequence lSubValue = ((BerSequence)lValue).Items [1] as BerSequence;  	if (lSubValue == null)  		return null;  	lResponse.TypeCode = lSubValue.TypeCodeTag;  	if (lSubValue.Items.Count == 0)  		return null;  	if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  		lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  	}  	else {  		if (!(lSubValue.Items [0] is BerInteger))  			return null;  		// Int32 or sequence  		lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  		if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  			lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  		if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  			lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  		if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  		 {  			lResponse.Referers = lSubValue.Items [3] as BerSequence;  		}  		else if (lSubValue.Items.Count > 3) {  			lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  			for (Int32 i = 0; i < lResponse.RestData.Length; i++)  				lResponse.RestData [i] = lSubValue.Items [i + 3];  		}  	}  	return lResponse;  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  	lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  }  else {  	if (!(lSubValue.Items [0] is BerInteger))  		return null;  	// Int32 or sequence  	lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  	if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  		lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  	if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  		lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  	if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  	 {  		lResponse.Referers = lSubValue.Items [3] as BerSequence;  	}  	else if (lSubValue.Items.Count > 3) {  		lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  		for (Int32 i = 0; i < lResponse.RestData.Length; i++)  			lResponse.RestData [i] = lSubValue.Items [i + 3];  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  	lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  }  else {  	if (!(lSubValue.Items [0] is BerInteger))  		return null;  	// Int32 or sequence  	lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  	if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  		lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  	if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  		lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  	if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  	 {  		lResponse.Referers = lSubValue.Items [3] as BerSequence;  	}  	else if (lSubValue.Items.Count > 3) {  		lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  		for (Int32 i = 0; i < lResponse.RestData.Length; i++)  			lResponse.RestData [i] = lSubValue.Items [i + 3];  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  	lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  }  else {  	if (!(lSubValue.Items [0] is BerInteger))  		return null;  	// Int32 or sequence  	lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  	if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  		lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  	if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  		lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  	if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  	 {  		lResponse.Referers = lSubValue.Items [3] as BerSequence;  	}  	else if (lSubValue.Items.Count > 3) {  		lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  		for (Int32 i = 0; i < lResponse.RestData.Length; i++)  			lResponse.RestData [i] = lSubValue.Items [i + 3];  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  	lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  }  else {  	if (!(lSubValue.Items [0] is BerInteger))  		return null;  	// Int32 or sequence  	lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  	if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  		lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  	if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  		lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  	if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  	 {  		lResponse.Referers = lSubValue.Items [3] as BerSequence;  	}  	else if (lSubValue.Items.Count > 3) {  		lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  		for (Int32 i = 0; i < lResponse.RestData.Length; i++)  			lResponse.RestData [i] = lSubValue.Items [i + 3];  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  	lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  }  else {  	if (!(lSubValue.Items [0] is BerInteger))  		return null;  	// Int32 or sequence  	lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  	if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  		lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  	if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  		lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  	if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  	 {  		lResponse.Referers = lSubValue.Items [3] as BerSequence;  	}  	else if (lSubValue.Items.Count > 3) {  		lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  		for (Int32 i = 0; i < lResponse.RestData.Length; i++)  			lResponse.RestData [i] = lSubValue.Items [i + 3];  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  	lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  }  else {  	if (!(lSubValue.Items [0] is BerInteger))  		return null;  	// Int32 or sequence  	lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  	if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  		lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  	if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  		lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  	if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  	 {  		lResponse.Referers = lSubValue.Items [3] as BerSequence;  	}  	else if (lSubValue.Items.Count > 3) {  		lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  		for (Int32 i = 0; i < lResponse.RestData.Length; i++)  			lResponse.RestData [i] = lSubValue.Items [i + 3];  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  	lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  }  else {  	if (!(lSubValue.Items [0] is BerInteger))  		return null;  	// Int32 or sequence  	lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  	if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  		lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  	if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  		lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  	if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  	 {  		lResponse.Referers = lSubValue.Items [3] as BerSequence;  	}  	else if (lSubValue.Items.Count > 3) {  		lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  		for (Int32 i = 0; i < lResponse.RestData.Length; i++)  			lResponse.RestData [i] = lSubValue.Items [i + 3];  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  	lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  }  else {  	if (!(lSubValue.Items [0] is BerInteger))  		return null;  	// Int32 or sequence  	lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  	if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  		lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  	if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  		lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  	if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  	 {  		lResponse.Referers = lSubValue.Items [3] as BerSequence;  	}  	else if (lSubValue.Items.Count > 3) {  		lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  		for (Int32 i = 0; i < lResponse.RestData.Length; i++)  			lResponse.RestData [i] = lSubValue.Items [i + 3];  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lResponse.TypeCode == Asn1.LDAPSEARCHENTRY) {  	lResponse.RestData = ((List<BerValue>)lSubValue.Items).ToArray ();  }  else {  	if (!(lSubValue.Items [0] is BerInteger))  		return null;  	// Int32 or sequence  	lResponse.Code = ((BerInteger)lSubValue.Items [0]).Value;  	if (lSubValue.Items.Count > 1 && lSubValue.Items [1].Type == BerType.String)  		lResponse.DN = ((BerString)lSubValue.Items [1]).Value;  	if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  		lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  	if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers  	 {  		lResponse.Referers = lSubValue.Items [3] as BerSequence;  	}  	else if (lSubValue.Items.Count > 3) {  		lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  		for (Int32 i = 0; i < lResponse.RestData.Length; i++)  			lResponse.RestData [i] = lSubValue.Items [i + 3];  	}  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  	lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  	lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 2 && lSubValue.Items [2].Type == BerType.String)  	lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: lResponse.Result = ((BerString)lSubValue.Items [2]).Value;  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers   {  	lResponse.Referers = lSubValue.Items [3] as BerSequence;  }  else if (lSubValue.Items.Count > 3) {  	lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  	for (Int32 i = 0; i < lResponse.RestData.Length; i++)  		lResponse.RestData [i] = lSubValue.Items [i + 3];  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers   {  	lResponse.Referers = lSubValue.Items [3] as BerSequence;  }  else if (lSubValue.Items.Count > 3) {  	lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  	for (Int32 i = 0; i < lResponse.RestData.Length; i++)  		lResponse.RestData [i] = lSubValue.Items [i + 3];  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers   {  	lResponse.Referers = lSubValue.Items [3] as BerSequence;  }  else if (lSubValue.Items.Count > 3) {  	lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  	for (Int32 i = 0; i < lResponse.RestData.Length; i++)  		lResponse.RestData [i] = lSubValue.Items [i + 3];  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers   {  	lResponse.Referers = lSubValue.Items [3] as BerSequence;  }  else if (lSubValue.Items.Count > 3) {  	lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  	for (Int32 i = 0; i < lResponse.RestData.Length; i++)  		lResponse.RestData [i] = lSubValue.Items [i + 3];  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers   {  	lResponse.Referers = lSubValue.Items [3] as BerSequence;  }  else if (lSubValue.Items.Count > 3) {  	lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  	for (Int32 i = 0; i < lResponse.RestData.Length; i++)  		lResponse.RestData [i] = lSubValue.Items [i + 3];  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 3 && lResponse.Code == 10)// 10 = referers   {  	lResponse.Referers = lSubValue.Items [3] as BerSequence;  }  else if (lSubValue.Items.Count > 3) {  	lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  	for (Int32 i = 0; i < lResponse.RestData.Length; i++)  		lResponse.RestData [i] = lSubValue.Items [i + 3];  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: lResponse.Referers = lSubValue.Items [3] as BerSequence;  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 3) {  	lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  	for (Int32 i = 0; i < lResponse.RestData.Length; i++)  		lResponse.RestData [i] = lSubValue.Items [i + 3];  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 3) {  	lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  	for (Int32 i = 0; i < lResponse.RestData.Length; i++)  		lResponse.RestData [i] = lSubValue.Items [i + 3];  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: if (lSubValue.Items.Count > 3) {  	lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  	for (Int32 i = 0; i < lResponse.RestData.Length; i++)  		lResponse.RestData [i] = lSubValue.Items [i + 3];  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: lResponse.RestData = new BerValue[lSubValue.Items.Count - 3];  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: for (Int32 i = 0; i < lResponse.RestData.Length; i++)  	lResponse.RestData [i] = lSubValue.Items [i + 3];  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,ReadResponse,The following statement contains a magic number: lResponse.RestData [i] = lSubValue.Items [i + 3];  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Bind,The following statement contains a magic number: switch (digestType) {  case DigestType.MD5: {  	Int32 lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' "")' new BerSequence (Asn1.LDAPBINDSASL' new BerString (Asn1.OCTETSTRING' "DIGEST-MD5")));  	Response lResponse = ReadResponse ();  	if (lResponse.SequenceId != lSequenceId)  		throw new LdapException ("Invalid sequence id in bind response");  	if (lResponse.Code != 14 || lResponse.RestData == null || lResponse.RestData [0].Type != BerType.String)  		// 14 = Sasl bind in progress  		throw new LdapException (lResponse.Code);  	String lResult = ((BerString)lResponse.RestData [0]).Value;  	String lEncodedResult = Sasl.MD5Login (lResult' dn' password' GetTargetHostName ());  	lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' "")' new BerSequence (Asn1.LDAPBINDSASL' new BerString (Asn1.OCTETSTRING' lEncodedResult)));  	lResponse = ReadResponse ();  	if (lResponse.SequenceId != lSequenceId)  		throw new LdapException ("Invalid sequence id in bind response");  	if (lResponse.Code != 14 || lResponse.RestData == null || lResponse.RestData [0].Type != BerType.String)  		// 14 = Sasl bind in progress  		throw new LdapException (lResponse.Code);  	lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' "")' new BerSequence (Asn1.LDAPBINDSASL' new BerString (Asn1.OCTETSTRING' "DIGEST-MD5")));  	lResponse = ReadResponse ();  	if (lResponse.SequenceId != lSequenceId)  		throw new LdapException ("Invalid sequence id in bind response");  	if (lResponse.Code != 0)  		throw new LdapException (lResponse.Code);  	break;  }  default: {  	Int32 lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' dn)' new BerString (Asn1.LDAPBINDPASSWORD' password));  	Response lResponse = ReadResponse ();  	if (lResponse.SequenceId != lSequenceId)  		throw new LdapException ("Invalid sequence id in bind response");  	if (lResponse.Code != 0)  		throw new LdapException (lResponse.Code);  	break;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Bind,The following statement contains a magic number: switch (digestType) {  case DigestType.MD5: {  	Int32 lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' "")' new BerSequence (Asn1.LDAPBINDSASL' new BerString (Asn1.OCTETSTRING' "DIGEST-MD5")));  	Response lResponse = ReadResponse ();  	if (lResponse.SequenceId != lSequenceId)  		throw new LdapException ("Invalid sequence id in bind response");  	if (lResponse.Code != 14 || lResponse.RestData == null || lResponse.RestData [0].Type != BerType.String)  		// 14 = Sasl bind in progress  		throw new LdapException (lResponse.Code);  	String lResult = ((BerString)lResponse.RestData [0]).Value;  	String lEncodedResult = Sasl.MD5Login (lResult' dn' password' GetTargetHostName ());  	lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' "")' new BerSequence (Asn1.LDAPBINDSASL' new BerString (Asn1.OCTETSTRING' lEncodedResult)));  	lResponse = ReadResponse ();  	if (lResponse.SequenceId != lSequenceId)  		throw new LdapException ("Invalid sequence id in bind response");  	if (lResponse.Code != 14 || lResponse.RestData == null || lResponse.RestData [0].Type != BerType.String)  		// 14 = Sasl bind in progress  		throw new LdapException (lResponse.Code);  	lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' "")' new BerSequence (Asn1.LDAPBINDSASL' new BerString (Asn1.OCTETSTRING' "DIGEST-MD5")));  	lResponse = ReadResponse ();  	if (lResponse.SequenceId != lSequenceId)  		throw new LdapException ("Invalid sequence id in bind response");  	if (lResponse.Code != 0)  		throw new LdapException (lResponse.Code);  	break;  }  default: {  	Int32 lSequenceId = SendLdapRequest (Asn1.LDAPBINDREQ' new BerInteger (LdapVersion)' new BerString (Asn1.OCTETSTRING' dn)' new BerString (Asn1.LDAPBINDPASSWORD' password));  	Response lResponse = ReadResponse ();  	if (lResponse.SequenceId != lSequenceId)  		throw new LdapException ("Invalid sequence id in bind response");  	if (lResponse.Code != 0)  		throw new LdapException (lResponse.Code);  	break;  }  }  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Bind,The following statement contains a magic number: if (lResponse.Code != 14 || lResponse.RestData == null || lResponse.RestData [0].Type != BerType.String)  	// 14 = Sasl bind in progress  	throw new LdapException (lResponse.Code);  
Magic Number,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Bind,The following statement contains a magic number: if (lResponse.Code != 14 || lResponse.RestData == null || lResponse.RestData [0].Type != BerType.String)  	// 14 = Sasl bind in progress  	throw new LdapException (lResponse.Code);  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,AsyncHttpServer,The following statement contains a magic number: this.DefaultPort = 80;  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,AsyncHttpServer,The following statement contains a magic number: this.MaxPostSize = 4194304;  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,Setup,The following statement contains a magic number: this.DataConnection.MaxLineLength = 8096;  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,HeaderLinesCallback,The following statement contains a magic number: while (lHaveData) {  	lHaveData = false;  	if (lHeaderLine == "") {  		// we've got the last line. Process it  		if (lRequireBody) {  			Int64 lContentLength;  			#if FULLFRAMEWORK  			if (!Int64.TryParse (fContext.CurrentRequest.Header.GetHeaderValue ("Content-Length")' out lContentLength))  				#else  										if (!LongHelper.TryParse(fContext.CurrentRequest.Header.GetHeaderValue("Content-Length")' out lContentLength)) #endif  				lContentLength = 0;  			if (lContentLength > ((AsyncHttpServer)this.Owner).MaxPostSize) {  				this.SendInvalidRequest (new Exception ("Content-Length too large"));  				return;  			}  			try {  				((AsyncHttpServer)this.Owner).TriggerBeforeHaveData (new AsyncHttpRequestEventArgs (this.DataConnection' this.fContext));  			}  			catch (Exception ex) {  				this.SendInvalidRequest (ex);  				return;  			}  			if (this.fContext.ResponseSent)  				return;  			// already triggered the required functions.  			try {  				Byte[] lData = new Byte[(Int32)lContentLength];  				DataConnection.BeginRead (lData' 0' (Int32)lContentLength' WantBodyCallback' lData);  			}  			catch (SocketException) {  				Done ();  			}  			catch (ObjectDisposedException) {  				Done ();  			}  			return;  		}  		else {  			try {  				this.fOwner.TriggerHttpRequest (new AsyncHttpRequestEventArgs (this.DataConnection' this.fContext));  				return;  			}  			catch (Exception ex) {  				this.SendInvalidRequest (ex);  				return;  			}  		}  	}  	if (fContext.CurrentRequest.Header.Count >= fContext.CurrentRequest.Header.MaxHeaderLines && fContext.CurrentRequest.Header.MaxHeaderLinesEnabled) {  		SendInvalidRequest ();  		return;  	}  	Int32 lPosition = lHeaderLine.IndexOf (":"' StringComparison.Ordinal);  	if (lPosition == -1) {  		SendInvalidRequest ();  		return;  	}  	String lName = lHeaderLine.Substring (0' lPosition);  	String lValue = null;  	if (lHeaderLine.Length > lPosition + 1)  		lValue = lHeaderLine.Substring (lPosition + 2);  	fContext.CurrentRequest.Header.SetHeaderValue (lName' lValue);  	lHeaderLine = DataConnection.BufferReadLine ();  	if (lHeaderLine != null) {  		lHaveData = true;  		continue;  	}  	try {  		DataConnection.BeginReadLine (HeaderLinesCallback' null);  	}  	catch (SocketException) {  		Done ();  	}  	catch (ObjectDisposedException) {  		Done ();  	}  }  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,HeaderLinesCallback,The following statement contains a magic number: if (lHeaderLine.Length > lPosition + 1)  	lValue = lHeaderLine.Substring (lPosition + 2);  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,HeaderLinesCallback,The following statement contains a magic number: lValue = lHeaderLine.Substring (lPosition + 2);  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendResponse,The following statement contains a magic number: try {  	fContext.CurrentResponse.KeepAlive = ((AsyncHttpServer)AsyncOwner).KeepAlive;  	Byte[] lHeader = Encoding.ASCII.GetBytes (fContext.CurrentResponse.Header.ToString ());  	if (lHeader.Length >= 4096 || fContext.CurrentResponse.ContentSource == ContentSource.ContentNone) {  		fBodyOffset = 0;  		switch (fContext.CurrentResponse.ContentSource) {  		case ContentSource.ContentBytes:  			DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' fContext.CurrentResponse.ContentBytes);  			break;  		case ContentSource.ContentString:  			Byte[] lBuffer = fContext.CurrentResponse.Encoding.GetBytes (fContext.CurrentResponse.ContentString);  			DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' lBuffer);  			break;  		case ContentSource.ContentStream:  			fContext.CurrentResponse.ContentStream.Position = 0;  			DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' fContext.CurrentResponse.ContentStream);  			break;  		default:  			DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' null);  			break;  		}  	}  	else {  		if (fBodyBuffer == null)  			fBodyBuffer = new Byte[4096];  		Array.Copy (lHeader' 0' fBodyBuffer' 0' lHeader.Length);  		fBodyOffset = fBodyBuffer.Length - lHeader.Length;  		switch (fContext.CurrentResponse.ContentSource) {  		case ContentSource.ContentBytes:  			if (fBodyOffset > fContext.CurrentResponse.ContentBytes.Length)  				fBodyOffset = fContext.CurrentResponse.ContentBytes.Length;  			Array.Copy (fContext.CurrentResponse.ContentBytes' 0' fBodyBuffer' lHeader.Length' fBodyOffset);  			DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' fContext.CurrentResponse.ContentBytes);  			break;  		case ContentSource.ContentString:  			Byte[] lBuffer = fContext.CurrentResponse.Encoding.GetBytes (fContext.CurrentResponse.ContentString);  			if (fBodyOffset > lBuffer.Length)  				fBodyOffset = lBuffer.Length;  			Array.Copy (lBuffer' 0' fBodyBuffer' lHeader.Length' fBodyOffset);  			DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' lBuffer);  			break;  		case ContentSource.ContentStream:  			fContext.CurrentResponse.ContentStream.Position = 0;  			fBodyOffset = fContext.CurrentResponse.ContentStream.Read (fBodyBuffer' lHeader.Length' fBodyOffset);  			DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' fContext.CurrentResponse.ContentStream);  			break;  		default:  			DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' null);  			break;  		}  	}  }  catch (ConnectionClosedException) {  	this.fOwner.TriggerHttpResponseFailed (new AsyncHttpRequestEventArgs (this.DataConnection' this.fContext));  	Done ();  }  catch (SocketException) {  	this.fOwner.TriggerHttpResponseFailed (new AsyncHttpRequestEventArgs (this.DataConnection' this.fContext));  	Done ();  }  catch (ObjectDisposedException) {  	this.fOwner.TriggerHttpResponseFailed (new AsyncHttpRequestEventArgs (this.DataConnection' this.fContext));  	Done ();  }  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendResponse,The following statement contains a magic number: try {  	fContext.CurrentResponse.KeepAlive = ((AsyncHttpServer)AsyncOwner).KeepAlive;  	Byte[] lHeader = Encoding.ASCII.GetBytes (fContext.CurrentResponse.Header.ToString ());  	if (lHeader.Length >= 4096 || fContext.CurrentResponse.ContentSource == ContentSource.ContentNone) {  		fBodyOffset = 0;  		switch (fContext.CurrentResponse.ContentSource) {  		case ContentSource.ContentBytes:  			DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' fContext.CurrentResponse.ContentBytes);  			break;  		case ContentSource.ContentString:  			Byte[] lBuffer = fContext.CurrentResponse.Encoding.GetBytes (fContext.CurrentResponse.ContentString);  			DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' lBuffer);  			break;  		case ContentSource.ContentStream:  			fContext.CurrentResponse.ContentStream.Position = 0;  			DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' fContext.CurrentResponse.ContentStream);  			break;  		default:  			DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' null);  			break;  		}  	}  	else {  		if (fBodyBuffer == null)  			fBodyBuffer = new Byte[4096];  		Array.Copy (lHeader' 0' fBodyBuffer' 0' lHeader.Length);  		fBodyOffset = fBodyBuffer.Length - lHeader.Length;  		switch (fContext.CurrentResponse.ContentSource) {  		case ContentSource.ContentBytes:  			if (fBodyOffset > fContext.CurrentResponse.ContentBytes.Length)  				fBodyOffset = fContext.CurrentResponse.ContentBytes.Length;  			Array.Copy (fContext.CurrentResponse.ContentBytes' 0' fBodyBuffer' lHeader.Length' fBodyOffset);  			DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' fContext.CurrentResponse.ContentBytes);  			break;  		case ContentSource.ContentString:  			Byte[] lBuffer = fContext.CurrentResponse.Encoding.GetBytes (fContext.CurrentResponse.ContentString);  			if (fBodyOffset > lBuffer.Length)  				fBodyOffset = lBuffer.Length;  			Array.Copy (lBuffer' 0' fBodyBuffer' lHeader.Length' fBodyOffset);  			DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' lBuffer);  			break;  		case ContentSource.ContentStream:  			fContext.CurrentResponse.ContentStream.Position = 0;  			fBodyOffset = fContext.CurrentResponse.ContentStream.Read (fBodyBuffer' lHeader.Length' fBodyOffset);  			DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' fContext.CurrentResponse.ContentStream);  			break;  		default:  			DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' null);  			break;  		}  	}  }  catch (ConnectionClosedException) {  	this.fOwner.TriggerHttpResponseFailed (new AsyncHttpRequestEventArgs (this.DataConnection' this.fContext));  	Done ();  }  catch (SocketException) {  	this.fOwner.TriggerHttpResponseFailed (new AsyncHttpRequestEventArgs (this.DataConnection' this.fContext));  	Done ();  }  catch (ObjectDisposedException) {  	this.fOwner.TriggerHttpResponseFailed (new AsyncHttpRequestEventArgs (this.DataConnection' this.fContext));  	Done ();  }  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendResponse,The following statement contains a magic number: if (lHeader.Length >= 4096 || fContext.CurrentResponse.ContentSource == ContentSource.ContentNone) {  	fBodyOffset = 0;  	switch (fContext.CurrentResponse.ContentSource) {  	case ContentSource.ContentBytes:  		DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' fContext.CurrentResponse.ContentBytes);  		break;  	case ContentSource.ContentString:  		Byte[] lBuffer = fContext.CurrentResponse.Encoding.GetBytes (fContext.CurrentResponse.ContentString);  		DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' lBuffer);  		break;  	case ContentSource.ContentStream:  		fContext.CurrentResponse.ContentStream.Position = 0;  		DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' fContext.CurrentResponse.ContentStream);  		break;  	default:  		DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' null);  		break;  	}  }  else {  	if (fBodyBuffer == null)  		fBodyBuffer = new Byte[4096];  	Array.Copy (lHeader' 0' fBodyBuffer' 0' lHeader.Length);  	fBodyOffset = fBodyBuffer.Length - lHeader.Length;  	switch (fContext.CurrentResponse.ContentSource) {  	case ContentSource.ContentBytes:  		if (fBodyOffset > fContext.CurrentResponse.ContentBytes.Length)  			fBodyOffset = fContext.CurrentResponse.ContentBytes.Length;  		Array.Copy (fContext.CurrentResponse.ContentBytes' 0' fBodyBuffer' lHeader.Length' fBodyOffset);  		DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' fContext.CurrentResponse.ContentBytes);  		break;  	case ContentSource.ContentString:  		Byte[] lBuffer = fContext.CurrentResponse.Encoding.GetBytes (fContext.CurrentResponse.ContentString);  		if (fBodyOffset > lBuffer.Length)  			fBodyOffset = lBuffer.Length;  		Array.Copy (lBuffer' 0' fBodyBuffer' lHeader.Length' fBodyOffset);  		DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' lBuffer);  		break;  	case ContentSource.ContentStream:  		fContext.CurrentResponse.ContentStream.Position = 0;  		fBodyOffset = fContext.CurrentResponse.ContentStream.Read (fBodyBuffer' lHeader.Length' fBodyOffset);  		DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' fContext.CurrentResponse.ContentStream);  		break;  	default:  		DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' null);  		break;  	}  }  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendResponse,The following statement contains a magic number: if (lHeader.Length >= 4096 || fContext.CurrentResponse.ContentSource == ContentSource.ContentNone) {  	fBodyOffset = 0;  	switch (fContext.CurrentResponse.ContentSource) {  	case ContentSource.ContentBytes:  		DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' fContext.CurrentResponse.ContentBytes);  		break;  	case ContentSource.ContentString:  		Byte[] lBuffer = fContext.CurrentResponse.Encoding.GetBytes (fContext.CurrentResponse.ContentString);  		DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' lBuffer);  		break;  	case ContentSource.ContentStream:  		fContext.CurrentResponse.ContentStream.Position = 0;  		DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' fContext.CurrentResponse.ContentStream);  		break;  	default:  		DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' null);  		break;  	}  }  else {  	if (fBodyBuffer == null)  		fBodyBuffer = new Byte[4096];  	Array.Copy (lHeader' 0' fBodyBuffer' 0' lHeader.Length);  	fBodyOffset = fBodyBuffer.Length - lHeader.Length;  	switch (fContext.CurrentResponse.ContentSource) {  	case ContentSource.ContentBytes:  		if (fBodyOffset > fContext.CurrentResponse.ContentBytes.Length)  			fBodyOffset = fContext.CurrentResponse.ContentBytes.Length;  		Array.Copy (fContext.CurrentResponse.ContentBytes' 0' fBodyBuffer' lHeader.Length' fBodyOffset);  		DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' fContext.CurrentResponse.ContentBytes);  		break;  	case ContentSource.ContentString:  		Byte[] lBuffer = fContext.CurrentResponse.Encoding.GetBytes (fContext.CurrentResponse.ContentString);  		if (fBodyOffset > lBuffer.Length)  			fBodyOffset = lBuffer.Length;  		Array.Copy (lBuffer' 0' fBodyBuffer' lHeader.Length' fBodyOffset);  		DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' lBuffer);  		break;  	case ContentSource.ContentStream:  		fContext.CurrentResponse.ContentStream.Position = 0;  		fBodyOffset = fContext.CurrentResponse.ContentStream.Read (fBodyBuffer' lHeader.Length' fBodyOffset);  		DataConnection.BeginWrite (fBodyBuffer' 0' fBodyOffset + lHeader.Length' ResponseBodyCallback' fContext.CurrentResponse.ContentStream);  		break;  	default:  		DataConnection.BeginWrite (lHeader' 0' fBodyOffset' ResponseBodyCallback' null);  		break;  	}  }  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendResponse,The following statement contains a magic number: if (fBodyBuffer == null)  	fBodyBuffer = new Byte[4096];  
Magic Number,RemObjects.InternetPack.Http,AsyncHttpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\AsyncHttpServer.cs,SendResponse,The following statement contains a magic number: fBodyBuffer = new Byte[4096];  
Magic Number,RemObjects.InternetPack.Http,HttpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpClient.cs,Dispatch,The following statement contains a magic number: if ((Int32)lResponse.HttpCode >= 400) {  	if (lResponse.HasContentLength)  		throw new HttpException (lResponse.ContentString' lResponse);  	throw new HttpException (lResponse.Header.ToString ()' lResponse);  }  
Magic Number,RemObjects.InternetPack.Http,HttpHeader,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,HttpHeader,The following statement contains a magic number: this.fValues.Add (line.Substring (lPos + 2));  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,Initialize,The following statement contains a magic number: this.MaxHeaderLines = 100;  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ParseFirstLine,The following statement contains a magic number: if (lRequestHeaderValues.Length < 3)  	throw new HttpHeaderException ("Invalid HTTP Header Line \"" + lHeaderLine + "\"");  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ParseFirstLine,The following statement contains a magic number: if (lHeaderLine.StartsWith ("HTTP/")) {  	// HTTP Response  	try {  		this.HttpCode = (HttpStatusCode)Enum.Parse (typeof(HttpStatusCode)' lRequestHeaderValues [1]' true);  	}  	catch (ArgumentException) {  		this.HttpCode = HttpStatusCode.OK;  	}  }  else {  	// HTTP Request  	this.RequestType = lRequestHeaderValues [0];  	this.RequestPath = lRequestHeaderValues [1];  	this.RequestVersion = lRequestHeaderValues [2];  	if (this.RequestVersion.StartsWith ("HTTP/"))  		this.RequestVersion = RequestVersion.Substring (5);  }  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ParseFirstLine,The following statement contains a magic number: if (lHeaderLine.StartsWith ("HTTP/")) {  	// HTTP Response  	try {  		this.HttpCode = (HttpStatusCode)Enum.Parse (typeof(HttpStatusCode)' lRequestHeaderValues [1]' true);  	}  	catch (ArgumentException) {  		this.HttpCode = HttpStatusCode.OK;  	}  }  else {  	// HTTP Request  	this.RequestType = lRequestHeaderValues [0];  	this.RequestPath = lRequestHeaderValues [1];  	this.RequestVersion = lRequestHeaderValues [2];  	if (this.RequestVersion.StartsWith ("HTTP/"))  		this.RequestVersion = RequestVersion.Substring (5);  }  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ParseFirstLine,The following statement contains a magic number: this.RequestVersion = lRequestHeaderValues [2];  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ParseFirstLine,The following statement contains a magic number: if (this.RequestVersion.StartsWith ("HTTP/"))  	this.RequestVersion = RequestVersion.Substring (5);  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ParseFirstLine,The following statement contains a magic number: this.RequestVersion = RequestVersion.Substring (5);  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHttpMethodName,The following statement contains a magic number: if (connection.Receive (lBuffer' 0' 4) < 4)  	return null;  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHttpMethodName,The following statement contains a magic number: if (connection.Receive (lBuffer' 0' 4) < 4)  	return null;  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHttpMethodName,The following statement contains a magic number: if (lHttpMethodName == "DELE") {  	connection.Read (lBuffer' 0' 2);  	if (lBuffer [0] != (Byte)'T' || lBuffer [1] != (Byte)'E')  		return String.Empty;  	return "DELETE";  }  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHttpMethodName,The following statement contains a magic number: connection.Read (lBuffer' 0' 2);  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHttpMethodName,The following statement contains a magic number: if (lHttpMethodName == "OPTI") {  	connection.Read (lBuffer' 0' 3);  	if (lBuffer [0] != (Byte)'O' || lBuffer [1] != (Byte)'N' || lBuffer [2] != (Byte)'S')  		return String.Empty;  	return "OPTIONS";  }  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHttpMethodName,The following statement contains a magic number: if (lHttpMethodName == "OPTI") {  	connection.Read (lBuffer' 0' 3);  	if (lBuffer [0] != (Byte)'O' || lBuffer [1] != (Byte)'N' || lBuffer [2] != (Byte)'S')  		return String.Empty;  	return "OPTIONS";  }  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHttpMethodName,The following statement contains a magic number: connection.Read (lBuffer' 0' 3);  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHttpMethodName,The following statement contains a magic number: if (lBuffer [0] != (Byte)'O' || lBuffer [1] != (Byte)'N' || lBuffer [2] != (Byte)'S')  	return String.Empty;  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHeader,The following statement contains a magic number: do {  	lHeaderLine = connection.ReadLine ();  	if (!String.IsNullOrEmpty (lHeaderLine)) {  		if (this.FirstHeader.Length == 0) {  			this.FirstHeader = lStart + lHeaderLine;  		}  		else {  			Int32 lPos = lHeaderLine.IndexOf (":"' StringComparison.Ordinal);  			if (lPos == -1) {  				throw new HttpHeaderException ("Invalid HTTP Header Line \"" + lHeaderLine + "\"");  			}  			String lName = lHeaderLine.Substring (0' lPos);  			String lValue = null;  			// There should be a space after the ":" ' but at least one custome said that this is not  			// always true  			// So we check if there is space after the ":"  			if (lHeaderLine.Length > lPos + 1) {  				if (lHeaderLine [lPos + 1] == ' ')  					lValue = lHeaderLine.Substring (lPos + 2);  				else  					lValue = lHeaderLine.Substring (lPos + 1);  			}  			HttpHeader lHeader = this [lName];  			if (lHeader == null) {  				lHeader = new HttpHeader (lName' lValue);  				fHeaders.Add (lName' lHeader);  			}  			else {  				lHeader.Add (lValue);  			}  		}  	}  	if (this.MaxHeaderLinesEnabled && this.fHeaders.Count > this.MaxHeaderLines - 1)// -1 because FirstHeader is not in hashtable  	 {  		connection.Disconnect ();  		throw new HttpHeaderException (String.Format ("Too many header lines received (maximum is set to {0})"' MaxHeaderLines));  	}  }  while (!String.IsNullOrEmpty (lHeaderLine));  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHeader,The following statement contains a magic number: if (!String.IsNullOrEmpty (lHeaderLine)) {  	if (this.FirstHeader.Length == 0) {  		this.FirstHeader = lStart + lHeaderLine;  	}  	else {  		Int32 lPos = lHeaderLine.IndexOf (":"' StringComparison.Ordinal);  		if (lPos == -1) {  			throw new HttpHeaderException ("Invalid HTTP Header Line \"" + lHeaderLine + "\"");  		}  		String lName = lHeaderLine.Substring (0' lPos);  		String lValue = null;  		// There should be a space after the ":" ' but at least one custome said that this is not  		// always true  		// So we check if there is space after the ":"  		if (lHeaderLine.Length > lPos + 1) {  			if (lHeaderLine [lPos + 1] == ' ')  				lValue = lHeaderLine.Substring (lPos + 2);  			else  				lValue = lHeaderLine.Substring (lPos + 1);  		}  		HttpHeader lHeader = this [lName];  		if (lHeader == null) {  			lHeader = new HttpHeader (lName' lValue);  			fHeaders.Add (lName' lHeader);  		}  		else {  			lHeader.Add (lValue);  		}  	}  }  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHeader,The following statement contains a magic number: if (this.FirstHeader.Length == 0) {  	this.FirstHeader = lStart + lHeaderLine;  }  else {  	Int32 lPos = lHeaderLine.IndexOf (":"' StringComparison.Ordinal);  	if (lPos == -1) {  		throw new HttpHeaderException ("Invalid HTTP Header Line \"" + lHeaderLine + "\"");  	}  	String lName = lHeaderLine.Substring (0' lPos);  	String lValue = null;  	// There should be a space after the ":" ' but at least one custome said that this is not  	// always true  	// So we check if there is space after the ":"  	if (lHeaderLine.Length > lPos + 1) {  		if (lHeaderLine [lPos + 1] == ' ')  			lValue = lHeaderLine.Substring (lPos + 2);  		else  			lValue = lHeaderLine.Substring (lPos + 1);  	}  	HttpHeader lHeader = this [lName];  	if (lHeader == null) {  		lHeader = new HttpHeader (lName' lValue);  		fHeaders.Add (lName' lHeader);  	}  	else {  		lHeader.Add (lValue);  	}  }  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHeader,The following statement contains a magic number: if (lHeaderLine.Length > lPos + 1) {  	if (lHeaderLine [lPos + 1] == ' ')  		lValue = lHeaderLine.Substring (lPos + 2);  	else  		lValue = lHeaderLine.Substring (lPos + 1);  }  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHeader,The following statement contains a magic number: if (lHeaderLine [lPos + 1] == ' ')  	lValue = lHeaderLine.Substring (lPos + 2);  else  	lValue = lHeaderLine.Substring (lPos + 1);  
Magic Number,RemObjects.InternetPack.Http,HttpHeaders,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpHeader.cs,ReadHeader,The following statement contains a magic number: lValue = lHeaderLine.Substring (lPos + 2);  
Magic Number,RemObjects.InternetPack.Http,HttpIncomingRequestResponse,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,FlushContent,The following statement contains a magic number: if (ContentLength > 16 * 1204)  	return false;  
Magic Number,RemObjects.InternetPack.Http,HttpIncomingRequestResponse,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,FlushContent,The following statement contains a magic number: if (ContentLength > 16 * 1204)  	return false;  
Magic Number,RemObjects.InternetPack.Http,HttpIncomingStream,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,FlushContent,The following statement contains a magic number: if (lLeft > 16 * 1024)  	return false;  
Magic Number,RemObjects.InternetPack.Http,HttpIncomingStream,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,FlushContent,The following statement contains a magic number: if (lLeft > 16 * 1024)  	return false;  
Magic Number,RemObjects.InternetPack.Http,HttpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpServer.cs,HttpServer,The following statement contains a magic number: this.DefaultPort = 80;  
Magic Number,RemObjects.InternetPack.Http,HttpsConnectionFactory,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Http\HttpsConnection.cs,HttpsConnectionFactory,The following statement contains a magic number: this.TargetPort = 8099;  
Magic Number,RemObjects.InternetPack.Http,HttpSslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Http\HttpSslConnection.cs,ParseSslTunnelResponse,The following statement contains a magic number: if (String.IsNullOrEmpty (lResonse) || (lResonse.Length < 9)) {  	throw new System.IO.IOException ("Proxy server didn't send an answer for SSL tunnel request");  }  
Magic Number,RemObjects.InternetPack.Http,HttpSslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Http\HttpSslConnection.cs,ParseSslTunnelResponse,The following statement contains a magic number: if (lSpacePos > lResonse.Length - 3) {  	throw new SocketException ();  }  
Magic Number,RemObjects.InternetPack.Http,KnownProtocols,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,KnownProtocols,The following statement contains a magic number: fProtocols = new Dictionary<String' Int32> (8);  
Magic Number,RemObjects.InternetPack.Http,KnownProtocols,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,KnownProtocols,The following statement contains a magic number: fProtocols.Add ("ftp"' 21);  
Magic Number,RemObjects.InternetPack.Http,KnownProtocols,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,KnownProtocols,The following statement contains a magic number: fProtocols.Add ("ssh"' 22);  
Magic Number,RemObjects.InternetPack.Http,KnownProtocols,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,KnownProtocols,The following statement contains a magic number: fProtocols.Add ("telnet"' 23);  
Magic Number,RemObjects.InternetPack.Http,KnownProtocols,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,KnownProtocols,The following statement contains a magic number: fProtocols.Add ("smtp"' 25);  
Magic Number,RemObjects.InternetPack.Http,KnownProtocols,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,KnownProtocols,The following statement contains a magic number: fProtocols.Add ("http"' 80);  
Magic Number,RemObjects.InternetPack.Http,KnownProtocols,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,KnownProtocols,The following statement contains a magic number: fProtocols.Add ("pop3"' 110);  
Magic Number,RemObjects.InternetPack.Http,KnownProtocols,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,KnownProtocols,The following statement contains a magic number: fProtocols.Add ("https"' 443);  
Magic Number,RemObjects.InternetPack.Http,UrlParser,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,Parse,The following statement contains a magic number: if (lProtocolPosition >= 0) {  	this.Protocol = url.Substring (0' lProtocolPosition);  	url = url.Substring (lProtocolPosition + 3);  	/* skip over :// */}  else {  	this.Protocol = DEFAULT_PROTOCOL;  }  
Magic Number,RemObjects.InternetPack.Http,UrlParser,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\UrlParser.cs,Parse,The following statement contains a magic number: url = url.Substring (lProtocolPosition + 3);  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,StartTimeoutTimer,The following statement contains a magic number: this.fTimeoutTimer.Change (this.Timeout * 1000' System.Threading.Timeout.Infinite);  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BufferReadLine,The following statement contains a magic number: if (fBuffer != null) {  	for (Int32 i = fBufferStart; i < fBufferEnd; i++) {  		if (fBuffer [i] != 10)  			continue;  		Int32 lLen = i - fBufferStart;  		if (lLen > 0 && fBuffer [i - 1] == 13)  			lLen--;  		String lData = Encoding.GetString (fBuffer' fBufferStart' lLen);  		fBufferStart = i + 1;  		return lData;  	}  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BufferReadLine,The following statement contains a magic number: if (fBuffer != null) {  	for (Int32 i = fBufferStart; i < fBufferEnd; i++) {  		if (fBuffer [i] != 10)  			continue;  		Int32 lLen = i - fBufferStart;  		if (lLen > 0 && fBuffer [i - 1] == 13)  			lLen--;  		String lData = Encoding.GetString (fBuffer' fBufferStart' lLen);  		fBufferStart = i + 1;  		return lData;  	}  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BufferReadLine,The following statement contains a magic number: for (Int32 i = fBufferStart; i < fBufferEnd; i++) {  	if (fBuffer [i] != 10)  		continue;  	Int32 lLen = i - fBufferStart;  	if (lLen > 0 && fBuffer [i - 1] == 13)  		lLen--;  	String lData = Encoding.GetString (fBuffer' fBufferStart' lLen);  	fBufferStart = i + 1;  	return lData;  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BufferReadLine,The following statement contains a magic number: for (Int32 i = fBufferStart; i < fBufferEnd; i++) {  	if (fBuffer [i] != 10)  		continue;  	Int32 lLen = i - fBufferStart;  	if (lLen > 0 && fBuffer [i - 1] == 13)  		lLen--;  	String lData = Encoding.GetString (fBuffer' fBufferStart' lLen);  	fBufferStart = i + 1;  	return lData;  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BufferReadLine,The following statement contains a magic number: if (fBuffer [i] != 10)  	continue;  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BufferReadLine,The following statement contains a magic number: if (lLen > 0 && fBuffer [i - 1] == 13)  	lLen--;  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BeginReadLine,The following statement contains a magic number: if (fBuffer != null) {  	for (Int32 i = fBufferStart; i < fBufferEnd; i++) {  		if (fBuffer [i] != 10)  			continue;  		Int32 lLen = i - fBufferStart;  		if (lLen > 0 && fBuffer [i - 1] == 13)  			lLen--;  		lRequest = new AsyncReadLineRequest (state' callback);  		lRequest.Data.Write (fBuffer' fBufferStart' lLen);  		lRequest.State = AsyncReadLineState.SyncDone;  		fBufferStart = i + 1;  		callback (lRequest);  		return lRequest;  	}  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BeginReadLine,The following statement contains a magic number: if (fBuffer != null) {  	for (Int32 i = fBufferStart; i < fBufferEnd; i++) {  		if (fBuffer [i] != 10)  			continue;  		Int32 lLen = i - fBufferStart;  		if (lLen > 0 && fBuffer [i - 1] == 13)  			lLen--;  		lRequest = new AsyncReadLineRequest (state' callback);  		lRequest.Data.Write (fBuffer' fBufferStart' lLen);  		lRequest.State = AsyncReadLineState.SyncDone;  		fBufferStart = i + 1;  		callback (lRequest);  		return lRequest;  	}  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BeginReadLine,The following statement contains a magic number: for (Int32 i = fBufferStart; i < fBufferEnd; i++) {  	if (fBuffer [i] != 10)  		continue;  	Int32 lLen = i - fBufferStart;  	if (lLen > 0 && fBuffer [i - 1] == 13)  		lLen--;  	lRequest = new AsyncReadLineRequest (state' callback);  	lRequest.Data.Write (fBuffer' fBufferStart' lLen);  	lRequest.State = AsyncReadLineState.SyncDone;  	fBufferStart = i + 1;  	callback (lRequest);  	return lRequest;  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BeginReadLine,The following statement contains a magic number: for (Int32 i = fBufferStart; i < fBufferEnd; i++) {  	if (fBuffer [i] != 10)  		continue;  	Int32 lLen = i - fBufferStart;  	if (lLen > 0 && fBuffer [i - 1] == 13)  		lLen--;  	lRequest = new AsyncReadLineRequest (state' callback);  	lRequest.Data.Write (fBuffer' fBufferStart' lLen);  	lRequest.State = AsyncReadLineState.SyncDone;  	fBufferStart = i + 1;  	callback (lRequest);  	return lRequest;  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BeginReadLine,The following statement contains a magic number: if (fBuffer [i] != 10)  	continue;  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,BeginReadLine,The following statement contains a magic number: if (lLen > 0 && fBuffer [i - 1] == 13)  	lLen--;  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,IntReadLineCallback,The following statement contains a magic number: try {  	Int32 lCount = IntEndRead (ar);  	if (lCount == 0) {  		TriggerAsyncDisconnect ();  		return;  	}  	for (Int32 i = 0; i < lCount; i++) {  		if (fBuffer [i] != 10)  			continue;  		if (i > 0 && fBuffer [i - 1] == 13)  			lRequest.Data.Write (fBuffer' 0' i - 1);  		else  			lRequest.Data.Write (fBuffer' 0' i);  		fBufferStart = i + 1;  		fBufferEnd = lCount;  		lRequest.State = AsyncReadLineState.Done;  		lRequest.Callback (lRequest);  		return;  	}  	if (this.MaxLineLengthEnabled && (lRequest.Data.Length > this.MaxLineLength)) {  		fBufferStart = 0;  		fBufferEnd = lCount;  		lRequest.State = AsyncReadLineState.MaxLineLengthReached;  		lRequest.Callback (lRequest);  		return;  	}  	lRequest.Data.Write (fBuffer' 0' lCount);  	TriggerAsyncHaveIncompleteData ();  	IntBeginRead (fBuffer' 0' fBuffer.Length' IntReadLineCallback' lRequest);  }  catch (ObjectDisposedException)// disconnect from this side   {  	TriggerAsyncDisconnect ();  }  catch (SocketException)// disconnect   {  	TriggerAsyncDisconnect ();  }  catch (ArgumentException) {  }  catch (Exception)// different platforms throw different exceptions   {  	TriggerAsyncDisconnect ();  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,IntReadLineCallback,The following statement contains a magic number: try {  	Int32 lCount = IntEndRead (ar);  	if (lCount == 0) {  		TriggerAsyncDisconnect ();  		return;  	}  	for (Int32 i = 0; i < lCount; i++) {  		if (fBuffer [i] != 10)  			continue;  		if (i > 0 && fBuffer [i - 1] == 13)  			lRequest.Data.Write (fBuffer' 0' i - 1);  		else  			lRequest.Data.Write (fBuffer' 0' i);  		fBufferStart = i + 1;  		fBufferEnd = lCount;  		lRequest.State = AsyncReadLineState.Done;  		lRequest.Callback (lRequest);  		return;  	}  	if (this.MaxLineLengthEnabled && (lRequest.Data.Length > this.MaxLineLength)) {  		fBufferStart = 0;  		fBufferEnd = lCount;  		lRequest.State = AsyncReadLineState.MaxLineLengthReached;  		lRequest.Callback (lRequest);  		return;  	}  	lRequest.Data.Write (fBuffer' 0' lCount);  	TriggerAsyncHaveIncompleteData ();  	IntBeginRead (fBuffer' 0' fBuffer.Length' IntReadLineCallback' lRequest);  }  catch (ObjectDisposedException)// disconnect from this side   {  	TriggerAsyncDisconnect ();  }  catch (SocketException)// disconnect   {  	TriggerAsyncDisconnect ();  }  catch (ArgumentException) {  }  catch (Exception)// different platforms throw different exceptions   {  	TriggerAsyncDisconnect ();  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,IntReadLineCallback,The following statement contains a magic number: for (Int32 i = 0; i < lCount; i++) {  	if (fBuffer [i] != 10)  		continue;  	if (i > 0 && fBuffer [i - 1] == 13)  		lRequest.Data.Write (fBuffer' 0' i - 1);  	else  		lRequest.Data.Write (fBuffer' 0' i);  	fBufferStart = i + 1;  	fBufferEnd = lCount;  	lRequest.State = AsyncReadLineState.Done;  	lRequest.Callback (lRequest);  	return;  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,IntReadLineCallback,The following statement contains a magic number: for (Int32 i = 0; i < lCount; i++) {  	if (fBuffer [i] != 10)  		continue;  	if (i > 0 && fBuffer [i - 1] == 13)  		lRequest.Data.Write (fBuffer' 0' i - 1);  	else  		lRequest.Data.Write (fBuffer' 0' i);  	fBufferStart = i + 1;  	fBufferEnd = lCount;  	lRequest.State = AsyncReadLineState.Done;  	lRequest.Callback (lRequest);  	return;  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,IntReadLineCallback,The following statement contains a magic number: if (fBuffer [i] != 10)  	continue;  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,IntReadLineCallback,The following statement contains a magic number: if (i > 0 && fBuffer [i - 1] == 13)  	lRequest.Data.Write (fBuffer' 0' i - 1);  else  	lRequest.Data.Write (fBuffer' 0' i);  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,EndReadLine,The following statement contains a magic number: try {  	if (lRequest.State == AsyncReadLineState.MaxLineLengthReached) {  		TriggerAsyncDisconnect ();  		Disconnect ();  		throw new ConnectionClosedException ("Size limit for ReadLine() was exceeded.");  	}  	Byte[] lBuffer = lRequest.Data.GetBuffer ();  	if (lRequest.Data.Length > 0 && lBuffer [lRequest.Data.Length - 1] == 13)  		return Encoding.GetString (lBuffer' 0' (Int32)lRequest.Data.Length - 1);  	// on the rare occasion that the split is between the #13 and the #10  	return Encoding.GetString (lBuffer' 0' (Int32)lRequest.Data.Length);  }  finally {  	lRequest.Data.Close ();  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,EndReadLine,The following statement contains a magic number: if (lRequest.Data.Length > 0 && lBuffer [lRequest.Data.Length - 1] == 13)  	return Encoding.GetString (lBuffer' 0' (Int32)lRequest.Data.Length - 1);  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: while (!lDone) {  	if (fBuffer == null) {  		fBuffer = new Byte[READLINE_BUFFER_SIZE];  		fBufferStart = 0;  		fBufferEnd = DataSocketReceiveWhatsAvaiable (fBuffer' 0' fBuffer.Length);  		if (fBufferEnd == 0)  			throw new ConnectionClosedException ();  	}  	Int32 i = fBufferStart;  	while (i < fBufferEnd && !lDone) {  		if (fBuffer [i] == 10)  			lDone = true;  		i++;  	}  	if (lDone) {  		if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  			// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  			lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  		}  		else {  			// else just discard the 10 (LF)  			lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  		}  	}  	else {  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart);  	}  	if (lDone) {  		/* Keep remaining buffer for future reads. */fBufferStart = i;  		if (fBufferStart == fBufferEnd)  			fBuffer = null;  	}  	else {  		fBuffer = null;  	}  	// Enforce Line Length checking  	if (MaxLineLengthEnabled && lResult.Length > MaxLineLength) {  		Disconnect ();  		throw new ConnectionClosedException ("Size limit for ReadLine() was exceeded.");  	}  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: while (!lDone) {  	if (fBuffer == null) {  		fBuffer = new Byte[READLINE_BUFFER_SIZE];  		fBufferStart = 0;  		fBufferEnd = DataSocketReceiveWhatsAvaiable (fBuffer' 0' fBuffer.Length);  		if (fBufferEnd == 0)  			throw new ConnectionClosedException ();  	}  	Int32 i = fBufferStart;  	while (i < fBufferEnd && !lDone) {  		if (fBuffer [i] == 10)  			lDone = true;  		i++;  	}  	if (lDone) {  		if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  			// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  			lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  		}  		else {  			// else just discard the 10 (LF)  			lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  		}  	}  	else {  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart);  	}  	if (lDone) {  		/* Keep remaining buffer for future reads. */fBufferStart = i;  		if (fBufferStart == fBufferEnd)  			fBuffer = null;  	}  	else {  		fBuffer = null;  	}  	// Enforce Line Length checking  	if (MaxLineLengthEnabled && lResult.Length > MaxLineLength) {  		Disconnect ();  		throw new ConnectionClosedException ("Size limit for ReadLine() was exceeded.");  	}  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: while (!lDone) {  	if (fBuffer == null) {  		fBuffer = new Byte[READLINE_BUFFER_SIZE];  		fBufferStart = 0;  		fBufferEnd = DataSocketReceiveWhatsAvaiable (fBuffer' 0' fBuffer.Length);  		if (fBufferEnd == 0)  			throw new ConnectionClosedException ();  	}  	Int32 i = fBufferStart;  	while (i < fBufferEnd && !lDone) {  		if (fBuffer [i] == 10)  			lDone = true;  		i++;  	}  	if (lDone) {  		if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  			// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  			lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  		}  		else {  			// else just discard the 10 (LF)  			lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  		}  	}  	else {  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart);  	}  	if (lDone) {  		/* Keep remaining buffer for future reads. */fBufferStart = i;  		if (fBufferStart == fBufferEnd)  			fBuffer = null;  	}  	else {  		fBuffer = null;  	}  	// Enforce Line Length checking  	if (MaxLineLengthEnabled && lResult.Length > MaxLineLength) {  		Disconnect ();  		throw new ConnectionClosedException ("Size limit for ReadLine() was exceeded.");  	}  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: while (!lDone) {  	if (fBuffer == null) {  		fBuffer = new Byte[READLINE_BUFFER_SIZE];  		fBufferStart = 0;  		fBufferEnd = DataSocketReceiveWhatsAvaiable (fBuffer' 0' fBuffer.Length);  		if (fBufferEnd == 0)  			throw new ConnectionClosedException ();  	}  	Int32 i = fBufferStart;  	while (i < fBufferEnd && !lDone) {  		if (fBuffer [i] == 10)  			lDone = true;  		i++;  	}  	if (lDone) {  		if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  			// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  			lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  		}  		else {  			// else just discard the 10 (LF)  			lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  		}  	}  	else {  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart);  	}  	if (lDone) {  		/* Keep remaining buffer for future reads. */fBufferStart = i;  		if (fBufferStart == fBufferEnd)  			fBuffer = null;  	}  	else {  		fBuffer = null;  	}  	// Enforce Line Length checking  	if (MaxLineLengthEnabled && lResult.Length > MaxLineLength) {  		Disconnect ();  		throw new ConnectionClosedException ("Size limit for ReadLine() was exceeded.");  	}  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: while (!lDone) {  	if (fBuffer == null) {  		fBuffer = new Byte[READLINE_BUFFER_SIZE];  		fBufferStart = 0;  		fBufferEnd = DataSocketReceiveWhatsAvaiable (fBuffer' 0' fBuffer.Length);  		if (fBufferEnd == 0)  			throw new ConnectionClosedException ();  	}  	Int32 i = fBufferStart;  	while (i < fBufferEnd && !lDone) {  		if (fBuffer [i] == 10)  			lDone = true;  		i++;  	}  	if (lDone) {  		if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  			// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  			lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  		}  		else {  			// else just discard the 10 (LF)  			lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  		}  	}  	else {  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart);  	}  	if (lDone) {  		/* Keep remaining buffer for future reads. */fBufferStart = i;  		if (fBufferStart == fBufferEnd)  			fBuffer = null;  	}  	else {  		fBuffer = null;  	}  	// Enforce Line Length checking  	if (MaxLineLengthEnabled && lResult.Length > MaxLineLength) {  		Disconnect ();  		throw new ConnectionClosedException ("Size limit for ReadLine() was exceeded.");  	}  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: while (i < fBufferEnd && !lDone) {  	if (fBuffer [i] == 10)  		lDone = true;  	i++;  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: if (fBuffer [i] == 10)  	lDone = true;  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: if (lDone) {  	if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  		// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  	}  	else {  		// else just discard the 10 (LF)  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  	}  }  else {  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart);  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: if (lDone) {  	if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  		// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  	}  	else {  		// else just discard the 10 (LF)  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  	}  }  else {  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart);  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: if (lDone) {  	if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  		// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  	}  	else {  		// else just discard the 10 (LF)  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  	}  }  else {  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart);  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: if (lDone) {  	if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  		// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  	}  	else {  		// else just discard the 10 (LF)  		lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  	}  }  else {  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart);  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  	// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  }  else {  	// else just discard the 10 (LF)  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  	// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  }  else {  	// else just discard the 10 (LF)  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  	// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  }  else {  	// else just discard the 10 (LF)  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: if ((i - 2 >= fBufferStart) && fBuffer [i - 2] == 13) {  	// if last character is 13' of yes we have a Windows style CRLF line end and must discard the CR' too  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  }  else {  	// else just discard the 10 (LF)  	lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 1);  }  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,ReadLine,The following statement contains a magic number: lResult = lResult + Encoding.GetString (fBuffer' fBufferStart' i - fBufferStart - 2);  
Magic Number,RemObjects.InternetPack,Connection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Connection\Connection.cs,WriteLine,The following statement contains a magic number: DataSocketSend (CRLF' 0' 2);  
Magic Number,RemObjects.InternetPack,ConnectionPool,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\ConnectionPool.cs,ConnectionPool,The following statement contains a magic number: this.fCleanupTimer = new Timer (CleanupCallback' null' 30000' 30000);  
Magic Number,RemObjects.InternetPack,ConnectionPool,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\ConnectionPool.cs,ConnectionPool,The following statement contains a magic number: this.fCleanupTimer = new Timer (CleanupCallback' null' 30000' 30000);  
Magic Number,RemObjects.InternetPack,ConnectionPool,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\ConnectionPool.cs,ConnectionPool,The following statement contains a magic number: this.fMaxQueuePerHost = 5;  
Magic Number,RemObjects.InternetPack,ConnectionPool,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\ConnectionPool.cs,ConnectionPool,The following statement contains a magic number: this.Timeout = 260;  
Magic Number,RemObjects.InternetPack,ConnectionPool,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\ConnectionPool.cs,ReleaseConnection,The following statement contains a magic number: lock (this.fCache) {  	ConnectionQueue lQueue;  	if (this.fCache.ContainsKey (lHost))  		lQueue = (ConnectionQueue)this.fCache [lHost];  	else {  		lQueue = new ConnectionQueue (this.fMaxQueuePerHost == 0 ? 8 : fMaxQueuePerHost);  		this.fCache.Add (lHost' lQueue);  	}  	if (lQueue.Count < this.fMaxQueuePerHost || this.fMaxQueuePerHost < 1) {  		connection.LastUsed = DateTime.Now;  		lQueue.Enqueue (connection);  	}  	else {  		connection.Dispose ();  	}  }  
Magic Number,RemObjects.InternetPack,ConnectionPool,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\ConnectionPool.cs,ReleaseConnection,The following statement contains a magic number: if (this.fCache.ContainsKey (lHost))  	lQueue = (ConnectionQueue)this.fCache [lHost];  else {  	lQueue = new ConnectionQueue (this.fMaxQueuePerHost == 0 ? 8 : fMaxQueuePerHost);  	this.fCache.Add (lHost' lQueue);  }  
Magic Number,RemObjects.InternetPack,ConnectionPool,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\ConnectionPool.cs,ReleaseConnection,The following statement contains a magic number: lQueue = new ConnectionQueue (this.fMaxQueuePerHost == 0 ? 8 : fMaxQueuePerHost);  
Magic Number,RemObjects.InternetPack,CertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\CertificateBuilder.cs,GetCertificateEndDate,The following statement contains a magic number: return DateTime.UtcNow.AddYears (10);  
Magic Number,RemObjects.InternetPack,NetCertificateBuilder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\NetCertificateBuilder.cs,CreatePrivateKey,The following statement contains a magic number: lPrivateKeyType.InvokeMember ("Length"' BindingFlags.SetProperty' null' lPrivateKey' new Object[] {  	1024  });  
Magic Number,RemObjects.InternetPack,SslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnection.cs,MonoDataSocketReceiveWhatsAvaiable,The following statement contains a magic number: try {  	IAsyncResult lAsyncResult = this.BeginMonoSslRead (buffer' offset' size);  	Int32 lBytesRead;  	// Manual timeout management  	// Timeout is increased to avoid racing conditions loops  	Int32 lTimeout = this.Timeout * 1000 + MONO_TIMEOUT_SHIFT_PERIOD;  	while (true) {  		Int32 lCurrentTimeout = Math.Min (MONO_TIMEOUT_POLL_PERIOD' lTimeout);  		lTimeout -= lCurrentTimeout;  		if (lAsyncResult.AsyncWaitHandle.WaitOne (lCurrentTimeout)) {  			lBytesRead = this.EndMonoSslRead (lAsyncResult);  			break;  		}  		if (!this.Connected) {  			throw new SocketException ();  		}  		if (lTimeout == 0) {  			// We got a timeout here  			this.DataSocketClose ();  			throw new SocketException ();  		}  	}  	// Say 'Hi!' to Mono bugs  	if (lBytesRead < 0) {  		throw new SocketException ();  	}  	return lBytesRead;  }  catch (IOException) {  	throw new SocketException ();  }  finally {  	this.StopTimeoutTimer ();  }  
Magic Number,RemObjects.InternetPack,SslConnection,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SSL\SslConnection.cs,MonoDataSocketSendAsMuchAsPossible,The following statement contains a magic number: try {  	IAsyncResult lAsyncResult = this.BeginMonoSslWrite (buffer' offset' size);  	// Manual timeout management  	// Timeout is increased to avoid racing conditions loops  	Int32 lTimeout = this.Timeout * 1000 + MONO_TIMEOUT_SHIFT_PERIOD;  	while (true) {  		Int32 lCurrentTimeout = Math.Min (MONO_TIMEOUT_POLL_PERIOD' lTimeout);  		lTimeout -= lCurrentTimeout;  		if (lAsyncResult.AsyncWaitHandle.WaitOne (lCurrentTimeout)) {  			this.EndMonoSslWrite (lAsyncResult);  			break;  		}  		if (!this.Connected) {  			throw new SocketException ();  		}  		if (lTimeout == 0) {  			// We got a timeout here  			this.DataSocketClose ();  			throw new SocketException ();  		}  	}  }  catch (IOException) {  	throw new SocketException ();  }  finally {  	this.StopTimeoutTimer ();  }  
Magic Number,RemObjects.InternetPack,MonoSecurityTypeProvider,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CertificateBuilder\MonoSecurityTypeProvider.cs,MonoSecurityTypeProvider,The following statement contains a magic number: this.fTypeCache = new Dictionary<String' Type> (16);  
Magic Number,RemObjects.InternetPack,TcpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\TcpServer.cs,DoWork,The following statement contains a magic number: try {  	Owner.HandleTcpConnection (DataConnection);  }  catch (SocketException ex) {  	// 10054 means the connection was closed by the client while reading from the socket.  	// We'll just terminate the thread gracefully' as if this was expected.  	if (ex.ErrorCode != 10054) {  		throw;  	}  }  catch (Exception) {  	// Ignore all exceptions  }  finally {  	DataConnection.Close ();  }  
Magic Number,RemObjects.InternetPack,TcpWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\TcpServer.cs,DoWork,The following statement contains a magic number: if (ex.ErrorCode != 10054) {  	throw;  }  
Magic Number,RemObjects.InternetPack.CommandBased,CommandBasedClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CommandBasedClient.cs,WaitForResponse,The following statement contains a magic number: if (i1 == -1 || ((i1 > i2) && (i2 != -1))) {  	lResp = new String[2];  	lResp [0] = lDataString.Substring (0' i2);  	lResp [1] = lDataString.Substring (i2 + 1);  	lMultline = false;  }  else {  	lResp = new String[2];  	lResp [0] = lDataString.Substring (0' i1);  	lResp [1] = lDataString.Substring (i1 + 1);  	lMultline = true;  }  
Magic Number,RemObjects.InternetPack.CommandBased,CommandBasedClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CommandBasedClient.cs,WaitForResponse,The following statement contains a magic number: if (i1 == -1 || ((i1 > i2) && (i2 != -1))) {  	lResp = new String[2];  	lResp [0] = lDataString.Substring (0' i2);  	lResp [1] = lDataString.Substring (i2 + 1);  	lMultline = false;  }  else {  	lResp = new String[2];  	lResp [0] = lDataString.Substring (0' i1);  	lResp [1] = lDataString.Substring (i1 + 1);  	lMultline = true;  }  
Magic Number,RemObjects.InternetPack.CommandBased,CommandBasedClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CommandBasedClient.cs,WaitForResponse,The following statement contains a magic number: lResp = new String[2];  
Magic Number,RemObjects.InternetPack.CommandBased,CommandBasedClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CommandBasedClient.cs,WaitForResponse,The following statement contains a magic number: lResp = new String[2];  
Magic Number,RemObjects.InternetPack.CommandBased,CommandBasedServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\CommandBasedServer.cs,CommandBasedServer,The following statement contains a magic number: this.fCommands = new Dictionary<String' OnCommandHandler> (16);  
Magic Number,RemObjects.InternetPack.Dns,DnsLookup,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Dns.cs,TryStringAsIPAddress,The following statement contains a magic number: if (lFields.Length != 4) {  	return null;  }  
Magic Number,RemObjects.InternetPack.Dns,DnsLookup,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Dns.cs,TryStringAsIPAddress,The following statement contains a magic number: for (Int32 i = 0; i < 4; i++) {  	if (lFields [i].Length > 3) {  		return null;  	}  	for (Int32 j = 0; j < lFields [i].Length; j++) {  		if (lFields [i] [j] < '0' && lFields [i] [j] > '9') {  			return null;  		}  	}  }  
Magic Number,RemObjects.InternetPack.Dns,DnsLookup,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Dns.cs,TryStringAsIPAddress,The following statement contains a magic number: for (Int32 i = 0; i < 4; i++) {  	if (lFields [i].Length > 3) {  		return null;  	}  	for (Int32 j = 0; j < lFields [i].Length; j++) {  		if (lFields [i] [j] < '0' && lFields [i] [j] > '9') {  			return null;  		}  	}  }  
Magic Number,RemObjects.InternetPack.Dns,DnsLookup,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Dns.cs,TryStringAsIPAddress,The following statement contains a magic number: if (lFields [i].Length > 3) {  	return null;  }  
Magic Number,RemObjects.InternetPack.StandardServers,EchoServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\EchoServer.cs,EchoServer,The following statement contains a magic number: this.DefaultPort = 7;  
Magic Number,RemObjects.InternetPack.StandardServers,EchoWorker,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\EchoServer.cs,DoWork,The following statement contains a magic number: do {  	Byte[] lReceiveBuffer = new Byte[256];  	/* a tiny buffer is good enough for echo server */lReceived = this.DataConnection.Read (lReceiveBuffer' 0' lReceiveBuffer.Length);  	if (lReceived > 0) {  		this.DataConnection.Write (lReceiveBuffer' 0' lReceived);  	}  }  while (lReceived > 0);  
Magic Number,RemObjects.InternetPack.Ftp,FtpException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Exceptions\FtpException.cs,FtpException,The following statement contains a magic number: this.fCode = 500;  
Magic Number,RemObjects.InternetPack.Ftp,FtpException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Exceptions\FtpException.cs,FtpException,The following statement contains a magic number: this.fCode = 500;  
Magic Number,RemObjects.InternetPack.Ftp,FtpException,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Exceptions\FtpException.cs,FtpException,The following statement contains a magic number: this.fCode = 500;  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Open,The following statement contains a magic number: if (!this.WaitForResponse (220)) {  	this.Close ();  	throw new CmdResponseException ("Invalid connection reply"' this.LastResponseNo' this.LastResponseText);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("USER " + this.UserName' 331' 230))  	throw new CmdResponseException ("Login unsuccessful"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("USER " + this.UserName' 331' 230))  	throw new CmdResponseException ("Login unsuccessful"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: switch (this.LastResponseNo) {  case 331:  	if (!this.SendAndWaitForResponse ("PASS " + this.Password' 230' 332))  		throw new CmdResponseException ("Login unsuccessful"' this.LastResponseNo' this.LastResponseText);  	switch (this.LastResponseNo) {  	case 232:  		SendAccount ();  		break;  	case 230:  		break;  	}  	break;  case 230:  	break;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: switch (this.LastResponseNo) {  case 331:  	if (!this.SendAndWaitForResponse ("PASS " + this.Password' 230' 332))  		throw new CmdResponseException ("Login unsuccessful"' this.LastResponseNo' this.LastResponseText);  	switch (this.LastResponseNo) {  	case 232:  		SendAccount ();  		break;  	case 230:  		break;  	}  	break;  case 230:  	break;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: switch (this.LastResponseNo) {  case 331:  	if (!this.SendAndWaitForResponse ("PASS " + this.Password' 230' 332))  		throw new CmdResponseException ("Login unsuccessful"' this.LastResponseNo' this.LastResponseText);  	switch (this.LastResponseNo) {  	case 232:  		SendAccount ();  		break;  	case 230:  		break;  	}  	break;  case 230:  	break;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: switch (this.LastResponseNo) {  case 331:  	if (!this.SendAndWaitForResponse ("PASS " + this.Password' 230' 332))  		throw new CmdResponseException ("Login unsuccessful"' this.LastResponseNo' this.LastResponseText);  	switch (this.LastResponseNo) {  	case 232:  		SendAccount ();  		break;  	case 230:  		break;  	}  	break;  case 230:  	break;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: switch (this.LastResponseNo) {  case 331:  	if (!this.SendAndWaitForResponse ("PASS " + this.Password' 230' 332))  		throw new CmdResponseException ("Login unsuccessful"' this.LastResponseNo' this.LastResponseText);  	switch (this.LastResponseNo) {  	case 232:  		SendAccount ();  		break;  	case 230:  		break;  	}  	break;  case 230:  	break;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: switch (this.LastResponseNo) {  case 331:  	if (!this.SendAndWaitForResponse ("PASS " + this.Password' 230' 332))  		throw new CmdResponseException ("Login unsuccessful"' this.LastResponseNo' this.LastResponseText);  	switch (this.LastResponseNo) {  	case 232:  		SendAccount ();  		break;  	case 230:  		break;  	}  	break;  case 230:  	break;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("PASS " + this.Password' 230' 332))  	throw new CmdResponseException ("Login unsuccessful"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("PASS " + this.Password' 230' 332))  	throw new CmdResponseException ("Login unsuccessful"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: switch (this.LastResponseNo) {  case 232:  	SendAccount ();  	break;  case 230:  	break;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following statement contains a magic number: switch (this.LastResponseNo) {  case 232:  	SendAccount ();  	break;  case 230:  	break;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,SendAccount,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("ACCT " + this.Account' 230' 202))  	throw new CmdResponseException ("Account command unsuccessful"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,SendAccount,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("ACCT " + this.Account' 230' 202))  	throw new CmdResponseException ("Account command unsuccessful"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Quit,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("QUIT"' 221))  	throw new CmdResponseException ("Quit unsuccessful"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,ChangeDirectory,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("CWD " + directory' 250))  	throw new CmdResponseException ("Error changing directory"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,ChangeToParentDirectory,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("CDUP"' 250))  	throw new CmdResponseException ("Error changing directory"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,GetCurrentDirectory,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("PWD"' 257))  	throw new CmdResponseException ("Could not retrieve current directory"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,RemoveDirectory,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("RMD " + directory' 250))  	throw new CmdResponseException ("Error removing directory"' LastResponseNo' LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,MakeDirectory,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("MKD " + directory' 257))  	throw new CmdResponseException ("Error making directory"' LastResponseNo' LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,StartPassiveConnection,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("PASV"' 227))  	throw new CmdResponseException ("Could not set passive mode"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,StartPassiveConnection,The following statement contains a magic number: this.fDataPort = (Byte.Parse (lGroups ["P1"].Value) * 256) + Byte.Parse (lGroups ["P2"].Value);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,StartActiveConnection,The following statement contains a magic number: if (!SendAndWaitForResponse (lPortCommand' 200))  	throw new CmdResponseException ("Error in PORT command"' LastResponseNo' LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,List,The following statement contains a magic number: if (!this.SendAndWaitForResponse (this.ShowHiddenFiles || showHiddenFiles ? "LIST -a" : "LIST"' 125' 150))  	throw new CmdResponseException ("Could not start LIST command"' LastResponseNo' LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,List,The following statement contains a magic number: if (!this.SendAndWaitForResponse (this.ShowHiddenFiles || showHiddenFiles ? "LIST -a" : "LIST"' 125' 150))  	throw new CmdResponseException ("Could not start LIST command"' LastResponseNo' LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,List,The following statement contains a magic number: this.WaitForResponse (226);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Delete,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("DELE " + filename' 250))  	throw new CmdResponseException ("Error deleting file"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,SetType,The following statement contains a magic number: if (!SendAndWaitForResponse ("TYPE " + type' 200))  	throw new CmdResponseException ("Error sending TYPE command"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Retrieve,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("RETR " + filename' 150' 125))  	throw new CmdResponseException ("Error retrieving file"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Retrieve,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("RETR " + filename' 150' 125))  	throw new CmdResponseException ("Error retrieving file"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Retrieve,The following statement contains a magic number: this.WaitForResponse (226);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Store,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("STOR " + filename' 150' 125))  	throw new CmdResponseException ("Error storing file"' LastResponseNo' LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Store,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("STOR " + filename' 150' 125))  	throw new CmdResponseException ("Error storing file"' LastResponseNo' LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Store,The following statement contains a magic number: this.WaitForResponse (226);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Rename,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("RNFR " + from' 350))  	throw new CmdResponseException ("Error renaming file"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Rename,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("RNTO " + to' 250))  	throw new CmdResponseException ("Error renaming file"' this.LastResponseNo' this.LastResponseText);  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: switch (date.Month) {  case 1:  	lResult = "Jan";  	break;  case 2:  	lResult = "Feb";  	break;  case 3:  	lResult = "Mar";  	break;  case 4:  	lResult = "Apr";  	break;  case 5:  	lResult = "May";  	break;  case 6:  	lResult = "Jun";  	break;  case 7:  	lResult = "Jul";  	break;  case 8:  	lResult = "Aug";  	break;  case 9:  	lResult = "Sep";  	break;  case 10:  	lResult = "Oct";  	break;  case 11:  	lResult = "Nov";  	break;  case 12:  	lResult = "Dec";  	break;  default:  	return "";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: switch (date.Month) {  case 1:  	lResult = "Jan";  	break;  case 2:  	lResult = "Feb";  	break;  case 3:  	lResult = "Mar";  	break;  case 4:  	lResult = "Apr";  	break;  case 5:  	lResult = "May";  	break;  case 6:  	lResult = "Jun";  	break;  case 7:  	lResult = "Jul";  	break;  case 8:  	lResult = "Aug";  	break;  case 9:  	lResult = "Sep";  	break;  case 10:  	lResult = "Oct";  	break;  case 11:  	lResult = "Nov";  	break;  case 12:  	lResult = "Dec";  	break;  default:  	return "";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: switch (date.Month) {  case 1:  	lResult = "Jan";  	break;  case 2:  	lResult = "Feb";  	break;  case 3:  	lResult = "Mar";  	break;  case 4:  	lResult = "Apr";  	break;  case 5:  	lResult = "May";  	break;  case 6:  	lResult = "Jun";  	break;  case 7:  	lResult = "Jul";  	break;  case 8:  	lResult = "Aug";  	break;  case 9:  	lResult = "Sep";  	break;  case 10:  	lResult = "Oct";  	break;  case 11:  	lResult = "Nov";  	break;  case 12:  	lResult = "Dec";  	break;  default:  	return "";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: switch (date.Month) {  case 1:  	lResult = "Jan";  	break;  case 2:  	lResult = "Feb";  	break;  case 3:  	lResult = "Mar";  	break;  case 4:  	lResult = "Apr";  	break;  case 5:  	lResult = "May";  	break;  case 6:  	lResult = "Jun";  	break;  case 7:  	lResult = "Jul";  	break;  case 8:  	lResult = "Aug";  	break;  case 9:  	lResult = "Sep";  	break;  case 10:  	lResult = "Oct";  	break;  case 11:  	lResult = "Nov";  	break;  case 12:  	lResult = "Dec";  	break;  default:  	return "";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: switch (date.Month) {  case 1:  	lResult = "Jan";  	break;  case 2:  	lResult = "Feb";  	break;  case 3:  	lResult = "Mar";  	break;  case 4:  	lResult = "Apr";  	break;  case 5:  	lResult = "May";  	break;  case 6:  	lResult = "Jun";  	break;  case 7:  	lResult = "Jul";  	break;  case 8:  	lResult = "Aug";  	break;  case 9:  	lResult = "Sep";  	break;  case 10:  	lResult = "Oct";  	break;  case 11:  	lResult = "Nov";  	break;  case 12:  	lResult = "Dec";  	break;  default:  	return "";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: switch (date.Month) {  case 1:  	lResult = "Jan";  	break;  case 2:  	lResult = "Feb";  	break;  case 3:  	lResult = "Mar";  	break;  case 4:  	lResult = "Apr";  	break;  case 5:  	lResult = "May";  	break;  case 6:  	lResult = "Jun";  	break;  case 7:  	lResult = "Jul";  	break;  case 8:  	lResult = "Aug";  	break;  case 9:  	lResult = "Sep";  	break;  case 10:  	lResult = "Oct";  	break;  case 11:  	lResult = "Nov";  	break;  case 12:  	lResult = "Dec";  	break;  default:  	return "";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: switch (date.Month) {  case 1:  	lResult = "Jan";  	break;  case 2:  	lResult = "Feb";  	break;  case 3:  	lResult = "Mar";  	break;  case 4:  	lResult = "Apr";  	break;  case 5:  	lResult = "May";  	break;  case 6:  	lResult = "Jun";  	break;  case 7:  	lResult = "Jul";  	break;  case 8:  	lResult = "Aug";  	break;  case 9:  	lResult = "Sep";  	break;  case 10:  	lResult = "Oct";  	break;  case 11:  	lResult = "Nov";  	break;  case 12:  	lResult = "Dec";  	break;  default:  	return "";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: switch (date.Month) {  case 1:  	lResult = "Jan";  	break;  case 2:  	lResult = "Feb";  	break;  case 3:  	lResult = "Mar";  	break;  case 4:  	lResult = "Apr";  	break;  case 5:  	lResult = "May";  	break;  case 6:  	lResult = "Jun";  	break;  case 7:  	lResult = "Jul";  	break;  case 8:  	lResult = "Aug";  	break;  case 9:  	lResult = "Sep";  	break;  case 10:  	lResult = "Oct";  	break;  case 11:  	lResult = "Nov";  	break;  case 12:  	lResult = "Dec";  	break;  default:  	return "";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: switch (date.Month) {  case 1:  	lResult = "Jan";  	break;  case 2:  	lResult = "Feb";  	break;  case 3:  	lResult = "Mar";  	break;  case 4:  	lResult = "Apr";  	break;  case 5:  	lResult = "May";  	break;  case 6:  	lResult = "Jun";  	break;  case 7:  	lResult = "Jul";  	break;  case 8:  	lResult = "Aug";  	break;  case 9:  	lResult = "Sep";  	break;  case 10:  	lResult = "Oct";  	break;  case 11:  	lResult = "Nov";  	break;  case 12:  	lResult = "Dec";  	break;  default:  	return "";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: switch (date.Month) {  case 1:  	lResult = "Jan";  	break;  case 2:  	lResult = "Feb";  	break;  case 3:  	lResult = "Mar";  	break;  case 4:  	lResult = "Apr";  	break;  case 5:  	lResult = "May";  	break;  case 6:  	lResult = "Jun";  	break;  case 7:  	lResult = "Jul";  	break;  case 8:  	lResult = "Aug";  	break;  case 9:  	lResult = "Sep";  	break;  case 10:  	lResult = "Oct";  	break;  case 11:  	lResult = "Nov";  	break;  case 12:  	lResult = "Dec";  	break;  default:  	return "";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: switch (date.Month) {  case 1:  	lResult = "Jan";  	break;  case 2:  	lResult = "Feb";  	break;  case 3:  	lResult = "Mar";  	break;  case 4:  	lResult = "Apr";  	break;  case 5:  	lResult = "May";  	break;  case 6:  	lResult = "Jun";  	break;  case 7:  	lResult = "Jul";  	break;  case 8:  	lResult = "Aug";  	break;  case 9:  	lResult = "Sep";  	break;  case 10:  	lResult = "Oct";  	break;  case 11:  	lResult = "Nov";  	break;  case 12:  	lResult = "Dec";  	break;  default:  	return "";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: lResult += date.Day > 9 ? " " + date.Day : "  " + date.Day;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: if (lShowYear) {  	lResult += "  " + LeadZero (date.Year.ToString ()' 4);  }  else {  	lResult += " ";  	if (date.Hour < 10) {  		lResult += "0";  	}  	lResult += date.Hour.ToString ();  	lResult += ":";  	if (date.Minute < 10) {  		lResult += "0";  	}  	lResult += date.Minute.ToString ();  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: if (lShowYear) {  	lResult += "  " + LeadZero (date.Year.ToString ()' 4);  }  else {  	lResult += " ";  	if (date.Hour < 10) {  		lResult += "0";  	}  	lResult += date.Hour.ToString ();  	lResult += ":";  	if (date.Minute < 10) {  		lResult += "0";  	}  	lResult += date.Minute.ToString ();  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: if (lShowYear) {  	lResult += "  " + LeadZero (date.Year.ToString ()' 4);  }  else {  	lResult += " ";  	if (date.Hour < 10) {  		lResult += "0";  	}  	lResult += date.Hour.ToString ();  	lResult += ":";  	if (date.Minute < 10) {  		lResult += "0";  	}  	lResult += date.Minute.ToString ();  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: lResult += "  " + LeadZero (date.Year.ToString ()' 4);  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: if (date.Hour < 10) {  	lResult += "0";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,FtpDateToString,The following statement contains a magic number: if (date.Minute < 10) {  	lResult += "0";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: if (!this.UserWrite)  	lRights [2] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: lRights [2] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: if (!this.UserExec)  	lRights [3] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: lRights [3] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: if (!this.GroupRead)  	lRights [4] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: lRights [4] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: if (!this.GroupWrite)  	lRights [5] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: lRights [5] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: if (!this.GroupExec)  	lRights [6] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: lRights [6] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: if (!this.OtherRead)  	lRights [7] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: lRights [7] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: if (!this.OtherWrite)  	lRights [8] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: lRights [8] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: if (!this.OtherExec)  	lRights [9] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,ToString,The following statement contains a magic number: lRights [9] = '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: if (item.StartsWith ("d") || item.StartsWith ("-")) {  	/*                  Unix Mode                 ======================================================================                 drwxr-xr-x    3 65025    100          4096 Dec 10 12:13 1 1                 drwxr-xr-x    2 65025    100          4096 Dec 10 12:13 2                 -rw-r--r--    1 65025    100            35 Dec 10 12:33 root.txt                 -rw-r--r--    1 65025    100            43 Dec 10 12:33 root2.txt                   where                 0 - access                 1 - sub item count                 2 - owner                 3 - group                 4 - size                 5 - Month                 6 - day                 7 - Time or Year                 8 - Filename                  */String[] lSplittedData = lRegEx.Split (item' 9);  	// Copy splitted data to result  	// Problem is that at least one FTP server doesn;t return Group segment  	// So we have to compensate this  	String[] lSegments = new String[9];  	for (Int32 i = 0; i < 3; i++)  		lSegments [i] = lSplittedData [i];  	for (Int32 i = 1; i <= 6; i++)  		lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  	this.Directory = lSegments [0] [0] != '-';  	this.UserRead = lSegments [0] [1] != '-';  	this.UserWrite = lSegments [0] [2] != '-';  	this.UserExec = lSegments [0] [3] != '-';  	this.GroupRead = lSegments [0] [4] != '-';  	this.GroupWrite = lSegments [0] [5] != '-';  	this.GroupExec = lSegments [0] [6] != '-';  	this.OtherRead = lSegments [0] [7] != '-';  	this.OtherWrite = lSegments [0] [8] != '-';  	this.OtherExec = lSegments [0] [9] != '-';  	this.SubItemCount = Int32.Parse (lSegments [1]);  	this.User = lSegments [2];  	this.Group = lSegments [3];  	this.Size = Int64.Parse (lSegments [4]);  	String lMonthShortName = lSegments [5];  	String lDay = lSegments [6];  	String lTimeOrYear = lSegments [7];  	this.FileDate = FtpListingItem.StringToFtpDate (lMonthShortName' lDay' lTimeOrYear);  	this.FileName = lSegments [8];  }  else {  	/*                  MS-DOS Mode                 ======================================================================                 01-14-08  01:35PM       <DIR>          1 1                 01-14-08  01:35PM       <DIR>          2                 01-14-08  01:36PM                   35 root.txt                 01-14-08  01:36PM                   43 root2.txt                  where                  0 - date                 1 - time                 2 - Size or IsDir                  3 - Filename                  */String[] lSegments = lRegEx.Split (item' 4);  	this.Directory = (lSegments [2] == "<DIR>");  	this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  	String lDateStr = lSegments [0];  	String lTimeStr = lSegments [1];  	this.FileDate = FtpListingItem.StringToFtpDate (lDateStr' lTimeStr);  	this.FileName = lSegments [3];  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: for (Int32 i = 0; i < 3; i++)  	lSegments [i] = lSplittedData [i];  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: for (Int32 i = 1; i <= 6; i++)  	lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: for (Int32 i = 1; i <= 6; i++)  	lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: lSegments [9 - i] = lSplittedData [lSplittedData.Length - i];  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.UserWrite = lSegments [0] [2] != '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.UserExec = lSegments [0] [3] != '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.GroupRead = lSegments [0] [4] != '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.GroupWrite = lSegments [0] [5] != '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.GroupExec = lSegments [0] [6] != '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.OtherRead = lSegments [0] [7] != '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.OtherWrite = lSegments [0] [8] != '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.OtherExec = lSegments [0] [9] != '-';  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.User = lSegments [2];  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.Group = lSegments [3];  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.Size = Int64.Parse (lSegments [4]);  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.FileName = lSegments [8];  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.Directory = (lSegments [2] == "<DIR>");  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.Size = this.Directory ? 0 : Int64.Parse (lSegments [2]);  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,Parse,The following statement contains a magic number: this.FileName = lSegments [3];  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: return FtpListingItem.StringToFtpDate (lParts [0]' lParts [1]' lParts [2]);  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	#region Parsing Date (Should be MM-DD-YY)  	String[] lDate = dateString.Split (new Char[] {  		'-'  	});  	if (lDate.Length == 3) {  		lMonth = Convert.ToInt32 (lDate [0]);  		lDay = Convert.ToInt32 (lDate [1]);  		lYear = Convert.ToInt32 (lDate [2]);  		if (lDate [2].Length == 2) {  			Int32 lCentury = (DateTime.Now.Year / 100) * 100;  			if ((lYear + 50) > 100)  				lCentury -= 100;  			lYear = lCentury + lYear;  		}  	}  	#endregion  	#region Parsing Time (Should be HH:MMAM/PM)  	String[] lTime = timeString.Split (new Char[] {  		':'  	});  	if (lTime.Length == 2) {  		lHour = Convert.ToInt32 (lTime [0]);  		if (lTime [1].Length == 4) {  			Boolean lPM = lTime [1].Substring (2) == "PM";  			if (lPM && lHour < 12)  				lHour += 12;  			if (!lPM && lHour == 12)  				lHour = 0;  			lTime [1] = lTime [1].Substring (0' 2);  		}  		lMinutes = Convert.ToInt32 (lTime [1]);  	}  	#endregion  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate.Length == 3) {  	lMonth = Convert.ToInt32 (lDate [0]);  	lDay = Convert.ToInt32 (lDate [1]);  	lYear = Convert.ToInt32 (lDate [2]);  	if (lDate [2].Length == 2) {  		Int32 lCentury = (DateTime.Now.Year / 100) * 100;  		if ((lYear + 50) > 100)  			lCentury -= 100;  		lYear = lCentury + lYear;  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate.Length == 3) {  	lMonth = Convert.ToInt32 (lDate [0]);  	lDay = Convert.ToInt32 (lDate [1]);  	lYear = Convert.ToInt32 (lDate [2]);  	if (lDate [2].Length == 2) {  		Int32 lCentury = (DateTime.Now.Year / 100) * 100;  		if ((lYear + 50) > 100)  			lCentury -= 100;  		lYear = lCentury + lYear;  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate.Length == 3) {  	lMonth = Convert.ToInt32 (lDate [0]);  	lDay = Convert.ToInt32 (lDate [1]);  	lYear = Convert.ToInt32 (lDate [2]);  	if (lDate [2].Length == 2) {  		Int32 lCentury = (DateTime.Now.Year / 100) * 100;  		if ((lYear + 50) > 100)  			lCentury -= 100;  		lYear = lCentury + lYear;  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate.Length == 3) {  	lMonth = Convert.ToInt32 (lDate [0]);  	lDay = Convert.ToInt32 (lDate [1]);  	lYear = Convert.ToInt32 (lDate [2]);  	if (lDate [2].Length == 2) {  		Int32 lCentury = (DateTime.Now.Year / 100) * 100;  		if ((lYear + 50) > 100)  			lCentury -= 100;  		lYear = lCentury + lYear;  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate.Length == 3) {  	lMonth = Convert.ToInt32 (lDate [0]);  	lDay = Convert.ToInt32 (lDate [1]);  	lYear = Convert.ToInt32 (lDate [2]);  	if (lDate [2].Length == 2) {  		Int32 lCentury = (DateTime.Now.Year / 100) * 100;  		if ((lYear + 50) > 100)  			lCentury -= 100;  		lYear = lCentury + lYear;  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate.Length == 3) {  	lMonth = Convert.ToInt32 (lDate [0]);  	lDay = Convert.ToInt32 (lDate [1]);  	lYear = Convert.ToInt32 (lDate [2]);  	if (lDate [2].Length == 2) {  		Int32 lCentury = (DateTime.Now.Year / 100) * 100;  		if ((lYear + 50) > 100)  			lCentury -= 100;  		lYear = lCentury + lYear;  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate.Length == 3) {  	lMonth = Convert.ToInt32 (lDate [0]);  	lDay = Convert.ToInt32 (lDate [1]);  	lYear = Convert.ToInt32 (lDate [2]);  	if (lDate [2].Length == 2) {  		Int32 lCentury = (DateTime.Now.Year / 100) * 100;  		if ((lYear + 50) > 100)  			lCentury -= 100;  		lYear = lCentury + lYear;  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate.Length == 3) {  	lMonth = Convert.ToInt32 (lDate [0]);  	lDay = Convert.ToInt32 (lDate [1]);  	lYear = Convert.ToInt32 (lDate [2]);  	if (lDate [2].Length == 2) {  		Int32 lCentury = (DateTime.Now.Year / 100) * 100;  		if ((lYear + 50) > 100)  			lCentury -= 100;  		lYear = lCentury + lYear;  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate.Length == 3) {  	lMonth = Convert.ToInt32 (lDate [0]);  	lDay = Convert.ToInt32 (lDate [1]);  	lYear = Convert.ToInt32 (lDate [2]);  	if (lDate [2].Length == 2) {  		Int32 lCentury = (DateTime.Now.Year / 100) * 100;  		if ((lYear + 50) > 100)  			lCentury -= 100;  		lYear = lCentury + lYear;  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lYear = Convert.ToInt32 (lDate [2]);  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate [2].Length == 2) {  	Int32 lCentury = (DateTime.Now.Year / 100) * 100;  	if ((lYear + 50) > 100)  		lCentury -= 100;  	lYear = lCentury + lYear;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate [2].Length == 2) {  	Int32 lCentury = (DateTime.Now.Year / 100) * 100;  	if ((lYear + 50) > 100)  		lCentury -= 100;  	lYear = lCentury + lYear;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate [2].Length == 2) {  	Int32 lCentury = (DateTime.Now.Year / 100) * 100;  	if ((lYear + 50) > 100)  		lCentury -= 100;  	lYear = lCentury + lYear;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate [2].Length == 2) {  	Int32 lCentury = (DateTime.Now.Year / 100) * 100;  	if ((lYear + 50) > 100)  		lCentury -= 100;  	lYear = lCentury + lYear;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate [2].Length == 2) {  	Int32 lCentury = (DateTime.Now.Year / 100) * 100;  	if ((lYear + 50) > 100)  		lCentury -= 100;  	lYear = lCentury + lYear;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate [2].Length == 2) {  	Int32 lCentury = (DateTime.Now.Year / 100) * 100;  	if ((lYear + 50) > 100)  		lCentury -= 100;  	lYear = lCentury + lYear;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lDate [2].Length == 2) {  	Int32 lCentury = (DateTime.Now.Year / 100) * 100;  	if ((lYear + 50) > 100)  		lCentury -= 100;  	lYear = lCentury + lYear;  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if ((lYear + 50) > 100)  	lCentury -= 100;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if ((lYear + 50) > 100)  	lCentury -= 100;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if ((lYear + 50) > 100)  	lCentury -= 100;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lCentury -= 100;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime.Length == 2) {  	lHour = Convert.ToInt32 (lTime [0]);  	if (lTime [1].Length == 4) {  		Boolean lPM = lTime [1].Substring (2) == "PM";  		if (lPM && lHour < 12)  			lHour += 12;  		if (!lPM && lHour == 12)  			lHour = 0;  		lTime [1] = lTime [1].Substring (0' 2);  	}  	lMinutes = Convert.ToInt32 (lTime [1]);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime.Length == 2) {  	lHour = Convert.ToInt32 (lTime [0]);  	if (lTime [1].Length == 4) {  		Boolean lPM = lTime [1].Substring (2) == "PM";  		if (lPM && lHour < 12)  			lHour += 12;  		if (!lPM && lHour == 12)  			lHour = 0;  		lTime [1] = lTime [1].Substring (0' 2);  	}  	lMinutes = Convert.ToInt32 (lTime [1]);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime.Length == 2) {  	lHour = Convert.ToInt32 (lTime [0]);  	if (lTime [1].Length == 4) {  		Boolean lPM = lTime [1].Substring (2) == "PM";  		if (lPM && lHour < 12)  			lHour += 12;  		if (!lPM && lHour == 12)  			lHour = 0;  		lTime [1] = lTime [1].Substring (0' 2);  	}  	lMinutes = Convert.ToInt32 (lTime [1]);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime.Length == 2) {  	lHour = Convert.ToInt32 (lTime [0]);  	if (lTime [1].Length == 4) {  		Boolean lPM = lTime [1].Substring (2) == "PM";  		if (lPM && lHour < 12)  			lHour += 12;  		if (!lPM && lHour == 12)  			lHour = 0;  		lTime [1] = lTime [1].Substring (0' 2);  	}  	lMinutes = Convert.ToInt32 (lTime [1]);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime.Length == 2) {  	lHour = Convert.ToInt32 (lTime [0]);  	if (lTime [1].Length == 4) {  		Boolean lPM = lTime [1].Substring (2) == "PM";  		if (lPM && lHour < 12)  			lHour += 12;  		if (!lPM && lHour == 12)  			lHour = 0;  		lTime [1] = lTime [1].Substring (0' 2);  	}  	lMinutes = Convert.ToInt32 (lTime [1]);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime.Length == 2) {  	lHour = Convert.ToInt32 (lTime [0]);  	if (lTime [1].Length == 4) {  		Boolean lPM = lTime [1].Substring (2) == "PM";  		if (lPM && lHour < 12)  			lHour += 12;  		if (!lPM && lHour == 12)  			lHour = 0;  		lTime [1] = lTime [1].Substring (0' 2);  	}  	lMinutes = Convert.ToInt32 (lTime [1]);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime.Length == 2) {  	lHour = Convert.ToInt32 (lTime [0]);  	if (lTime [1].Length == 4) {  		Boolean lPM = lTime [1].Substring (2) == "PM";  		if (lPM && lHour < 12)  			lHour += 12;  		if (!lPM && lHour == 12)  			lHour = 0;  		lTime [1] = lTime [1].Substring (0' 2);  	}  	lMinutes = Convert.ToInt32 (lTime [1]);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime [1].Length == 4) {  	Boolean lPM = lTime [1].Substring (2) == "PM";  	if (lPM && lHour < 12)  		lHour += 12;  	if (!lPM && lHour == 12)  		lHour = 0;  	lTime [1] = lTime [1].Substring (0' 2);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime [1].Length == 4) {  	Boolean lPM = lTime [1].Substring (2) == "PM";  	if (lPM && lHour < 12)  		lHour += 12;  	if (!lPM && lHour == 12)  		lHour = 0;  	lTime [1] = lTime [1].Substring (0' 2);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime [1].Length == 4) {  	Boolean lPM = lTime [1].Substring (2) == "PM";  	if (lPM && lHour < 12)  		lHour += 12;  	if (!lPM && lHour == 12)  		lHour = 0;  	lTime [1] = lTime [1].Substring (0' 2);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime [1].Length == 4) {  	Boolean lPM = lTime [1].Substring (2) == "PM";  	if (lPM && lHour < 12)  		lHour += 12;  	if (!lPM && lHour == 12)  		lHour = 0;  	lTime [1] = lTime [1].Substring (0' 2);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime [1].Length == 4) {  	Boolean lPM = lTime [1].Substring (2) == "PM";  	if (lPM && lHour < 12)  		lHour += 12;  	if (!lPM && lHour == 12)  		lHour = 0;  	lTime [1] = lTime [1].Substring (0' 2);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTime [1].Length == 4) {  	Boolean lPM = lTime [1].Substring (2) == "PM";  	if (lPM && lHour < 12)  		lHour += 12;  	if (!lPM && lHour == 12)  		lHour = 0;  	lTime [1] = lTime [1].Substring (0' 2);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lPM && lHour < 12)  	lHour += 12;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lPM && lHour < 12)  	lHour += 12;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lHour += 12;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (!lPM && lHour == 12)  	lHour = 0;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lTime [1] = lTime [1].Substring (0' 2);  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: try {  	switch (monthName) {  	case "Jan":  		lMonth = 1;  		break;  	case "Feb":  		lMonth = 2;  		break;  	case "Mar":  		lMonth = 3;  		break;  	case "Apr":  		lMonth = 4;  		break;  	case "May":  		lMonth = 5;  		break;  	case "Jun":  		lMonth = 6;  		break;  	case "Jul":  		lMonth = 7;  		break;  	case "Aug":  		lMonth = 8;  		break;  	case "Sep":  		lMonth = 9;  		break;  	case "Oct":  		lMonth = 10;  		break;  	case "Nov":  		lMonth = 11;  		break;  	case "Dec":  		lMonth = 12;  		break;  	default:  		return new DateTime (0);  	}  	lDay = Int32.Parse (day);  	lYear = DateTime.Now.Year;  	if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time  	 {  		lYear = Int32.Parse (yearOrTime);  	}  	else {  		// no year' either this year or last  		Int32 lCurrentMonth = DateTime.Now.Month;  		if (lCurrentMonth < lMonth)  			lYear -= 1;  		String[] lTimes = Regex.Split (yearOrTime' ":");  		lHour = Int32.Parse (lTimes [0]);  		lMinute = Int32.Parse (lTimes [1]);  		if (lTimes.Length > 2)  			lSecond = Int32.Parse (lTimes [2]);  	}  }  catch (Exception)// don't need any exception here.   {  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: switch (monthName) {  case "Jan":  	lMonth = 1;  	break;  case "Feb":  	lMonth = 2;  	break;  case "Mar":  	lMonth = 3;  	break;  case "Apr":  	lMonth = 4;  	break;  case "May":  	lMonth = 5;  	break;  case "Jun":  	lMonth = 6;  	break;  case "Jul":  	lMonth = 7;  	break;  case "Aug":  	lMonth = 8;  	break;  case "Sep":  	lMonth = 9;  	break;  case "Oct":  	lMonth = 10;  	break;  case "Nov":  	lMonth = 11;  	break;  case "Dec":  	lMonth = 12;  	break;  default:  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: switch (monthName) {  case "Jan":  	lMonth = 1;  	break;  case "Feb":  	lMonth = 2;  	break;  case "Mar":  	lMonth = 3;  	break;  case "Apr":  	lMonth = 4;  	break;  case "May":  	lMonth = 5;  	break;  case "Jun":  	lMonth = 6;  	break;  case "Jul":  	lMonth = 7;  	break;  case "Aug":  	lMonth = 8;  	break;  case "Sep":  	lMonth = 9;  	break;  case "Oct":  	lMonth = 10;  	break;  case "Nov":  	lMonth = 11;  	break;  case "Dec":  	lMonth = 12;  	break;  default:  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: switch (monthName) {  case "Jan":  	lMonth = 1;  	break;  case "Feb":  	lMonth = 2;  	break;  case "Mar":  	lMonth = 3;  	break;  case "Apr":  	lMonth = 4;  	break;  case "May":  	lMonth = 5;  	break;  case "Jun":  	lMonth = 6;  	break;  case "Jul":  	lMonth = 7;  	break;  case "Aug":  	lMonth = 8;  	break;  case "Sep":  	lMonth = 9;  	break;  case "Oct":  	lMonth = 10;  	break;  case "Nov":  	lMonth = 11;  	break;  case "Dec":  	lMonth = 12;  	break;  default:  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: switch (monthName) {  case "Jan":  	lMonth = 1;  	break;  case "Feb":  	lMonth = 2;  	break;  case "Mar":  	lMonth = 3;  	break;  case "Apr":  	lMonth = 4;  	break;  case "May":  	lMonth = 5;  	break;  case "Jun":  	lMonth = 6;  	break;  case "Jul":  	lMonth = 7;  	break;  case "Aug":  	lMonth = 8;  	break;  case "Sep":  	lMonth = 9;  	break;  case "Oct":  	lMonth = 10;  	break;  case "Nov":  	lMonth = 11;  	break;  case "Dec":  	lMonth = 12;  	break;  default:  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: switch (monthName) {  case "Jan":  	lMonth = 1;  	break;  case "Feb":  	lMonth = 2;  	break;  case "Mar":  	lMonth = 3;  	break;  case "Apr":  	lMonth = 4;  	break;  case "May":  	lMonth = 5;  	break;  case "Jun":  	lMonth = 6;  	break;  case "Jul":  	lMonth = 7;  	break;  case "Aug":  	lMonth = 8;  	break;  case "Sep":  	lMonth = 9;  	break;  case "Oct":  	lMonth = 10;  	break;  case "Nov":  	lMonth = 11;  	break;  case "Dec":  	lMonth = 12;  	break;  default:  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: switch (monthName) {  case "Jan":  	lMonth = 1;  	break;  case "Feb":  	lMonth = 2;  	break;  case "Mar":  	lMonth = 3;  	break;  case "Apr":  	lMonth = 4;  	break;  case "May":  	lMonth = 5;  	break;  case "Jun":  	lMonth = 6;  	break;  case "Jul":  	lMonth = 7;  	break;  case "Aug":  	lMonth = 8;  	break;  case "Sep":  	lMonth = 9;  	break;  case "Oct":  	lMonth = 10;  	break;  case "Nov":  	lMonth = 11;  	break;  case "Dec":  	lMonth = 12;  	break;  default:  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: switch (monthName) {  case "Jan":  	lMonth = 1;  	break;  case "Feb":  	lMonth = 2;  	break;  case "Mar":  	lMonth = 3;  	break;  case "Apr":  	lMonth = 4;  	break;  case "May":  	lMonth = 5;  	break;  case "Jun":  	lMonth = 6;  	break;  case "Jul":  	lMonth = 7;  	break;  case "Aug":  	lMonth = 8;  	break;  case "Sep":  	lMonth = 9;  	break;  case "Oct":  	lMonth = 10;  	break;  case "Nov":  	lMonth = 11;  	break;  case "Dec":  	lMonth = 12;  	break;  default:  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: switch (monthName) {  case "Jan":  	lMonth = 1;  	break;  case "Feb":  	lMonth = 2;  	break;  case "Mar":  	lMonth = 3;  	break;  case "Apr":  	lMonth = 4;  	break;  case "May":  	lMonth = 5;  	break;  case "Jun":  	lMonth = 6;  	break;  case "Jul":  	lMonth = 7;  	break;  case "Aug":  	lMonth = 8;  	break;  case "Sep":  	lMonth = 9;  	break;  case "Oct":  	lMonth = 10;  	break;  case "Nov":  	lMonth = 11;  	break;  case "Dec":  	lMonth = 12;  	break;  default:  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: switch (monthName) {  case "Jan":  	lMonth = 1;  	break;  case "Feb":  	lMonth = 2;  	break;  case "Mar":  	lMonth = 3;  	break;  case "Apr":  	lMonth = 4;  	break;  case "May":  	lMonth = 5;  	break;  case "Jun":  	lMonth = 6;  	break;  case "Jul":  	lMonth = 7;  	break;  case "Aug":  	lMonth = 8;  	break;  case "Sep":  	lMonth = 9;  	break;  case "Oct":  	lMonth = 10;  	break;  case "Nov":  	lMonth = 11;  	break;  case "Dec":  	lMonth = 12;  	break;  default:  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: switch (monthName) {  case "Jan":  	lMonth = 1;  	break;  case "Feb":  	lMonth = 2;  	break;  case "Mar":  	lMonth = 3;  	break;  case "Apr":  	lMonth = 4;  	break;  case "May":  	lMonth = 5;  	break;  case "Jun":  	lMonth = 6;  	break;  case "Jul":  	lMonth = 7;  	break;  case "Aug":  	lMonth = 8;  	break;  case "Sep":  	lMonth = 9;  	break;  case "Oct":  	lMonth = 10;  	break;  case "Nov":  	lMonth = 11;  	break;  case "Dec":  	lMonth = 12;  	break;  default:  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: switch (monthName) {  case "Jan":  	lMonth = 1;  	break;  case "Feb":  	lMonth = 2;  	break;  case "Mar":  	lMonth = 3;  	break;  case "Apr":  	lMonth = 4;  	break;  case "May":  	lMonth = 5;  	break;  case "Jun":  	lMonth = 6;  	break;  case "Jul":  	lMonth = 7;  	break;  case "Aug":  	lMonth = 8;  	break;  case "Sep":  	lMonth = 9;  	break;  case "Oct":  	lMonth = 10;  	break;  case "Nov":  	lMonth = 11;  	break;  case "Dec":  	lMonth = 12;  	break;  default:  	return new DateTime (0);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lMonth = 2;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lMonth = 3;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lMonth = 4;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lMonth = 5;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lMonth = 6;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lMonth = 7;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lMonth = 8;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lMonth = 9;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lMonth = 10;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lMonth = 11;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lMonth = 12;  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time   {  	lYear = Int32.Parse (yearOrTime);  }  else {  	// no year' either this year or last  	Int32 lCurrentMonth = DateTime.Now.Month;  	if (lCurrentMonth < lMonth)  		lYear -= 1;  	String[] lTimes = Regex.Split (yearOrTime' ":");  	lHour = Int32.Parse (lTimes [0]);  	lMinute = Int32.Parse (lTimes [1]);  	if (lTimes.Length > 2)  		lSecond = Int32.Parse (lTimes [2]);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (yearOrTime.IndexOf (":"' StringComparison.Ordinal) == -1)// this is a year' not a time   {  	lYear = Int32.Parse (yearOrTime);  }  else {  	// no year' either this year or last  	Int32 lCurrentMonth = DateTime.Now.Month;  	if (lCurrentMonth < lMonth)  		lYear -= 1;  	String[] lTimes = Regex.Split (yearOrTime' ":");  	lHour = Int32.Parse (lTimes [0]);  	lMinute = Int32.Parse (lTimes [1]);  	if (lTimes.Length > 2)  		lSecond = Int32.Parse (lTimes [2]);  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTimes.Length > 2)  	lSecond = Int32.Parse (lTimes [2]);  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: if (lTimes.Length > 2)  	lSecond = Int32.Parse (lTimes [2]);  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: lSecond = Int32.Parse (lTimes [2]);  
Magic Number,RemObjects.InternetPack.Ftp,FtpListingItem,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpListing.cs,StringToFtpDate,The following statement contains a magic number: return new DateTime (lYear' lMonth' lDay' lHour' lMinute' lSecond' 999);  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,FtpServer,The following statement contains a magic number: this.Port = 21;  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PASV,The following statement contains a magic number: if (lSession.State == FtpState.LoggedIn) {  	if (lSession.ActiveConnection != null) {  		if (lSession.ActiveConnection.Connected)  			lSession.ActiveConnection.Close ();  		lSession.ActiveConnection = null;  	}  	if (lSession.PassiveServer == null) {  		lSession.PassiveServer = new SimpleServer ();  		lSession.PassiveServer.Binding.Address = ((IPEndPoint)e.Connection.LocalEndPoint).Address;  		lSession.PassiveServer.Open ();  	}  	lSession.Passive = true;  	Byte[] lAddress;  	#if FULLFRAMEWORK  	lAddress = ((IPEndPoint)lSession.PassiveServer.Binding.ListeningSocket.LocalEndPoint).Address.GetAddressBytes ();  	#endif  	#if COMPACTFRAMEWORK  	                IPAddress lIPAddress = ((IPEndPoint)lSession.PassiveServer.Binding.ListeningSocket.LocalEndPoint).Address;                 String[] lIPAddressstr = lIPAddress.ToString().Split(new Char[] {'.'});                 lAddress = new Byte[lIPAddressstr.Length];                 for (Int32 i = 0; i < lIPAddressstr.Length; i++)                     lAddress[i] = Byte.Parse(lIPAddressstr[i]); #endif  	Int32 lPort = ((IPEndPoint)lSession.PassiveServer.Binding.ListeningSocket.LocalEndPoint).Port;  	e.Connection.WriteLine ("227 Entering Passive Mode ({0}'{1}'{2}'{3}'{4}'{5})."' lAddress [0]' lAddress [1]' lAddress [2]' lAddress [3]' unchecked((Byte)(lPort >> 8))' unchecked((Byte)lPort));  }  else {  	e.Connection.WriteLine ("503 Bad sequence of commands.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PASV,The following statement contains a magic number: if (lSession.State == FtpState.LoggedIn) {  	if (lSession.ActiveConnection != null) {  		if (lSession.ActiveConnection.Connected)  			lSession.ActiveConnection.Close ();  		lSession.ActiveConnection = null;  	}  	if (lSession.PassiveServer == null) {  		lSession.PassiveServer = new SimpleServer ();  		lSession.PassiveServer.Binding.Address = ((IPEndPoint)e.Connection.LocalEndPoint).Address;  		lSession.PassiveServer.Open ();  	}  	lSession.Passive = true;  	Byte[] lAddress;  	#if FULLFRAMEWORK  	lAddress = ((IPEndPoint)lSession.PassiveServer.Binding.ListeningSocket.LocalEndPoint).Address.GetAddressBytes ();  	#endif  	#if COMPACTFRAMEWORK  	                IPAddress lIPAddress = ((IPEndPoint)lSession.PassiveServer.Binding.ListeningSocket.LocalEndPoint).Address;                 String[] lIPAddressstr = lIPAddress.ToString().Split(new Char[] {'.'});                 lAddress = new Byte[lIPAddressstr.Length];                 for (Int32 i = 0; i < lIPAddressstr.Length; i++)                     lAddress[i] = Byte.Parse(lIPAddressstr[i]); #endif  	Int32 lPort = ((IPEndPoint)lSession.PassiveServer.Binding.ListeningSocket.LocalEndPoint).Port;  	e.Connection.WriteLine ("227 Entering Passive Mode ({0}'{1}'{2}'{3}'{4}'{5})."' lAddress [0]' lAddress [1]' lAddress [2]' lAddress [3]' unchecked((Byte)(lPort >> 8))' unchecked((Byte)lPort));  }  else {  	e.Connection.WriteLine ("503 Bad sequence of commands.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PASV,The following statement contains a magic number: if (lSession.State == FtpState.LoggedIn) {  	if (lSession.ActiveConnection != null) {  		if (lSession.ActiveConnection.Connected)  			lSession.ActiveConnection.Close ();  		lSession.ActiveConnection = null;  	}  	if (lSession.PassiveServer == null) {  		lSession.PassiveServer = new SimpleServer ();  		lSession.PassiveServer.Binding.Address = ((IPEndPoint)e.Connection.LocalEndPoint).Address;  		lSession.PassiveServer.Open ();  	}  	lSession.Passive = true;  	Byte[] lAddress;  	#if FULLFRAMEWORK  	lAddress = ((IPEndPoint)lSession.PassiveServer.Binding.ListeningSocket.LocalEndPoint).Address.GetAddressBytes ();  	#endif  	#if COMPACTFRAMEWORK  	                IPAddress lIPAddress = ((IPEndPoint)lSession.PassiveServer.Binding.ListeningSocket.LocalEndPoint).Address;                 String[] lIPAddressstr = lIPAddress.ToString().Split(new Char[] {'.'});                 lAddress = new Byte[lIPAddressstr.Length];                 for (Int32 i = 0; i < lIPAddressstr.Length; i++)                     lAddress[i] = Byte.Parse(lIPAddressstr[i]); #endif  	Int32 lPort = ((IPEndPoint)lSession.PassiveServer.Binding.ListeningSocket.LocalEndPoint).Port;  	e.Connection.WriteLine ("227 Entering Passive Mode ({0}'{1}'{2}'{3}'{4}'{5})."' lAddress [0]' lAddress [1]' lAddress [2]' lAddress [3]' unchecked((Byte)(lPort >> 8))' unchecked((Byte)lPort));  }  else {  	e.Connection.WriteLine ("503 Bad sequence of commands.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PASV,The following statement contains a magic number: e.Connection.WriteLine ("227 Entering Passive Mode ({0}'{1}'{2}'{3}'{4}'{5})."' lAddress [0]' lAddress [1]' lAddress [2]' lAddress [3]' unchecked((Byte)(lPort >> 8))' unchecked((Byte)lPort));  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PASV,The following statement contains a magic number: e.Connection.WriteLine ("227 Entering Passive Mode ({0}'{1}'{2}'{3}'{4}'{5})."' lAddress [0]' lAddress [1]' lAddress [2]' lAddress [3]' unchecked((Byte)(lPort >> 8))' unchecked((Byte)lPort));  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PASV,The following statement contains a magic number: e.Connection.WriteLine ("227 Entering Passive Mode ({0}'{1}'{2}'{3}'{4}'{5})."' lAddress [0]' lAddress [1]' lAddress [2]' lAddress [3]' unchecked((Byte)(lPort >> 8))' unchecked((Byte)lPort));  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lSession.State == FtpState.LoggedIn) {  	if (e.Parameters.Length != 1) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		String[] lNewPort = e.Parameters [0].Split (new Char[] {  			'''  		});  		if (lNewPort.Length != 6) {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  		else {  			IPAddress lNewIp;  			Int32 lNewPortw;  			try {  				lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  				lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  				lSession.Passive = false;  				try {  					lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  					e.Connection.WriteLine ("200 PORT command succesful");  				}  				catch {  					e.Connection.WriteLine ("500 Illegal PORT command ");  				}  			}  			catch {  				e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  			}  		}  	}  }  else {  	e.Connection.WriteLine ("503 Bad sequence of commands.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lSession.State == FtpState.LoggedIn) {  	if (e.Parameters.Length != 1) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		String[] lNewPort = e.Parameters [0].Split (new Char[] {  			'''  		});  		if (lNewPort.Length != 6) {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  		else {  			IPAddress lNewIp;  			Int32 lNewPortw;  			try {  				lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  				lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  				lSession.Passive = false;  				try {  					lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  					e.Connection.WriteLine ("200 PORT command succesful");  				}  				catch {  					e.Connection.WriteLine ("500 Illegal PORT command ");  				}  			}  			catch {  				e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  			}  		}  	}  }  else {  	e.Connection.WriteLine ("503 Bad sequence of commands.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lSession.State == FtpState.LoggedIn) {  	if (e.Parameters.Length != 1) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		String[] lNewPort = e.Parameters [0].Split (new Char[] {  			'''  		});  		if (lNewPort.Length != 6) {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  		else {  			IPAddress lNewIp;  			Int32 lNewPortw;  			try {  				lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  				lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  				lSession.Passive = false;  				try {  					lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  					e.Connection.WriteLine ("200 PORT command succesful");  				}  				catch {  					e.Connection.WriteLine ("500 Illegal PORT command ");  				}  			}  			catch {  				e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  			}  		}  	}  }  else {  	e.Connection.WriteLine ("503 Bad sequence of commands.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lSession.State == FtpState.LoggedIn) {  	if (e.Parameters.Length != 1) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		String[] lNewPort = e.Parameters [0].Split (new Char[] {  			'''  		});  		if (lNewPort.Length != 6) {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  		else {  			IPAddress lNewIp;  			Int32 lNewPortw;  			try {  				lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  				lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  				lSession.Passive = false;  				try {  					lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  					e.Connection.WriteLine ("200 PORT command succesful");  				}  				catch {  					e.Connection.WriteLine ("500 Illegal PORT command ");  				}  			}  			catch {  				e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  			}  		}  	}  }  else {  	e.Connection.WriteLine ("503 Bad sequence of commands.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lSession.State == FtpState.LoggedIn) {  	if (e.Parameters.Length != 1) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		String[] lNewPort = e.Parameters [0].Split (new Char[] {  			'''  		});  		if (lNewPort.Length != 6) {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  		else {  			IPAddress lNewIp;  			Int32 lNewPortw;  			try {  				lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  				lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  				lSession.Passive = false;  				try {  					lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  					e.Connection.WriteLine ("200 PORT command succesful");  				}  				catch {  					e.Connection.WriteLine ("500 Illegal PORT command ");  				}  			}  			catch {  				e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  			}  		}  	}  }  else {  	e.Connection.WriteLine ("503 Bad sequence of commands.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lSession.State == FtpState.LoggedIn) {  	if (e.Parameters.Length != 1) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		String[] lNewPort = e.Parameters [0].Split (new Char[] {  			'''  		});  		if (lNewPort.Length != 6) {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  		else {  			IPAddress lNewIp;  			Int32 lNewPortw;  			try {  				lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  				lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  				lSession.Passive = false;  				try {  					lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  					e.Connection.WriteLine ("200 PORT command succesful");  				}  				catch {  					e.Connection.WriteLine ("500 Illegal PORT command ");  				}  			}  			catch {  				e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  			}  		}  	}  }  else {  	e.Connection.WriteLine ("503 Bad sequence of commands.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (e.Parameters.Length != 1) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	String[] lNewPort = e.Parameters [0].Split (new Char[] {  		'''  	});  	if (lNewPort.Length != 6) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		IPAddress lNewIp;  		Int32 lNewPortw;  		try {  			lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  			lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  			lSession.Passive = false;  			try {  				lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  				e.Connection.WriteLine ("200 PORT command succesful");  			}  			catch {  				e.Connection.WriteLine ("500 Illegal PORT command ");  			}  		}  		catch {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (e.Parameters.Length != 1) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	String[] lNewPort = e.Parameters [0].Split (new Char[] {  		'''  	});  	if (lNewPort.Length != 6) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		IPAddress lNewIp;  		Int32 lNewPortw;  		try {  			lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  			lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  			lSession.Passive = false;  			try {  				lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  				e.Connection.WriteLine ("200 PORT command succesful");  			}  			catch {  				e.Connection.WriteLine ("500 Illegal PORT command ");  			}  		}  		catch {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (e.Parameters.Length != 1) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	String[] lNewPort = e.Parameters [0].Split (new Char[] {  		'''  	});  	if (lNewPort.Length != 6) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		IPAddress lNewIp;  		Int32 lNewPortw;  		try {  			lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  			lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  			lSession.Passive = false;  			try {  				lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  				e.Connection.WriteLine ("200 PORT command succesful");  			}  			catch {  				e.Connection.WriteLine ("500 Illegal PORT command ");  			}  		}  		catch {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (e.Parameters.Length != 1) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	String[] lNewPort = e.Parameters [0].Split (new Char[] {  		'''  	});  	if (lNewPort.Length != 6) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		IPAddress lNewIp;  		Int32 lNewPortw;  		try {  			lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  			lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  			lSession.Passive = false;  			try {  				lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  				e.Connection.WriteLine ("200 PORT command succesful");  			}  			catch {  				e.Connection.WriteLine ("500 Illegal PORT command ");  			}  		}  		catch {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (e.Parameters.Length != 1) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	String[] lNewPort = e.Parameters [0].Split (new Char[] {  		'''  	});  	if (lNewPort.Length != 6) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		IPAddress lNewIp;  		Int32 lNewPortw;  		try {  			lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  			lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  			lSession.Passive = false;  			try {  				lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  				e.Connection.WriteLine ("200 PORT command succesful");  			}  			catch {  				e.Connection.WriteLine ("500 Illegal PORT command ");  			}  		}  		catch {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (e.Parameters.Length != 1) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	String[] lNewPort = e.Parameters [0].Split (new Char[] {  		'''  	});  	if (lNewPort.Length != 6) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		IPAddress lNewIp;  		Int32 lNewPortw;  		try {  			lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  			lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  			lSession.Passive = false;  			try {  				lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  				e.Connection.WriteLine ("200 PORT command succesful");  			}  			catch {  				e.Connection.WriteLine ("500 Illegal PORT command ");  			}  		}  		catch {  			e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  		}  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lNewPort.Length != 6) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	IPAddress lNewIp;  	Int32 lNewPortw;  	try {  		lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  		lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  		lSession.Passive = false;  		try {  			lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  			e.Connection.WriteLine ("200 PORT command succesful");  		}  		catch {  			e.Connection.WriteLine ("500 Illegal PORT command ");  		}  	}  	catch {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lNewPort.Length != 6) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	IPAddress lNewIp;  	Int32 lNewPortw;  	try {  		lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  		lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  		lSession.Passive = false;  		try {  			lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  			e.Connection.WriteLine ("200 PORT command succesful");  		}  		catch {  			e.Connection.WriteLine ("500 Illegal PORT command ");  		}  	}  	catch {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lNewPort.Length != 6) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	IPAddress lNewIp;  	Int32 lNewPortw;  	try {  		lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  		lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  		lSession.Passive = false;  		try {  			lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  			e.Connection.WriteLine ("200 PORT command succesful");  		}  		catch {  			e.Connection.WriteLine ("500 Illegal PORT command ");  		}  	}  	catch {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lNewPort.Length != 6) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	IPAddress lNewIp;  	Int32 lNewPortw;  	try {  		lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  		lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  		lSession.Passive = false;  		try {  			lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  			e.Connection.WriteLine ("200 PORT command succesful");  		}  		catch {  			e.Connection.WriteLine ("500 Illegal PORT command ");  		}  	}  	catch {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lNewPort.Length != 6) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	IPAddress lNewIp;  	Int32 lNewPortw;  	try {  		lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  		lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  		lSession.Passive = false;  		try {  			lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  			e.Connection.WriteLine ("200 PORT command succesful");  		}  		catch {  			e.Connection.WriteLine ("500 Illegal PORT command ");  		}  	}  	catch {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: if (lNewPort.Length != 6) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	IPAddress lNewIp;  	Int32 lNewPortw;  	try {  		lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  		lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  		lSession.Passive = false;  		try {  			lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  			e.Connection.WriteLine ("200 PORT command succesful");  		}  		catch {  			e.Connection.WriteLine ("500 Illegal PORT command ");  		}  	}  	catch {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: try {  	lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  	lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  	lSession.Passive = false;  	try {  		lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  		e.Connection.WriteLine ("200 PORT command succesful");  	}  	catch {  		e.Connection.WriteLine ("500 Illegal PORT command ");  	}  }  catch {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: try {  	lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  	lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  	lSession.Passive = false;  	try {  		lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  		e.Connection.WriteLine ("200 PORT command succesful");  	}  	catch {  		e.Connection.WriteLine ("500 Illegal PORT command ");  	}  }  catch {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: try {  	lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  	lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  	lSession.Passive = false;  	try {  		lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  		e.Connection.WriteLine ("200 PORT command succesful");  	}  	catch {  		e.Connection.WriteLine ("500 Illegal PORT command ");  	}  }  catch {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: try {  	lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  	lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  	lSession.Passive = false;  	try {  		lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  		e.Connection.WriteLine ("200 PORT command succesful");  	}  	catch {  		e.Connection.WriteLine ("500 Illegal PORT command ");  	}  }  catch {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: try {  	lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  	lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  	lSession.Passive = false;  	try {  		lSession.ActiveConnection = Client.Connect (lNewIp' lNewPortw' new Binding ());  		e.Connection.WriteLine ("200 PORT command succesful");  	}  	catch {  		e.Connection.WriteLine ("500 Illegal PORT command ");  	}  }  catch {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: lNewIp = IPAddress.Parse (String.Format ("{0}.{1}.{2}.{3}"' lNewPort [0]' lNewPort [1]' lNewPort [2]' lNewPort [3]));  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_PORT,The following statement contains a magic number: lNewPortw = Byte.Parse (lNewPort [4]) << 8 | Byte.Parse (lNewPort [5]);  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_CDUP,The following statement contains a magic number: if (lSession.State == FtpState.LoggedIn) {  	if (e.Parameters.Length != 0) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		String lNewDir = lSession.Directory;  		if (lNewDir.Length > 2) {  			Int32 lNewLen = lNewDir.LastIndexOf ('/'' lNewDir.Length - 2);  			if (lNewLen <= 0)  				lNewLen = 1;  			lNewDir = lNewDir.Substring (0' lNewLen);  			if (lNewDir.Length == 0)  				lNewDir = "/";  		}  		FtpChangeDirectoryArgs lEventArgs = new FtpChangeDirectoryArgs (e.Session' e.Connection' e.Server);  		lEventArgs.NewDirectory = lNewDir;  		try {  			((FtpServer)e.Server).InvokeOnChangeDirectory (lEventArgs);  		}  		catch (FtpException ex) {  			e.Connection.WriteLine (ex.ToString ());  			return;  		}  		catch {  			e.Connection.WriteLine ("500 Internal Error");  			return;  		}  		if (lEventArgs.ChangeDirOk) {  			e.Connection.WriteLine ("250 CDUP command successful.");  			lSession.Directory = lNewDir;  		}  		else {  			e.Connection.WriteLine ("550 Permission Denied.");  		}  	}  }  else {  	e.Connection.WriteLine ("503 Bad sequence of commands.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_CDUP,The following statement contains a magic number: if (lSession.State == FtpState.LoggedIn) {  	if (e.Parameters.Length != 0) {  		e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  	}  	else {  		String lNewDir = lSession.Directory;  		if (lNewDir.Length > 2) {  			Int32 lNewLen = lNewDir.LastIndexOf ('/'' lNewDir.Length - 2);  			if (lNewLen <= 0)  				lNewLen = 1;  			lNewDir = lNewDir.Substring (0' lNewLen);  			if (lNewDir.Length == 0)  				lNewDir = "/";  		}  		FtpChangeDirectoryArgs lEventArgs = new FtpChangeDirectoryArgs (e.Session' e.Connection' e.Server);  		lEventArgs.NewDirectory = lNewDir;  		try {  			((FtpServer)e.Server).InvokeOnChangeDirectory (lEventArgs);  		}  		catch (FtpException ex) {  			e.Connection.WriteLine (ex.ToString ());  			return;  		}  		catch {  			e.Connection.WriteLine ("500 Internal Error");  			return;  		}  		if (lEventArgs.ChangeDirOk) {  			e.Connection.WriteLine ("250 CDUP command successful.");  			lSession.Directory = lNewDir;  		}  		else {  			e.Connection.WriteLine ("550 Permission Denied.");  		}  	}  }  else {  	e.Connection.WriteLine ("503 Bad sequence of commands.");  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_CDUP,The following statement contains a magic number: if (e.Parameters.Length != 0) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	String lNewDir = lSession.Directory;  	if (lNewDir.Length > 2) {  		Int32 lNewLen = lNewDir.LastIndexOf ('/'' lNewDir.Length - 2);  		if (lNewLen <= 0)  			lNewLen = 1;  		lNewDir = lNewDir.Substring (0' lNewLen);  		if (lNewDir.Length == 0)  			lNewDir = "/";  	}  	FtpChangeDirectoryArgs lEventArgs = new FtpChangeDirectoryArgs (e.Session' e.Connection' e.Server);  	lEventArgs.NewDirectory = lNewDir;  	try {  		((FtpServer)e.Server).InvokeOnChangeDirectory (lEventArgs);  	}  	catch (FtpException ex) {  		e.Connection.WriteLine (ex.ToString ());  		return;  	}  	catch {  		e.Connection.WriteLine ("500 Internal Error");  		return;  	}  	if (lEventArgs.ChangeDirOk) {  		e.Connection.WriteLine ("250 CDUP command successful.");  		lSession.Directory = lNewDir;  	}  	else {  		e.Connection.WriteLine ("550 Permission Denied.");  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_CDUP,The following statement contains a magic number: if (e.Parameters.Length != 0) {  	e.Connection.WriteLine ("501 Syntax error in parameters or arguments.");  }  else {  	String lNewDir = lSession.Directory;  	if (lNewDir.Length > 2) {  		Int32 lNewLen = lNewDir.LastIndexOf ('/'' lNewDir.Length - 2);  		if (lNewLen <= 0)  			lNewLen = 1;  		lNewDir = lNewDir.Substring (0' lNewLen);  		if (lNewDir.Length == 0)  			lNewDir = "/";  	}  	FtpChangeDirectoryArgs lEventArgs = new FtpChangeDirectoryArgs (e.Session' e.Connection' e.Server);  	lEventArgs.NewDirectory = lNewDir;  	try {  		((FtpServer)e.Server).InvokeOnChangeDirectory (lEventArgs);  	}  	catch (FtpException ex) {  		e.Connection.WriteLine (ex.ToString ());  		return;  	}  	catch {  		e.Connection.WriteLine ("500 Internal Error");  		return;  	}  	if (lEventArgs.ChangeDirOk) {  		e.Connection.WriteLine ("250 CDUP command successful.");  		lSession.Directory = lNewDir;  	}  	else {  		e.Connection.WriteLine ("550 Permission Denied.");  	}  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_CDUP,The following statement contains a magic number: if (lNewDir.Length > 2) {  	Int32 lNewLen = lNewDir.LastIndexOf ('/'' lNewDir.Length - 2);  	if (lNewLen <= 0)  		lNewLen = 1;  	lNewDir = lNewDir.Substring (0' lNewLen);  	if (lNewDir.Length == 0)  		lNewDir = "/";  }  
Magic Number,RemObjects.InternetPack.Ftp,FtpServer,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpServer.cs,Cmd_CDUP,The following statement contains a magic number: if (lNewDir.Length > 2) {  	Int32 lNewLen = lNewDir.LastIndexOf ('/'' lNewDir.Length - 2);  	if (lNewLen <= 0)  		lNewLen = 1;  	lNewDir = lNewDir.Substring (0' lNewLen);  	if (lNewDir.Length == 0)  		lNewDir = "/";  }  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,SplitMultiLine,The following statement contains a magic number: while (source.Length > length) {  	i = source.LastIndexOf (' '' length);  	if (i < (length / 3)) {  		i = source.IndexOf (' '' length);  		if (i == -1)  			break;  	}  	lRes.Append (source.Substring (0' i));  	source = " " + source.Substring (i + 1);  	if (source.Trim ().Length == 0)  		break;  	lRes.Append ("\r\n");  }  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,SplitMultiLine,The following statement contains a magic number: if (i < (length / 3)) {  	i = source.IndexOf (' '' length);  	if (i == -1)  		break;  }  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,EncodeMessage,The following statement contains a magic number: for (Int32 i = 0; i < source.Fields.Count; i++) {  	String lKey = source.Fields.Keys [i];  	HeaderField lValue = source.Fields [lKey];  	if (lKey.Equals ("Subject")) {  		lValue.Value = DefaultEncoder.EncodeUtf8Base64 (lValue.Value);  		lWrter.WriteLine (lKey + ": " + lValue);  		continue;  	}  	lWrter.WriteLine (SplitMultiLine (lKey + ": " + lValue' 80));  }  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,EncodeMessage,The following statement contains a magic number: lWrter.WriteLine (SplitMultiLine (lKey + ": " + lValue' 80));  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,EncodeMessage,The following statement contains a magic number: if (source.Sender.IsSet ())  	lWrter.WriteLine (SplitMultiLine ("Sender: " + source.Sender' 80));  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,EncodeMessage,The following statement contains a magic number: lWrter.WriteLine (SplitMultiLine ("Sender: " + source.Sender' 80));  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,EncodeMessage,The following statement contains a magic number: if (source.To.Count > 0)  	lWrter.WriteLine (SplitMultiLine ("To: " + source.To' 80));  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,EncodeMessage,The following statement contains a magic number: lWrter.WriteLine (SplitMultiLine ("To: " + source.To' 80));  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,EncodeMessage,The following statement contains a magic number: if (source.Cc.Count > 0)  	lWrter.WriteLine (SplitMultiLine ("Cc: " + source.Cc' 80));  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,EncodeMessage,The following statement contains a magic number: lWrter.WriteLine (SplitMultiLine ("Cc: " + source.Cc' 80));  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,RemoveQuotes,The following statement contains a magic number: if (value.StartsWith ("\"") && value.EndsWith ("\""))  	return value.Substring (1' value.Length - 2);  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,RemoveQuotes,The following statement contains a magic number: return value.Substring (1' value.Length - 2);  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,ParseHeader,The following statement contains a magic number: while (!String.IsNullOrEmpty ((lLine = lStringReader.ReadLine ()))) {  	if ((lLine [0] == ' ' || lLine [0] == '\t') && (lField != null)) {  		// header continuation or property  		lField.Value += lLine;  	}  	else {  		// header  		Int32 lPosition = lLine.IndexOf (':');  		String lName = lLine.Substring (0' lPosition);  		String lValue;  		if ((lPosition + 2) < lLine.Length)  			lValue = lLine.Substring (lPosition + 2);  		else  			lValue = String.Empty;  		lField = new HeaderField (RemoveQuotes (lValue));  		message.Fields.Add (lName' lField);  	}  }  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,ParseHeader,The following statement contains a magic number: while (!String.IsNullOrEmpty ((lLine = lStringReader.ReadLine ()))) {  	if ((lLine [0] == ' ' || lLine [0] == '\t') && (lField != null)) {  		// header continuation or property  		lField.Value += lLine;  	}  	else {  		// header  		Int32 lPosition = lLine.IndexOf (':');  		String lName = lLine.Substring (0' lPosition);  		String lValue;  		if ((lPosition + 2) < lLine.Length)  			lValue = lLine.Substring (lPosition + 2);  		else  			lValue = String.Empty;  		lField = new HeaderField (RemoveQuotes (lValue));  		message.Fields.Add (lName' lField);  	}  }  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,ParseHeader,The following statement contains a magic number: if ((lLine [0] == ' ' || lLine [0] == '\t') && (lField != null)) {  	// header continuation or property  	lField.Value += lLine;  }  else {  	// header  	Int32 lPosition = lLine.IndexOf (':');  	String lName = lLine.Substring (0' lPosition);  	String lValue;  	if ((lPosition + 2) < lLine.Length)  		lValue = lLine.Substring (lPosition + 2);  	else  		lValue = String.Empty;  	lField = new HeaderField (RemoveQuotes (lValue));  	message.Fields.Add (lName' lField);  }  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,ParseHeader,The following statement contains a magic number: if ((lLine [0] == ' ' || lLine [0] == '\t') && (lField != null)) {  	// header continuation or property  	lField.Value += lLine;  }  else {  	// header  	Int32 lPosition = lLine.IndexOf (':');  	String lName = lLine.Substring (0' lPosition);  	String lValue;  	if ((lPosition + 2) < lLine.Length)  		lValue = lLine.Substring (lPosition + 2);  	else  		lValue = String.Empty;  	lField = new HeaderField (RemoveQuotes (lValue));  	message.Fields.Add (lName' lField);  }  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,ParseHeader,The following statement contains a magic number: if ((lPosition + 2) < lLine.Length)  	lValue = lLine.Substring (lPosition + 2);  else  	lValue = String.Empty;  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,ParseHeader,The following statement contains a magic number: if ((lPosition + 2) < lLine.Length)  	lValue = lLine.Substring (lPosition + 2);  else  	lValue = String.Empty;  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,ParseHeader,The following statement contains a magic number: lValue = lLine.Substring (lPosition + 2);  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,DecodeMessage,The following statement contains a magic number: if (lMessage.StartsWith (CRLF)) {  	lBody = lMessage.Substring (2);  }  else {  	Int32 lHeaderEnd = lMessage.IndexOf (CRLF + CRLF' StringComparison.Ordinal);  	if (lHeaderEnd < 0) {  		throw (new Exception ("Invalid email message"));  	}  	ParseHeader (destination' lMessage.Substring (0' lHeaderEnd));  	lBody = lMessage.Substring (lHeaderEnd + 4);  }  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,DecodeMessage,The following statement contains a magic number: if (lMessage.StartsWith (CRLF)) {  	lBody = lMessage.Substring (2);  }  else {  	Int32 lHeaderEnd = lMessage.IndexOf (CRLF + CRLF' StringComparison.Ordinal);  	if (lHeaderEnd < 0) {  		throw (new Exception ("Invalid email message"));  	}  	ParseHeader (destination' lMessage.Substring (0' lHeaderEnd));  	lBody = lMessage.Substring (lHeaderEnd + 4);  }  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,DecodeMessage,The following statement contains a magic number: lBody = lMessage.Substring (2);  
Magic Number,RemObjects.InternetPack.Messages,DefaultEncoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Message.cs,DecodeMessage,The following statement contains a magic number: lBody = lMessage.Substring (lHeaderEnd + 4);  
Magic Number,RemObjects.InternetPack.Messages,HeaderField,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\MessageHeaderField.cs,Parse,The following statement contains a magic number: while (lRemainder.Length > 0) {  	String lPropertyValue;  	if (lRemainder.IndexOf ('=') >= 0) {  		Int32 lSemicolonPosition;  		if (lRemainder [0] == '"') {  			lRemainder = lRemainder.Substring (1);  			lSemicolonPosition = lRemainder.IndexOf ("\";"' StringComparison.Ordinal);  			if (lSemicolonPosition >= 0) {  				lPropertyValue = lRemainder.Substring (0' lSemicolonPosition - 1);  				lRemainder = lRemainder.Substring (lSemicolonPosition + 1);  			}  			else {  				lPropertyValue = lRemainder.Substring (0' lRemainder.Length - 1);  				lRemainder = "";  			}  		}  		else {  			lSemicolonPosition = lRemainder.IndexOf (';');  			if (lSemicolonPosition >= 0) {  				lPropertyValue = lRemainder.Substring (0' lSemicolonPosition);  				lRemainder = lRemainder.Substring (lSemicolonPosition + 1);  			}  			else {  				lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  				lRemainder = "";  			}  		}  	}  	else {  		lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  		lRemainder = "";  	}  	lPropertyValue = lPropertyValue.Trim ();  	if (String.IsNullOrEmpty (lProperty))  		this.fUnnamedValue = lPropertyValue;  	else {  		if (this.ContainsKey (lProperty))  			this [lProperty] = this [lProperty] + lPropertyValue;  		else  			this.Add (lProperty' lPropertyValue);  	}  	lRemainder = lRemainder.Trim ();  	Int32 lEqualsPosition = lRemainder.IndexOf ('=');  	if (lEqualsPosition >= 0) {  		lProperty = lRemainder.Substring (0' lEqualsPosition);  		lRemainder = lRemainder.Substring (lEqualsPosition + 1);  	}  }  
Magic Number,RemObjects.InternetPack.Messages,HeaderField,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\MessageHeaderField.cs,Parse,The following statement contains a magic number: while (lRemainder.Length > 0) {  	String lPropertyValue;  	if (lRemainder.IndexOf ('=') >= 0) {  		Int32 lSemicolonPosition;  		if (lRemainder [0] == '"') {  			lRemainder = lRemainder.Substring (1);  			lSemicolonPosition = lRemainder.IndexOf ("\";"' StringComparison.Ordinal);  			if (lSemicolonPosition >= 0) {  				lPropertyValue = lRemainder.Substring (0' lSemicolonPosition - 1);  				lRemainder = lRemainder.Substring (lSemicolonPosition + 1);  			}  			else {  				lPropertyValue = lRemainder.Substring (0' lRemainder.Length - 1);  				lRemainder = "";  			}  		}  		else {  			lSemicolonPosition = lRemainder.IndexOf (';');  			if (lSemicolonPosition >= 0) {  				lPropertyValue = lRemainder.Substring (0' lSemicolonPosition);  				lRemainder = lRemainder.Substring (lSemicolonPosition + 1);  			}  			else {  				lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  				lRemainder = "";  			}  		}  	}  	else {  		lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  		lRemainder = "";  	}  	lPropertyValue = lPropertyValue.Trim ();  	if (String.IsNullOrEmpty (lProperty))  		this.fUnnamedValue = lPropertyValue;  	else {  		if (this.ContainsKey (lProperty))  			this [lProperty] = this [lProperty] + lPropertyValue;  		else  			this.Add (lProperty' lPropertyValue);  	}  	lRemainder = lRemainder.Trim ();  	Int32 lEqualsPosition = lRemainder.IndexOf ('=');  	if (lEqualsPosition >= 0) {  		lProperty = lRemainder.Substring (0' lEqualsPosition);  		lRemainder = lRemainder.Substring (lEqualsPosition + 1);  	}  }  
Magic Number,RemObjects.InternetPack.Messages,HeaderField,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\MessageHeaderField.cs,Parse,The following statement contains a magic number: if (lRemainder.IndexOf ('=') >= 0) {  	Int32 lSemicolonPosition;  	if (lRemainder [0] == '"') {  		lRemainder = lRemainder.Substring (1);  		lSemicolonPosition = lRemainder.IndexOf ("\";"' StringComparison.Ordinal);  		if (lSemicolonPosition >= 0) {  			lPropertyValue = lRemainder.Substring (0' lSemicolonPosition - 1);  			lRemainder = lRemainder.Substring (lSemicolonPosition + 1);  		}  		else {  			lPropertyValue = lRemainder.Substring (0' lRemainder.Length - 1);  			lRemainder = "";  		}  	}  	else {  		lSemicolonPosition = lRemainder.IndexOf (';');  		if (lSemicolonPosition >= 0) {  			lPropertyValue = lRemainder.Substring (0' lSemicolonPosition);  			lRemainder = lRemainder.Substring (lSemicolonPosition + 1);  		}  		else {  			lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  			lRemainder = "";  		}  	}  }  else {  	lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  	lRemainder = "";  }  
Magic Number,RemObjects.InternetPack.Messages,HeaderField,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\MessageHeaderField.cs,Parse,The following statement contains a magic number: if (lRemainder.IndexOf ('=') >= 0) {  	Int32 lSemicolonPosition;  	if (lRemainder [0] == '"') {  		lRemainder = lRemainder.Substring (1);  		lSemicolonPosition = lRemainder.IndexOf ("\";"' StringComparison.Ordinal);  		if (lSemicolonPosition >= 0) {  			lPropertyValue = lRemainder.Substring (0' lSemicolonPosition - 1);  			lRemainder = lRemainder.Substring (lSemicolonPosition + 1);  		}  		else {  			lPropertyValue = lRemainder.Substring (0' lRemainder.Length - 1);  			lRemainder = "";  		}  	}  	else {  		lSemicolonPosition = lRemainder.IndexOf (';');  		if (lSemicolonPosition >= 0) {  			lPropertyValue = lRemainder.Substring (0' lSemicolonPosition);  			lRemainder = lRemainder.Substring (lSemicolonPosition + 1);  		}  		else {  			lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  			lRemainder = "";  		}  	}  }  else {  	lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  	lRemainder = "";  }  
Magic Number,RemObjects.InternetPack.Messages,HeaderField,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\MessageHeaderField.cs,Parse,The following statement contains a magic number: if (lRemainder [0] == '"') {  	lRemainder = lRemainder.Substring (1);  	lSemicolonPosition = lRemainder.IndexOf ("\";"' StringComparison.Ordinal);  	if (lSemicolonPosition >= 0) {  		lPropertyValue = lRemainder.Substring (0' lSemicolonPosition - 1);  		lRemainder = lRemainder.Substring (lSemicolonPosition + 1);  	}  	else {  		lPropertyValue = lRemainder.Substring (0' lRemainder.Length - 1);  		lRemainder = "";  	}  }  else {  	lSemicolonPosition = lRemainder.IndexOf (';');  	if (lSemicolonPosition >= 0) {  		lPropertyValue = lRemainder.Substring (0' lSemicolonPosition);  		lRemainder = lRemainder.Substring (lSemicolonPosition + 1);  	}  	else {  		lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  		lRemainder = "";  	}  }  
Magic Number,RemObjects.InternetPack.Messages,HeaderField,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\MessageHeaderField.cs,Parse,The following statement contains a magic number: if (lSemicolonPosition >= 0) {  	lPropertyValue = lRemainder.Substring (0' lSemicolonPosition);  	lRemainder = lRemainder.Substring (lSemicolonPosition + 1);  }  else {  	lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  	lRemainder = "";  }  
Magic Number,RemObjects.InternetPack.Messages,HeaderField,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\MessageHeaderField.cs,Parse,The following statement contains a magic number: lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  
Magic Number,RemObjects.InternetPack.Messages,HeaderField,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\MessageHeaderField.cs,Parse,The following statement contains a magic number: lPropertyValue = (lRemainder [0] == '"') && (lRemainder [lRemainder.Length - 1] == '"') ? lRemainder.Substring (1' lRemainder.Length - 2) : lRemainder;  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: using (MemoryStream byteArrayBuilder = new MemoryStream ()) {  	// Remove illegal control characters  	toDecode = RemoveIllegalControlCharacters (toDecode);  	// Run through the whole String that needs to be decoded  	for (Int32 i = 0; i < toDecode.Length; i++) {  		char currentChar = toDecode [i];  		if (currentChar == '=') {  			// Check that there is at least two characters behind the equal sign  			if (toDecode.Length - i < 3) {  				// We are at the end of the toDecode String' but something is missing. Handle it the way RFC 2045 states  				WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSignNotLongEnough (toDecode.Substring (i)));  				// Since it was the last part' we should stop parsing anymore  				break;  			}  			// Decode the Quoted-Printable part  			String quotedPrintablePart = toDecode.Substring (i' 3);  			WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSign (quotedPrintablePart));  			// We now consumed two extra characters. Go forward two extra characters  			i += 2;  		}  		else {  			// This character is not quoted printable hex encoded.  			// Could it be the _ character' which represents space  			// and are we using the encoded word variant of QuotedPrintable  			if (currentChar == '_' && encodedWordVariant) {  				// The RFC specifies that the "_" always represents hexadecimal 20 even if the  				// SPACE character occupies a different code position in the character set in use.  				byteArrayBuilder.WriteByte (0x20);  			}  			else {  				// This is not encoded at all. This is a literal which should just be included into the output.  				byteArrayBuilder.WriteByte ((Byte)currentChar);  			}  		}  	}  	return byteArrayBuilder.ToArray ();  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: using (MemoryStream byteArrayBuilder = new MemoryStream ()) {  	// Remove illegal control characters  	toDecode = RemoveIllegalControlCharacters (toDecode);  	// Run through the whole String that needs to be decoded  	for (Int32 i = 0; i < toDecode.Length; i++) {  		char currentChar = toDecode [i];  		if (currentChar == '=') {  			// Check that there is at least two characters behind the equal sign  			if (toDecode.Length - i < 3) {  				// We are at the end of the toDecode String' but something is missing. Handle it the way RFC 2045 states  				WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSignNotLongEnough (toDecode.Substring (i)));  				// Since it was the last part' we should stop parsing anymore  				break;  			}  			// Decode the Quoted-Printable part  			String quotedPrintablePart = toDecode.Substring (i' 3);  			WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSign (quotedPrintablePart));  			// We now consumed two extra characters. Go forward two extra characters  			i += 2;  		}  		else {  			// This character is not quoted printable hex encoded.  			// Could it be the _ character' which represents space  			// and are we using the encoded word variant of QuotedPrintable  			if (currentChar == '_' && encodedWordVariant) {  				// The RFC specifies that the "_" always represents hexadecimal 20 even if the  				// SPACE character occupies a different code position in the character set in use.  				byteArrayBuilder.WriteByte (0x20);  			}  			else {  				// This is not encoded at all. This is a literal which should just be included into the output.  				byteArrayBuilder.WriteByte ((Byte)currentChar);  			}  		}  	}  	return byteArrayBuilder.ToArray ();  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: using (MemoryStream byteArrayBuilder = new MemoryStream ()) {  	// Remove illegal control characters  	toDecode = RemoveIllegalControlCharacters (toDecode);  	// Run through the whole String that needs to be decoded  	for (Int32 i = 0; i < toDecode.Length; i++) {  		char currentChar = toDecode [i];  		if (currentChar == '=') {  			// Check that there is at least two characters behind the equal sign  			if (toDecode.Length - i < 3) {  				// We are at the end of the toDecode String' but something is missing. Handle it the way RFC 2045 states  				WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSignNotLongEnough (toDecode.Substring (i)));  				// Since it was the last part' we should stop parsing anymore  				break;  			}  			// Decode the Quoted-Printable part  			String quotedPrintablePart = toDecode.Substring (i' 3);  			WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSign (quotedPrintablePart));  			// We now consumed two extra characters. Go forward two extra characters  			i += 2;  		}  		else {  			// This character is not quoted printable hex encoded.  			// Could it be the _ character' which represents space  			// and are we using the encoded word variant of QuotedPrintable  			if (currentChar == '_' && encodedWordVariant) {  				// The RFC specifies that the "_" always represents hexadecimal 20 even if the  				// SPACE character occupies a different code position in the character set in use.  				byteArrayBuilder.WriteByte (0x20);  			}  			else {  				// This is not encoded at all. This is a literal which should just be included into the output.  				byteArrayBuilder.WriteByte ((Byte)currentChar);  			}  		}  	}  	return byteArrayBuilder.ToArray ();  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: for (Int32 i = 0; i < toDecode.Length; i++) {  	char currentChar = toDecode [i];  	if (currentChar == '=') {  		// Check that there is at least two characters behind the equal sign  		if (toDecode.Length - i < 3) {  			// We are at the end of the toDecode String' but something is missing. Handle it the way RFC 2045 states  			WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSignNotLongEnough (toDecode.Substring (i)));  			// Since it was the last part' we should stop parsing anymore  			break;  		}  		// Decode the Quoted-Printable part  		String quotedPrintablePart = toDecode.Substring (i' 3);  		WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSign (quotedPrintablePart));  		// We now consumed two extra characters. Go forward two extra characters  		i += 2;  	}  	else {  		// This character is not quoted printable hex encoded.  		// Could it be the _ character' which represents space  		// and are we using the encoded word variant of QuotedPrintable  		if (currentChar == '_' && encodedWordVariant) {  			// The RFC specifies that the "_" always represents hexadecimal 20 even if the  			// SPACE character occupies a different code position in the character set in use.  			byteArrayBuilder.WriteByte (0x20);  		}  		else {  			// This is not encoded at all. This is a literal which should just be included into the output.  			byteArrayBuilder.WriteByte ((Byte)currentChar);  		}  	}  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: for (Int32 i = 0; i < toDecode.Length; i++) {  	char currentChar = toDecode [i];  	if (currentChar == '=') {  		// Check that there is at least two characters behind the equal sign  		if (toDecode.Length - i < 3) {  			// We are at the end of the toDecode String' but something is missing. Handle it the way RFC 2045 states  			WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSignNotLongEnough (toDecode.Substring (i)));  			// Since it was the last part' we should stop parsing anymore  			break;  		}  		// Decode the Quoted-Printable part  		String quotedPrintablePart = toDecode.Substring (i' 3);  		WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSign (quotedPrintablePart));  		// We now consumed two extra characters. Go forward two extra characters  		i += 2;  	}  	else {  		// This character is not quoted printable hex encoded.  		// Could it be the _ character' which represents space  		// and are we using the encoded word variant of QuotedPrintable  		if (currentChar == '_' && encodedWordVariant) {  			// The RFC specifies that the "_" always represents hexadecimal 20 even if the  			// SPACE character occupies a different code position in the character set in use.  			byteArrayBuilder.WriteByte (0x20);  		}  		else {  			// This is not encoded at all. This is a literal which should just be included into the output.  			byteArrayBuilder.WriteByte ((Byte)currentChar);  		}  	}  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: for (Int32 i = 0; i < toDecode.Length; i++) {  	char currentChar = toDecode [i];  	if (currentChar == '=') {  		// Check that there is at least two characters behind the equal sign  		if (toDecode.Length - i < 3) {  			// We are at the end of the toDecode String' but something is missing. Handle it the way RFC 2045 states  			WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSignNotLongEnough (toDecode.Substring (i)));  			// Since it was the last part' we should stop parsing anymore  			break;  		}  		// Decode the Quoted-Printable part  		String quotedPrintablePart = toDecode.Substring (i' 3);  		WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSign (quotedPrintablePart));  		// We now consumed two extra characters. Go forward two extra characters  		i += 2;  	}  	else {  		// This character is not quoted printable hex encoded.  		// Could it be the _ character' which represents space  		// and are we using the encoded word variant of QuotedPrintable  		if (currentChar == '_' && encodedWordVariant) {  			// The RFC specifies that the "_" always represents hexadecimal 20 even if the  			// SPACE character occupies a different code position in the character set in use.  			byteArrayBuilder.WriteByte (0x20);  		}  		else {  			// This is not encoded at all. This is a literal which should just be included into the output.  			byteArrayBuilder.WriteByte ((Byte)currentChar);  		}  	}  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: if (currentChar == '=') {  	// Check that there is at least two characters behind the equal sign  	if (toDecode.Length - i < 3) {  		// We are at the end of the toDecode String' but something is missing. Handle it the way RFC 2045 states  		WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSignNotLongEnough (toDecode.Substring (i)));  		// Since it was the last part' we should stop parsing anymore  		break;  	}  	// Decode the Quoted-Printable part  	String quotedPrintablePart = toDecode.Substring (i' 3);  	WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSign (quotedPrintablePart));  	// We now consumed two extra characters. Go forward two extra characters  	i += 2;  }  else {  	// This character is not quoted printable hex encoded.  	// Could it be the _ character' which represents space  	// and are we using the encoded word variant of QuotedPrintable  	if (currentChar == '_' && encodedWordVariant) {  		// The RFC specifies that the "_" always represents hexadecimal 20 even if the  		// SPACE character occupies a different code position in the character set in use.  		byteArrayBuilder.WriteByte (0x20);  	}  	else {  		// This is not encoded at all. This is a literal which should just be included into the output.  		byteArrayBuilder.WriteByte ((Byte)currentChar);  	}  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: if (currentChar == '=') {  	// Check that there is at least two characters behind the equal sign  	if (toDecode.Length - i < 3) {  		// We are at the end of the toDecode String' but something is missing. Handle it the way RFC 2045 states  		WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSignNotLongEnough (toDecode.Substring (i)));  		// Since it was the last part' we should stop parsing anymore  		break;  	}  	// Decode the Quoted-Printable part  	String quotedPrintablePart = toDecode.Substring (i' 3);  	WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSign (quotedPrintablePart));  	// We now consumed two extra characters. Go forward two extra characters  	i += 2;  }  else {  	// This character is not quoted printable hex encoded.  	// Could it be the _ character' which represents space  	// and are we using the encoded word variant of QuotedPrintable  	if (currentChar == '_' && encodedWordVariant) {  		// The RFC specifies that the "_" always represents hexadecimal 20 even if the  		// SPACE character occupies a different code position in the character set in use.  		byteArrayBuilder.WriteByte (0x20);  	}  	else {  		// This is not encoded at all. This is a literal which should just be included into the output.  		byteArrayBuilder.WriteByte ((Byte)currentChar);  	}  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: if (currentChar == '=') {  	// Check that there is at least two characters behind the equal sign  	if (toDecode.Length - i < 3) {  		// We are at the end of the toDecode String' but something is missing. Handle it the way RFC 2045 states  		WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSignNotLongEnough (toDecode.Substring (i)));  		// Since it was the last part' we should stop parsing anymore  		break;  	}  	// Decode the Quoted-Printable part  	String quotedPrintablePart = toDecode.Substring (i' 3);  	WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSign (quotedPrintablePart));  	// We now consumed two extra characters. Go forward two extra characters  	i += 2;  }  else {  	// This character is not quoted printable hex encoded.  	// Could it be the _ character' which represents space  	// and are we using the encoded word variant of QuotedPrintable  	if (currentChar == '_' && encodedWordVariant) {  		// The RFC specifies that the "_" always represents hexadecimal 20 even if the  		// SPACE character occupies a different code position in the character set in use.  		byteArrayBuilder.WriteByte (0x20);  	}  	else {  		// This is not encoded at all. This is a literal which should just be included into the output.  		byteArrayBuilder.WriteByte ((Byte)currentChar);  	}  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: if (toDecode.Length - i < 3) {  	// We are at the end of the toDecode String' but something is missing. Handle it the way RFC 2045 states  	WriteAllBytesToStream (byteArrayBuilder' DecodeEqualSignNotLongEnough (toDecode.Substring (i)));  	// Since it was the last part' we should stop parsing anymore  	break;  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,Rfc2047QuotedPrintableDecode,The following statement contains a magic number: i += 2;  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,DecodeEqualSignNotLongEnough,The following statement contains a magic number: if (decode.Length >= 3)  	throw new ArgumentException ("decode must have length lower than 3"' "decode");  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,DecodeEqualSign,The following statement contains a magic number: if (decode.Length != 3)  	throw new ArgumentException ("decode must have length 3"' "decode");  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,QuotedPrintable,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\QuotedPrintable.cs,DecodeEqualSign,The following statement contains a magic number: try {  	// The number part of the String is the last two digits. Here we simply remove the equal sign  	String numberString = decode.Substring (1);  	// Now we create a Byte array with the converted number encoded in the String as a hex value (base 16)  	// This will also handle illegal encodings like =3d where the hex digits are not uppercase'  	// which is a robustness requirement from RFC 2045.  	Byte[] oneByte = new Byte[] {  		Convert.ToByte (numberString' 16)  	};  	// Simply return our one Byte Byte array  	return oneByte;  }  catch (FormatException) {  	// RFC 2045 says about robust implementation:  	// An "=" followed by a character that is neither a  	// hexadecimal digit (including "abcdef") nor the CR  	// character of a CRLF pair is illegal.  This case can be  	// the result of US-ASCII text having been included in a  	// quoted-printable part of a message without itself  	// having been subjected to quoted-printable encoding.  A  	// reasonable approach by a robust implementation might be  	// to include the "=" character and the following  	// character in the decoded data without any  	// transformation and' if possible' indicate to the user  	// that proper decoding was not possible at this point in  	// the data.  	// So we choose to believe this is actually an un-encoded String  	// Therefore it must be in US-ASCII and we will return the bytes it corrosponds to  	return Encoding.ASCII.GetBytes (decode);  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,Rfc2231Decoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\Rfc2231Decoder.cs,Decode,The following statement contains a magic number: foreach (String part in splitted) {  	// Empty strings should not be processed  	if (part.Length == 0)  		continue;  	String[] keyValue = part.Split (new char[] {  		'='  	}' 2);  	if (keyValue.Length == 1) {  		collection.Add (new KeyValuePair<String' String> (""' keyValue [0]));  	}  	else if (keyValue.Length == 2) {  		collection.Add (new KeyValuePair<String' String> (keyValue [0]' keyValue [1]));  	}  	else {  		throw new ArgumentException ("When splitting the part \"" + part + "\" by = there was " + keyValue.Length + " parts. Only 1 and 2 are supported");  	}  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,Rfc2231Decoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\Rfc2231Decoder.cs,Decode,The following statement contains a magic number: foreach (String part in splitted) {  	// Empty strings should not be processed  	if (part.Length == 0)  		continue;  	String[] keyValue = part.Split (new char[] {  		'='  	}' 2);  	if (keyValue.Length == 1) {  		collection.Add (new KeyValuePair<String' String> (""' keyValue [0]));  	}  	else if (keyValue.Length == 2) {  		collection.Add (new KeyValuePair<String' String> (keyValue [0]' keyValue [1]));  	}  	else {  		throw new ArgumentException ("When splitting the part \"" + part + "\" by = there was " + keyValue.Length + " parts. Only 1 and 2 are supported");  	}  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,Rfc2231Decoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\Rfc2231Decoder.cs,Decode,The following statement contains a magic number: if (keyValue.Length == 1) {  	collection.Add (new KeyValuePair<String' String> (""' keyValue [0]));  }  else if (keyValue.Length == 2) {  	collection.Add (new KeyValuePair<String' String> (keyValue [0]' keyValue [1]));  }  else {  	throw new ArgumentException ("When splitting the part \"" + part + "\" by = there was " + keyValue.Length + " parts. Only 1 and 2 are supported");  }  
Magic Number,RemObjects.InternetPack.Messages.Mime.Decode,Rfc2231Decoder,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Mime\Decode\Rfc2231Decoder.cs,Decode,The following statement contains a magic number: if (keyValue.Length == 2) {  	collection.Add (new KeyValuePair<String' String> (keyValue [0]' keyValue [1]));  }  else {  	throw new ArgumentException ("When splitting the part \"" + part + "\" by = there was " + keyValue.Length + " parts. Only 1 and 2 are supported");  }  
Magic Number,RemObjects.InternetPack.Email,Pop3Client,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Pop3Client.cs,Pop3Client,The following statement contains a magic number: this.Port = 110;  
Magic Number,RemObjects.InternetPack.Email,Pop3Client,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\Pop3Client.cs,Pop3Client,The following statement contains a magic number: this.fMessages = new List<MailStatus> (32);  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,SmtpClient,The following statement contains a magic number: this.Port = 25;  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The following statement contains a magic number: if (!this.WaitForResponse (220)) {  	this.Close ();  	throw new Exception (String.Format ("Invalid connection reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  }  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The following statement contains a magic number: if (this.UseAuth) {  	if (!this.SendAndWaitForResponse ("EHLO " + this.HeloDomain' 250))  		throw new Exception (String.Format ("Invalid ehlo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	if (!this.SendAndWaitForResponse ("AUTH LOGIN"' 334))  		throw new Exception (String.Format ("Invalid AUTH reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	Byte[] lBytes = System.Text.Encoding.ASCII.GetBytes (this.AuthUser);  	String lEncodedString = System.Convert.ToBase64String (lBytes' 0' lBytes.Length);  	if (!SendAndWaitForResponse (lEncodedString' 334))  		throw new Exception (String.Format ("Invalid AUTH username reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	lBytes = System.Text.Encoding.ASCII.GetBytes (this.AuthPassword);  	lEncodedString = System.Convert.ToBase64String (lBytes' 0' lBytes.Length);  	if (!this.SendAndWaitForResponse (lEncodedString' 235))  		throw new Exception (String.Format ("Invalid AUTH password reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  }  else {  	// HELO moved to "Open" as it must only be sent once during session  	if (!this.SendAndWaitForResponse ("HELO " + this.HeloDomain' 250))  		throw new Exception (String.Format ("Invalid helo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  }  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The following statement contains a magic number: if (this.UseAuth) {  	if (!this.SendAndWaitForResponse ("EHLO " + this.HeloDomain' 250))  		throw new Exception (String.Format ("Invalid ehlo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	if (!this.SendAndWaitForResponse ("AUTH LOGIN"' 334))  		throw new Exception (String.Format ("Invalid AUTH reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	Byte[] lBytes = System.Text.Encoding.ASCII.GetBytes (this.AuthUser);  	String lEncodedString = System.Convert.ToBase64String (lBytes' 0' lBytes.Length);  	if (!SendAndWaitForResponse (lEncodedString' 334))  		throw new Exception (String.Format ("Invalid AUTH username reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	lBytes = System.Text.Encoding.ASCII.GetBytes (this.AuthPassword);  	lEncodedString = System.Convert.ToBase64String (lBytes' 0' lBytes.Length);  	if (!this.SendAndWaitForResponse (lEncodedString' 235))  		throw new Exception (String.Format ("Invalid AUTH password reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  }  else {  	// HELO moved to "Open" as it must only be sent once during session  	if (!this.SendAndWaitForResponse ("HELO " + this.HeloDomain' 250))  		throw new Exception (String.Format ("Invalid helo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  }  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The following statement contains a magic number: if (this.UseAuth) {  	if (!this.SendAndWaitForResponse ("EHLO " + this.HeloDomain' 250))  		throw new Exception (String.Format ("Invalid ehlo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	if (!this.SendAndWaitForResponse ("AUTH LOGIN"' 334))  		throw new Exception (String.Format ("Invalid AUTH reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	Byte[] lBytes = System.Text.Encoding.ASCII.GetBytes (this.AuthUser);  	String lEncodedString = System.Convert.ToBase64String (lBytes' 0' lBytes.Length);  	if (!SendAndWaitForResponse (lEncodedString' 334))  		throw new Exception (String.Format ("Invalid AUTH username reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	lBytes = System.Text.Encoding.ASCII.GetBytes (this.AuthPassword);  	lEncodedString = System.Convert.ToBase64String (lBytes' 0' lBytes.Length);  	if (!this.SendAndWaitForResponse (lEncodedString' 235))  		throw new Exception (String.Format ("Invalid AUTH password reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  }  else {  	// HELO moved to "Open" as it must only be sent once during session  	if (!this.SendAndWaitForResponse ("HELO " + this.HeloDomain' 250))  		throw new Exception (String.Format ("Invalid helo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  }  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The following statement contains a magic number: if (this.UseAuth) {  	if (!this.SendAndWaitForResponse ("EHLO " + this.HeloDomain' 250))  		throw new Exception (String.Format ("Invalid ehlo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	if (!this.SendAndWaitForResponse ("AUTH LOGIN"' 334))  		throw new Exception (String.Format ("Invalid AUTH reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	Byte[] lBytes = System.Text.Encoding.ASCII.GetBytes (this.AuthUser);  	String lEncodedString = System.Convert.ToBase64String (lBytes' 0' lBytes.Length);  	if (!SendAndWaitForResponse (lEncodedString' 334))  		throw new Exception (String.Format ("Invalid AUTH username reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	lBytes = System.Text.Encoding.ASCII.GetBytes (this.AuthPassword);  	lEncodedString = System.Convert.ToBase64String (lBytes' 0' lBytes.Length);  	if (!this.SendAndWaitForResponse (lEncodedString' 235))  		throw new Exception (String.Format ("Invalid AUTH password reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  }  else {  	// HELO moved to "Open" as it must only be sent once during session  	if (!this.SendAndWaitForResponse ("HELO " + this.HeloDomain' 250))  		throw new Exception (String.Format ("Invalid helo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  }  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The following statement contains a magic number: if (this.UseAuth) {  	if (!this.SendAndWaitForResponse ("EHLO " + this.HeloDomain' 250))  		throw new Exception (String.Format ("Invalid ehlo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	if (!this.SendAndWaitForResponse ("AUTH LOGIN"' 334))  		throw new Exception (String.Format ("Invalid AUTH reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	Byte[] lBytes = System.Text.Encoding.ASCII.GetBytes (this.AuthUser);  	String lEncodedString = System.Convert.ToBase64String (lBytes' 0' lBytes.Length);  	if (!SendAndWaitForResponse (lEncodedString' 334))  		throw new Exception (String.Format ("Invalid AUTH username reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  	lBytes = System.Text.Encoding.ASCII.GetBytes (this.AuthPassword);  	lEncodedString = System.Convert.ToBase64String (lBytes' 0' lBytes.Length);  	if (!this.SendAndWaitForResponse (lEncodedString' 235))  		throw new Exception (String.Format ("Invalid AUTH password reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  }  else {  	// HELO moved to "Open" as it must only be sent once during session  	if (!this.SendAndWaitForResponse ("HELO " + this.HeloDomain' 250))  		throw new Exception (String.Format ("Invalid helo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  }  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("EHLO " + this.HeloDomain' 250))  	throw new Exception (String.Format ("Invalid ehlo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("AUTH LOGIN"' 334))  	throw new Exception (String.Format ("Invalid AUTH reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The following statement contains a magic number: if (!SendAndWaitForResponse (lEncodedString' 334))  	throw new Exception (String.Format ("Invalid AUTH username reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The following statement contains a magic number: if (!this.SendAndWaitForResponse (lEncodedString' 235))  	throw new Exception (String.Format ("Invalid AUTH password reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Open,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("HELO " + this.HeloDomain' 250))  	throw new Exception (String.Format ("Invalid helo reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Close,The following statement contains a magic number: if (this.Connected)  	this.SendAndWaitForResponse ("QUIT"' 221);  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,Close,The following statement contains a magic number: this.SendAndWaitForResponse ("QUIT"' 221);  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,SendMessage,The following statement contains a magic number: if (!this.SendAndWaitForResponse (String.Format ("MAIL FROM: <{0}>"' origin)' 250))  	throw new Exception (String.Format ("Invalid mail from reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,SendMessage,The following statement contains a magic number: for (Int32 i = 0; i < destination.Length; i++)  	if (!this.SendAndWaitForResponse (String.Format ("RCPT TO: <{0}>"' destination [i])' 250))  		throw new Exception (String.Format ("Invalid rcpt to reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,SendMessage,The following statement contains a magic number: if (!this.SendAndWaitForResponse (String.Format ("RCPT TO: <{0}>"' destination [i])' 250))  	throw new Exception (String.Format ("Invalid rcpt to reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,SendMessage,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("DATA"' 354))  	throw new Exception (String.Format ("Invalid data reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  
Magic Number,RemObjects.InternetPack.Email,SmtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\SmtpClient.cs,SendMessage,The following statement contains a magic number: if (!this.SendAndWaitForResponse ("."' 250))  	throw new Exception (String.Format ("Invalid data reply: {0} {1}"' this.LastResponseNo' this.LastResponseText));  
Missing Default,RemObjects.InternetPack.Ldap,LdapClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\LdapClient.cs,Search,The following switch statement is missing a default case: switch (value.Type) {  case BerType.BitString:  	att.Binary = true;  	att.Add (((BerBinary)value).Value);  	break;  case BerType.Boolean:  	att.Binary = false;  	att.Add (((BerBoolean)value).Value.ToString ());  	break;  case BerType.Enumerated:  case BerType.Integer:  	att.Binary = false;  	att.Add (((BerInteger)value).Value.ToString ());  	break;  case BerType.IpAddress:  	att.Binary = false;  	att.Add (((BerIpAddress)value).Value.ToString ());  	break;  case BerType.Other:  	att.Binary = true;  	att.Add (((BerOther)value).Value);  	break;  case BerType.String:  	att.Binary = false;  	att.Add (((BerString)value).Value);  	break;  case BerType.UInteger:  	att.Binary = false;  	att.Add (((BerUInteger)value).Value.ToString ());  	break;  }  
Missing Default,RemObjects.InternetPack.Http,HttpOutgoingRequestResponse,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,FinalizeHeader,The following switch statement is missing a default case: switch (ContentSource) {  case ContentSource.ContentString:  case ContentSource.ContentBytes:  	if (ContentBytes != null)  		Header.SetHeaderValue ("Content-Length"' ContentBytes.Length.ToString ());  	else  		Header.SetHeaderValue ("Content-Length"' 0.ToString ());  	break;  case ContentSource.ContentStream:  	if (ContentStream != null)  		Header.SetHeaderValue ("Content-Length"' (ContentStream.Length - ContentStream.Position).ToString ());  	else  		Header.SetHeaderValue ("Content-Length"' 0.ToString ());  	break;  case ContentSource.ContentNone:  	Header.SetHeaderValue ("Content-Length"' 0.ToString ());  	break;  }  
Missing Default,RemObjects.InternetPack.Http,HttpOutgoingRequestResponse,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\HttpRequestResponse.cs,WriteBodyToConnection,The following switch statement is missing a default case: switch (ContentSource) {  case ContentSource.ContentBytes:  	TriggerOnTransferStart (TransferDirection.Send' ContentBytes.Length);  	connection.Send (ContentBytes);  	TriggerOnTransferEnd (TransferDirection.Send);  	break;  case ContentSource.ContentStream:  	TriggerOnTransferStart (TransferDirection.Send' ContentStream.Length);  	Byte[] lBuffer = new Byte[BUFFER_SIZE];  	Int32 lBytesRead;  	do {  		lBytesRead = ContentStream.Read (lBuffer' 0' BUFFER_SIZE);  		if (lBytesRead != 0)  			connection.Send (lBuffer' 0' lBytesRead);  	}  	while (lBytesRead > 0);  	if (CloseStream)  		ContentStream.Close ();  	TriggerOnTransferEnd (TransferDirection.Send);  	break;  case ContentSource.ContentNone:  	// No action needed  	break;  }  
Missing Default,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following switch statement is missing a default case: switch (this.LastResponseNo) {  case 331:  	if (!this.SendAndWaitForResponse ("PASS " + this.Password' 230' 332))  		throw new CmdResponseException ("Login unsuccessful"' this.LastResponseNo' this.LastResponseText);  	switch (this.LastResponseNo) {  	case 232:  		SendAccount ();  		break;  	case 230:  		break;  	}  	break;  case 230:  	break;  }  
Missing Default,RemObjects.InternetPack.Ftp,FtpClient,C:\repos\remobjects_internetpack\Source\RemObjects.InternetPack\FtpClient.cs,Login,The following switch statement is missing a default case: switch (this.LastResponseNo) {  case 232:  	SendAccount ();  	break;  case 230:  	break;  }  
