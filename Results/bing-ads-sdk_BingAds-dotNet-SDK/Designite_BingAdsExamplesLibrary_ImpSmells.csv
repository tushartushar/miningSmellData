Implementation smell,Namespace,Class,File,Method,Description
Long Method,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The method has 273 lines of code.
Long Method,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,GetSampleSitelink2AdExtensions,The method has 108 lines of code.
Long Method,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The method has 451 lines of code.
Long Method,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,GetSampleBulkSiteLinkAdExtensions,The method has 110 lines of code.
Long Method,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,GetSampleBulkSitelink2AdExtensions,The method has 122 lines of code.
Long Method,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The method has 523 lines of code.
Long Method,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The method has 180 lines of code.
Long Method,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The method has 143 lines of code.
Long Method,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The method has 159 lines of code.
Long Method,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The method has 380 lines of code.
Long Method,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The method has 238 lines of code.
Long Method,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The method has 261 lines of code.
Long Method,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The method has 527 lines of code.
Long Method,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The method has 268 lines of code.
Long Method,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The method has 127 lines of code.
Long Method,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The method has 331 lines of code.
Long Method,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The method has 290 lines of code.
Long Method,BingAdsExamplesLibrary.V9,InviteUser,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\InviteUser.cs,RunAsync,The method has 112 lines of code.
Long Method,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,RunAsync,The method has 139 lines of code.
Complex Method,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,Cyclomatic complexity of the method is 14
Complex Method,BingAdsExamplesLibrary.V10,BudgetOpportunities,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BudgetOpportunities.cs,RunAsync,Cyclomatic complexity of the method is 9
Complex Method,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,Cyclomatic complexity of the method is 38
Complex Method,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkAdGroupLocationTargets,Cyclomatic complexity of the method is 13
Complex Method,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkAdGroupNegativeLocationTargets,Cyclomatic complexity of the method is 13
Complex Method,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignLocationTargets,Cyclomatic complexity of the method is 13
Complex Method,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignNegativeLocationTargets,Cyclomatic complexity of the method is 13
Complex Method,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkAdGroupAdExtensionAssociation,Cyclomatic complexity of the method is 9
Complex Method,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignAdExtensionAssociations,Cyclomatic complexity of the method is 11
Complex Method,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,Cyclomatic complexity of the method is 20
Complex Method,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,Cyclomatic complexity of the method is 12
Complex Method,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,Cyclomatic complexity of the method is 11
Complex Method,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,Cyclomatic complexity of the method is 13
Complex Method,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,Cyclomatic complexity of the method is 12
Complex Method,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,RunAsync,Cyclomatic complexity of the method is 8
Complex Method,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,Cyclomatic complexity of the method is 13
Complex Method,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,Cyclomatic complexity of the method is 10
Complex Method,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,Cyclomatic complexity of the method is 13
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputCampaign,Cyclomatic complexity of the method is 9
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdGroup,Cyclomatic complexity of the method is 8
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdsWithPartialErrors,Cyclomatic complexity of the method is 8
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdExtensionsWithEditorialReasons,Cyclomatic complexity of the method is 16
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputKeyword,Cyclomatic complexity of the method is 10
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputBiddingScheme,Cyclomatic complexity of the method is 8
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputTextAd,Cyclomatic complexity of the method is 10
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdGroupCriterionWithProductPartition,Cyclomatic complexity of the method is 10
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputTarget,Cyclomatic complexity of the method is 12
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputLocationTarget,Cyclomatic complexity of the method is 14
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAppAdExtension,Cyclomatic complexity of the method is 8
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputImageAdExtension,Cyclomatic complexity of the method is 10
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputSiteLinks,Cyclomatic complexity of the method is 10
Complex Method,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputSitelink2AdExtension,Cyclomatic complexity of the method is 10
Complex Method,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,Cyclomatic complexity of the method is 24
Complex Method,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,Cyclomatic complexity of the method is 20
Complex Method,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,Cyclomatic complexity of the method is 12
Complex Method,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,Cyclomatic complexity of the method is 8
Complex Method,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,Cyclomatic complexity of the method is 8
Complex Method,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,RunAsync,Cyclomatic complexity of the method is 38
Complex Method,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,PrintPartialErrors,Cyclomatic complexity of the method is 8
Long Parameter List,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The method has 10 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,SetAdExtensionsAssociationsAsync,The method has 5 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,DeleteAdExtensionsAssociationsAsync,The method has 5 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,GetAdExtensionsByIdsAsync,The method has 6 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,GetAdExtensionsEditorialReasons,The method has 5 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,BudgetOpportunities,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BudgetOpportunities.cs,RunAsync,The method has 7 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The method has 16 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The method has 8 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The method has 7 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The method has 7 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The method has 10 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The method has 7 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,RunAsync,The method has 7 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The method has 10 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The method has 7 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The method has 6 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The method has 7 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,GetCampaignsByIdsAsync,The method has 6 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,GetCampaignsByAccountIdAsync,The method has 5 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The method has 6 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,GetSharedEntityAssociationsByEntityIdsAsync,The method has 5 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,GetSharedEntityAssociationsBySharedEntityIdsAsync,The method has 5 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,GetNegativeKeywordsByEntityIdsAsync,The method has 5 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The method has 6 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The method has 6 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,GetAdGroupCriterionsByIdsAsync,The method has 5 parameters.
Long Parameter List,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The method has 6 parameters.
Long Parameter List,BingAdsExamplesLibrary.V9,CustomerSignup,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\CustomerSignup.cs,SignupCustomerAsync,The method has 5 parameters.
Long Parameter List,BingAdsExamplesLibrary.V9,InviteUser,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\InviteUser.cs,RunAsync,The method has 6 parameters.
Long Parameter List,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,SearchClientLinksAsync,The method has 5 parameters.
Long Parameter List,BingAdsExamplesLibrary.V9,SearchUserAccounts,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\SearchUserAccounts.cs,RunAsync,The method has 6 parameters.
Long Identifier,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the parameter adExtensionIdToEntityIdAssociations is 35.
Long Identifier,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the parameter adExtensionEditorialReasonCollection is 36.
Long Identifier,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the parameter bulkStructuredSnippetAdExtension is 32.
Long Identifier,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the parameter bulkCampaignCalloutAdExtension is 30.
Long Identifier,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the parameter bulkCampaignLocationAdExtension is 31.
Long Identifier,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the parameter bulkCampaignStructuredSnippetAdExtension is 40.
Long Identifier,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the parameter structuredSnippetAdExtensionResults is 35.
Long Identifier,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkAdGroupAdExtensionAssociation,The length of the parameter bulkAdGroupSiteLinkAdExtension is 30.
Long Identifier,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkAdGroupAdExtensionAssociation,The length of the parameter bulkAdGroupSitelink2AdExtension is 31.
Long Identifier,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkAdGroupAdExtensionAssociation,The length of the parameter bulkAdGroupStructuredSnippetAdExtension is 39.
Long Identifier,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignAdExtensionAssociations,The length of the parameter bulkCampaignCalloutAdExtension is 30.
Long Identifier,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignAdExtensionAssociations,The length of the parameter bulkCampaignLocationAdExtension is 31.
Long Identifier,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignAdExtensionAssociations,The length of the parameter bulkCampaignSiteLinkAdExtension is 31.
Long Identifier,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignAdExtensionAssociations,The length of the parameter bulkCampaignSitelink2AdExtension is 32.
Long Identifier,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignAdExtensionAssociations,The length of the parameter bulkCampaignStructuredSnippetAdExtension is 40.
Long Identifier,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the parameter bulkCampaignNegativeKeywordList is 31.
Long Identifier,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the parameter campaignNegativeKeywordResults is 30.
Long Identifier,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the parameter sharedNegativeKeywordListResults is 32.
Long Identifier,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the parameter campaignNegativeKeywordListResults is 34.
Long Identifier,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The length of the parameter BulkAdGroupRemarketingListAssociation is 37.
Long Identifier,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the parameter applyBulkProductPartitionActionsResults is 39.
Long Identifier,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,ApplyBulkProductPartitionActions,The length of the parameter bulkAdGroupProductPartitionResults is 34.
Long Identifier,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,GetBulkAdGroupProductPartitionTree,The length of the parameter bulkAdGroupProductPartitionResults is 34.
Long Identifier,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the parameter campaignDayTimeTargetBidResults is 31.
Long Identifier,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdExtensionsWithEditorialReasons,The length of the parameter adExtensionEditorialReasonCollection is 36.
Long Identifier,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputBiddingScheme,The length of the parameter inheritFromParentBiddingScheme is 30.
Long Identifier,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdGroupRemarketingListAssociation,The length of the parameter adGroupRemarketingListAssociation is 33.
Long Identifier,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the parameter getKeywordsByAdGroupIdResponse is 30.
Long Identifier,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the parameter addNegativeKeywordsToEntitiesResponse is 37.
Long Identifier,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the parameter getNegativeKeywordsByEntityIdsResponse is 38.
Long Identifier,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the parameter addListItemsToSharedListResponse is 32.
Long Identifier,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the parameter getSharedEntityAssociationsByEntityIdsResponse is 46.
Long Identifier,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the parameter getSharedEntityAssociationsBySharedEntityIdsResponse is 52.
Long Identifier,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the parameter adGroupRemarketingListAssociations is 34.
Long Identifier,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the parameter adGroupRemarketingListAssociation is 33.
Long Identifier,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the parameter addAdGroupRemarketingListAssociationsResponse is 45.
Long Identifier,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the parameter getAdGroupRemarketingListAssociationsResponse is 45.
Long Identifier,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the parameter updateAdGroupRemarketingListAssociation is 39.
Long Identifier,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the parameter updateAdGroupRemarketingListAssociationsResponse is 48.
Long Identifier,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the parameter deleteAdGroupRemarketingListAssociationsResponse is 48.
Long Identifier,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,AddAdGroupRemarketingListAssociationsAsync,The length of the parameter adGroupRemarketingListAssociations is 34.
Long Identifier,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,DeleteAdGroupRemarketingListAssociationsAsync,The length of the parameter adGroupRemarketingListAssociations is 34.
Long Identifier,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,UpdateAdGroupRemarketingListAssociationsAsync,The length of the parameter adGroupRemarketingListAssociations is 34.
Long Identifier,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the parameter applyProductPartitionActionsResponse is 36.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "			if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) { " is 186.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray (); " is 164.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign); " is 132.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign); " is 214.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension; " is 480.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling); " is 171.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling); " is 171.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling); " is 175.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign); " is 135.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,GetAdExtensionsEditorialReasons,The length of the statement  "	return (await CampaignService.CallAsync ((s' r) => s.GetAdExtensionsEditorialReasonsAsync (r)' request)).EditorialReasons; " is 122.
Long Statement,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,GetCustomerPilotFeaturesAsync,The length of the statement  "	return (await CustomerService.CallAsync ((s' r) => s.GetCustomerPilotFeaturesAsync (r)' request)).FeaturePilotFlags.ToArray (); " is 127.
Long Statement,BingAdsExamplesLibrary.V10,BudgetOpportunities,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BudgetOpportunities.cs,RunAsync,The length of the statement  "		var campaigns = (Campaign[])await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping); " is 148.
Long Statement,BingAdsExamplesLibrary.V10,BudgetOpportunities,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BudgetOpportunities.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,BudgetOpportunities,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BudgetOpportunities.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BudgetOpportunities,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BudgetOpportunities.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BudgetOpportunities,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BudgetOpportunities.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BudgetOpportunities,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BudgetOpportunities.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BudgetOpportunities,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BudgetOpportunities.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BudgetOpportunities,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BudgetOpportunities.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BudgetOpportunities,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BudgetOpportunities.cs,OutputBudgetOpportunities,The length of the statement  "			OutputStatusMessage (String.Format ("PercentageIncreaseInImpressions: {0}"' budgetOpportunity.PercentageIncreaseInImpressions)); " is 128.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture)))); " is 176.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "			if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) { " is 186.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'  " is 125.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "			// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "			// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record. " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "				// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional  " is 121.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "				// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "				// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.  " is 128.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray (); " is 212.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,GetCustomerPilotFeaturesAsync,The length of the statement  "	return (await CustomerService.CallAsync ((s' r) => s.GetCustomerPilotFeaturesAsync (r)' request)).FeaturePilotFlags.ToArray (); " is 127.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkAdGroupAppAdExtensions,The length of the statement  "			OutputStatusMessage (string.Format ("EntityId (Ad Group Id): {0}"' entity.AdExtensionIdToEntityIdAssociation.EntityId)); " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkAdGroupImageAdExtensions,The length of the statement  "			OutputStatusMessage (string.Format ("EntityId (Ad Group Id): {0}"' entity.AdExtensionIdToEntityIdAssociation.EntityId)); " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkAdGroupSiteLinkAdExtensions,The length of the statement  "			OutputStatusMessage (string.Format ("EntityId (Ad Group Id): {0}"' entity.AdExtensionIdToEntityIdAssociation.EntityId)); " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,GetExampleBulkCampaign,The length of the statement  "		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,GetExampleBulkCampaign,The length of the statement  "		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record. " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignAppAdExtensions,The length of the statement  "			OutputStatusMessage (string.Format ("EntityId (Ad Group Id): {0}"' entity.AdExtensionIdToEntityIdAssociation.EntityId)); " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignCallAdExtensions,The length of the statement  "			OutputStatusMessage (string.Format ("EntityId (Ad Group Id): {0}"' entity.AdExtensionIdToEntityIdAssociation.EntityId)); " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignCalloutAdExtensions,The length of the statement  "			OutputStatusMessage (string.Format ("EntityId (Ad Group Id): {0}"' entity.AdExtensionIdToEntityIdAssociation.EntityId)); " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignReviewAdExtensions,The length of the statement  "			OutputStatusMessage (string.Format ("EntityId (Ad Group Id): {0}"' entity.AdExtensionIdToEntityIdAssociation.EntityId)); " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignImageAdExtensions,The length of the statement  "			OutputStatusMessage (string.Format ("EntityId (Ad Group Id): {0}"' entity.AdExtensionIdToEntityIdAssociation.EntityId)); " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignLocationAdExtensions,The length of the statement  "			OutputStatusMessage (string.Format ("EntityId (Ad Group Id): {0}"' entity.AdExtensionIdToEntityIdAssociation.EntityId)); " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkCampaignSiteLinkAdExtensions,The length of the statement  "			OutputStatusMessage (string.Format ("EntityId (Campaign Id): {0}"' entity.AdExtensionIdToEntityIdAssociation.EntityId)); " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkAdExtensionAssociation,The length of the statement  "		OutputStatusMessage (string.Format ("EntityId (Campaign Id): {0}"' entity.AdExtensionIdToEntityIdAssociation.EntityId)); " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkExampleBase.cs,OutputBulkPerformanceData,The length of the statement  "		OutputStatusMessage (string.Format ("AverageCostPerThousandImpressions: {0}"' performanceData.AverageCostPerThousandImpressions)); " is 130.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "		var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture)))); " is 176.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "			// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "			// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record. " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "				// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional  " is 121.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "				// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "				// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.  " is 128.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "					Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"' " is 229.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,GetCustomerPilotFeaturesAsync,The length of the statement  "	return (await CustomerService.CallAsync ((s' r) => s.GetCustomerPilotFeaturesAsync (r)' request)).FeaturePilotFlags.ToArray (); " is 127.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture)))); " is 176.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'  " is 125.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "			// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "			// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record. " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "				// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional  " is 121.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "				// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "				// will be used when associating this new campaign with a new negative keyword in the BulkCampaignNegativeKeyword object below.  " is 127.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		// Negative keywords can be added and deleted from a shared negative keyword list. The negative keyword list can be shared or associated with multiple campaigns. " is 161.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		// You can create up to 20 negative keyword lists per account and share or associate them with any campaign in the same account.  " is 128.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		// For each negative keyword that you want to add to the list' upload a BulkSharedNegativeKeyword (Shared Negative Keyword record type).  " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		// To associate the negative keyword list with a campaign' also upload a BulkCampaignNegativeKeywordList (Campaign Negative Keyword List Association record type).  " is 162.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "		var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture)))); " is 176.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "		// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'  " is 125.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "			// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "			// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record. " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "				// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional  " is 121.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "				// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "				// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.  " is 128.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "		var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture)))); " is 176.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "			if (biddableAdGroupCriterion != null && (((ProductPartition)(entity.AdGroupCriterion.Criterion)).PartitionType == ProductPartitionType.Unit)) { " is 143.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "				((FixedBid)((BiddableAdGroupCriterion)((BulkAdGroupProductPartition)entity).AdGroupCriterion).CriterionBid).Bid.Amount += .01; " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The length of the statement  "		var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture)))); " is 176.
Long Statement,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The length of the statement  "			// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The length of the statement  "			// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record. " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The length of the statement  "				// When using the Campaign Management service' the Id cannot be set. In the context of a BulkAdGroup' the Id is optional  " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,RunAsync,The length of the statement  "		var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture)))); " is 176.
Long Statement,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,RunAsync,The length of the statement  "		OutputStatusMessage (String.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,RunAsync,The length of the statement  "		OutputStatusMessage (String.Join ("; "' ex.Detail.Errors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,RunAsync,The length of the statement  "		OutputStatusMessage (String.Join ("; "' ex.Detail.OperationErrors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,RunAsync,The length of the statement  "		OutputStatusMessage (String.Join ("; "' ex.Detail.BatchErrors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,SubmitAndDownloadAsync,The length of the statement  "	var resultFilePath = await bulkDownloadOperation.DownloadResultFileAsync (FileDirectory' ResultFileName' decompress: true' overwrite: true// Set this value true if you want to overwrite the same file. " is 200.
Long Statement,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,DownloadResultsAsync,The length of the statement  "	var resultFilePath = await bulkDownloadOperation.DownloadResultFileAsync (FileDirectory' ResultFileName' decompress: true' overwrite: true); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.  " is 127.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "			OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId)); " is 134.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture)))); " is 176.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "			// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "			// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record. " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "				// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional  " is 121.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "				// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "				// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.  " is 130.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id; " is 129.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n"); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "                 */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n"); " is 132.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,GetBulkAdGroupProductPartitionTree,The length of the statement  "		if (bulkAdGroupProductPartitionResult.AdGroupCriterion != null && bulkAdGroupProductPartitionResult.AdGroupCriterion.AdGroupId == adGroupId) { " is 142.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,OutputProductPartitions,The length of the statement  "	Dictionary<long' List<BulkAdGroupProductPartition>> childBranches = new Dictionary<long' List<BulkAdGroupProductPartition>> (); " is 127.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,OutputProductPartitionTree,The length of the statement  "	OutputStatusMessage (String.Format ("{0}{1}"' "".PadLeft (treeLevel' '\t')' ((ProductPartition)(adGroupCriterion.Criterion)).PartitionType)); " is 141.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,OutputProductPartitionTree,The length of the statement  "	OutputStatusMessage (String.Format ("{0}ParentCriterionId: {1}"' "".PadLeft (treeLevel' '\t')' ((ProductPartition)(adGroupCriterion.Criterion)).ParentCriterionId)); " is 164.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,OutputProductPartitionTree,The length of the statement  "			OutputStatusMessage (String.Format ("{0}Bid Amount: {1}"' "".PadLeft (treeLevel' '\t')' ((FixedBid)(biddableAdGroupCriterion.CriterionBid)).Bid.Amount)); " is 153.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,OutputProductPartitionTree,The length of the statement  "	var nullAttribute = ((ProductPartition)(adGroupCriterion.Criterion)).ParentCriterionId != null ? "(All other)" : "(Tree Root)"; " is 127.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,OutputProductPartitionTree,The length of the statement  "	OutputStatusMessage (String.Format ("{0}Attribute: {1}"' "".PadLeft (treeLevel' '\t')' ((ProductPartition)(adGroupCriterion.Criterion)).Condition.Attribute ?? nullAttribute)); " is 175.
Long Statement,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,OutputProductPartitionTree,The length of the statement  "	OutputStatusMessage (String.Format ("{0}Operand: {1}\n"' "".PadLeft (treeLevel' '\t')' ((ProductPartition)(adGroupCriterion.Criterion)).Condition.Operand)); " is 156.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "		var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture)))); " is 176.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "		// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'  " is 125.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "			// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "			// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record. " is 120.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "				// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional  " is 121.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "				// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id  " is 126.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "				// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.  " is 128.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The length of the statement  "			OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId)); " is 132.
Long Statement,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The length of the statement  "		var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url; " is 179.
Long Statement,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdGroup,The length of the statement  "		OutputStatusMessage (string.Format ("AdRotation Type: {0}"' adGroup.AdRotation != null ? adGroup.AdRotation.Type : null)); " is 122.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdGroup,The length of the statement  "			OutputStatusMessage (string.Format ("EndDate: {0}/{1}/{2}"' adGroup.EndDate.Month' adGroup.EndDate.Day' adGroup.EndDate.Year)); " is 127.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdGroup,The length of the statement  "			OutputStatusMessage (string.Format ("StartDate: {0}/{1}/{2}"' adGroup.StartDate.Month' adGroup.StartDate.Day' adGroup.StartDate.Year)); " is 135.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputCampaignsWithPartialErrors,The length of the statement  "			OutputStatusMessage (String.Format ("Campaign[{0}] (Name:{1}) successfully added and assigned CampaignId {2}"' index' campaigns [index].Name' campaignIds [index])); " is 164.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputCampaignsWithPartialErrors,The length of the statement  "		OutputStatusMessage (String.Format ("\nCampaign[{0}] (Name:{1}) not added due to the following error:"' error.Index' campaigns [error.Index].Name)); " is 148.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdGroupsWithPartialErrors,The length of the statement  "			OutputStatusMessage (String.Format ("AdGroup[{0}] (Name:{1}) successfully added and assigned AdGroupId {2}"' index' adGroups [index].Name' adGroupIds [index])); " is 160.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdGroupsWithPartialErrors,The length of the statement  "		OutputStatusMessage (String.Format ("\nAdGroup[{0}] (Name:{1}) not added due to the following error:"' error.Index' adGroups [error.Index].Name)); " is 146.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputKeywordsWithPartialErrors,The length of the statement  "			OutputStatusMessage (String.Format ("Keyword[{0}] (Text:{1}) successfully added and assigned KeywordId {2}"' index' keywords [index].Text' keywordIds [index])); " is 160.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputKeywordsWithPartialErrors,The length of the statement  "		OutputStatusMessage (String.Format ("\nKeyword[{0}] (Text:{1}) not added due to the following error:"' error.Index' keywords [error.Index].Text)); " is 146.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdsWithPartialErrors,The length of the statement  "			OutputStatusMessage (String.Format ("Ad[{0}] ({1}) successfully added and assigned AdId {2}"' index' attributeValues [index]' adIds [index])); " is 142.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdsWithPartialErrors,The length of the statement  "		OutputStatusMessage (String.Format ("\nAd[{0}] ({1}) not added due to the following error:"' error.Index' attributeValues [error.Index])); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdExtensionsWithEditorialReasons,The length of the statement  "			if (adExtensionEditorialReasonCollection != null && adExtensionEditorialReasonCollection.Count > 0 && adExtensionEditorialReasonCollection [index] != null) { " is 157.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputNegativeKeywordsWithPartialErrors,The length of the statement  "				OutputStatusMessage (String.Format ("NegativeKeyword[{0}] ({1}) successfully added to NegativeKeywordList ({2}) and assigned Negative Keyword Id {3}."' index' ((NegativeKeyword)(sharedListItems [index])).Text' sharedListId' sharedListItemIds [index])); " is 252.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputSharedEntityIdentifiersAsync,The length of the statement  "				OutputStatusMessage (String.Format ("SharedEntity[{0}] ({1}) has SharedEntity Id {2}.\n"' index' sharedEntities [index].Name' sharedEntities [index].Id)); " is 154.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputAdGroupCriterionWithProductPartition,The length of the statement  "			if (biddableAdGroupCriterion.UrlCustomParameters != null && biddableAdGroupCriterion.UrlCustomParameters.Parameters != null) { " is 126.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputSchedule,The length of the statement  "			OutputStatusMessage (string.Format ("EndDate: {0}/{1}/{2}"' schedule.EndDate.Month' schedule.EndDate.Day' schedule.EndDate.Year)); " is 130.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputSchedule,The length of the statement  "			OutputStatusMessage (string.Format ("StartDate: {0}/{1}/{2}"' schedule.StartDate.Month' schedule.StartDate.Day' schedule.StartDate.Year)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,OutputSchedule,The length of the statement  "		var useSearcherTimeZone = (schedule.UseSearcherTimeZone != null && (bool)schedule.UseSearcherTimeZone) ? "True" : "False"; " is 122.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the statement  "				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"' " is 229.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the statement  "		var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns; " is 225.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the statement  "			getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns; " is 231.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the statement  "		var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme); " is 132.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the statement  "		getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme); " is 128.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,GetCustomerPilotFeaturesAsync,The length of the statement  "	return (await CustomerService.CallAsync ((s' r) => s.GetCustomerPilotFeaturesAsync (r)' request)).FeaturePilotFlags.ToArray (); " is 127.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		AddNegativeKeywordsToEntitiesResponse addNegativeKeywordsToEntitiesResponse = await AddNegativeKeywordsToEntitiesAsync (entityNegativeKeywords); " is 144.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		if (addNegativeKeywordsToEntitiesResponse.NestedPartialErrors == null || addNegativeKeywordsToEntitiesResponse.NestedPartialErrors.Count == 0) { " is 144.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		GetNegativeKeywordsByEntityIdsResponse getNegativeKeywordsByEntityIdsResponse = await GetNegativeKeywordsByEntityIdsAsync (new[] { " is 130.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		if (getNegativeKeywordsByEntityIdsResponse.PartialErrors == null || getNegativeKeywordsByEntityIdsResponse.PartialErrors.Count == 0) { " is 134.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		var nestedPartialErrors = (BatchErrorCollection[])await DeleteNegativeKeywordsFromEntitiesAsync (entityNegativeKeywords); " is 121.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "			OutputStatusMessage ("Attempt to DeleteNegativeKeywordsFromEntities without NegativeKeyword identifier partially fails by design."); " is 132.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		nestedPartialErrors = (BatchErrorCollection[])await DeleteNegativeKeywordsFromEntitiesAsync (getNegativeKeywordsByEntityIdsResponse.EntityNegativeKeywords); " is 156.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (String.Format ("NegativeKeywordList successfully added to account library and assigned identifer {0}\n"' sharedEntityId)); " is 143.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		OutputNegativeKeywordsWithPartialErrors (sharedEntityId' negativeKeywords' listItemIds' addSharedEntityResponse.PartialErrors.ToArray ()); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		OutputNegativeKeywordsWithPartialErrors (sharedEntityId' negativeKeywords' listItemIds' addListItemsToSharedListResponse.PartialErrors.ToArray ()); " is 147.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "			OutputStatusMessage (String.Format ("Associated CampaignId {0} with Negative Keyword List Id {1}.\n"' campaignId' sharedEntityId)); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		GetSharedEntityAssociationsByEntityIdsResponse getSharedEntityAssociationsByEntityIdsResponse = await GetSharedEntityAssociationsByEntityIdsAsync (new[] { " is 154.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		// Currently the GetSharedEntityAssociationsBySharedEntityIds operation accepts only one shared entity identifier in the list. " is 126.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		GetSharedEntityAssociationsBySharedEntityIdsResponse getSharedEntityAssociationsBySharedEntityIdsResponse = await GetSharedEntityAssociationsBySharedEntityIdsAsync ("Campaign"' new[] { " is 184.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,DeleteNegativeKeywordsFromEntitiesAsync,The length of the statement  "	return (await Service.CallAsync ((s' r) => s.DeleteNegativeKeywordsFromEntitiesAsync (r)' request)).NestedPartialErrors; " is 120.
Long Statement,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the statement  "		// To discover all remarketing lists that the user can associate with ad groups in the current account (per CustomerAccountId header)'  " is 134.
Long Statement,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the statement  "		var addAdGroupRemarketingListAssociationsResponse = await AddAdGroupRemarketingListAssociationsAsync (adGroupRemarketingListAssociations); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the statement  "		foreach (var adGroupRemarketingListAssociation in getAdGroupRemarketingListAssociationsResponse.AdGroupRemarketingListAssociations) { " is 133.
Long Statement,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the statement  "			var updateAdGroupRemarketingListAssociationsResponse = await UpdateAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] { " is 149.
Long Statement,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the statement  "			var deleteAdGroupRemarketingListAssociationsResponse = await DeleteAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] { " is 149.
Long Statement,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the statement  "			OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId)); " is 134.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the statement  "		var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope)); " is 127.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the statement  "                 * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call. " is 122.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n"); " is 124.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the statement  "                 */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n"); " is 132.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,OutputProductPartitionTree,The length of the statement  "	OutputStatusMessage (String.Format ("{0}{1}"' "".PadLeft (treeLevel' '\t')' ((ProductPartition)(node.Criterion)).PartitionType)); " is 129.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,OutputProductPartitionTree,The length of the statement  "	OutputStatusMessage (String.Format ("{0}ParentCriterionId: {1}"' "".PadLeft (treeLevel' '\t')' ((ProductPartition)(node.Criterion)).ParentCriterionId)); " is 152.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,OutputProductPartitionTree,The length of the statement  "			OutputStatusMessage (String.Format ("{0}Bid Amount: {1}"' "".PadLeft (treeLevel' '\t')' ((FixedBid)(biddableAdGroupCriterion.CriterionBid)).Bid.Amount)); " is 153.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,OutputProductPartitionTree,The length of the statement  "	OutputStatusMessage (String.Format ("{0}Attribute: {1}"' "".PadLeft (treeLevel' '\t')' ((ProductPartition)(node.Criterion)).Condition.Attribute ?? nullAttribute)); " is 163.
Long Statement,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,OutputProductPartitionTree,The length of the statement  "	OutputStatusMessage (String.Format ("{0}Operand: {1}\n"' "".PadLeft (treeLevel' '\t')' ((ProductPartition)(node.Criterion)).Condition.Operand)); " is 144.
Long Statement,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,GetTargetsInfoFromLibraryAsync,The length of the statement  "	return (await Service.CallAsync ((s' r) => s.GetTargetsInfoFromLibraryAsync (r)' new GetTargetsInfoFromLibraryRequest ())).TargetsInfo; " is 135.
Long Statement,BingAdsExamplesLibrary.V9,CustomerSignup,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\CustomerSignup.cs,RunAsync,The length of the statement  "			// The type of currency that is used to settle the account. The service uses the currency information for billing purposes. " is 123.
Long Statement,BingAdsExamplesLibrary.V9,CustomerSignup,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\CustomerSignup.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V9,CustomerSignup,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\CustomerSignup.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V9,CustomerSignup,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\CustomerSignup.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V9,InviteUser,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\InviteUser.cs,RunAsync,The length of the statement  "		OutputStatusMessage ("You must edit this example to provide the email address (UserInviteRecipientEmail) for " + "the user invitation."); " is 137.
Long Statement,BingAdsExamplesLibrary.V9,InviteUser,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\InviteUser.cs,RunAsync,The length of the statement  "			// The user role' which determines the level of access that the user has to the accounts specified in the AccountIds element. " is 125.
Long Statement,BingAdsExamplesLibrary.V9,InviteUser,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\InviteUser.cs,RunAsync,The length of the statement  "		var pendingInvitation = userInvitations.SingleOrDefault (invitation => invitation.Id == userInvitationId && DateTime.Compare (invitation.ExpirationDate.ToUniversalTime ()' DateTime.UtcNow) > 0); " is 194.
Long Statement,BingAdsExamplesLibrary.V9,InviteUser,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\InviteUser.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V9,InviteUser,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\InviteUser.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V9,InviteUser,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\InviteUser.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,RunAsync,The length of the statement  "		OutputStatusMessage ("You must edit the ManageClient.cs file to provide the ClientAccountId for " + "the client link."); " is 120.
Long Statement,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,RunAsync,The length of the statement  "		OutputStatusMessage ("When adding a client link' the client link's ManagingCustomerId is set to the CustomerId of the current " + "authenticated user' who must be a Super Admin of the agency."); " is 194.
Long Statement,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,RunAsync,The length of the statement  "		OutputStatusMessage ("Login as an agency Super Admin user to send a client link invitation' " + "or unlink an existing client link."); " is 134.
Long Statement,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,RunAsync,The length of the statement  "			PrintPartialErrors (addClientLinksResponse.OperationErrors.ToArray ()' addClientLinksResponse.PartialErrors.ToArray ()); " is 120.
Long Statement,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,RunAsync,The length of the statement  "			OutputStatusMessage (string.Format ("Login as the client Super Admin to accept the agency's request to manage AccountId {0}.\n"' ClientAccountId)); " is 147.
Long Statement,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V9,ReportRequests,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ReportRequests.cs,RunAsync,The length of the statement  "		OutputStatusMessage (String.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V9,ReportRequests,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ReportRequests.cs,RunAsync,The length of the statement  "		OutputStatusMessage (String.Join ("; "' ex.Detail.Errors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V9,ReportRequests,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ReportRequests.cs,RunAsync,The length of the statement  "		OutputStatusMessage (String.Join ("; "' ex.Detail.OperationErrors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Long Statement,BingAdsExamplesLibrary.V9,ReportRequests,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ReportRequests.cs,RunAsync,The length of the statement  "		OutputStatusMessage (String.Join ("; "' ex.Detail.BatchErrors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message)))); " is 136.
Long Statement,BingAdsExamplesLibrary.V9,ReportRequests,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ReportRequests.cs,SubmitAndDownloadAsync,The length of the statement  "	var resultFilePath = await reportingDownloadOperation.DownloadResultFileAsync (FileDirectory' ResultFileName' decompress: true' overwrite: true); " is 145.
Long Statement,BingAdsExamplesLibrary.V9,ReportRequests,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ReportRequests.cs,DownloadResultsAsync,The length of the statement  "	var resultFilePath = await reportingDownloadOperation.DownloadResultFileAsync (FileDirectory' ResultFileName' decompress: true' overwrite: true); " is 145.
Long Statement,BingAdsExamplesLibrary.V9,SearchUserAccounts,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\SearchUserAccounts.cs,RunAsync,The length of the statement  "		accountFCM.Add (new KeyValuePair<string' string> ("TrackingUrlTemplate"' "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}")); " is 155.
Long Statement,BingAdsExamplesLibrary.V9,SearchUserAccounts,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\SearchUserAccounts.cs,RunAsync,The length of the statement  "				OutputStatusMessage (string.Format ("Updated the account with a TrackingUrlTemplate: {0}\n"' accountFCM.ToArray ().SingleOrDefault (keyValuePair => keyValuePair.Key == "TrackingUrlTemplate").Value)); " is 199.
Long Statement,BingAdsExamplesLibrary.V9,SearchUserAccounts,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\SearchUserAccounts.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description)); " is 138.
Long Statement,BingAdsExamplesLibrary.V9,SearchUserAccounts,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\SearchUserAccounts.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 131.
Long Statement,BingAdsExamplesLibrary.V9,SearchUserAccounts,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\SearchUserAccounts.cs,RunAsync,The length of the statement  "		OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message)))); " is 140.
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	// Add a campaign that will later be associated with ad extensions.   	var campaigns = new[] {  		new Campaign {  			Id = null'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	// Specify the extensions.  	var adExtensions = new AdExtension[] {  		//new AppAdExtension  		//{  		//    AppPlatform = "Windows"'  		//    AppStoreId = "AppStoreIdGoesHere"'  		//    DestinationUrl = "DestinationUrlGoesHere"'  		//    DisplayText = "Contoso"'  		//}'  		new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new CalloutAdExtension {  			Text = "Callout Text"  		}'  		//new ImageAdExtension  		//{  		//    AlternativeText = "Image Extension Alt Text"'  		//    ImageMediaIds = new long[] { await AddImageAsync(authorizationData) }  		//}'  		new LocationAdExtension {  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}'  		new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"  		// The Url of the third-party review. This is not your business Url.  		}'  		new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}  		}  	};  	// Before migration only the deprecated SiteLinksAdExtension type can be added'   	// and after migration only the new Sitelink2AdExtension type can be added.  	adExtensions = adExtensions.Concat (sitelinkMigrationIsCompleted ? (AdExtension[])GetSampleSitelink2AdExtensions () : GetSampleSiteLinksAdExtensions ()).ToArray ();  	// Add all extensions to the account's ad extension library  	var adExtensionIdentities = await AddAdExtensionsAsync (authorizationData.AccountId' adExtensions);  	OutputStatusMessage ("Added ad extensions.\n");  	// DeleteAdExtensionsAssociations' SetAdExtensionsAssociations' and GetAdExtensionsEditorialReasons   	// operations each require a list of type AdExtensionIdToEntityIdAssociation.  	var adExtensionIdToEntityIdAssociations = new AdExtensionIdToEntityIdAssociation[adExtensionIdentities.Count];  	// GetAdExtensionsByIds requires a list of type long.  	var adExtensionIds = new long[adExtensionIdentities.Count];  	// Loop through the list of extension IDs and build any required data structures  	// for subsequent operations.   	for (int i = 0; i < adExtensionIdentities.Count; i++) {  		adExtensionIdToEntityIdAssociations [i] = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = adExtensionIdentities [i].Id'  			EntityId = (long)campaignIds [0]  		};  		adExtensionIds [i] = adExtensionIdentities [i].Id;  	}  	// Associate the specified ad extensions with the respective campaigns or ad groups.   	await SetAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Set ad extension associations.\n");  	// Get editorial rejection reasons for the respective ad extension and entity associations.  	var adExtensionEditorialReasonCollection = (AdExtensionEditorialReasonCollection[])await GetAdExtensionsEditorialReasons (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	// If migration has been completed' then you should request the Sitelink2AdExtension objects.  	// You can always request both types; however' before migration only the deprecated SiteLinksAdExtension  	// type will be returned' and after migration only the new Sitelink2AdExtension type will be returned.  	AdExtensionsTypeFilter adExtensionsTypeFilter = (sitelinkMigrationIsCompleted ? AdExtensionsTypeFilter.Sitelink2AdExtension : AdExtensionsTypeFilter.SiteLinksAdExtension) | AdExtensionsTypeFilter.AppAdExtension | AdExtensionsTypeFilter.CallAdExtension | AdExtensionsTypeFilter.CalloutAdExtension | AdExtensionsTypeFilter.ImageAdExtension | AdExtensionsTypeFilter.LocationAdExtension | AdExtensionsTypeFilter.ReviewAdExtension | AdExtensionsTypeFilter.StructuredSnippetAdExtension;  	// Get all ad extensions added above.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were added above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' adExtensionEditorialReasonCollection);  	// Get only the location extensions and remove scheduling.  	adExtensionsTypeFilter = AdExtensionsTypeFilter.LocationAdExtension;  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' adExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	var updateExtensions = new List<AdExtension> ();  	var updateExtensionIds = new List<long> ();  	foreach (var extension in adExtensions) {  		// GetAdExtensionsByIds will return a nil element if the request filters / conditions were not met.  		if (extension != null && extension.Id != null) {  			// Remove read-only elements that would otherwise cause the update operation to fail.  			var updateExtension = SetReadOnlyAdExtensionElementsToNull (extension);  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			updateExtension.Scheduling = new Schedule {    			};  			updateExtensions.Add (updateExtension);  			updateExtensionIds.Add ((long)updateExtension.Id);  		}  	}  	OutputStatusMessage ("Removing scheduling from the location ad extensions..\n");  	await UpdateAdExtensionsAsync (authorizationData.AccountId' updateExtensions);  	// Get only the location extension to output the result.  	adExtensions = (AdExtension[])await GetAdExtensionsByIdsAsync (authorizationData.AccountId' updateExtensionIds' adExtensionsTypeFilter' AdExtensionAdditionalField.Scheduling);  	OutputStatusMessage ("List of ad extensions that were updated above:\n");  	OutputAdExtensionsWithEditorialReasons (adExtensions' null);  	// Delete the ad extension associations' ad extensions' and campaign' that were previously added.   	// You should remove these lines if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// Remove the specified associations from the respective campaigns or ad groups.   	// At this point the ad extensions are still available in the account's ad extensions library.   	await DeleteAdExtensionsAssociationsAsync (authorizationData.AccountId' adExtensionIdToEntityIdAssociations' AssociationType.Campaign);  	OutputStatusMessage ("Deleted ad extension associations.\n");  	// Deletes the ad extensions from the account’s ad extension library.  	await DeleteAdExtensionsAsync (authorizationData.AccountId' adExtensionIds);  	OutputStatusMessage ("Deleted ad extensions.\n");  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' (long)campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,RunAsync,The following statement contains a magic number: if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  	// Account migration status below will be either NotStarted' InProgress' or Completed.  	OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  }  else {  	// Account migration status below will be NotInPilot.  	OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  }  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,GetSampleSitelink2AdExtensions,The following statement contains a magic number: return new[] {  	new Sitelink2AdExtension {  		Description1 = "Simple & Transparent."'  		Description2 = "No Upfront Cost."'  		DisplayText = "Women's Shoe Sale 1"'  		// If you are currently using Destination URLs' you must replace them with Final URLs.   		// Here is an example of a DestinationUrl you might have used previously.   		// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  		// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  		// to an empty string when updating the ad extension. If you are removing DestinationUrl'  		// then FinalUrls is required.  		// DestinationUrl = ""'  		// With FinalUrls you can separate the tracking template' custom parameters' and   		// landing page URLs.   		FinalUrls = new[] {  			"http://www.contoso.com/womenshoesale"  		}'  		// Final Mobile URLs can also be used if you want to direct the user to a different page   		// for mobile devices.  		FinalMobileUrls = new[] {  			"http://mobile.contoso.com/womenshoesale"  		}'  		// You could use a tracking template which would override the campaign level  		// tracking template. Tracking templates defined for lower level entities   		// override those set for higher level entities.  		// In this example we are using the campaign level tracking template.  		TrackingUrlTemplate = null'  		// Set custom parameters that are specific to this ad extension'   		// and can be used by the ad extension' ad group' campaign' or account level tracking template.   		// In this example we are using the campaign level tracking template.  		UrlCustomParameters = new CustomParameters {  			Parameters = new[] {  				new CustomParameter () {  					Key = "promoCode"'  					Value = "PROMO1"  				}'  				new CustomParameter () {  					Key = "season"'  					Value = "summer"  				}'  			}  		}'  	}'  	new Sitelink2AdExtension {  		Description1 = "Do Amazing Things With Contoso."'  		Description2 = "Read Our Case Studies."'  		DisplayText = "Women's Shoe Sale 2"'  		// If you are currently using Destination URLs' you must replace them with Final URLs.   		// Here is an example of a DestinationUrl you might have used previously.   		// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  		// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  		// to an empty string when updating the ad extension. If you are removing DestinationUrl'  		// then FinalUrls is required.  		// DestinationUrl = ""'  		// With FinalUrls you can separate the tracking template' custom parameters' and   		// landing page URLs.   		FinalUrls = new[] {  			"http://www.contoso.com/womenshoesale"  		}'  		// Final Mobile URLs can also be used if you want to direct the user to a different page   		// for mobile devices.  		FinalMobileUrls = new[] {  			"http://mobile.contoso.com/womenshoesale"  		}'  		Scheduling = new Schedule {  			// For this example assume you want to drive traffic every Saturday morning  			// in the search user's time zone.  			UseSearcherTimeZone = true'  			DayTimeRanges = new[] {  				new DayTime {  					Day = Day.Saturday'  					StartHour = 9'  					StartMinute = Minute.Zero'  					EndHour = 12'  					EndMinute = Minute.Zero'  				}'  			}'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  		}'  		// You could use a tracking template which would override the campaign level  		// tracking template. Tracking templates defined for lower level entities   		// override those set for higher level entities.  		// In this example we are using the campaign level tracking template.  		TrackingUrlTemplate = null'  		// Set custom parameters that are specific to this ad extension'   		// and can be used by the ad extension' ad group' campaign' or account level tracking template.   		// In this example we are using the campaign level tracking template.  		UrlCustomParameters = new CustomParameters {  			Parameters = new[] {  				new CustomParameter () {  					Key = "promoCode"'  					Value = "PROMO2"  				}'  				new CustomParameter () {  					Key = "season"'  					Value = "summer"  				}'  			}  		}'  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,GetSampleSitelink2AdExtensions,The following statement contains a magic number: return new[] {  	new Sitelink2AdExtension {  		Description1 = "Simple & Transparent."'  		Description2 = "No Upfront Cost."'  		DisplayText = "Women's Shoe Sale 1"'  		// If you are currently using Destination URLs' you must replace them with Final URLs.   		// Here is an example of a DestinationUrl you might have used previously.   		// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  		// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  		// to an empty string when updating the ad extension. If you are removing DestinationUrl'  		// then FinalUrls is required.  		// DestinationUrl = ""'  		// With FinalUrls you can separate the tracking template' custom parameters' and   		// landing page URLs.   		FinalUrls = new[] {  			"http://www.contoso.com/womenshoesale"  		}'  		// Final Mobile URLs can also be used if you want to direct the user to a different page   		// for mobile devices.  		FinalMobileUrls = new[] {  			"http://mobile.contoso.com/womenshoesale"  		}'  		// You could use a tracking template which would override the campaign level  		// tracking template. Tracking templates defined for lower level entities   		// override those set for higher level entities.  		// In this example we are using the campaign level tracking template.  		TrackingUrlTemplate = null'  		// Set custom parameters that are specific to this ad extension'   		// and can be used by the ad extension' ad group' campaign' or account level tracking template.   		// In this example we are using the campaign level tracking template.  		UrlCustomParameters = new CustomParameters {  			Parameters = new[] {  				new CustomParameter () {  					Key = "promoCode"'  					Value = "PROMO1"  				}'  				new CustomParameter () {  					Key = "season"'  					Value = "summer"  				}'  			}  		}'  	}'  	new Sitelink2AdExtension {  		Description1 = "Do Amazing Things With Contoso."'  		Description2 = "Read Our Case Studies."'  		DisplayText = "Women's Shoe Sale 2"'  		// If you are currently using Destination URLs' you must replace them with Final URLs.   		// Here is an example of a DestinationUrl you might have used previously.   		// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  		// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  		// to an empty string when updating the ad extension. If you are removing DestinationUrl'  		// then FinalUrls is required.  		// DestinationUrl = ""'  		// With FinalUrls you can separate the tracking template' custom parameters' and   		// landing page URLs.   		FinalUrls = new[] {  			"http://www.contoso.com/womenshoesale"  		}'  		// Final Mobile URLs can also be used if you want to direct the user to a different page   		// for mobile devices.  		FinalMobileUrls = new[] {  			"http://mobile.contoso.com/womenshoesale"  		}'  		Scheduling = new Schedule {  			// For this example assume you want to drive traffic every Saturday morning  			// in the search user's time zone.  			UseSearcherTimeZone = true'  			DayTimeRanges = new[] {  				new DayTime {  					Day = Day.Saturday'  					StartHour = 9'  					StartMinute = Minute.Zero'  					EndHour = 12'  					EndMinute = Minute.Zero'  				}'  			}'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  		}'  		// You could use a tracking template which would override the campaign level  		// tracking template. Tracking templates defined for lower level entities   		// override those set for higher level entities.  		// In this example we are using the campaign level tracking template.  		TrackingUrlTemplate = null'  		// Set custom parameters that are specific to this ad extension'   		// and can be used by the ad extension' ad group' campaign' or account level tracking template.   		// In this example we are using the campaign level tracking template.  		UrlCustomParameters = new CustomParameters {  			Parameters = new[] {  				new CustomParameter () {  					Key = "promoCode"'  					Value = "PROMO2"  				}'  				new CustomParameter () {  					Key = "season"'  					Value = "summer"  				}'  			}  		}'  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,GetSampleSitelink2AdExtensions,The following statement contains a magic number: return new[] {  	new Sitelink2AdExtension {  		Description1 = "Simple & Transparent."'  		Description2 = "No Upfront Cost."'  		DisplayText = "Women's Shoe Sale 1"'  		// If you are currently using Destination URLs' you must replace them with Final URLs.   		// Here is an example of a DestinationUrl you might have used previously.   		// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  		// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  		// to an empty string when updating the ad extension. If you are removing DestinationUrl'  		// then FinalUrls is required.  		// DestinationUrl = ""'  		// With FinalUrls you can separate the tracking template' custom parameters' and   		// landing page URLs.   		FinalUrls = new[] {  			"http://www.contoso.com/womenshoesale"  		}'  		// Final Mobile URLs can also be used if you want to direct the user to a different page   		// for mobile devices.  		FinalMobileUrls = new[] {  			"http://mobile.contoso.com/womenshoesale"  		}'  		// You could use a tracking template which would override the campaign level  		// tracking template. Tracking templates defined for lower level entities   		// override those set for higher level entities.  		// In this example we are using the campaign level tracking template.  		TrackingUrlTemplate = null'  		// Set custom parameters that are specific to this ad extension'   		// and can be used by the ad extension' ad group' campaign' or account level tracking template.   		// In this example we are using the campaign level tracking template.  		UrlCustomParameters = new CustomParameters {  			Parameters = new[] {  				new CustomParameter () {  					Key = "promoCode"'  					Value = "PROMO1"  				}'  				new CustomParameter () {  					Key = "season"'  					Value = "summer"  				}'  			}  		}'  	}'  	new Sitelink2AdExtension {  		Description1 = "Do Amazing Things With Contoso."'  		Description2 = "Read Our Case Studies."'  		DisplayText = "Women's Shoe Sale 2"'  		// If you are currently using Destination URLs' you must replace them with Final URLs.   		// Here is an example of a DestinationUrl you might have used previously.   		// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  		// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  		// to an empty string when updating the ad extension. If you are removing DestinationUrl'  		// then FinalUrls is required.  		// DestinationUrl = ""'  		// With FinalUrls you can separate the tracking template' custom parameters' and   		// landing page URLs.   		FinalUrls = new[] {  			"http://www.contoso.com/womenshoesale"  		}'  		// Final Mobile URLs can also be used if you want to direct the user to a different page   		// for mobile devices.  		FinalMobileUrls = new[] {  			"http://mobile.contoso.com/womenshoesale"  		}'  		Scheduling = new Schedule {  			// For this example assume you want to drive traffic every Saturday morning  			// in the search user's time zone.  			UseSearcherTimeZone = true'  			DayTimeRanges = new[] {  				new DayTime {  					Day = Day.Saturday'  					StartHour = 9'  					StartMinute = Minute.Zero'  					EndHour = 12'  					EndMinute = Minute.Zero'  				}'  			}'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  		}'  		// You could use a tracking template which would override the campaign level  		// tracking template. Tracking templates defined for lower level entities   		// override those set for higher level entities.  		// In this example we are using the campaign level tracking template.  		TrackingUrlTemplate = null'  		// Set custom parameters that are specific to this ad extension'   		// and can be used by the ad extension' ad group' campaign' or account level tracking template.   		// In this example we are using the campaign level tracking template.  		UrlCustomParameters = new CustomParameters {  			Parameters = new[] {  				new CustomParameter () {  					Key = "promoCode"'  					Value = "PROMO2"  				}'  				new CustomParameter () {  					Key = "season"'  					Value = "summer"  				}'  			}  		}'  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,GetSampleSitelink2AdExtensions,The following statement contains a magic number: return new[] {  	new Sitelink2AdExtension {  		Description1 = "Simple & Transparent."'  		Description2 = "No Upfront Cost."'  		DisplayText = "Women's Shoe Sale 1"'  		// If you are currently using Destination URLs' you must replace them with Final URLs.   		// Here is an example of a DestinationUrl you might have used previously.   		// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  		// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  		// to an empty string when updating the ad extension. If you are removing DestinationUrl'  		// then FinalUrls is required.  		// DestinationUrl = ""'  		// With FinalUrls you can separate the tracking template' custom parameters' and   		// landing page URLs.   		FinalUrls = new[] {  			"http://www.contoso.com/womenshoesale"  		}'  		// Final Mobile URLs can also be used if you want to direct the user to a different page   		// for mobile devices.  		FinalMobileUrls = new[] {  			"http://mobile.contoso.com/womenshoesale"  		}'  		// You could use a tracking template which would override the campaign level  		// tracking template. Tracking templates defined for lower level entities   		// override those set for higher level entities.  		// In this example we are using the campaign level tracking template.  		TrackingUrlTemplate = null'  		// Set custom parameters that are specific to this ad extension'   		// and can be used by the ad extension' ad group' campaign' or account level tracking template.   		// In this example we are using the campaign level tracking template.  		UrlCustomParameters = new CustomParameters {  			Parameters = new[] {  				new CustomParameter () {  					Key = "promoCode"'  					Value = "PROMO1"  				}'  				new CustomParameter () {  					Key = "season"'  					Value = "summer"  				}'  			}  		}'  	}'  	new Sitelink2AdExtension {  		Description1 = "Do Amazing Things With Contoso."'  		Description2 = "Read Our Case Studies."'  		DisplayText = "Women's Shoe Sale 2"'  		// If you are currently using Destination URLs' you must replace them with Final URLs.   		// Here is an example of a DestinationUrl you might have used previously.   		// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  		// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  		// to an empty string when updating the ad extension. If you are removing DestinationUrl'  		// then FinalUrls is required.  		// DestinationUrl = ""'  		// With FinalUrls you can separate the tracking template' custom parameters' and   		// landing page URLs.   		FinalUrls = new[] {  			"http://www.contoso.com/womenshoesale"  		}'  		// Final Mobile URLs can also be used if you want to direct the user to a different page   		// for mobile devices.  		FinalMobileUrls = new[] {  			"http://mobile.contoso.com/womenshoesale"  		}'  		Scheduling = new Schedule {  			// For this example assume you want to drive traffic every Saturday morning  			// in the search user's time zone.  			UseSearcherTimeZone = true'  			DayTimeRanges = new[] {  				new DayTime {  					Day = Day.Saturday'  					StartHour = 9'  					StartMinute = Minute.Zero'  					EndHour = 12'  					EndMinute = Minute.Zero'  				}'  			}'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  		}'  		// You could use a tracking template which would override the campaign level  		// tracking template. Tracking templates defined for lower level entities   		// override those set for higher level entities.  		// In this example we are using the campaign level tracking template.  		TrackingUrlTemplate = null'  		// Set custom parameters that are specific to this ad extension'   		// and can be used by the ad extension' ad group' campaign' or account level tracking template.   		// In this example we are using the campaign level tracking template.  		UrlCustomParameters = new CustomParameters {  			Parameters = new[] {  				new CustomParameter () {  					Key = "promoCode"'  					Value = "PROMO2"  				}'  				new CustomParameter () {  					Key = "season"'  					Value = "summer"  				}'  			}  		}'  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region MigrationStatus  	// To prepare for the sitelink ad extensions migration in 2017' you will need to determine  	// whether the account has been migrated from SiteLinksAdExtension to Sitelink2AdExtension.   	// All ad extension service operations available for both types of sitelinks; however you will   	// need to determine which type to add' update' and retrieve.  	bool sitelinkMigrationIsCompleted = false;  	// Optionally you can find out which pilot features the customer is able to use. Even if the customer   	// is in pilot for sitelink migrations' the accounts that it contains might not be migrated.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for Sitelink ad extension migration is 253.  	// Pilot flags apply to all accounts within a given customer; however'  	// each account goes through migration individually and has its own migration status.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  		// Account migration status below will be either NotStarted' InProgress' or Completed.  		OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  	}  	else {  		// Account migration status below will be NotInPilot.  		OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  	}  	// Even if you have multiple accounts per customer' each account will have its own  	// migration status. This example checks one account using the provided AuthorizationData.  	var accountMigrationStatusesInfos = (await GetAccountMigrationStatusesAsync (new long[] {  		authorizationData.AccountId  	}' SITELINK_MIGRATION)).ToArray ();  	foreach (var accountMigrationStatusesInfo in accountMigrationStatusesInfos) {  		OutputAccountMigrationStatusesInfo (accountMigrationStatusesInfo);  		if (accountMigrationStatusesInfo.MigrationStatusInfo.Any (statusInfo => statusInfo.Status == MigrationStatus.Completed && SITELINK_MIGRATION.CompareTo (statusInfo.MigrationType) == 0)) {  			sitelinkMigrationIsCompleted = true;  		}  	}  	#endregion MigrationStatus  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var uploadEntities = new List<BulkEntity> ();  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			Status = CampaignStatus.Paused'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// Used with FinalUrls shown in the sitelinks that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Prepare ad extensions for upload  	var bulkAppAdExtension = new BulkAppAdExtension {  		AccountId = authorizationData.AccountId'  		AppAdExtension = new AppAdExtension {  			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			DestinationUrl = "DestinationUrlGoesHere"'  			DisplayText = "Contoso"'  			Id = appAdExtensionIdKey'  		}  	};  	var bulkCallAdExtension = new BulkCallAdExtension {  		AccountId = authorizationData.AccountId'  		CallAdExtension = new CallAdExtension {  			CountryCode = "US"'  			PhoneNumber = "2065550100"'  			IsCallOnly = false'  			Id = callAdExtensionIdKey'  			Scheduling = new Schedule {  				// For this example assume the call center is open Monday - Friday from 9am - 9pm  				// in the account's time zone.  				UseSearcherTimeZone = false'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Monday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Tuesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Wednesday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Thursday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  					new DayTime {  						Day = Day.Friday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 21'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkCalloutAdExtension = new BulkCalloutAdExtension {  		AccountId = authorizationData.AccountId'  		CalloutAdExtension = new CalloutAdExtension {  			Text = "Callout Text"'  			Id = calloutAdExtensionIdKey  		}  	};  	var bulkLocationAdExtension = new BulkLocationAdExtension {  		AccountId = authorizationData.AccountId'  		LocationAdExtension = new LocationAdExtension {  			Id = locationAdExtensionIdKey'  			PhoneNumber = "206-555-0100"'  			CompanyName = "Contoso Shoes"'  			IconMediaId = null'  			ImageMediaId = null'  			Address = new Microsoft.BingAds.V10.CampaignManagement.Address {  				StreetAddress = "1234 Washington Place"'  				StreetAddress2 = "Suite 1210"'  				CityName = "Woodinville"'  				ProvinceName = "WA"'  				CountryCode = "US"'  				PostalCode = "98608"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}  		}  	};  	var bulkReviewAdExtension = new BulkReviewAdExtension {  		AccountId = authorizationData.AccountId'  		ReviewAdExtension = new ReviewAdExtension {  			IsExact = true'  			Source = "Review Source Name"'  			Text = "Review Text"'  			Url = "http://review.contoso.com"'  			// The Url of the third-party review. This is not your business Url.  			Id = reviewAdExtensionIdKey  		}  	};  	var bulkStructuredSnippetAdExtension = new BulkStructuredSnippetAdExtension {  		AccountId = authorizationData.AccountId'  		StructuredSnippetAdExtension = new StructuredSnippetAdExtension {  			Header = "Brands"'  			Values = new[] {  				"Windows"'  				"Xbox"'  				"Skype"  			}'  			Id = structuredSnippetAdExtensionIdKey  		}  	};  	// Prepare ad extension associations for upload  	var bulkCampaignAppAdExtension = new BulkCampaignAppAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = appAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCallAdExtension = new BulkCampaignCallAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = callAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignCalloutAdExtension = new BulkCampaignCalloutAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = calloutAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignLocationAdExtension = new BulkCampaignLocationAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = locationAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignReviewAdExtension = new BulkCampaignReviewAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = reviewAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	var bulkCampaignStructuredSnippetAdExtension = new BulkCampaignStructuredSnippetAdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = structuredSnippetAdExtensionIdKey'  			EntityId = campaignIdKey  		}  	};  	// Upload the entities created above.  	// Dependent entities such as BulkCampaignCallAdExtension must be written after any dependencies'    	// for example the BulkCampaign and BulkCallAdExtension.   	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAppAdExtension);  	uploadEntities.Add (bulkCallAdExtension);  	uploadEntities.Add (bulkCalloutAdExtension);  	uploadEntities.Add (bulkLocationAdExtension);  	uploadEntities.Add (bulkReviewAdExtension);  	uploadEntities.Add (bulkStructuredSnippetAdExtension);  	uploadEntities.Add (bulkCampaignAppAdExtension);  	uploadEntities.Add (bulkCampaignCallAdExtension);  	uploadEntities.Add (bulkCampaignCalloutAdExtension);  	uploadEntities.Add (bulkCampaignLocationAdExtension);  	uploadEntities.Add (bulkCampaignReviewAdExtension);  	uploadEntities.Add (bulkCampaignStructuredSnippetAdExtension);  	// Before migration only the deprecated BulkSiteLinkAdExtension type can be added'   	// and after migration only the new BulkSitelink2AdExtension type can be added.  	var bulkSLExtensions = (sitelinkMigrationIsCompleted ? (BulkEntity[])GetSampleBulkSitelink2AdExtensions (authorizationData.AccountId) : GetSampleBulkSiteLinkAdExtensions (authorizationData.AccountId)).ToArray ();  	foreach (var bulkSLExtension in bulkSLExtensions) {  		uploadEntities.Add (bulkSLExtension);  	}  	OutputStatusMessage ("Adding campaign' ad extensions' and associations . . .");  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var appAdExtensionResults = downloadEntities.OfType<BulkAppAdExtension> ().ToList ();  	OutputBulkAppAdExtensions (appAdExtensionResults);  	var callAdExtensionResults = downloadEntities.OfType<BulkCallAdExtension> ().ToList ();  	OutputBulkCallAdExtensions (callAdExtensionResults);  	var calloutAdExtensionResults = downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ();  	OutputBulkCalloutAdExtensions (calloutAdExtensionResults);  	var imageAdExtensionResults = downloadEntities.OfType<BulkImageAdExtension> ().ToList ();  	OutputBulkImageAdExtensions (imageAdExtensionResults);  	var locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	var reviewAdExtensionResults = downloadEntities.OfType<BulkReviewAdExtension> ().ToList ();  	OutputBulkReviewAdExtensions (reviewAdExtensionResults);  	var structuredSnippetAdExtensionResults = downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ();  	OutputBulkStructuredSnippetAdExtensions (structuredSnippetAdExtensionResults);  	// Before migration only the deprecated BulkSiteLinkAdExtension results will be returned'   	// and after migration only the new BulkSitelink2AdExtension results will be returned.  	var siteLinkAdExtensionResults = downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ();  	OutputBulkSiteLinkAdExtensions (siteLinkAdExtensionResults);  	var sitelink2AdExtensionResults = downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ();  	OutputBulkSitelink2AdExtensions (sitelink2AdExtensionResults);  	OutputBulkCampaignAdExtensionAssociations (downloadEntities.OfType<BulkCampaignAdExtensionAssociation> ().ToList ());  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Use only the location extension results and remove scheduling.  	uploadEntities = new List<BulkEntity> ();  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		if (locationAdExtensionResult.LocationAdExtension.Id > 0) {  			// If you set the Scheduling element null' any existing scheduling set for the ad extension will remain unchanged.   			// If you set this to any non-null Schedule object' you are effectively replacing existing scheduling   			// for the ad extension. In this example' we will remove any existing scheduling by setting this element    			// to an empty Schedule object.  			// The "delete_value" keyword will be written to the corresponding columns in the bulk file.  			locationAdExtensionResult.LocationAdExtension.Scheduling = new Schedule ();  			uploadEntities.Add (locationAdExtensionResult);  		}  	}  	OutputStatusMessage ("\nRemoving scheduling from location ad extensions . . .\n");  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	locationAdExtensionResults = downloadEntities.OfType<BulkLocationAdExtension> ().ToList ();  	OutputBulkLocationAdExtensions (locationAdExtensionResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and ad extensions that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.   	//When you delete a BulkCampaign or BulkCallAdExtension' dependent entities such as BulkCampaignCallAdExtension   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		if (campaignResult.Campaign != null) {  			campaignResult.Campaign.Status = CampaignStatus.Deleted;  			uploadEntities.Add (campaignResult);  		}  	}  	foreach (var appAdExtensionResult in appAdExtensionResults) {  		//By default the sample does not successfully create any app ad extensions'  		//because you need to provide details above such as the AppStoreId.  		if (appAdExtensionResult.AppAdExtension.Id > 0) {  			appAdExtensionResult.AppAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (appAdExtensionResult);  		}  	}  	foreach (var callAdExtensionResult in callAdExtensionResults) {  		if (callAdExtensionResult.CallAdExtension.Id > 0) {  			callAdExtensionResult.CallAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (callAdExtensionResult);  		}  	}  	foreach (var calloutAdExtensionResult in calloutAdExtensionResults) {  		if (calloutAdExtensionResult.CalloutAdExtension.Id > 0) {  			calloutAdExtensionResult.CalloutAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (calloutAdExtensionResult);  		}  	}  	foreach (var imageAdExtensionResult in imageAdExtensionResults) {  		if (imageAdExtensionResult.ImageAdExtension.Id > 0) {  			imageAdExtensionResult.ImageAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (imageAdExtensionResult);  		}  	}  	foreach (var locationAdExtensionResult in locationAdExtensionResults) {  		locationAdExtensionResult.LocationAdExtension.Status = AdExtensionStatus.Deleted;  		uploadEntities.Add (locationAdExtensionResult);  	}  	foreach (var reviewAdExtensionResult in reviewAdExtensionResults) {  		if (reviewAdExtensionResult.ReviewAdExtension.Id > 0) {  			reviewAdExtensionResult.ReviewAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (reviewAdExtensionResult);  		}  	}  	foreach (var siteLinkAdExtensionResult in siteLinkAdExtensionResults) {  		if (siteLinkAdExtensionResult.SiteLinksAdExtension.Id > 0) {  			siteLinkAdExtensionResult.SiteLinksAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (siteLinkAdExtensionResult);  		}  	}  	foreach (var sitelink2AdExtensionResult in sitelink2AdExtensionResults) {  		if (sitelink2AdExtensionResult.Sitelink2AdExtension.Id > 0) {  			sitelink2AdExtensionResult.Sitelink2AdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (sitelink2AdExtensionResult);  		}  	}  	foreach (var structuredSnippetAdExtensionResult in structuredSnippetAdExtensionResults) {  		if (structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Id > 0) {  			structuredSnippetAdExtensionResult.StructuredSnippetAdExtension.Status = AdExtensionStatus.Deleted;  			uploadEntities.Add (structuredSnippetAdExtensionResult);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and ad extensions . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkAppAdExtensions (downloadEntities.OfType<BulkAppAdExtension> ().ToList ());  	OutputBulkCallAdExtensions (downloadEntities.OfType<BulkCallAdExtension> ().ToList ());  	OutputBulkCalloutAdExtensions (downloadEntities.OfType<BulkCalloutAdExtension> ().ToList ());  	OutputBulkImageAdExtensions (downloadEntities.OfType<BulkImageAdExtension> ().ToList ());  	OutputBulkLocationAdExtensions (downloadEntities.OfType<BulkLocationAdExtension> ().ToList ());  	OutputBulkReviewAdExtensions (downloadEntities.OfType<BulkReviewAdExtension> ().ToList ());  	OutputBulkSiteLinkAdExtensions (downloadEntities.OfType<BulkSiteLinkAdExtension> ().ToList ());  	OutputBulkSitelink2AdExtensions (downloadEntities.OfType<BulkSitelink2AdExtension> ().ToList ());  	OutputBulkStructuredSnippetAdExtensions (downloadEntities.OfType<BulkStructuredSnippetAdExtension> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  #region CatchExceptions  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,RunAsync,The following statement contains a magic number: if (featurePilotFlags.Any (pilotFlag => pilotFlag == 253)) {  	// Account migration status below will be either NotStarted' InProgress' or Completed.  	OutputStatusMessage ("Customer is in pilot for Sitelink migration.\n");  }  else {  	// Account migration status below will be NotInPilot.  	OutputStatusMessage ("Customer is not in pilot for Sitelink migration.\n");  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,GetSampleBulkSitelink2AdExtensions,The following statement contains a magic number: return new BulkEntity[] {  	new BulkSitelink2AdExtension {  		AccountId = accountId'  		Sitelink2AdExtension = new Sitelink2AdExtension {  			Id = sitelink2AdExtensionIdKey'  			Description1 = "Simple & Transparent."'  			Description2 = "No Upfront Cost."'  			DisplayText = "Women's Shoe Sale 1"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  			// to an empty string when updating the ad extension. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad extension'   			// and can be used by the ad extension' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	}'  	new BulkSitelink2AdExtension {  		AccountId = accountId'  		Sitelink2AdExtension = new Sitelink2AdExtension {  			Id = sitelink2AdExtensionIdKey'  			Description1 = "Do Amazing Things With Contoso."'  			Description2 = "Read Our Case Studies."'  			DisplayText = "Women's Shoe Sale 2"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  			// to an empty string when updating the ad extension. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad extension'   			// and can be used by the ad extension' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}  	}'  	new BulkCampaignSitelink2AdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = sitelink2AdExtensionIdKey'  			EntityId = campaignIdKey  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,GetSampleBulkSitelink2AdExtensions,The following statement contains a magic number: return new BulkEntity[] {  	new BulkSitelink2AdExtension {  		AccountId = accountId'  		Sitelink2AdExtension = new Sitelink2AdExtension {  			Id = sitelink2AdExtensionIdKey'  			Description1 = "Simple & Transparent."'  			Description2 = "No Upfront Cost."'  			DisplayText = "Women's Shoe Sale 1"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  			// to an empty string when updating the ad extension. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad extension'   			// and can be used by the ad extension' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	}'  	new BulkSitelink2AdExtension {  		AccountId = accountId'  		Sitelink2AdExtension = new Sitelink2AdExtension {  			Id = sitelink2AdExtensionIdKey'  			Description1 = "Do Amazing Things With Contoso."'  			Description2 = "Read Our Case Studies."'  			DisplayText = "Women's Shoe Sale 2"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  			// to an empty string when updating the ad extension. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad extension'   			// and can be used by the ad extension' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}  	}'  	new BulkCampaignSitelink2AdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = sitelink2AdExtensionIdKey'  			EntityId = campaignIdKey  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,GetSampleBulkSitelink2AdExtensions,The following statement contains a magic number: return new BulkEntity[] {  	new BulkSitelink2AdExtension {  		AccountId = accountId'  		Sitelink2AdExtension = new Sitelink2AdExtension {  			Id = sitelink2AdExtensionIdKey'  			Description1 = "Simple & Transparent."'  			Description2 = "No Upfront Cost."'  			DisplayText = "Women's Shoe Sale 1"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  			// to an empty string when updating the ad extension. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad extension'   			// and can be used by the ad extension' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	}'  	new BulkSitelink2AdExtension {  		AccountId = accountId'  		Sitelink2AdExtension = new Sitelink2AdExtension {  			Id = sitelink2AdExtensionIdKey'  			Description1 = "Do Amazing Things With Contoso."'  			Description2 = "Read Our Case Studies."'  			DisplayText = "Women's Shoe Sale 2"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  			// to an empty string when updating the ad extension. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad extension'   			// and can be used by the ad extension' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}  	}'  	new BulkCampaignSitelink2AdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = sitelink2AdExtensionIdKey'  			EntityId = campaignIdKey  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,GetSampleBulkSitelink2AdExtensions,The following statement contains a magic number: return new BulkEntity[] {  	new BulkSitelink2AdExtension {  		AccountId = accountId'  		Sitelink2AdExtension = new Sitelink2AdExtension {  			Id = sitelink2AdExtensionIdKey'  			Description1 = "Simple & Transparent."'  			Description2 = "No Upfront Cost."'  			DisplayText = "Women's Shoe Sale 1"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  			// to an empty string when updating the ad extension. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad extension'   			// and can be used by the ad extension' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	}'  	new BulkSitelink2AdExtension {  		AccountId = accountId'  		Sitelink2AdExtension = new Sitelink2AdExtension {  			Id = sitelink2AdExtensionIdKey'  			Description1 = "Do Amazing Things With Contoso."'  			Description2 = "Read Our Case Studies."'  			DisplayText = "Women's Shoe Sale 2"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls' you can set DestinationUrl  			// to an empty string when updating the ad extension. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			Scheduling = new Schedule {  				// For this example assume you want to drive traffic every Saturday morning  				// in the search user's time zone.  				UseSearcherTimeZone = true'  				DayTimeRanges = new[] {  					new DayTime {  						Day = Day.Saturday'  						StartHour = 9'  						StartMinute = Minute.Zero'  						EndHour = 12'  						EndMinute = Minute.Zero'  					}'  				}'  				StartDate = null'  				EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  					Month = 12'  					Day = 31'  					Year = DateTime.UtcNow.Year + 1  				}'  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad extension'   			// and can be used by the ad extension' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}  	}'  	new BulkCampaignSitelink2AdExtension {  		AdExtensionIdToEntityIdAssociation = new AdExtensionIdToEntityIdAssociation {  			AdExtensionId = sitelink2AdExtensionIdKey'  			EntityId = campaignIdKey  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	if (enabledForSharedBudgets) {  		var bulkBudget = new BulkBudget {  			ClientId = "YourClientIdGoesHere"'  			Budget = new Budget {  				Amount = 50'  				BudgetType = BudgetLimitType.DailyBudgetStandard'  				Id = budgetIdKey'  				Name = "My Shared Budget " + DateTime.UtcNow'  			}  		};  		uploadEntities.Add (bulkBudget);  	}  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIdKey : 0'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			Status = CampaignStatus.Paused'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}'  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var bulkKeywords = new[] {  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Broad'  				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var bulkTextAds = new[] {  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"'  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"'  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO1"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO2"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Red Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO3"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = ""'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO4"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO5"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	foreach (var bulkKeyword in bulkKeywords) {  		uploadEntities.Add (bulkKeyword);  	}  	foreach (var bulkTextAd in bulkTextAds) {  		uploadEntities.Add (bulkTextAd);  	}  	// Upload and write the output  	OutputStatusMessage ("Adding campaign' budget' ad group' ads' and keywords...\n");  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var budgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (budgetResults);  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var keywordResults = downloadEntities.OfType<BulkKeyword> ().ToList ();  	OutputBulkKeywords (keywordResults);  	var textAdResults = downloadEntities.OfType<BulkTextAd> ().ToList ();  	OutputBulkTextAds (textAdResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Here is a simple example that updates the campaign budget.  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.Budgets | BulkDownloadEntity.Campaigns'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all campaigns and shared budgets in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all campaigns and shared budgets in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	var getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	uploadEntities = new List<BulkEntity> ();  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget record. If you try to update   	// the budget amount of a Campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	foreach (var entity in getBudgetResults) {  		if (entity.Budget.Id > 0) {  			// Increase budget by 20 %  			entity.Budget.Amount *= 1.2m;  			uploadEntities.Add (entity);  		}  	}  	foreach (var entity in getCampaignResults) {  		if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  			// Increase existing budgets by 20%  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  			}  			else {  				// Increase budget by 20 %  				entity.Campaign.DailyBudget *= 1.2;  			}  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local campaign budget amounts. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ();  		getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  		OutputBulkBudgets (getBudgetResults);  		getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  		OutputBulkCampaigns (getCampaignResults);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No campaigns or shared budgets in account.\n");  	}  	#endregion Update  	#region CleanUp  	//Delete the campaign' ad group' ads' and keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup' BulkKeyword' and BulkTextAd   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var budgetResult in budgetResults) {  		budgetResult.Status = Status.Deleted;  		uploadEntities.Add (budgetResult);  	}  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' budget' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	if (enabledForSharedBudgets) {  		var bulkBudget = new BulkBudget {  			ClientId = "YourClientIdGoesHere"'  			Budget = new Budget {  				Amount = 50'  				BudgetType = BudgetLimitType.DailyBudgetStandard'  				Id = budgetIdKey'  				Name = "My Shared Budget " + DateTime.UtcNow'  			}  		};  		uploadEntities.Add (bulkBudget);  	}  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIdKey : 0'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			Status = CampaignStatus.Paused'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}'  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var bulkKeywords = new[] {  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Broad'  				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var bulkTextAds = new[] {  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"'  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"'  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO1"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO2"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Red Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO3"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = ""'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO4"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO5"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	foreach (var bulkKeyword in bulkKeywords) {  		uploadEntities.Add (bulkKeyword);  	}  	foreach (var bulkTextAd in bulkTextAds) {  		uploadEntities.Add (bulkTextAd);  	}  	// Upload and write the output  	OutputStatusMessage ("Adding campaign' budget' ad group' ads' and keywords...\n");  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var budgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (budgetResults);  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var keywordResults = downloadEntities.OfType<BulkKeyword> ().ToList ();  	OutputBulkKeywords (keywordResults);  	var textAdResults = downloadEntities.OfType<BulkTextAd> ().ToList ();  	OutputBulkTextAds (textAdResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Here is a simple example that updates the campaign budget.  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.Budgets | BulkDownloadEntity.Campaigns'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all campaigns and shared budgets in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all campaigns and shared budgets in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	var getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	uploadEntities = new List<BulkEntity> ();  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget record. If you try to update   	// the budget amount of a Campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	foreach (var entity in getBudgetResults) {  		if (entity.Budget.Id > 0) {  			// Increase budget by 20 %  			entity.Budget.Amount *= 1.2m;  			uploadEntities.Add (entity);  		}  	}  	foreach (var entity in getCampaignResults) {  		if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  			// Increase existing budgets by 20%  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  			}  			else {  				// Increase budget by 20 %  				entity.Campaign.DailyBudget *= 1.2;  			}  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local campaign budget amounts. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ();  		getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  		OutputBulkBudgets (getBudgetResults);  		getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  		OutputBulkCampaigns (getCampaignResults);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No campaigns or shared budgets in account.\n");  	}  	#endregion Update  	#region CleanUp  	//Delete the campaign' ad group' ads' and keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup' BulkKeyword' and BulkTextAd   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var budgetResult in budgetResults) {  		budgetResult.Status = Status.Deleted;  		uploadEntities.Add (budgetResult);  	}  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' budget' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	if (enabledForSharedBudgets) {  		var bulkBudget = new BulkBudget {  			ClientId = "YourClientIdGoesHere"'  			Budget = new Budget {  				Amount = 50'  				BudgetType = BudgetLimitType.DailyBudgetStandard'  				Id = budgetIdKey'  				Name = "My Shared Budget " + DateTime.UtcNow'  			}  		};  		uploadEntities.Add (bulkBudget);  	}  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIdKey : 0'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			Status = CampaignStatus.Paused'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}'  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var bulkKeywords = new[] {  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Broad'  				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var bulkTextAds = new[] {  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"'  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"'  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO1"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO2"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Red Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO3"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = ""'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO4"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO5"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	foreach (var bulkKeyword in bulkKeywords) {  		uploadEntities.Add (bulkKeyword);  	}  	foreach (var bulkTextAd in bulkTextAds) {  		uploadEntities.Add (bulkTextAd);  	}  	// Upload and write the output  	OutputStatusMessage ("Adding campaign' budget' ad group' ads' and keywords...\n");  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var budgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (budgetResults);  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var keywordResults = downloadEntities.OfType<BulkKeyword> ().ToList ();  	OutputBulkKeywords (keywordResults);  	var textAdResults = downloadEntities.OfType<BulkTextAd> ().ToList ();  	OutputBulkTextAds (textAdResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Here is a simple example that updates the campaign budget.  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.Budgets | BulkDownloadEntity.Campaigns'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all campaigns and shared budgets in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all campaigns and shared budgets in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	var getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	uploadEntities = new List<BulkEntity> ();  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget record. If you try to update   	// the budget amount of a Campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	foreach (var entity in getBudgetResults) {  		if (entity.Budget.Id > 0) {  			// Increase budget by 20 %  			entity.Budget.Amount *= 1.2m;  			uploadEntities.Add (entity);  		}  	}  	foreach (var entity in getCampaignResults) {  		if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  			// Increase existing budgets by 20%  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  			}  			else {  				// Increase budget by 20 %  				entity.Campaign.DailyBudget *= 1.2;  			}  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local campaign budget amounts. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ();  		getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  		OutputBulkBudgets (getBudgetResults);  		getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  		OutputBulkCampaigns (getCampaignResults);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No campaigns or shared budgets in account.\n");  	}  	#endregion Update  	#region CleanUp  	//Delete the campaign' ad group' ads' and keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup' BulkKeyword' and BulkTextAd   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var budgetResult in budgetResults) {  		budgetResult.Status = Status.Deleted;  		uploadEntities.Add (budgetResult);  	}  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' budget' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	if (enabledForSharedBudgets) {  		var bulkBudget = new BulkBudget {  			ClientId = "YourClientIdGoesHere"'  			Budget = new Budget {  				Amount = 50'  				BudgetType = BudgetLimitType.DailyBudgetStandard'  				Id = budgetIdKey'  				Name = "My Shared Budget " + DateTime.UtcNow'  			}  		};  		uploadEntities.Add (bulkBudget);  	}  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIdKey : 0'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			Status = CampaignStatus.Paused'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}'  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var bulkKeywords = new[] {  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Broad'  				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var bulkTextAds = new[] {  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"'  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"'  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO1"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO2"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Red Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO3"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = ""'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO4"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO5"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	foreach (var bulkKeyword in bulkKeywords) {  		uploadEntities.Add (bulkKeyword);  	}  	foreach (var bulkTextAd in bulkTextAds) {  		uploadEntities.Add (bulkTextAd);  	}  	// Upload and write the output  	OutputStatusMessage ("Adding campaign' budget' ad group' ads' and keywords...\n");  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var budgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (budgetResults);  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var keywordResults = downloadEntities.OfType<BulkKeyword> ().ToList ();  	OutputBulkKeywords (keywordResults);  	var textAdResults = downloadEntities.OfType<BulkTextAd> ().ToList ();  	OutputBulkTextAds (textAdResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Here is a simple example that updates the campaign budget.  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.Budgets | BulkDownloadEntity.Campaigns'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all campaigns and shared budgets in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all campaigns and shared budgets in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	var getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	uploadEntities = new List<BulkEntity> ();  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget record. If you try to update   	// the budget amount of a Campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	foreach (var entity in getBudgetResults) {  		if (entity.Budget.Id > 0) {  			// Increase budget by 20 %  			entity.Budget.Amount *= 1.2m;  			uploadEntities.Add (entity);  		}  	}  	foreach (var entity in getCampaignResults) {  		if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  			// Increase existing budgets by 20%  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  			}  			else {  				// Increase budget by 20 %  				entity.Campaign.DailyBudget *= 1.2;  			}  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local campaign budget amounts. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ();  		getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  		OutputBulkBudgets (getBudgetResults);  		getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  		OutputBulkCampaigns (getCampaignResults);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No campaigns or shared budgets in account.\n");  	}  	#endregion Update  	#region CleanUp  	//Delete the campaign' ad group' ads' and keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup' BulkKeyword' and BulkTextAd   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var budgetResult in budgetResults) {  		budgetResult.Status = Status.Deleted;  		uploadEntities.Add (budgetResult);  	}  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' budget' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	if (enabledForSharedBudgets) {  		var bulkBudget = new BulkBudget {  			ClientId = "YourClientIdGoesHere"'  			Budget = new Budget {  				Amount = 50'  				BudgetType = BudgetLimitType.DailyBudgetStandard'  				Id = budgetIdKey'  				Name = "My Shared Budget " + DateTime.UtcNow'  			}  		};  		uploadEntities.Add (bulkBudget);  	}  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIdKey : 0'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			Status = CampaignStatus.Paused'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}'  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var bulkKeywords = new[] {  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Broad'  				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var bulkTextAds = new[] {  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"'  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"'  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO1"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO2"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Red Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO3"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = ""'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO4"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO5"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	foreach (var bulkKeyword in bulkKeywords) {  		uploadEntities.Add (bulkKeyword);  	}  	foreach (var bulkTextAd in bulkTextAds) {  		uploadEntities.Add (bulkTextAd);  	}  	// Upload and write the output  	OutputStatusMessage ("Adding campaign' budget' ad group' ads' and keywords...\n");  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var budgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (budgetResults);  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var keywordResults = downloadEntities.OfType<BulkKeyword> ().ToList ();  	OutputBulkKeywords (keywordResults);  	var textAdResults = downloadEntities.OfType<BulkTextAd> ().ToList ();  	OutputBulkTextAds (textAdResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Here is a simple example that updates the campaign budget.  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.Budgets | BulkDownloadEntity.Campaigns'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all campaigns and shared budgets in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all campaigns and shared budgets in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	var getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	uploadEntities = new List<BulkEntity> ();  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget record. If you try to update   	// the budget amount of a Campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	foreach (var entity in getBudgetResults) {  		if (entity.Budget.Id > 0) {  			// Increase budget by 20 %  			entity.Budget.Amount *= 1.2m;  			uploadEntities.Add (entity);  		}  	}  	foreach (var entity in getCampaignResults) {  		if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  			// Increase existing budgets by 20%  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  			}  			else {  				// Increase budget by 20 %  				entity.Campaign.DailyBudget *= 1.2;  			}  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local campaign budget amounts. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ();  		getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  		OutputBulkBudgets (getBudgetResults);  		getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  		OutputBulkCampaigns (getCampaignResults);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No campaigns or shared budgets in account.\n");  	}  	#endregion Update  	#region CleanUp  	//Delete the campaign' ad group' ads' and keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup' BulkKeyword' and BulkTextAd   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var budgetResult in budgetResults) {  		budgetResult.Status = Status.Deleted;  		uploadEntities.Add (budgetResult);  	}  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' budget' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	if (enabledForSharedBudgets) {  		var bulkBudget = new BulkBudget {  			ClientId = "YourClientIdGoesHere"'  			Budget = new Budget {  				Amount = 50'  				BudgetType = BudgetLimitType.DailyBudgetStandard'  				Id = budgetIdKey'  				Name = "My Shared Budget " + DateTime.UtcNow'  			}  		};  		uploadEntities.Add (bulkBudget);  	}  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIdKey : 0'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			Status = CampaignStatus.Paused'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}'  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var bulkKeywords = new[] {  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Broad'  				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var bulkTextAds = new[] {  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"'  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"'  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO1"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO2"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Red Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO3"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = ""'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO4"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO5"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	foreach (var bulkKeyword in bulkKeywords) {  		uploadEntities.Add (bulkKeyword);  	}  	foreach (var bulkTextAd in bulkTextAds) {  		uploadEntities.Add (bulkTextAd);  	}  	// Upload and write the output  	OutputStatusMessage ("Adding campaign' budget' ad group' ads' and keywords...\n");  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var budgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (budgetResults);  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var keywordResults = downloadEntities.OfType<BulkKeyword> ().ToList ();  	OutputBulkKeywords (keywordResults);  	var textAdResults = downloadEntities.OfType<BulkTextAd> ().ToList ();  	OutputBulkTextAds (textAdResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Here is a simple example that updates the campaign budget.  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.Budgets | BulkDownloadEntity.Campaigns'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all campaigns and shared budgets in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all campaigns and shared budgets in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	var getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	uploadEntities = new List<BulkEntity> ();  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget record. If you try to update   	// the budget amount of a Campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	foreach (var entity in getBudgetResults) {  		if (entity.Budget.Id > 0) {  			// Increase budget by 20 %  			entity.Budget.Amount *= 1.2m;  			uploadEntities.Add (entity);  		}  	}  	foreach (var entity in getCampaignResults) {  		if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  			// Increase existing budgets by 20%  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  			}  			else {  				// Increase budget by 20 %  				entity.Campaign.DailyBudget *= 1.2;  			}  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local campaign budget amounts. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ();  		getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  		OutputBulkBudgets (getBudgetResults);  		getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  		OutputBulkCampaigns (getCampaignResults);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No campaigns or shared budgets in account.\n");  	}  	#endregion Update  	#region CleanUp  	//Delete the campaign' ad group' ads' and keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup' BulkKeyword' and BulkTextAd   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var budgetResult in budgetResults) {  		budgetResult.Status = Status.Deleted;  		uploadEntities.Add (budgetResult);  	}  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' budget' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	if (enabledForSharedBudgets) {  		var bulkBudget = new BulkBudget {  			ClientId = "YourClientIdGoesHere"'  			Budget = new Budget {  				Amount = 50'  				BudgetType = BudgetLimitType.DailyBudgetStandard'  				Id = budgetIdKey'  				Name = "My Shared Budget " + DateTime.UtcNow'  			}  		};  		uploadEntities.Add (bulkBudget);  	}  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIdKey : 0'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			Status = CampaignStatus.Paused'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}'  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var bulkKeywords = new[] {  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Broad'  				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var bulkTextAds = new[] {  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"'  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"'  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO1"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO2"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Red Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO3"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = ""'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO4"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO5"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	foreach (var bulkKeyword in bulkKeywords) {  		uploadEntities.Add (bulkKeyword);  	}  	foreach (var bulkTextAd in bulkTextAds) {  		uploadEntities.Add (bulkTextAd);  	}  	// Upload and write the output  	OutputStatusMessage ("Adding campaign' budget' ad group' ads' and keywords...\n");  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var budgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (budgetResults);  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var keywordResults = downloadEntities.OfType<BulkKeyword> ().ToList ();  	OutputBulkKeywords (keywordResults);  	var textAdResults = downloadEntities.OfType<BulkTextAd> ().ToList ();  	OutputBulkTextAds (textAdResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Here is a simple example that updates the campaign budget.  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.Budgets | BulkDownloadEntity.Campaigns'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all campaigns and shared budgets in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all campaigns and shared budgets in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	var getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	uploadEntities = new List<BulkEntity> ();  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget record. If you try to update   	// the budget amount of a Campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	foreach (var entity in getBudgetResults) {  		if (entity.Budget.Id > 0) {  			// Increase budget by 20 %  			entity.Budget.Amount *= 1.2m;  			uploadEntities.Add (entity);  		}  	}  	foreach (var entity in getCampaignResults) {  		if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  			// Increase existing budgets by 20%  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  			}  			else {  				// Increase budget by 20 %  				entity.Campaign.DailyBudget *= 1.2;  			}  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local campaign budget amounts. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ();  		getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  		OutputBulkBudgets (getBudgetResults);  		getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  		OutputBulkCampaigns (getCampaignResults);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No campaigns or shared budgets in account.\n");  	}  	#endregion Update  	#region CleanUp  	//Delete the campaign' ad group' ads' and keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup' BulkKeyword' and BulkTextAd   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var budgetResult in budgetResults) {  		budgetResult.Status = Status.Deleted;  		uploadEntities.Add (budgetResult);  	}  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' budget' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	if (enabledForSharedBudgets) {  		var bulkBudget = new BulkBudget {  			ClientId = "YourClientIdGoesHere"'  			Budget = new Budget {  				Amount = 50'  				BudgetType = BudgetLimitType.DailyBudgetStandard'  				Id = budgetIdKey'  				Name = "My Shared Budget " + DateTime.UtcNow'  			}  		};  		uploadEntities.Add (bulkBudget);  	}  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIdKey : 0'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			Status = CampaignStatus.Paused'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}'  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var bulkKeywords = new[] {  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Broad'  				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var bulkTextAds = new[] {  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"'  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"'  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO1"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO2"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Red Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO3"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = ""'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO4"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO5"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	foreach (var bulkKeyword in bulkKeywords) {  		uploadEntities.Add (bulkKeyword);  	}  	foreach (var bulkTextAd in bulkTextAds) {  		uploadEntities.Add (bulkTextAd);  	}  	// Upload and write the output  	OutputStatusMessage ("Adding campaign' budget' ad group' ads' and keywords...\n");  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var budgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (budgetResults);  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var keywordResults = downloadEntities.OfType<BulkKeyword> ().ToList ();  	OutputBulkKeywords (keywordResults);  	var textAdResults = downloadEntities.OfType<BulkTextAd> ().ToList ();  	OutputBulkTextAds (textAdResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Here is a simple example that updates the campaign budget.  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.Budgets | BulkDownloadEntity.Campaigns'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all campaigns and shared budgets in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all campaigns and shared budgets in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	var getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	uploadEntities = new List<BulkEntity> ();  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget record. If you try to update   	// the budget amount of a Campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	foreach (var entity in getBudgetResults) {  		if (entity.Budget.Id > 0) {  			// Increase budget by 20 %  			entity.Budget.Amount *= 1.2m;  			uploadEntities.Add (entity);  		}  	}  	foreach (var entity in getCampaignResults) {  		if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  			// Increase existing budgets by 20%  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  			}  			else {  				// Increase budget by 20 %  				entity.Campaign.DailyBudget *= 1.2;  			}  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local campaign budget amounts. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ();  		getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  		OutputBulkBudgets (getBudgetResults);  		getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  		OutputBulkCampaigns (getCampaignResults);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No campaigns or shared budgets in account.\n");  	}  	#endregion Update  	#region CleanUp  	//Delete the campaign' ad group' ads' and keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup' BulkKeyword' and BulkTextAd   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var budgetResult in budgetResults) {  		budgetResult.Status = Status.Deleted;  		uploadEntities.Add (budgetResult);  	}  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' budget' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	if (enabledForSharedBudgets) {  		var bulkBudget = new BulkBudget {  			ClientId = "YourClientIdGoesHere"'  			Budget = new Budget {  				Amount = 50'  				BudgetType = BudgetLimitType.DailyBudgetStandard'  				Id = budgetIdKey'  				Name = "My Shared Budget " + DateTime.UtcNow'  			}  		};  		uploadEntities.Add (bulkBudget);  	}  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIdKey : 0'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			Status = CampaignStatus.Paused'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}'  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var bulkKeywords = new[] {  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Broad'  				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var bulkTextAds = new[] {  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"'  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"'  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO1"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO2"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Red Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO3"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = ""'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO4"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO5"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	foreach (var bulkKeyword in bulkKeywords) {  		uploadEntities.Add (bulkKeyword);  	}  	foreach (var bulkTextAd in bulkTextAds) {  		uploadEntities.Add (bulkTextAd);  	}  	// Upload and write the output  	OutputStatusMessage ("Adding campaign' budget' ad group' ads' and keywords...\n");  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var budgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (budgetResults);  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var keywordResults = downloadEntities.OfType<BulkKeyword> ().ToList ();  	OutputBulkKeywords (keywordResults);  	var textAdResults = downloadEntities.OfType<BulkTextAd> ().ToList ();  	OutputBulkTextAds (textAdResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Here is a simple example that updates the campaign budget.  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.Budgets | BulkDownloadEntity.Campaigns'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all campaigns and shared budgets in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all campaigns and shared budgets in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	var getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	uploadEntities = new List<BulkEntity> ();  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget record. If you try to update   	// the budget amount of a Campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	foreach (var entity in getBudgetResults) {  		if (entity.Budget.Id > 0) {  			// Increase budget by 20 %  			entity.Budget.Amount *= 1.2m;  			uploadEntities.Add (entity);  		}  	}  	foreach (var entity in getCampaignResults) {  		if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  			// Increase existing budgets by 20%  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  			}  			else {  				// Increase budget by 20 %  				entity.Campaign.DailyBudget *= 1.2;  			}  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local campaign budget amounts. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ();  		getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  		OutputBulkBudgets (getBudgetResults);  		getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  		OutputBulkCampaigns (getCampaignResults);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No campaigns or shared budgets in account.\n");  	}  	#endregion Update  	#region CleanUp  	//Delete the campaign' ad group' ads' and keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup' BulkKeyword' and BulkTextAd   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var budgetResult in budgetResults) {  		budgetResult.Status = Status.Deleted;  		uploadEntities.Add (budgetResult);  	}  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' budget' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	if (enabledForSharedBudgets) {  		var bulkBudget = new BulkBudget {  			ClientId = "YourClientIdGoesHere"'  			Budget = new Budget {  				Amount = 50'  				BudgetType = BudgetLimitType.DailyBudgetStandard'  				Id = budgetIdKey'  				Name = "My Shared Budget " + DateTime.UtcNow'  			}  		};  		uploadEntities.Add (bulkBudget);  	}  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIdKey : 0'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			Status = CampaignStatus.Paused'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}'  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var bulkKeywords = new[] {  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Broad'  				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var bulkTextAds = new[] {  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"'  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"'  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO1"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO2"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Red Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO3"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = ""'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO4"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO5"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	foreach (var bulkKeyword in bulkKeywords) {  		uploadEntities.Add (bulkKeyword);  	}  	foreach (var bulkTextAd in bulkTextAds) {  		uploadEntities.Add (bulkTextAd);  	}  	// Upload and write the output  	OutputStatusMessage ("Adding campaign' budget' ad group' ads' and keywords...\n");  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var budgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (budgetResults);  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var keywordResults = downloadEntities.OfType<BulkKeyword> ().ToList ();  	OutputBulkKeywords (keywordResults);  	var textAdResults = downloadEntities.OfType<BulkTextAd> ().ToList ();  	OutputBulkTextAds (textAdResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Here is a simple example that updates the campaign budget.  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.Budgets | BulkDownloadEntity.Campaigns'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all campaigns and shared budgets in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all campaigns and shared budgets in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	var getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	uploadEntities = new List<BulkEntity> ();  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget record. If you try to update   	// the budget amount of a Campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	foreach (var entity in getBudgetResults) {  		if (entity.Budget.Id > 0) {  			// Increase budget by 20 %  			entity.Budget.Amount *= 1.2m;  			uploadEntities.Add (entity);  		}  	}  	foreach (var entity in getCampaignResults) {  		if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  			// Increase existing budgets by 20%  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  			}  			else {  				// Increase budget by 20 %  				entity.Campaign.DailyBudget *= 1.2;  			}  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local campaign budget amounts. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ();  		getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  		OutputBulkBudgets (getBudgetResults);  		getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  		OutputBulkCampaigns (getCampaignResults);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No campaigns or shared budgets in account.\n");  	}  	#endregion Update  	#region CleanUp  	//Delete the campaign' ad group' ads' and keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup' BulkKeyword' and BulkTextAd   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var budgetResult in budgetResults) {  		budgetResult.Status = Status.Deleted;  		uploadEntities.Add (budgetResult);  	}  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' budget' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	if (enabledForSharedBudgets) {  		var bulkBudget = new BulkBudget {  			ClientId = "YourClientIdGoesHere"'  			Budget = new Budget {  				Amount = 50'  				BudgetType = BudgetLimitType.DailyBudgetStandard'  				Id = budgetIdKey'  				Name = "My Shared Budget " + DateTime.UtcNow'  			}  		};  		uploadEntities.Add (bulkBudget);  	}  	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIdKey : 0'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			Status = CampaignStatus.Paused'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}'  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var bulkKeywords = new[] {  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Broad'  				Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  		new BulkKeyword {  			AdGroupId = adGroupIdKey'  			Keyword = new Keyword {  				Bid = new Bid {  					Amount = 0.47  				}'  				Param2 = "10% Off"'  				MatchType = MatchType.Phrase'  				Text = "Brand-A Shoes"'  				// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   				// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  				BiddingScheme = new InheritFromParentBiddingScheme {    				}'  			}'  		}'  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var bulkTextAds = new[] {  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"'  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"'  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO1"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO2"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Red Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO3"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = ""'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO4"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  		new BulkTextAd {  			AdGroupId = adGroupIdKey'  			TextAd = new TextAd {  				Title = "Women's Super Shoe Sale"'  				Text = "Huge Savings on red shoes."'  				DisplayUrl = "Contoso.com"'  				// If you are currently using Destination URLs' you must replace them with Final URLs.   				// Here is an example of a DestinationUrl you might have used previously.   				// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  				// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  				// to an empty string when updating the ad. If you are removing DestinationUrl'  				// then FinalUrls is required.  				// DestinationUrl = ""'  				// With FinalUrls you can separate the tracking template' custom parameters' and   				// landing page URLs.   				FinalUrls = new[] {  					"http://www.contoso.com/womenshoesale"  				}'  				// Final Mobile URLs can also be used if you want to direct the user to a different page   				// for mobile devices.  				FinalMobileUrls = new[] {  					"http://mobile.contoso.com/womenshoesale"  				}'  				// You could use a tracking template which would override the campaign level  				// tracking template. Tracking templates defined for lower level entities   				// override those set for higher level entities.  				// In this example we are using the campaign level tracking template.  				TrackingUrlTemplate = null'  				// Set custom parameters that are specific to this ad'   				// and can be used by the ad' ad group' campaign' or account level tracking template.   				// In this example we are using the campaign level tracking template.  				UrlCustomParameters = new CustomParameters {  					Parameters = new[] {  						new CustomParameter () {  							Key = "promoCode"'  							Value = "PROMO5"  						}'  						new CustomParameter () {  							Key = "season"'  							Value = "summer"  						}'  					}  				}'  			}'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	foreach (var bulkKeyword in bulkKeywords) {  		uploadEntities.Add (bulkKeyword);  	}  	foreach (var bulkTextAd in bulkTextAds) {  		uploadEntities.Add (bulkTextAd);  	}  	// Upload and write the output  	OutputStatusMessage ("Adding campaign' budget' ad group' ads' and keywords...\n");  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var budgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (budgetResults);  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var keywordResults = downloadEntities.OfType<BulkKeyword> ().ToList ();  	OutputBulkKeywords (keywordResults);  	var textAdResults = downloadEntities.OfType<BulkTextAd> ().ToList ();  	OutputBulkTextAds (textAdResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Here is a simple example that updates the campaign budget.  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.Budgets | BulkDownloadEntity.Campaigns'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all campaigns and shared budgets in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all campaigns and shared budgets in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	var getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	uploadEntities = new List<BulkEntity> ();  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget record. If you try to update   	// the budget amount of a Campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	foreach (var entity in getBudgetResults) {  		if (entity.Budget.Id > 0) {  			// Increase budget by 20 %  			entity.Budget.Amount *= 1.2m;  			uploadEntities.Add (entity);  		}  	}  	foreach (var entity in getCampaignResults) {  		if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  			// Increase existing budgets by 20%  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  			}  			else {  				// Increase budget by 20 %  				entity.Campaign.DailyBudget *= 1.2;  			}  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local campaign budget amounts. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ();  		getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  		OutputBulkBudgets (getBudgetResults);  		getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  		OutputBulkCampaigns (getCampaignResults);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No campaigns or shared budgets in account.\n");  	}  	#endregion Update  	#region CleanUp  	//Delete the campaign' ad group' ads' and keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup' BulkKeyword' and BulkTextAd   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var budgetResult in budgetResults) {  		budgetResult.Status = Status.Deleted;  		uploadEntities.Add (budgetResult);  	}  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' budget' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	getBudgetResults = downloadEntities.OfType<BulkBudget> ().ToList ();  	OutputBulkBudgets (getBudgetResults);  	getCampaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (getCampaignResults);  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  	OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  	enabledForSharedBudgets = true;  }  else {  	OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: if (enabledForSharedBudgets) {  	var bulkBudget = new BulkBudget {  		ClientId = "YourClientIdGoesHere"'  		Budget = new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Id = budgetIdKey'  			Name = "My Shared Budget " + DateTime.UtcNow'  		}  	};  	uploadEntities.Add (bulkBudget);  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: foreach (var entity in getCampaignResults) {  	if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  		// Increase existing budgets by 20%  		// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   		// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   		// During the migration all campaign level unshared budgets will be rationalized as daily.   		// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  		// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   		if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  			// Increase budget by 20 %  			entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  			entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  		}  		else {  			// Increase budget by 20 %  			entity.Campaign.DailyBudget *= 1.2;  		}  		uploadEntities.Add (entity);  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: foreach (var entity in getCampaignResults) {  	if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  		// Increase existing budgets by 20%  		// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   		// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   		// During the migration all campaign level unshared budgets will be rationalized as daily.   		// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  		// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   		if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  			// Increase budget by 20 %  			entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  			entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  		}  		else {  			// Increase budget by 20 %  			entity.Campaign.DailyBudget *= 1.2;  		}  		uploadEntities.Add (entity);  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: foreach (var entity in getCampaignResults) {  	if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  		// Increase existing budgets by 20%  		// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   		// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   		// During the migration all campaign level unshared budgets will be rationalized as daily.   		// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  		// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   		if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  			// Increase budget by 20 %  			entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  			entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  		}  		else {  			// Increase budget by 20 %  			entity.Campaign.DailyBudget *= 1.2;  		}  		uploadEntities.Add (entity);  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  	// Increase existing budgets by 20%  	// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   	// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   	// During the migration all campaign level unshared budgets will be rationalized as daily.   	// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  	// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   	if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  		// Increase budget by 20 %  		entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  		entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  	}  	else {  		// Increase budget by 20 %  		entity.Campaign.DailyBudget *= 1.2;  	}  	uploadEntities.Add (entity);  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  	// Increase existing budgets by 20%  	// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   	// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   	// During the migration all campaign level unshared budgets will be rationalized as daily.   	// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  	// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   	if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  		// Increase budget by 20 %  		entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  		entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  	}  	else {  		// Increase budget by 20 %  		entity.Campaign.DailyBudget *= 1.2;  	}  	uploadEntities.Add (entity);  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: if (entity.Campaign.BudgetId == null || entity.Campaign.BudgetId <= 0) {  	// Increase existing budgets by 20%  	// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   	// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   	// During the migration all campaign level unshared budgets will be rationalized as daily.   	// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  	// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   	if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  		// Increase budget by 20 %  		entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  		entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  	}  	else {  		// Increase budget by 20 %  		entity.Campaign.DailyBudget *= 1.2;  	}  	uploadEntities.Add (entity);  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  	// Increase budget by 20 %  	entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  	entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  }  else {  	// Increase budget by 20 %  	entity.Campaign.DailyBudget *= 1.2;  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  	// Increase budget by 20 %  	entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  	entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  }  else {  	// Increase budget by 20 %  	entity.Campaign.DailyBudget *= 1.2;  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: if (entity.Campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  	// Increase budget by 20 %  	entity.Campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  	entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  }  else {  	// Increase budget by 20 %  	entity.Campaign.DailyBudget *= 1.2;  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: entity.Campaign.DailyBudget = entity.Campaign.MonthlyBudget / 30.4 * 1.2;  
Magic Number,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The following statement contains a magic number: entity.Campaign.DailyBudget *= 1.2;  
Magic Number,BingAdsExamplesLibrary.V10,BulkNegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeKeywords.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new negative keyword in the BulkCampaignNegativeKeyword object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	var bulkCampaignNegativeKeywords = new BulkCampaignNegativeKeyword[] {  		new BulkCampaignNegativeKeyword {  			CampaignId = campaignIdKey'  			NegativeKeyword = new NegativeKeyword {  				MatchType = MatchType.Phrase'  				Text = "auto"'  			}  		}'  		new BulkCampaignNegativeKeyword {  			CampaignId = campaignIdKey'  			NegativeKeyword = new NegativeKeyword {  				MatchType = MatchType.Exact'  				Text = "auto"'  			}  		}'  		new BulkCampaignNegativeKeyword {  			CampaignId = campaignIdKey'  			NegativeKeyword = new NegativeKeyword {  				MatchType = MatchType.Phrase'  				Text = "car"'  			}  		}'  		new BulkCampaignNegativeKeyword {  			CampaignId = campaignIdKey'  			NegativeKeyword = new NegativeKeyword {  				MatchType = MatchType.Exact'  				Text = "car"'  			}  		}'  	};  	// Negative keywords can be added and deleted from a shared negative keyword list. The negative keyword list can be shared or associated with multiple campaigns.  	// You can create up to 20 negative keyword lists per account and share or associate them with any campaign in the same account.   	// To create a negative keyword list' upload a BulkNegativeKeywordList (Negative Keyword List record type).   	// For each negative keyword that you want to add to the list' upload a BulkSharedNegativeKeyword (Shared Negative Keyword record type).   	// To associate the negative keyword list with a campaign' also upload a BulkCampaignNegativeKeywordList (Campaign Negative Keyword List Association record type).   	var bulkNegativeKeywordList = new BulkNegativeKeywordList {  		NegativeKeywordList = new NegativeKeywordList {  			// Since we are adding the list and the negative keywords during the same upload'   			// we will use a reference key to the negative keyword list identifier.  			Id = negativeKeywordListIdKey'  			Name = "My NKW List"'  		}'  	};  	var bulkSharedNegativeKeywords = new BulkSharedNegativeKeyword[] {  		new BulkSharedNegativeKeyword {  			NegativeKeyword = new NegativeKeyword {  				MatchType = MatchType.Phrase'  				Text = "mobile"'  			}'  			NegativeKeywordListId = negativeKeywordListIdKey'  		}'  		new BulkSharedNegativeKeyword {  			NegativeKeyword = new NegativeKeyword {  				MatchType = MatchType.Exact'  				Text = "mobile"'  			}'  			NegativeKeywordListId = negativeKeywordListIdKey'  		}'  	};  	var bulkCampaignNegativeKeywordList = new BulkCampaignNegativeKeywordList {  		SharedEntityAssociation = new SharedEntityAssociation {  			EntityId = campaignIdKey'  			EntityType = "Campaign"'  			SharedEntityId = negativeKeywordListIdKey'  			SharedEntityType = "NegativeKeywordList"'  		}  	};  	var uploadEntities = new List<BulkEntity> ();  	uploadEntities.Add (bulkCampaign);  	foreach (var bulkCampaignNegativeKeyword in bulkCampaignNegativeKeywords) {  		uploadEntities.Add (bulkCampaignNegativeKeyword);  	}  	uploadEntities.Add (bulkNegativeKeywordList);  	foreach (var bulkSharedNegativeKeyword in bulkSharedNegativeKeywords) {  		uploadEntities.Add (bulkSharedNegativeKeyword);  	}  	uploadEntities.Add (bulkCampaignNegativeKeywordList);  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignNegativeKeywordResults = downloadEntities.OfType<BulkCampaignNegativeKeyword> ().ToList ();  	OutputBulkCampaignNegativeKeywords (campaignNegativeKeywordResults);  	var negativeKeywordListResults = downloadEntities.OfType<BulkNegativeKeywordList> ().ToList ();  	OutputBulkNegativeKeywordLists (negativeKeywordListResults);  	var sharedNegativeKeywordListResults = downloadEntities.OfType<BulkSharedNegativeKeyword> ().ToList ();  	OutputBulkSharedNegativeKeywords (sharedNegativeKeywordListResults);  	var campaignNegativeKeywordListResults = downloadEntities.OfType<BulkCampaignNegativeKeywordList> ().ToList ();  	OutputBulkCampaignNegativeKeywordLists (campaignNegativeKeywordListResults);  	Reader.Dispose ();  	#endregion Add  	#region CleanUp  	//Delete the campaign and negative keywords that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignNegativeKeyword   	//are deleted without being specified explicitly.    	//When you delete a BulkNegativeKeywordList' the dependent entities such as BulkSharedNegativeKeyword   	//are deleted without being specified explicitly.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	foreach (var negativeKeywordListResult in negativeKeywordListResults) {  		negativeKeywordListResult.Status = Status.Deleted;  		uploadEntities.Add (negativeKeywordListResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and negative keywords . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	OutputBulkNegativeKeywordLists (downloadEntities.OfType<BulkNegativeKeywordList> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkNegativeSites,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkNegativeSites.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// You can specify one negative site per BulkCampaignNegativeSite (singular)' or multiple negative sites  	// in a BulkCampaignNegativeSites (plural) object.  	var bulkCampaignNegativeSite = new BulkCampaignNegativeSite[] {  		new BulkCampaignNegativeSite {  			// CampaignName will be ignored if you specify CampaignId.  			CampaignName = null'  			CampaignId = campaignIdKey'  			Website = "contoso.com/negativesite1"  		}'  		new BulkCampaignNegativeSite {  			CampaignId = campaignIdKey'  			Website = "contoso.com/negativesite2"  		}'  	};  	// If you upload a BulkCampaignNegativeSites bulk entity' then you are effectively replacing any existing   	// negative sites assigned to the campaign. Thus' when a BulkCampaignNegativeSites entity is written to the   	// upload file' an extra Campaign Negative Site record is included where the Status is Deleted and the   	// Website field is empty.   	// That said' if you include additional BulkCampaignNegativeSite or BulkCampaignNegativeSites in the same upload'   	// they will be included in the new set of negative sites.  	var bulkCampaignNegativeSites = new BulkCampaignNegativeSites[] {  		new BulkCampaignNegativeSites {  			// CampaignName will be ignored if you specify CampaignId.  			CampaignName = null'  			CampaignNegativeSites = new CampaignNegativeSites {  				CampaignId = campaignIdKey'  				NegativeSites = new string[] {  					"contoso.com/negativesite3"'  					"contoso.com/negativesite4"'  				}  			}  		}'  	};  	var uploadEntities = new List<BulkEntity> ();  	uploadEntities.Add (bulkCampaign);  	foreach (var campaignNegativeSite in bulkCampaignNegativeSite) {  		uploadEntities.Add (campaignNegativeSite);  	}  	foreach (var campaignNegativeSites in bulkCampaignNegativeSites) {  		uploadEntities.Add (campaignNegativeSites);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	// If you modify the sample to upload only BulkCampaignNegativeSite entities for a campaign' the SDK will abstract    	// the results file contents as one or more BulkCampaignNegativeSite. If you upload both BulkCampaignNegativeSite   	// and BulkCampaignNegativeSites as shown above' then the SDK will abstract the results file contents as a   	// BulkCampaignNegativeSites object containing all of the negative sites for the campaign'   	// including those uploaded as a BulkCampaignNegativeSite.   	// Whether you use the SDK to upload the entities' or only use the SDK to read an upload results file'  	// the SDK will abstract the results file as follows:  	// If the file contains an extra Campaign Negative Site record where the Status is Deleted and the   	// Website field is empty' the SDK returns a BulkCampaignNegativeSites (plural) object.  	// Otherwise the SDK returns one or more BulkCampaignNegativeSite (singlular) objects.  	var campaignNegativeSiteResults = downloadEntities.OfType<BulkCampaignNegativeSite> ().ToList ();  	OutputBulkCampaignNegativeSite (campaignNegativeSiteResults);  	var campaignNegativeSitesResults = downloadEntities.OfType<BulkCampaignNegativeSites> ().ToList ();  	OutputBulkCampaignNegativeSites (campaignNegativeSitesResults);  	Reader.Dispose ();  	#endregion Add  	#region CleanUp  	//Delete the campaign and negative sites that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignNegativeSite   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign and negative sites . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.AdGroupProductPartitions'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	// Download all product partitions across all ad groups in the account.  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all product partitions across all ad groups in the account.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	var downloadEntities = Reader.ReadEntities ().ToList ().OfType<BulkAdGroupProductPartition> ().ToList ();  	OutputBulkAdGroupProductPartitions (downloadEntities);  	var uploadEntities = new List<BulkEntity> ();  	// Within the downloaded records' find all product partition leaf nodes that have bids.  	foreach (var entity in downloadEntities) {  		var biddableAdGroupCriterion = ((BulkAdGroupProductPartition)entity).AdGroupCriterion as BiddableAdGroupCriterion;  		if (biddableAdGroupCriterion != null && (((ProductPartition)(entity.AdGroupCriterion.Criterion)).PartitionType == ProductPartitionType.Unit)) {  			// Increase all bids by some predetermined amount or percentage.   			// Implement your own logic to update bids by varying amounts.  			((FixedBid)((BiddableAdGroupCriterion)((BulkAdGroupProductPartition)entity).AdGroupCriterion).CriterionBid).Bid.Amount += .01;  			uploadEntities.Add (entity);  		}  	}  	Reader.Dispose ();  	if (uploadEntities.Count > 0) {  		OutputStatusMessage ("Changed local bid of all product partitions. Starting upload.\n");  		Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  		downloadEntities = Reader.ReadEntities ().ToList ().OfType<BulkAdGroupProductPartition> ().ToList ();  		OutputBulkAdGroupProductPartitions (downloadEntities);  		Reader.Dispose ();  	}  	else {  		OutputStatusMessage ("No product partitions in account. \n");  	}  	OutputStatusMessage ("Program execution completed\n");  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The following statement contains a magic number: foreach (var entity in downloadEntities) {  	var biddableAdGroupCriterion = ((BulkAdGroupProductPartition)entity).AdGroupCriterion as BiddableAdGroupCriterion;  	if (biddableAdGroupCriterion != null && (((ProductPartition)(entity.AdGroupCriterion.Criterion)).PartitionType == ProductPartitionType.Unit)) {  		// Increase all bids by some predetermined amount or percentage.   		// Implement your own logic to update bids by varying amounts.  		((FixedBid)((BiddableAdGroupCriterion)((BulkAdGroupProductPartition)entity).AdGroupCriterion).CriterionBid).Bid.Amount += .01;  		uploadEntities.Add (entity);  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The following statement contains a magic number: if (biddableAdGroupCriterion != null && (((ProductPartition)(entity.AdGroupCriterion.Criterion)).PartitionType == ProductPartitionType.Unit)) {  	// Increase all bids by some predetermined amount or percentage.   	// Implement your own logic to update bids by varying amounts.  	((FixedBid)((BiddableAdGroupCriterion)((BulkAdGroupProductPartition)entity).AdGroupCriterion).CriterionBid).Bid.Amount += .01;  	uploadEntities.Add (entity);  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkProductPartitionUpdateBid,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkProductPartitionUpdateBid.cs,RunAsync,The following statement contains a magic number: ((FixedBid)((BiddableAdGroupCriterion)((BulkAdGroupProductPartition)entity).AdGroupCriterion).CriterionBid).Bid.Amount += .01;  
Magic Number,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.RemarketingLists'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all remarketing lists that the current user can associate with ad groups.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var remarketingListResults = downloadEntities.OfType<BulkRemarketingList> ().ToList ();  	OutputBulkRemarketingLists (remarketingListResults);  	Reader.Dispose ();  	// You must already have at least one remarketing list. The Bing Ads API does not support  	// remarketing list add' update' or delete operations.  	if (remarketingListResults.Count < 1) {  		OutputStatusMessage ("You do not have any remarketing lists that the current user can associate with ad groups.\n");  		return;  	}  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	// Prepare the bulk entities that you want to upload.    	var bulkCampaign = new BulkCampaign {  		Campaign = new Campaign {  			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BiddingScheme = new ManualCpcBiddingScheme ()'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			TrackingUrlTemplate = null  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkAdGroup' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the    			// ad group Id will be used when associating this new ad group with a new ad group remarketing list association  			// in the BulkAdGroupRemarketingListAssociation object below.   			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			BiddingScheme = new InheritFromParentBiddingScheme ()'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			TrackingUrlTemplate = null'  			// Applicable for all remarketing lists that are associated with this ad group. TargetAndBid indicates   			// that you want to show ads only to people included in the remarketing list' with the option to change  			// the bid amount. Ads in this ad group will only show to people included in the remarketing list.  			RemarketingTargetingSetting = RemarketingTargetingSetting.TargetAndBid'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	// This example associates all of the remarketing lists with the new ad group.  	foreach (var remarketingList in remarketingListResults) {  		if (remarketingList.RemarketingList != null && remarketingList.RemarketingList.Id != null) {  			var BulkAdGroupRemarketingListAssociation = new BulkAdGroupRemarketingListAssociation {  				ClientId = "MyBulkAdGroupRemarketingListAssociation " + remarketingList.RemarketingList.Id'  				AdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  					AdGroupId = adGroupIdKey'  					BidAdjustment = 20.00'  					RemarketingListId = (long)remarketingList.RemarketingList.Id'  					Status = AdGroupRemarketingListAssociationStatus.Paused  				}'  			};  			uploadEntities.Add (BulkAdGroupRemarketingListAssociation);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nAdding campaign' ad group' and ad group remarketing list associations...\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var adGroupRemarketingListResults = downloadEntities.OfType<BulkAdGroupRemarketingListAssociation> ().ToList ();  	OutputBulkAdGroupRemarketingListAssociations (adGroupRemarketingListResults);  	Reader.Dispose ();  	#endregion Add  	#region CleanUp  	// Delete the campaign' ad group' and ad group remarketing list associations that were previously added.  	// The remarketing lists will not be deleted.   	// You should remove this region if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	// When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupRemarketingListAssociation   	// are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' and ad group remarketing list associations . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.RemarketingLists'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all remarketing lists that the current user can associate with ad groups.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var remarketingListResults = downloadEntities.OfType<BulkRemarketingList> ().ToList ();  	OutputBulkRemarketingLists (remarketingListResults);  	Reader.Dispose ();  	// You must already have at least one remarketing list. The Bing Ads API does not support  	// remarketing list add' update' or delete operations.  	if (remarketingListResults.Count < 1) {  		OutputStatusMessage ("You do not have any remarketing lists that the current user can associate with ad groups.\n");  		return;  	}  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	// Prepare the bulk entities that you want to upload.    	var bulkCampaign = new BulkCampaign {  		Campaign = new Campaign {  			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BiddingScheme = new ManualCpcBiddingScheme ()'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			TrackingUrlTemplate = null  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkAdGroup' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the    			// ad group Id will be used when associating this new ad group with a new ad group remarketing list association  			// in the BulkAdGroupRemarketingListAssociation object below.   			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			BiddingScheme = new InheritFromParentBiddingScheme ()'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			TrackingUrlTemplate = null'  			// Applicable for all remarketing lists that are associated with this ad group. TargetAndBid indicates   			// that you want to show ads only to people included in the remarketing list' with the option to change  			// the bid amount. Ads in this ad group will only show to people included in the remarketing list.  			RemarketingTargetingSetting = RemarketingTargetingSetting.TargetAndBid'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	// This example associates all of the remarketing lists with the new ad group.  	foreach (var remarketingList in remarketingListResults) {  		if (remarketingList.RemarketingList != null && remarketingList.RemarketingList.Id != null) {  			var BulkAdGroupRemarketingListAssociation = new BulkAdGroupRemarketingListAssociation {  				ClientId = "MyBulkAdGroupRemarketingListAssociation " + remarketingList.RemarketingList.Id'  				AdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  					AdGroupId = adGroupIdKey'  					BidAdjustment = 20.00'  					RemarketingListId = (long)remarketingList.RemarketingList.Id'  					Status = AdGroupRemarketingListAssociationStatus.Paused  				}'  			};  			uploadEntities.Add (BulkAdGroupRemarketingListAssociation);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nAdding campaign' ad group' and ad group remarketing list associations...\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var adGroupRemarketingListResults = downloadEntities.OfType<BulkAdGroupRemarketingListAssociation> ().ToList ();  	OutputBulkAdGroupRemarketingListAssociations (adGroupRemarketingListResults);  	Reader.Dispose ();  	#endregion Add  	#region CleanUp  	// Delete the campaign' ad group' and ad group remarketing list associations that were previously added.  	// The remarketing lists will not be deleted.   	// You should remove this region if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	// When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupRemarketingListAssociation   	// are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' and ad group remarketing list associations . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.RemarketingLists'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all remarketing lists that the current user can associate with ad groups.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var remarketingListResults = downloadEntities.OfType<BulkRemarketingList> ().ToList ();  	OutputBulkRemarketingLists (remarketingListResults);  	Reader.Dispose ();  	// You must already have at least one remarketing list. The Bing Ads API does not support  	// remarketing list add' update' or delete operations.  	if (remarketingListResults.Count < 1) {  		OutputStatusMessage ("You do not have any remarketing lists that the current user can associate with ad groups.\n");  		return;  	}  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	// Prepare the bulk entities that you want to upload.    	var bulkCampaign = new BulkCampaign {  		Campaign = new Campaign {  			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BiddingScheme = new ManualCpcBiddingScheme ()'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			TrackingUrlTemplate = null  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkAdGroup' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the    			// ad group Id will be used when associating this new ad group with a new ad group remarketing list association  			// in the BulkAdGroupRemarketingListAssociation object below.   			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			BiddingScheme = new InheritFromParentBiddingScheme ()'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			TrackingUrlTemplate = null'  			// Applicable for all remarketing lists that are associated with this ad group. TargetAndBid indicates   			// that you want to show ads only to people included in the remarketing list' with the option to change  			// the bid amount. Ads in this ad group will only show to people included in the remarketing list.  			RemarketingTargetingSetting = RemarketingTargetingSetting.TargetAndBid'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	// This example associates all of the remarketing lists with the new ad group.  	foreach (var remarketingList in remarketingListResults) {  		if (remarketingList.RemarketingList != null && remarketingList.RemarketingList.Id != null) {  			var BulkAdGroupRemarketingListAssociation = new BulkAdGroupRemarketingListAssociation {  				ClientId = "MyBulkAdGroupRemarketingListAssociation " + remarketingList.RemarketingList.Id'  				AdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  					AdGroupId = adGroupIdKey'  					BidAdjustment = 20.00'  					RemarketingListId = (long)remarketingList.RemarketingList.Id'  					Status = AdGroupRemarketingListAssociationStatus.Paused  				}'  			};  			uploadEntities.Add (BulkAdGroupRemarketingListAssociation);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nAdding campaign' ad group' and ad group remarketing list associations...\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var adGroupRemarketingListResults = downloadEntities.OfType<BulkAdGroupRemarketingListAssociation> ().ToList ();  	OutputBulkAdGroupRemarketingListAssociations (adGroupRemarketingListResults);  	Reader.Dispose ();  	#endregion Add  	#region CleanUp  	// Delete the campaign' ad group' and ad group remarketing list associations that were previously added.  	// The remarketing lists will not be deleted.   	// You should remove this region if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	// When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupRemarketingListAssociation   	// are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' and ad group remarketing list associations . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	var downloadParameters = new DownloadParameters {  		Entities = BulkDownloadEntity.RemarketingLists'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true'  		LastSyncTimeInUTC = null  	};  	var bulkFilePath = await BulkService.DownloadFileAsync (downloadParameters);  	OutputStatusMessage ("Downloaded all remarketing lists that the current user can associate with ad groups.\n");  	Reader = new BulkFileReader (bulkFilePath' ResultFileType.FullDownload' FileType);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var remarketingListResults = downloadEntities.OfType<BulkRemarketingList> ().ToList ();  	OutputBulkRemarketingLists (remarketingListResults);  	Reader.Dispose ();  	// You must already have at least one remarketing list. The Bing Ads API does not support  	// remarketing list add' update' or delete operations.  	if (remarketingListResults.Count < 1) {  		OutputStatusMessage ("You do not have any remarketing lists that the current user can associate with ad groups.\n");  		return;  	}  	var uploadEntities = new List<BulkEntity> ();  	#region Add  	// Prepare the bulk entities that you want to upload.    	var bulkCampaign = new BulkCampaign {  		Campaign = new Campaign {  			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BiddingScheme = new ManualCpcBiddingScheme ()'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  			TrackingUrlTemplate = null  		}  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkAdGroup' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the    			// ad group Id will be used when associating this new ad group with a new ad group remarketing list association  			// in the BulkAdGroupRemarketingListAssociation object below.   			Id = adGroupIdKey'  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			BiddingScheme = new InheritFromParentBiddingScheme ()'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active'  			TrackingUrlTemplate = null'  			// Applicable for all remarketing lists that are associated with this ad group. TargetAndBid indicates   			// that you want to show ads only to people included in the remarketing list' with the option to change  			// the bid amount. Ads in this ad group will only show to people included in the remarketing list.  			RemarketingTargetingSetting = RemarketingTargetingSetting.TargetAndBid'  		}'  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	// This example associates all of the remarketing lists with the new ad group.  	foreach (var remarketingList in remarketingListResults) {  		if (remarketingList.RemarketingList != null && remarketingList.RemarketingList.Id != null) {  			var BulkAdGroupRemarketingListAssociation = new BulkAdGroupRemarketingListAssociation {  				ClientId = "MyBulkAdGroupRemarketingListAssociation " + remarketingList.RemarketingList.Id'  				AdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  					AdGroupId = adGroupIdKey'  					BidAdjustment = 20.00'  					RemarketingListId = (long)remarketingList.RemarketingList.Id'  					Status = AdGroupRemarketingListAssociationStatus.Paused  				}'  			};  			uploadEntities.Add (BulkAdGroupRemarketingListAssociation);  		}  	}  	// Upload and write the output  	OutputStatusMessage ("\nAdding campaign' ad group' and ad group remarketing list associations...\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var adGroupRemarketingListResults = downloadEntities.OfType<BulkAdGroupRemarketingListAssociation> ().ToList ();  	OutputBulkAdGroupRemarketingListAssociations (adGroupRemarketingListResults);  	Reader.Dispose ();  	#endregion Add  	#region CleanUp  	// Delete the campaign' ad group' and ad group remarketing list associations that were previously added.  	// The remarketing lists will not be deleted.   	// You should remove this region if you want to view the added entities in the   	// Bing Ads web application or another tool.  	// You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	// When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupRemarketingListAssociation   	// are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' and ad group remarketing list associations . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The following statement contains a magic number: foreach (var remarketingList in remarketingListResults) {  	if (remarketingList.RemarketingList != null && remarketingList.RemarketingList.Id != null) {  		var BulkAdGroupRemarketingListAssociation = new BulkAdGroupRemarketingListAssociation {  			ClientId = "MyBulkAdGroupRemarketingListAssociation " + remarketingList.RemarketingList.Id'  			AdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  				AdGroupId = adGroupIdKey'  				BidAdjustment = 20.00'  				RemarketingListId = (long)remarketingList.RemarketingList.Id'  				Status = AdGroupRemarketingListAssociationStatus.Paused  			}'  		};  		uploadEntities.Add (BulkAdGroupRemarketingListAssociation);  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkRemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkRemarketingLists.cs,RunAsync,The following statement contains a magic number: if (remarketingList.RemarketingList != null && remarketingList.RemarketingList.Id != null) {  	var BulkAdGroupRemarketingListAssociation = new BulkAdGroupRemarketingListAssociation {  		ClientId = "MyBulkAdGroupRemarketingListAssociation " + remarketingList.RemarketingList.Id'  		AdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  			AdGroupId = adGroupIdKey'  			BidAdjustment = 20.00'  			RemarketingListId = (long)remarketingList.RemarketingList.Id'  			Status = AdGroupRemarketingListAssociationStatus.Paused  		}'  	};  	uploadEntities.Add (BulkAdGroupRemarketingListAssociation);  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	BulkService.StatusPollIntervalInMilliseconds = 5000;  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	// In this example we will download all ads and keywords in the account.  	var entities = BulkDownloadEntity.Ads | BulkDownloadEntity.Keywords;  	// DownloadParameters is used for Option A below.  	var downloadParameters = new DownloadParameters {  		CampaignIds = null'  		DataScope = DataScope.EntityData | DataScope.EntityPerformanceData'  		PerformanceStatsDateRange = new PerformanceStatsDateRange {  			PredefinedTime = ReportTimePeriod.LastFourWeeks  		}'  		Entities = entities'  		FileType = FileType'  		LastSyncTimeInUTC = null'  		ResultFileDirectory = FileDirectory'  		ResultFileName = DownloadFileName'  		OverwriteResultFile = true  	};  	// SubmitDownloadParameters is used for Option B and Option C below.  	var submitDownloadParameters = new SubmitDownloadParameters {  		CampaignIds = null'  		DataScope = DataScope.EntityData | DataScope.EntityPerformanceData'  		PerformanceStatsDateRange = new PerformanceStatsDateRange {  			PredefinedTime = ReportTimePeriod.LastFourWeeks  		}'  		Entities = entities'  		FileType = FileType'  		LastSyncTimeInUTC = null  	};  	// Option A - Background Completion with BulkServiceManager  	// You can submit a download or upload request and the BulkServiceManager will automatically   	// return results. The BulkServiceManager abstracts the details of checking for result file   	// completion' and you don't have to write any code for results polling.  	OutputStatusMessage ("Awaiting Background Completion . . .");  	await BackgroundCompletionAsync (downloadParameters' progress);  	// Option B - Submit and Download with BulkServiceManager  	// Submit the download request and then use the BulkDownloadOperation result to   	// track status until the download is complete e.g. either using  	// TrackAsync or GetStatusAsync.  	//OutputStatusMessage("Awaiting Submit and Download . . .");  	//await SubmitAndDownloadAsync(submitDownloadParameters);  	// Option C - Download Results with BulkServiceManager  	// If for any reason you have to resume from a previous application state'   	// you can use an existing download request identifier and use it   	// to download the result file.   	// For example you might have previously retrieved a request ID using SubmitDownloadAsync.  	//var bulkDownloadOperation = await BulkService.SubmitDownloadAsync(submitDownloadParameters);  	//var requestId = bulkDownloadOperation.RequestId;  	// Given the request ID above' you can resume the workflow and download the bulk file.  	// The download request identifier is valid for two days.   	// If you do not download the bulk file within two days' you must request it again.  	//OutputStatusMessage("Awaiting Download Results . . .");  	//await DownloadResultsAsync(requestId' authorizationData);  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (String.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (String.Join ("; "' ex.Detail.Errors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (String.Join ("; "' ex.Detail.OperationErrors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (String.Join ("; "' ex.Detail.BatchErrors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkServiceManagerDemo,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkServiceManagerDemo.cs,RunAsync,The following statement contains a magic number: BulkService.StatusPollIntervalInMilliseconds = 5000;  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	#region CampaignThroughAdGroupSetup  	// You will need to use the Campaign Management service to get the Bing Merchant Center Store Id. This will be used  	// when creating a new Bing Shopping Campaign.  	// For other operations such as adding product conditions' you can manage Bing Shopping Campaigns solely with the Bulk Service.   	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	const int campaignIdKey = -123;  	const int adGroupIdKey = -1234;  	var uploadEntities = new List<BulkEntity> ();  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new campaign product scope in the BulkCampaignProductScope object below.   			Id = campaignIdKey'  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var bulkCampaignProductScope = new BulkCampaignProductScope {  		CampaignCriterion = new CampaignCriterion () {  			CampaignId = campaignIdKey'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}'  		Status = Status.Active'  	};  	// Specify one or more ad groups.  	var bulkAdGroup = new BulkAdGroup {  		CampaignId = campaignIdKey'  		AdGroup = new AdGroup {  			Id = adGroupIdKey'  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"'  			Status = AdGroupStatus.Active  		}'  	};  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var bulkProductAd = new BulkProductAd {  		AdGroupId = adGroupIdKey'  		ProductAd = new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}  	};  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkAdGroup);  	uploadEntities.Add (bulkCampaignProductScope);  	uploadEntities.Add (bulkProductAd);  	// Upload and write the output  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var adGroupResults = downloadEntities.OfType<BulkAdGroup> ().ToList ();  	OutputBulkAdGroups (adGroupResults);  	var productAdResults = downloadEntities.OfType<BulkProductAd> ().ToList ();  	OutputBulkProductAds (productAdResults);  	var campaignProductScopeResults = downloadEntities.OfType<BulkCampaignProductScope> ().ToList ();  	OutputBulkCampaignProductScopes (campaignProductScopeResults);  	Reader.Dispose ();  	#endregion CampaignThroughAdGroupSetup  	#region BidAllProducts  	var adGroupId = (long)adGroupResults [0].AdGroup.Id;  	var helper = new ProductPartitionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false' "root");  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	var productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (productPartitions);  	/*                  * Let's update the bid of the root Unit we just added.                  */var updatedRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	var bid = new FixedBid {  		Bid = new Bid {  			Amount = 0.45  		}  	};  	((BiddableAdGroupCriterion)(updatedRoot.AdGroupCriterion)).CriterionBid = bid;  	helper = new ProductPartitionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (productPartitions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 20'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from bulk upload to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new ProductPartitionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */var existingRoot = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root");  	if (existingRoot != null) {  		existingRoot.ClientId = "deletedroot";  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' "root");  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	}' "animalsSubdivision");  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	}' "petSuppliesSubdivision");  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false' "brandA");  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true' "brandB");  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherBrands");  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false' "otherPetSupplies");  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false' "electronics");  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false' "otherCategoryL1");  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (productPartitions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new ProductPartitionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node). The node that we are replacing is Electronics (CategoryL1).                   */var rootId = GetNodeByClientId (applyBulkProductPartitionActionsResults' "root").AdGroupCriterion.Id;  	electronics.AdGroupCriterion.Id = GetNodeByClientId (applyBulkProductPartitionActionsResults' "electronics").AdGroupCriterion.Id;  	helper.DeletePartition (electronics);  	var parent = new BulkAdGroupProductPartition {  		AdGroupCriterion = new BiddableAdGroupCriterion () {  			Id = rootId  		}  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' "electronicsSubdivision");  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false' "brandC");  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false' "brandD");  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false' "otherElectronicsBrands");  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyBulkProductPartitionActionsResults = await ApplyBulkProductPartitionActions (helper.PartitionActions);  	productPartitions = await GetBulkAdGroupProductPartitionTree (adGroupId);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (productPartitions);  	#endregion UpdateTree  	#region CleanUp  	//Delete the campaign' ad group' criterion' and ad that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkAdGroup and BulkAdGroupProductPartition   	//are deleted without being specified explicitly.    	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("Deleting the campaign' product conditions' ad group' product partitions' and product ad... \n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,BulkTargets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkTargets.cs,RunAsync,The following statement contains a magic number: try {  	BulkService = new BulkServiceManager (authorizationData);  	var progress = new Progress<BulkOperationProgressInfo> (x => OutputStatusMessage (String.Format ("{0} % Complete"' x.PercentComplete.ToString (CultureInfo.InvariantCulture))));  	#region Add  	const int targetIdKey = -1;  	const int campaignIdKey = -123;  	var uploadEntities = new List<BulkEntity> ();  	// Prepare the bulk entities that you want to upload. Each bulk entity contains the corresponding campaign management object'   	// and additional elements needed to read from and write to a bulk file.   	var bulkCampaign = new BulkCampaign {  		// ClientId may be used to associate records in the bulk upload file with records in the results file. The value of this field   		// is not used or stored by the server; it is simply copied from the uploaded record to the corresponding result record.  		// Note: This bulk file Client Id is not related to an application Client Id for OAuth.   		ClientId = "YourClientIdGoesHere"'  		Campaign = new Campaign {  			// When using the Campaign Management service' the Id cannot be set. In the context of a BulkCampaign' the Id is optional   			// and may be used as a negative reference key during bulk upload. For example the same negative value set for the campaign Id   			// will be used when associating this new campaign with a new call ad extension in the BulkCampaignCallAdExtension object below.   			Id = campaignIdKey'  			Name = "Women's Shoes " + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			// DaylightSaving is not supported in the Bulk file schema. Whether or not you specify it in a BulkCampaign'  			// the value is not written to the Bulk file' and by default DaylightSaving is set to true.  			DaylightSaving = true'  		}  	};  	// Prepare targets for upload  	var bulkCampaignDayTimeTarget = new BulkCampaignDayTimeTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		DayTimeTarget = new DayTimeTarget {  			Bids = new List<DayTimeTargetBid> {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}'  				new DayTimeTargetBid {  					BidAdjustment = 20'  					Day = Day.Saturday'  					FromHour = 11'  					FromMinute = Minute.Zero'  					ToHour = 13'  					ToMinute = Minute.Fifteen  				}  			}  		}  	};  	var bulkCampaignLocationTarget = new BulkCampaignLocationTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		IntentOption = IntentOption.PeopleIn'  		CityTarget = new CityTarget {  			Bids = new List<CityTargetBid> {  				new CityTargetBid {  					BidAdjustment = 15'  					City = "Toronto' Toronto ON CA"'  					IsExcluded = false  				}  			}  		}'  		CountryTarget = new CountryTarget {  			Bids = new List<CountryTargetBid> {  				new CountryTargetBid {  					BidAdjustment = 15'  					CountryAndRegion = "CA"'  					IsExcluded = false  				}  			}  		}'  		MetroAreaTarget = new MetroAreaTarget {  			Bids = new List<MetroAreaTargetBid> {  				new MetroAreaTargetBid {  					BidAdjustment = 15'  					MetroArea = "Seattle-Tacoma' WA' WA US"'  					IsExcluded = false  				}  			}  		}'  		StateTarget = new StateTarget {  			Bids = new List<StateTargetBid> {  				new StateTargetBid {  					BidAdjustment = 15'  					State = "US-WA"'  					IsExcluded = false  				}  			}  		}'  		PostalCodeTarget = new PostalCodeTarget {  			Bids = new List<PostalCodeTargetBid> {  				new PostalCodeTargetBid {  					// Bid adjustments are not allowed for location exclusions.   					// If IsExcluded is true' this element will be ignored.  					BidAdjustment = 10'  					PostalCode = "98052' WA US"'  					IsExcluded = false  				}  			}  		}  	};  	var bulkCampaignRadiusTarget = new BulkCampaignRadiusTarget {  		CampaignId = campaignIdKey'  		TargetId = targetIdKey'  		RadiusTarget = new RadiusTarget {  			Bids = new List<RadiusTargetBid> {  				new RadiusTargetBid {  					BidAdjustment = 50'  					LatitudeDegrees = 47.755367'  					LongitudeDegrees = -122.091827'  					Radius = 11'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius1"  				}'  				new RadiusTargetBid {  					BidAdjustment = 20'  					LatitudeDegrees = 49.755367'  					LongitudeDegrees = -129.091827'  					Radius = 12'  					RadiusUnit = DistanceUnit.Kilometers'  					Name = "radius2"  				}  			}  		}  	};  	// Upload the entities created above.  	uploadEntities.Add (bulkCampaign);  	uploadEntities.Add (bulkCampaignDayTimeTarget);  	uploadEntities.Add (bulkCampaignLocationTarget);  	uploadEntities.Add (bulkCampaignRadiusTarget);  	var Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	var downloadEntities = Reader.ReadEntities ().ToList ();  	// Upload and write the output  	var campaignResults = downloadEntities.OfType<BulkCampaign> ().ToList ();  	OutputBulkCampaigns (campaignResults);  	var campaignDayTimeTargetResults = downloadEntities.OfType<BulkCampaignDayTimeTarget> ().ToList ();  	OutputBulkCampaignDayTimeTargets (campaignDayTimeTargetResults);  	var campaignLocationTargetResults = downloadEntities.OfType<BulkCampaignLocationTarget> ().ToList ();  	OutputBulkCampaignLocationTargets (campaignLocationTargetResults);  	var campaignRadiusTargetResults = downloadEntities.OfType<BulkCampaignRadiusTarget> ().ToList ();  	OutputBulkCampaignRadiusTargets (campaignRadiusTargetResults);  	Reader.Dispose ();  	#endregion Add  	#region Update  	// Update the day and time target.   	// Do not create a BulkCampaignDayTimeTarget for update' unless you want to replace all existing DayTime target bids  	// with the specified day and time target set for the current bulk upload.   	// Instead you should upload one or more BulkCampaignDayTimeTargetBid.  	var bulkCampaignDayTimeTargetBids = new List<BulkCampaignDayTimeTargetBid> {  		new BulkCampaignDayTimeTargetBid {  			CampaignId = campaignDayTimeTargetResults [0].CampaignId'  			TargetId = campaignDayTimeTargetResults [0].TargetId'  			DayTimeTargetBid = new DayTimeTargetBid {  				BidAdjustment = 15'  				Day = Day.Friday'  				FromHour = 11'  				FromMinute = Minute.Zero'  				ToHour = 13'  				ToMinute = Minute.Fifteen  			}  		}  	};  	// Upload the updated target  	uploadEntities = new List<BulkEntity> ();  	foreach (var bulkCampaignDayTimeTargetBid in bulkCampaignDayTimeTargetBids) {  		uploadEntities.Add (bulkCampaignDayTimeTargetBid);  	}  	// Upload and write the output  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	OutputStatusMessage ("Upload Results Bulk File Path" + Reader.BulkFilePath + "\n");  	OutputStatusMessage ("Updated Entities\n");  	downloadEntities = Reader.ReadEntities ().ToList ();  	var campaignDayTimeTargetBidResults = downloadEntities.OfType<BulkCampaignDayTimeTargetBid> ().ToList ();  	OutputBulkCampaignDayTimeTargetBids (campaignDayTimeTargetBidResults);  	Reader.Dispose ();  	#endregion Update  	#region CleanUp  	//Delete the campaign and target associations that were previously added.   	//You should remove this region if you want to view the added entities in the   	//Bing Ads web application or another tool.  	//You must set the Id field to the corresponding entity identifier' and the Status field to Deleted.  	//When you delete a BulkCampaign' the dependent entities such as BulkCampaignDayTimeTarget   	//are deleted without being specified explicitly.    	//Deleting targets is not supported using the Bulk service.  	//To delete targets you can use the DeleteTargetsFromLibrary operation via the Campaign Management service.  	uploadEntities = new List<BulkEntity> ();  	foreach (var campaignResult in campaignResults) {  		campaignResult.Campaign.Status = CampaignStatus.Deleted;  		uploadEntities.Add (campaignResult);  	}  	// Upload and write the output  	OutputStatusMessage ("\nDeleting campaign' ad group' keywords' and ads . . .\n");  	Reader = await WriteEntitiesAndUploadFileAsync (uploadEntities);  	downloadEntities = Reader.ReadEntities ().ToList ();  	OutputBulkCampaigns (downloadEntities.OfType<BulkCampaign> ().ToList ());  	Reader.Dispose ();  	#endregion Cleanup  }  // Catch Microsoft Account authorization exceptions.  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Bulk service exceptions  catch (FaultException<Microsoft.BingAds.V10.Bulk.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.Bulk.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the bulk operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (BulkOperationCouldNotBeCompletedException<DownloadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (BulkOperationCouldNotBeCompletedException<UploadStatus> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  finally {  	if (Reader != null) {  		Reader.Dispose ();  	}  	if (Writer != null) {  		Writer.Dispose ();  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Before you can track conversions or target audiences using a remarketing list'   	// you need to create a UET tag in Bing Ads (web application or API) and then   	// add the UET tag tracking code to every page of your website. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// First you should call the GetUetTagsByIds operation to check whether a tag has already been created.   	// You can leave the TagIds element null or empty to request all UET tags available for the customer.  	var uetTags = (await GetUetTagsByIdsAsync (null)).UetTags;  	// If you do not already have a UET tag that can be used' or if you need another UET tag'   	// call the AddUetTags service operation to create a new UET tag. If the call is successful'   	// the tracking script that you should add to your website is included in a corresponding   	// UetTag within the response message.   	if (uetTags == null || uetTags.Count < 1) {  		var uetTag = new UetTag {  			Description = "My First Uet Tag"'  			Name = "New Uet Tag"'  		};  		uetTags = (await AddUetTagsAsync (new[] {  			uetTag  		})).UetTags;  	}  	if (uetTags == null || uetTags.Count < 1) {  		OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	OutputStatusMessage ("List of all UET Tags:\n");  	foreach (var uetTag in uetTags) {  		OutputUetTag (uetTag);  	}  	// After you retreive the tracking script from the AddUetTags or GetUetTagsByIds operation'   	// the next step is to add the UET tag tracking code to your website. We recommend that you'   	// or your website administrator' add it to your entire website in either the head or body sections.   	// If your website has a master page' then that is the best place to add it because you add it once   	// and it is included on all pages. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// We will use the same UET tag for the remainder of this example.  	var tagId = uetTags [0].Id;  	// Optionally you can update the name and description of a UetTag with the UpdateUetTags operation.  	OutputStatusMessage ("UET Tag BEFORE update:\n");  	OutputUetTag (uetTags [0]);  	uetTags = new[] {  		new UetTag {  			Description = "Updated Uet Tag Description"'  			Id = tagId'  			Name = "Updated Uet Tag Name " + DateTime.UtcNow'  		}  	};  	await UpdateUetTagsAsync (uetTags);  	uetTags = (await GetUetTagsByIdsAsync (new[] {  		(long)tagId  	})).UetTags;  	OutputStatusMessage ("UET Tag AFTER update:\n");  	OutputUetTag (uetTags [0]);  	// Add conversion goals that depend on the UET Tag Id retreived above.  	// Please note that you cannot delete conversion goals. If you want to stop   	// tracking conversions for the goal' you can set the goal status to Paused.  	var conversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumDurationInSeconds = 60'  			Name = "My Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new EventGoal {  			// The type of user interaction you want to track.  			ActionExpression = "play"'  			ActionOperator = ExpressionOperator.Contains'  			// The category of event you want to track.   			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Contains'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			// The name of the element that caused the action.  			LabelExpression = "trailer"'  			LabelOperator = ExpressionOperator.Contains'  			Name = "My Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			// A numerical value associated with that event.   			// Could be length of the video played etc.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumPagesViewed = 5'  			Name = "My Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new UrlGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My Url Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			UrlExpression = "contoso"'  			UrlOperator = ExpressionOperator.Contains  		}'  		new AppInstallGoal {  			// You must provide a valid app platform and app store identifier'   			// otherwise this goal will not be added successfully.   			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My App Install Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// Account scope is not supported for app install goals. You can  			// set scope to Customer or don't set it for the same result.  			Scope = EntityScope.Customer'  			Status = ConversionGoalStatus.Active'  			// The TagId is inherited from the ConversionGoal base class'  			// however' App Install goals do not use a UET tag.  			TagId = null'  		}'  	};  	var addConversionGoalsResponse = await AddConversionGoalsAsync (conversionGoals);  	// Find the conversion goals that were added successfully.   	List<long> conversionGoalIds = new List<long> ();  	foreach (var goalId in addConversionGoalsResponse.ConversionGoalIds) {  		if (goalId != null) {  			conversionGoalIds.Add ((long)goalId);  		}  	}  	OutputStatusMessage ("List of errors returned from AddConversionGoals (if any):\n");  	OutputPartialErrors (addConversionGoalsResponse.PartialErrors);  	var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url;  	var getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals BEFORE update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  	var updateConversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 60'  			CountType = ConversionGoalCountType.Unique'  			// You can change the conversion goal type e.g. in this example an event goal  			// had been created above at index 1. Now we are using the returned identifier  			// at index 1 to update the type from EventGoal to DurationGoal.  			Id = conversionGoalIds [1]'  			MinimumDurationInSeconds = 120'  			Name = "My Updated Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 10.00m'  				CurrencyCode = null  			}'  			// The Scope cannot be updated' even if you update the goal type.  			// You can either send the same value or leave Scope empty.  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Paused'  			// You can update the tag as needed. In this example we will explicitly use the same UET tag.  			// To keep the UET tag unchanged' you can also leave this element nil or empty.  			TagId = tagId'  		}'  		new EventGoal {  			// For both add and update conversion goal operations' you must include one or more    			// of the following events:   			// ActionExpression' CategoryExpression' LabelExpression' or Value.  			// For example if you do not include ActionExpression during update'   			// any existing ActionOperator and ActionExpression settings will be deleted.  			ActionExpression = null'  			ActionOperator = null'  			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Equals'  			Id = conversionGoalIds [0]'  			// You cannot update the operator unless you also include the expression.  			// The following attempt to update LabelOperator will result in an error.  			LabelExpression = null'  			LabelOperator = ExpressionOperator.Equals'  			Name = "My Updated Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// You must specify the previous settings unless you want  			// them replaced during the update conversion goal operation.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			Id = conversionGoalIds [2]'  			Name = "My Updated Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			// When updating a conversion goal' if the Revenue element is nil or empty then none   			// of the nested properties will be updated. However' if this element is not nil or empty   			// then you are effectively replacing any existing revenue properties. For example to delete   			// any previous revenue settings' set the Revenue element to an empty ConversionGoalRevenue object.  			Revenue = new ConversionGoalRevenue ()'  		}'  		new UrlGoal {  			Id = conversionGoalIds [3]'  			Name = "My Updated Url Goal" + DateTime.UtcNow'  			// If not specified during update' the previous Url settings are retained.  			UrlExpression = null'  			UrlOperator = ExpressionOperator.BeginsWith  		}  	};  	var updateConversionGoalsResponse = await UpdateConversionGoalsAsync (updateConversionGoals);  	OutputStatusMessage ("List of errors returned from UpdateConversionGoals (if any):\n");  	OutputPartialErrors (updateConversionGoalsResponse.PartialErrors);  	getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals AFTER update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch ConversionGoal Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Before you can track conversions or target audiences using a remarketing list'   	// you need to create a UET tag in Bing Ads (web application or API) and then   	// add the UET tag tracking code to every page of your website. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// First you should call the GetUetTagsByIds operation to check whether a tag has already been created.   	// You can leave the TagIds element null or empty to request all UET tags available for the customer.  	var uetTags = (await GetUetTagsByIdsAsync (null)).UetTags;  	// If you do not already have a UET tag that can be used' or if you need another UET tag'   	// call the AddUetTags service operation to create a new UET tag. If the call is successful'   	// the tracking script that you should add to your website is included in a corresponding   	// UetTag within the response message.   	if (uetTags == null || uetTags.Count < 1) {  		var uetTag = new UetTag {  			Description = "My First Uet Tag"'  			Name = "New Uet Tag"'  		};  		uetTags = (await AddUetTagsAsync (new[] {  			uetTag  		})).UetTags;  	}  	if (uetTags == null || uetTags.Count < 1) {  		OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	OutputStatusMessage ("List of all UET Tags:\n");  	foreach (var uetTag in uetTags) {  		OutputUetTag (uetTag);  	}  	// After you retreive the tracking script from the AddUetTags or GetUetTagsByIds operation'   	// the next step is to add the UET tag tracking code to your website. We recommend that you'   	// or your website administrator' add it to your entire website in either the head or body sections.   	// If your website has a master page' then that is the best place to add it because you add it once   	// and it is included on all pages. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// We will use the same UET tag for the remainder of this example.  	var tagId = uetTags [0].Id;  	// Optionally you can update the name and description of a UetTag with the UpdateUetTags operation.  	OutputStatusMessage ("UET Tag BEFORE update:\n");  	OutputUetTag (uetTags [0]);  	uetTags = new[] {  		new UetTag {  			Description = "Updated Uet Tag Description"'  			Id = tagId'  			Name = "Updated Uet Tag Name " + DateTime.UtcNow'  		}  	};  	await UpdateUetTagsAsync (uetTags);  	uetTags = (await GetUetTagsByIdsAsync (new[] {  		(long)tagId  	})).UetTags;  	OutputStatusMessage ("UET Tag AFTER update:\n");  	OutputUetTag (uetTags [0]);  	// Add conversion goals that depend on the UET Tag Id retreived above.  	// Please note that you cannot delete conversion goals. If you want to stop   	// tracking conversions for the goal' you can set the goal status to Paused.  	var conversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumDurationInSeconds = 60'  			Name = "My Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new EventGoal {  			// The type of user interaction you want to track.  			ActionExpression = "play"'  			ActionOperator = ExpressionOperator.Contains'  			// The category of event you want to track.   			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Contains'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			// The name of the element that caused the action.  			LabelExpression = "trailer"'  			LabelOperator = ExpressionOperator.Contains'  			Name = "My Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			// A numerical value associated with that event.   			// Could be length of the video played etc.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumPagesViewed = 5'  			Name = "My Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new UrlGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My Url Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			UrlExpression = "contoso"'  			UrlOperator = ExpressionOperator.Contains  		}'  		new AppInstallGoal {  			// You must provide a valid app platform and app store identifier'   			// otherwise this goal will not be added successfully.   			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My App Install Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// Account scope is not supported for app install goals. You can  			// set scope to Customer or don't set it for the same result.  			Scope = EntityScope.Customer'  			Status = ConversionGoalStatus.Active'  			// The TagId is inherited from the ConversionGoal base class'  			// however' App Install goals do not use a UET tag.  			TagId = null'  		}'  	};  	var addConversionGoalsResponse = await AddConversionGoalsAsync (conversionGoals);  	// Find the conversion goals that were added successfully.   	List<long> conversionGoalIds = new List<long> ();  	foreach (var goalId in addConversionGoalsResponse.ConversionGoalIds) {  		if (goalId != null) {  			conversionGoalIds.Add ((long)goalId);  		}  	}  	OutputStatusMessage ("List of errors returned from AddConversionGoals (if any):\n");  	OutputPartialErrors (addConversionGoalsResponse.PartialErrors);  	var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url;  	var getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals BEFORE update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  	var updateConversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 60'  			CountType = ConversionGoalCountType.Unique'  			// You can change the conversion goal type e.g. in this example an event goal  			// had been created above at index 1. Now we are using the returned identifier  			// at index 1 to update the type from EventGoal to DurationGoal.  			Id = conversionGoalIds [1]'  			MinimumDurationInSeconds = 120'  			Name = "My Updated Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 10.00m'  				CurrencyCode = null  			}'  			// The Scope cannot be updated' even if you update the goal type.  			// You can either send the same value or leave Scope empty.  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Paused'  			// You can update the tag as needed. In this example we will explicitly use the same UET tag.  			// To keep the UET tag unchanged' you can also leave this element nil or empty.  			TagId = tagId'  		}'  		new EventGoal {  			// For both add and update conversion goal operations' you must include one or more    			// of the following events:   			// ActionExpression' CategoryExpression' LabelExpression' or Value.  			// For example if you do not include ActionExpression during update'   			// any existing ActionOperator and ActionExpression settings will be deleted.  			ActionExpression = null'  			ActionOperator = null'  			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Equals'  			Id = conversionGoalIds [0]'  			// You cannot update the operator unless you also include the expression.  			// The following attempt to update LabelOperator will result in an error.  			LabelExpression = null'  			LabelOperator = ExpressionOperator.Equals'  			Name = "My Updated Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// You must specify the previous settings unless you want  			// them replaced during the update conversion goal operation.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			Id = conversionGoalIds [2]'  			Name = "My Updated Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			// When updating a conversion goal' if the Revenue element is nil or empty then none   			// of the nested properties will be updated. However' if this element is not nil or empty   			// then you are effectively replacing any existing revenue properties. For example to delete   			// any previous revenue settings' set the Revenue element to an empty ConversionGoalRevenue object.  			Revenue = new ConversionGoalRevenue ()'  		}'  		new UrlGoal {  			Id = conversionGoalIds [3]'  			Name = "My Updated Url Goal" + DateTime.UtcNow'  			// If not specified during update' the previous Url settings are retained.  			UrlExpression = null'  			UrlOperator = ExpressionOperator.BeginsWith  		}  	};  	var updateConversionGoalsResponse = await UpdateConversionGoalsAsync (updateConversionGoals);  	OutputStatusMessage ("List of errors returned from UpdateConversionGoals (if any):\n");  	OutputPartialErrors (updateConversionGoalsResponse.PartialErrors);  	getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals AFTER update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch ConversionGoal Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Before you can track conversions or target audiences using a remarketing list'   	// you need to create a UET tag in Bing Ads (web application or API) and then   	// add the UET tag tracking code to every page of your website. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// First you should call the GetUetTagsByIds operation to check whether a tag has already been created.   	// You can leave the TagIds element null or empty to request all UET tags available for the customer.  	var uetTags = (await GetUetTagsByIdsAsync (null)).UetTags;  	// If you do not already have a UET tag that can be used' or if you need another UET tag'   	// call the AddUetTags service operation to create a new UET tag. If the call is successful'   	// the tracking script that you should add to your website is included in a corresponding   	// UetTag within the response message.   	if (uetTags == null || uetTags.Count < 1) {  		var uetTag = new UetTag {  			Description = "My First Uet Tag"'  			Name = "New Uet Tag"'  		};  		uetTags = (await AddUetTagsAsync (new[] {  			uetTag  		})).UetTags;  	}  	if (uetTags == null || uetTags.Count < 1) {  		OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	OutputStatusMessage ("List of all UET Tags:\n");  	foreach (var uetTag in uetTags) {  		OutputUetTag (uetTag);  	}  	// After you retreive the tracking script from the AddUetTags or GetUetTagsByIds operation'   	// the next step is to add the UET tag tracking code to your website. We recommend that you'   	// or your website administrator' add it to your entire website in either the head or body sections.   	// If your website has a master page' then that is the best place to add it because you add it once   	// and it is included on all pages. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// We will use the same UET tag for the remainder of this example.  	var tagId = uetTags [0].Id;  	// Optionally you can update the name and description of a UetTag with the UpdateUetTags operation.  	OutputStatusMessage ("UET Tag BEFORE update:\n");  	OutputUetTag (uetTags [0]);  	uetTags = new[] {  		new UetTag {  			Description = "Updated Uet Tag Description"'  			Id = tagId'  			Name = "Updated Uet Tag Name " + DateTime.UtcNow'  		}  	};  	await UpdateUetTagsAsync (uetTags);  	uetTags = (await GetUetTagsByIdsAsync (new[] {  		(long)tagId  	})).UetTags;  	OutputStatusMessage ("UET Tag AFTER update:\n");  	OutputUetTag (uetTags [0]);  	// Add conversion goals that depend on the UET Tag Id retreived above.  	// Please note that you cannot delete conversion goals. If you want to stop   	// tracking conversions for the goal' you can set the goal status to Paused.  	var conversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumDurationInSeconds = 60'  			Name = "My Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new EventGoal {  			// The type of user interaction you want to track.  			ActionExpression = "play"'  			ActionOperator = ExpressionOperator.Contains'  			// The category of event you want to track.   			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Contains'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			// The name of the element that caused the action.  			LabelExpression = "trailer"'  			LabelOperator = ExpressionOperator.Contains'  			Name = "My Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			// A numerical value associated with that event.   			// Could be length of the video played etc.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumPagesViewed = 5'  			Name = "My Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new UrlGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My Url Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			UrlExpression = "contoso"'  			UrlOperator = ExpressionOperator.Contains  		}'  		new AppInstallGoal {  			// You must provide a valid app platform and app store identifier'   			// otherwise this goal will not be added successfully.   			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My App Install Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// Account scope is not supported for app install goals. You can  			// set scope to Customer or don't set it for the same result.  			Scope = EntityScope.Customer'  			Status = ConversionGoalStatus.Active'  			// The TagId is inherited from the ConversionGoal base class'  			// however' App Install goals do not use a UET tag.  			TagId = null'  		}'  	};  	var addConversionGoalsResponse = await AddConversionGoalsAsync (conversionGoals);  	// Find the conversion goals that were added successfully.   	List<long> conversionGoalIds = new List<long> ();  	foreach (var goalId in addConversionGoalsResponse.ConversionGoalIds) {  		if (goalId != null) {  			conversionGoalIds.Add ((long)goalId);  		}  	}  	OutputStatusMessage ("List of errors returned from AddConversionGoals (if any):\n");  	OutputPartialErrors (addConversionGoalsResponse.PartialErrors);  	var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url;  	var getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals BEFORE update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  	var updateConversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 60'  			CountType = ConversionGoalCountType.Unique'  			// You can change the conversion goal type e.g. in this example an event goal  			// had been created above at index 1. Now we are using the returned identifier  			// at index 1 to update the type from EventGoal to DurationGoal.  			Id = conversionGoalIds [1]'  			MinimumDurationInSeconds = 120'  			Name = "My Updated Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 10.00m'  				CurrencyCode = null  			}'  			// The Scope cannot be updated' even if you update the goal type.  			// You can either send the same value or leave Scope empty.  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Paused'  			// You can update the tag as needed. In this example we will explicitly use the same UET tag.  			// To keep the UET tag unchanged' you can also leave this element nil or empty.  			TagId = tagId'  		}'  		new EventGoal {  			// For both add and update conversion goal operations' you must include one or more    			// of the following events:   			// ActionExpression' CategoryExpression' LabelExpression' or Value.  			// For example if you do not include ActionExpression during update'   			// any existing ActionOperator and ActionExpression settings will be deleted.  			ActionExpression = null'  			ActionOperator = null'  			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Equals'  			Id = conversionGoalIds [0]'  			// You cannot update the operator unless you also include the expression.  			// The following attempt to update LabelOperator will result in an error.  			LabelExpression = null'  			LabelOperator = ExpressionOperator.Equals'  			Name = "My Updated Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// You must specify the previous settings unless you want  			// them replaced during the update conversion goal operation.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			Id = conversionGoalIds [2]'  			Name = "My Updated Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			// When updating a conversion goal' if the Revenue element is nil or empty then none   			// of the nested properties will be updated. However' if this element is not nil or empty   			// then you are effectively replacing any existing revenue properties. For example to delete   			// any previous revenue settings' set the Revenue element to an empty ConversionGoalRevenue object.  			Revenue = new ConversionGoalRevenue ()'  		}'  		new UrlGoal {  			Id = conversionGoalIds [3]'  			Name = "My Updated Url Goal" + DateTime.UtcNow'  			// If not specified during update' the previous Url settings are retained.  			UrlExpression = null'  			UrlOperator = ExpressionOperator.BeginsWith  		}  	};  	var updateConversionGoalsResponse = await UpdateConversionGoalsAsync (updateConversionGoals);  	OutputStatusMessage ("List of errors returned from UpdateConversionGoals (if any):\n");  	OutputPartialErrors (updateConversionGoalsResponse.PartialErrors);  	getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals AFTER update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch ConversionGoal Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Before you can track conversions or target audiences using a remarketing list'   	// you need to create a UET tag in Bing Ads (web application or API) and then   	// add the UET tag tracking code to every page of your website. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// First you should call the GetUetTagsByIds operation to check whether a tag has already been created.   	// You can leave the TagIds element null or empty to request all UET tags available for the customer.  	var uetTags = (await GetUetTagsByIdsAsync (null)).UetTags;  	// If you do not already have a UET tag that can be used' or if you need another UET tag'   	// call the AddUetTags service operation to create a new UET tag. If the call is successful'   	// the tracking script that you should add to your website is included in a corresponding   	// UetTag within the response message.   	if (uetTags == null || uetTags.Count < 1) {  		var uetTag = new UetTag {  			Description = "My First Uet Tag"'  			Name = "New Uet Tag"'  		};  		uetTags = (await AddUetTagsAsync (new[] {  			uetTag  		})).UetTags;  	}  	if (uetTags == null || uetTags.Count < 1) {  		OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	OutputStatusMessage ("List of all UET Tags:\n");  	foreach (var uetTag in uetTags) {  		OutputUetTag (uetTag);  	}  	// After you retreive the tracking script from the AddUetTags or GetUetTagsByIds operation'   	// the next step is to add the UET tag tracking code to your website. We recommend that you'   	// or your website administrator' add it to your entire website in either the head or body sections.   	// If your website has a master page' then that is the best place to add it because you add it once   	// and it is included on all pages. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// We will use the same UET tag for the remainder of this example.  	var tagId = uetTags [0].Id;  	// Optionally you can update the name and description of a UetTag with the UpdateUetTags operation.  	OutputStatusMessage ("UET Tag BEFORE update:\n");  	OutputUetTag (uetTags [0]);  	uetTags = new[] {  		new UetTag {  			Description = "Updated Uet Tag Description"'  			Id = tagId'  			Name = "Updated Uet Tag Name " + DateTime.UtcNow'  		}  	};  	await UpdateUetTagsAsync (uetTags);  	uetTags = (await GetUetTagsByIdsAsync (new[] {  		(long)tagId  	})).UetTags;  	OutputStatusMessage ("UET Tag AFTER update:\n");  	OutputUetTag (uetTags [0]);  	// Add conversion goals that depend on the UET Tag Id retreived above.  	// Please note that you cannot delete conversion goals. If you want to stop   	// tracking conversions for the goal' you can set the goal status to Paused.  	var conversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumDurationInSeconds = 60'  			Name = "My Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new EventGoal {  			// The type of user interaction you want to track.  			ActionExpression = "play"'  			ActionOperator = ExpressionOperator.Contains'  			// The category of event you want to track.   			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Contains'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			// The name of the element that caused the action.  			LabelExpression = "trailer"'  			LabelOperator = ExpressionOperator.Contains'  			Name = "My Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			// A numerical value associated with that event.   			// Could be length of the video played etc.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumPagesViewed = 5'  			Name = "My Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new UrlGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My Url Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			UrlExpression = "contoso"'  			UrlOperator = ExpressionOperator.Contains  		}'  		new AppInstallGoal {  			// You must provide a valid app platform and app store identifier'   			// otherwise this goal will not be added successfully.   			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My App Install Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// Account scope is not supported for app install goals. You can  			// set scope to Customer or don't set it for the same result.  			Scope = EntityScope.Customer'  			Status = ConversionGoalStatus.Active'  			// The TagId is inherited from the ConversionGoal base class'  			// however' App Install goals do not use a UET tag.  			TagId = null'  		}'  	};  	var addConversionGoalsResponse = await AddConversionGoalsAsync (conversionGoals);  	// Find the conversion goals that were added successfully.   	List<long> conversionGoalIds = new List<long> ();  	foreach (var goalId in addConversionGoalsResponse.ConversionGoalIds) {  		if (goalId != null) {  			conversionGoalIds.Add ((long)goalId);  		}  	}  	OutputStatusMessage ("List of errors returned from AddConversionGoals (if any):\n");  	OutputPartialErrors (addConversionGoalsResponse.PartialErrors);  	var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url;  	var getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals BEFORE update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  	var updateConversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 60'  			CountType = ConversionGoalCountType.Unique'  			// You can change the conversion goal type e.g. in this example an event goal  			// had been created above at index 1. Now we are using the returned identifier  			// at index 1 to update the type from EventGoal to DurationGoal.  			Id = conversionGoalIds [1]'  			MinimumDurationInSeconds = 120'  			Name = "My Updated Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 10.00m'  				CurrencyCode = null  			}'  			// The Scope cannot be updated' even if you update the goal type.  			// You can either send the same value or leave Scope empty.  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Paused'  			// You can update the tag as needed. In this example we will explicitly use the same UET tag.  			// To keep the UET tag unchanged' you can also leave this element nil or empty.  			TagId = tagId'  		}'  		new EventGoal {  			// For both add and update conversion goal operations' you must include one or more    			// of the following events:   			// ActionExpression' CategoryExpression' LabelExpression' or Value.  			// For example if you do not include ActionExpression during update'   			// any existing ActionOperator and ActionExpression settings will be deleted.  			ActionExpression = null'  			ActionOperator = null'  			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Equals'  			Id = conversionGoalIds [0]'  			// You cannot update the operator unless you also include the expression.  			// The following attempt to update LabelOperator will result in an error.  			LabelExpression = null'  			LabelOperator = ExpressionOperator.Equals'  			Name = "My Updated Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// You must specify the previous settings unless you want  			// them replaced during the update conversion goal operation.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			Id = conversionGoalIds [2]'  			Name = "My Updated Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			// When updating a conversion goal' if the Revenue element is nil or empty then none   			// of the nested properties will be updated. However' if this element is not nil or empty   			// then you are effectively replacing any existing revenue properties. For example to delete   			// any previous revenue settings' set the Revenue element to an empty ConversionGoalRevenue object.  			Revenue = new ConversionGoalRevenue ()'  		}'  		new UrlGoal {  			Id = conversionGoalIds [3]'  			Name = "My Updated Url Goal" + DateTime.UtcNow'  			// If not specified during update' the previous Url settings are retained.  			UrlExpression = null'  			UrlOperator = ExpressionOperator.BeginsWith  		}  	};  	var updateConversionGoalsResponse = await UpdateConversionGoalsAsync (updateConversionGoals);  	OutputStatusMessage ("List of errors returned from UpdateConversionGoals (if any):\n");  	OutputPartialErrors (updateConversionGoalsResponse.PartialErrors);  	getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals AFTER update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch ConversionGoal Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Before you can track conversions or target audiences using a remarketing list'   	// you need to create a UET tag in Bing Ads (web application or API) and then   	// add the UET tag tracking code to every page of your website. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// First you should call the GetUetTagsByIds operation to check whether a tag has already been created.   	// You can leave the TagIds element null or empty to request all UET tags available for the customer.  	var uetTags = (await GetUetTagsByIdsAsync (null)).UetTags;  	// If you do not already have a UET tag that can be used' or if you need another UET tag'   	// call the AddUetTags service operation to create a new UET tag. If the call is successful'   	// the tracking script that you should add to your website is included in a corresponding   	// UetTag within the response message.   	if (uetTags == null || uetTags.Count < 1) {  		var uetTag = new UetTag {  			Description = "My First Uet Tag"'  			Name = "New Uet Tag"'  		};  		uetTags = (await AddUetTagsAsync (new[] {  			uetTag  		})).UetTags;  	}  	if (uetTags == null || uetTags.Count < 1) {  		OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	OutputStatusMessage ("List of all UET Tags:\n");  	foreach (var uetTag in uetTags) {  		OutputUetTag (uetTag);  	}  	// After you retreive the tracking script from the AddUetTags or GetUetTagsByIds operation'   	// the next step is to add the UET tag tracking code to your website. We recommend that you'   	// or your website administrator' add it to your entire website in either the head or body sections.   	// If your website has a master page' then that is the best place to add it because you add it once   	// and it is included on all pages. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// We will use the same UET tag for the remainder of this example.  	var tagId = uetTags [0].Id;  	// Optionally you can update the name and description of a UetTag with the UpdateUetTags operation.  	OutputStatusMessage ("UET Tag BEFORE update:\n");  	OutputUetTag (uetTags [0]);  	uetTags = new[] {  		new UetTag {  			Description = "Updated Uet Tag Description"'  			Id = tagId'  			Name = "Updated Uet Tag Name " + DateTime.UtcNow'  		}  	};  	await UpdateUetTagsAsync (uetTags);  	uetTags = (await GetUetTagsByIdsAsync (new[] {  		(long)tagId  	})).UetTags;  	OutputStatusMessage ("UET Tag AFTER update:\n");  	OutputUetTag (uetTags [0]);  	// Add conversion goals that depend on the UET Tag Id retreived above.  	// Please note that you cannot delete conversion goals. If you want to stop   	// tracking conversions for the goal' you can set the goal status to Paused.  	var conversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumDurationInSeconds = 60'  			Name = "My Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new EventGoal {  			// The type of user interaction you want to track.  			ActionExpression = "play"'  			ActionOperator = ExpressionOperator.Contains'  			// The category of event you want to track.   			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Contains'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			// The name of the element that caused the action.  			LabelExpression = "trailer"'  			LabelOperator = ExpressionOperator.Contains'  			Name = "My Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			// A numerical value associated with that event.   			// Could be length of the video played etc.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumPagesViewed = 5'  			Name = "My Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new UrlGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My Url Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			UrlExpression = "contoso"'  			UrlOperator = ExpressionOperator.Contains  		}'  		new AppInstallGoal {  			// You must provide a valid app platform and app store identifier'   			// otherwise this goal will not be added successfully.   			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My App Install Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// Account scope is not supported for app install goals. You can  			// set scope to Customer or don't set it for the same result.  			Scope = EntityScope.Customer'  			Status = ConversionGoalStatus.Active'  			// The TagId is inherited from the ConversionGoal base class'  			// however' App Install goals do not use a UET tag.  			TagId = null'  		}'  	};  	var addConversionGoalsResponse = await AddConversionGoalsAsync (conversionGoals);  	// Find the conversion goals that were added successfully.   	List<long> conversionGoalIds = new List<long> ();  	foreach (var goalId in addConversionGoalsResponse.ConversionGoalIds) {  		if (goalId != null) {  			conversionGoalIds.Add ((long)goalId);  		}  	}  	OutputStatusMessage ("List of errors returned from AddConversionGoals (if any):\n");  	OutputPartialErrors (addConversionGoalsResponse.PartialErrors);  	var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url;  	var getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals BEFORE update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  	var updateConversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 60'  			CountType = ConversionGoalCountType.Unique'  			// You can change the conversion goal type e.g. in this example an event goal  			// had been created above at index 1. Now we are using the returned identifier  			// at index 1 to update the type from EventGoal to DurationGoal.  			Id = conversionGoalIds [1]'  			MinimumDurationInSeconds = 120'  			Name = "My Updated Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 10.00m'  				CurrencyCode = null  			}'  			// The Scope cannot be updated' even if you update the goal type.  			// You can either send the same value or leave Scope empty.  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Paused'  			// You can update the tag as needed. In this example we will explicitly use the same UET tag.  			// To keep the UET tag unchanged' you can also leave this element nil or empty.  			TagId = tagId'  		}'  		new EventGoal {  			// For both add and update conversion goal operations' you must include one or more    			// of the following events:   			// ActionExpression' CategoryExpression' LabelExpression' or Value.  			// For example if you do not include ActionExpression during update'   			// any existing ActionOperator and ActionExpression settings will be deleted.  			ActionExpression = null'  			ActionOperator = null'  			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Equals'  			Id = conversionGoalIds [0]'  			// You cannot update the operator unless you also include the expression.  			// The following attempt to update LabelOperator will result in an error.  			LabelExpression = null'  			LabelOperator = ExpressionOperator.Equals'  			Name = "My Updated Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// You must specify the previous settings unless you want  			// them replaced during the update conversion goal operation.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			Id = conversionGoalIds [2]'  			Name = "My Updated Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			// When updating a conversion goal' if the Revenue element is nil or empty then none   			// of the nested properties will be updated. However' if this element is not nil or empty   			// then you are effectively replacing any existing revenue properties. For example to delete   			// any previous revenue settings' set the Revenue element to an empty ConversionGoalRevenue object.  			Revenue = new ConversionGoalRevenue ()'  		}'  		new UrlGoal {  			Id = conversionGoalIds [3]'  			Name = "My Updated Url Goal" + DateTime.UtcNow'  			// If not specified during update' the previous Url settings are retained.  			UrlExpression = null'  			UrlOperator = ExpressionOperator.BeginsWith  		}  	};  	var updateConversionGoalsResponse = await UpdateConversionGoalsAsync (updateConversionGoals);  	OutputStatusMessage ("List of errors returned from UpdateConversionGoals (if any):\n");  	OutputPartialErrors (updateConversionGoalsResponse.PartialErrors);  	getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals AFTER update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch ConversionGoal Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Before you can track conversions or target audiences using a remarketing list'   	// you need to create a UET tag in Bing Ads (web application or API) and then   	// add the UET tag tracking code to every page of your website. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// First you should call the GetUetTagsByIds operation to check whether a tag has already been created.   	// You can leave the TagIds element null or empty to request all UET tags available for the customer.  	var uetTags = (await GetUetTagsByIdsAsync (null)).UetTags;  	// If you do not already have a UET tag that can be used' or if you need another UET tag'   	// call the AddUetTags service operation to create a new UET tag. If the call is successful'   	// the tracking script that you should add to your website is included in a corresponding   	// UetTag within the response message.   	if (uetTags == null || uetTags.Count < 1) {  		var uetTag = new UetTag {  			Description = "My First Uet Tag"'  			Name = "New Uet Tag"'  		};  		uetTags = (await AddUetTagsAsync (new[] {  			uetTag  		})).UetTags;  	}  	if (uetTags == null || uetTags.Count < 1) {  		OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	OutputStatusMessage ("List of all UET Tags:\n");  	foreach (var uetTag in uetTags) {  		OutputUetTag (uetTag);  	}  	// After you retreive the tracking script from the AddUetTags or GetUetTagsByIds operation'   	// the next step is to add the UET tag tracking code to your website. We recommend that you'   	// or your website administrator' add it to your entire website in either the head or body sections.   	// If your website has a master page' then that is the best place to add it because you add it once   	// and it is included on all pages. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// We will use the same UET tag for the remainder of this example.  	var tagId = uetTags [0].Id;  	// Optionally you can update the name and description of a UetTag with the UpdateUetTags operation.  	OutputStatusMessage ("UET Tag BEFORE update:\n");  	OutputUetTag (uetTags [0]);  	uetTags = new[] {  		new UetTag {  			Description = "Updated Uet Tag Description"'  			Id = tagId'  			Name = "Updated Uet Tag Name " + DateTime.UtcNow'  		}  	};  	await UpdateUetTagsAsync (uetTags);  	uetTags = (await GetUetTagsByIdsAsync (new[] {  		(long)tagId  	})).UetTags;  	OutputStatusMessage ("UET Tag AFTER update:\n");  	OutputUetTag (uetTags [0]);  	// Add conversion goals that depend on the UET Tag Id retreived above.  	// Please note that you cannot delete conversion goals. If you want to stop   	// tracking conversions for the goal' you can set the goal status to Paused.  	var conversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumDurationInSeconds = 60'  			Name = "My Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new EventGoal {  			// The type of user interaction you want to track.  			ActionExpression = "play"'  			ActionOperator = ExpressionOperator.Contains'  			// The category of event you want to track.   			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Contains'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			// The name of the element that caused the action.  			LabelExpression = "trailer"'  			LabelOperator = ExpressionOperator.Contains'  			Name = "My Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			// A numerical value associated with that event.   			// Could be length of the video played etc.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumPagesViewed = 5'  			Name = "My Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new UrlGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My Url Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			UrlExpression = "contoso"'  			UrlOperator = ExpressionOperator.Contains  		}'  		new AppInstallGoal {  			// You must provide a valid app platform and app store identifier'   			// otherwise this goal will not be added successfully.   			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My App Install Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// Account scope is not supported for app install goals. You can  			// set scope to Customer or don't set it for the same result.  			Scope = EntityScope.Customer'  			Status = ConversionGoalStatus.Active'  			// The TagId is inherited from the ConversionGoal base class'  			// however' App Install goals do not use a UET tag.  			TagId = null'  		}'  	};  	var addConversionGoalsResponse = await AddConversionGoalsAsync (conversionGoals);  	// Find the conversion goals that were added successfully.   	List<long> conversionGoalIds = new List<long> ();  	foreach (var goalId in addConversionGoalsResponse.ConversionGoalIds) {  		if (goalId != null) {  			conversionGoalIds.Add ((long)goalId);  		}  	}  	OutputStatusMessage ("List of errors returned from AddConversionGoals (if any):\n");  	OutputPartialErrors (addConversionGoalsResponse.PartialErrors);  	var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url;  	var getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals BEFORE update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  	var updateConversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 60'  			CountType = ConversionGoalCountType.Unique'  			// You can change the conversion goal type e.g. in this example an event goal  			// had been created above at index 1. Now we are using the returned identifier  			// at index 1 to update the type from EventGoal to DurationGoal.  			Id = conversionGoalIds [1]'  			MinimumDurationInSeconds = 120'  			Name = "My Updated Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 10.00m'  				CurrencyCode = null  			}'  			// The Scope cannot be updated' even if you update the goal type.  			// You can either send the same value or leave Scope empty.  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Paused'  			// You can update the tag as needed. In this example we will explicitly use the same UET tag.  			// To keep the UET tag unchanged' you can also leave this element nil or empty.  			TagId = tagId'  		}'  		new EventGoal {  			// For both add and update conversion goal operations' you must include one or more    			// of the following events:   			// ActionExpression' CategoryExpression' LabelExpression' or Value.  			// For example if you do not include ActionExpression during update'   			// any existing ActionOperator and ActionExpression settings will be deleted.  			ActionExpression = null'  			ActionOperator = null'  			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Equals'  			Id = conversionGoalIds [0]'  			// You cannot update the operator unless you also include the expression.  			// The following attempt to update LabelOperator will result in an error.  			LabelExpression = null'  			LabelOperator = ExpressionOperator.Equals'  			Name = "My Updated Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// You must specify the previous settings unless you want  			// them replaced during the update conversion goal operation.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			Id = conversionGoalIds [2]'  			Name = "My Updated Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			// When updating a conversion goal' if the Revenue element is nil or empty then none   			// of the nested properties will be updated. However' if this element is not nil or empty   			// then you are effectively replacing any existing revenue properties. For example to delete   			// any previous revenue settings' set the Revenue element to an empty ConversionGoalRevenue object.  			Revenue = new ConversionGoalRevenue ()'  		}'  		new UrlGoal {  			Id = conversionGoalIds [3]'  			Name = "My Updated Url Goal" + DateTime.UtcNow'  			// If not specified during update' the previous Url settings are retained.  			UrlExpression = null'  			UrlOperator = ExpressionOperator.BeginsWith  		}  	};  	var updateConversionGoalsResponse = await UpdateConversionGoalsAsync (updateConversionGoals);  	OutputStatusMessage ("List of errors returned from UpdateConversionGoals (if any):\n");  	OutputPartialErrors (updateConversionGoalsResponse.PartialErrors);  	getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals AFTER update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch ConversionGoal Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Before you can track conversions or target audiences using a remarketing list'   	// you need to create a UET tag in Bing Ads (web application or API) and then   	// add the UET tag tracking code to every page of your website. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// First you should call the GetUetTagsByIds operation to check whether a tag has already been created.   	// You can leave the TagIds element null or empty to request all UET tags available for the customer.  	var uetTags = (await GetUetTagsByIdsAsync (null)).UetTags;  	// If you do not already have a UET tag that can be used' or if you need another UET tag'   	// call the AddUetTags service operation to create a new UET tag. If the call is successful'   	// the tracking script that you should add to your website is included in a corresponding   	// UetTag within the response message.   	if (uetTags == null || uetTags.Count < 1) {  		var uetTag = new UetTag {  			Description = "My First Uet Tag"'  			Name = "New Uet Tag"'  		};  		uetTags = (await AddUetTagsAsync (new[] {  			uetTag  		})).UetTags;  	}  	if (uetTags == null || uetTags.Count < 1) {  		OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	OutputStatusMessage ("List of all UET Tags:\n");  	foreach (var uetTag in uetTags) {  		OutputUetTag (uetTag);  	}  	// After you retreive the tracking script from the AddUetTags or GetUetTagsByIds operation'   	// the next step is to add the UET tag tracking code to your website. We recommend that you'   	// or your website administrator' add it to your entire website in either the head or body sections.   	// If your website has a master page' then that is the best place to add it because you add it once   	// and it is included on all pages. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// We will use the same UET tag for the remainder of this example.  	var tagId = uetTags [0].Id;  	// Optionally you can update the name and description of a UetTag with the UpdateUetTags operation.  	OutputStatusMessage ("UET Tag BEFORE update:\n");  	OutputUetTag (uetTags [0]);  	uetTags = new[] {  		new UetTag {  			Description = "Updated Uet Tag Description"'  			Id = tagId'  			Name = "Updated Uet Tag Name " + DateTime.UtcNow'  		}  	};  	await UpdateUetTagsAsync (uetTags);  	uetTags = (await GetUetTagsByIdsAsync (new[] {  		(long)tagId  	})).UetTags;  	OutputStatusMessage ("UET Tag AFTER update:\n");  	OutputUetTag (uetTags [0]);  	// Add conversion goals that depend on the UET Tag Id retreived above.  	// Please note that you cannot delete conversion goals. If you want to stop   	// tracking conversions for the goal' you can set the goal status to Paused.  	var conversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumDurationInSeconds = 60'  			Name = "My Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new EventGoal {  			// The type of user interaction you want to track.  			ActionExpression = "play"'  			ActionOperator = ExpressionOperator.Contains'  			// The category of event you want to track.   			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Contains'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			// The name of the element that caused the action.  			LabelExpression = "trailer"'  			LabelOperator = ExpressionOperator.Contains'  			Name = "My Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			// A numerical value associated with that event.   			// Could be length of the video played etc.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumPagesViewed = 5'  			Name = "My Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new UrlGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My Url Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			UrlExpression = "contoso"'  			UrlOperator = ExpressionOperator.Contains  		}'  		new AppInstallGoal {  			// You must provide a valid app platform and app store identifier'   			// otherwise this goal will not be added successfully.   			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My App Install Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// Account scope is not supported for app install goals. You can  			// set scope to Customer or don't set it for the same result.  			Scope = EntityScope.Customer'  			Status = ConversionGoalStatus.Active'  			// The TagId is inherited from the ConversionGoal base class'  			// however' App Install goals do not use a UET tag.  			TagId = null'  		}'  	};  	var addConversionGoalsResponse = await AddConversionGoalsAsync (conversionGoals);  	// Find the conversion goals that were added successfully.   	List<long> conversionGoalIds = new List<long> ();  	foreach (var goalId in addConversionGoalsResponse.ConversionGoalIds) {  		if (goalId != null) {  			conversionGoalIds.Add ((long)goalId);  		}  	}  	OutputStatusMessage ("List of errors returned from AddConversionGoals (if any):\n");  	OutputPartialErrors (addConversionGoalsResponse.PartialErrors);  	var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url;  	var getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals BEFORE update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  	var updateConversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 60'  			CountType = ConversionGoalCountType.Unique'  			// You can change the conversion goal type e.g. in this example an event goal  			// had been created above at index 1. Now we are using the returned identifier  			// at index 1 to update the type from EventGoal to DurationGoal.  			Id = conversionGoalIds [1]'  			MinimumDurationInSeconds = 120'  			Name = "My Updated Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 10.00m'  				CurrencyCode = null  			}'  			// The Scope cannot be updated' even if you update the goal type.  			// You can either send the same value or leave Scope empty.  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Paused'  			// You can update the tag as needed. In this example we will explicitly use the same UET tag.  			// To keep the UET tag unchanged' you can also leave this element nil or empty.  			TagId = tagId'  		}'  		new EventGoal {  			// For both add and update conversion goal operations' you must include one or more    			// of the following events:   			// ActionExpression' CategoryExpression' LabelExpression' or Value.  			// For example if you do not include ActionExpression during update'   			// any existing ActionOperator and ActionExpression settings will be deleted.  			ActionExpression = null'  			ActionOperator = null'  			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Equals'  			Id = conversionGoalIds [0]'  			// You cannot update the operator unless you also include the expression.  			// The following attempt to update LabelOperator will result in an error.  			LabelExpression = null'  			LabelOperator = ExpressionOperator.Equals'  			Name = "My Updated Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// You must specify the previous settings unless you want  			// them replaced during the update conversion goal operation.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			Id = conversionGoalIds [2]'  			Name = "My Updated Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			// When updating a conversion goal' if the Revenue element is nil or empty then none   			// of the nested properties will be updated. However' if this element is not nil or empty   			// then you are effectively replacing any existing revenue properties. For example to delete   			// any previous revenue settings' set the Revenue element to an empty ConversionGoalRevenue object.  			Revenue = new ConversionGoalRevenue ()'  		}'  		new UrlGoal {  			Id = conversionGoalIds [3]'  			Name = "My Updated Url Goal" + DateTime.UtcNow'  			// If not specified during update' the previous Url settings are retained.  			UrlExpression = null'  			UrlOperator = ExpressionOperator.BeginsWith  		}  	};  	var updateConversionGoalsResponse = await UpdateConversionGoalsAsync (updateConversionGoals);  	OutputStatusMessage ("List of errors returned from UpdateConversionGoals (if any):\n");  	OutputPartialErrors (updateConversionGoalsResponse.PartialErrors);  	getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals AFTER update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch ConversionGoal Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Before you can track conversions or target audiences using a remarketing list'   	// you need to create a UET tag in Bing Ads (web application or API) and then   	// add the UET tag tracking code to every page of your website. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// First you should call the GetUetTagsByIds operation to check whether a tag has already been created.   	// You can leave the TagIds element null or empty to request all UET tags available for the customer.  	var uetTags = (await GetUetTagsByIdsAsync (null)).UetTags;  	// If you do not already have a UET tag that can be used' or if you need another UET tag'   	// call the AddUetTags service operation to create a new UET tag. If the call is successful'   	// the tracking script that you should add to your website is included in a corresponding   	// UetTag within the response message.   	if (uetTags == null || uetTags.Count < 1) {  		var uetTag = new UetTag {  			Description = "My First Uet Tag"'  			Name = "New Uet Tag"'  		};  		uetTags = (await AddUetTagsAsync (new[] {  			uetTag  		})).UetTags;  	}  	if (uetTags == null || uetTags.Count < 1) {  		OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	OutputStatusMessage ("List of all UET Tags:\n");  	foreach (var uetTag in uetTags) {  		OutputUetTag (uetTag);  	}  	// After you retreive the tracking script from the AddUetTags or GetUetTagsByIds operation'   	// the next step is to add the UET tag tracking code to your website. We recommend that you'   	// or your website administrator' add it to your entire website in either the head or body sections.   	// If your website has a master page' then that is the best place to add it because you add it once   	// and it is included on all pages. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// We will use the same UET tag for the remainder of this example.  	var tagId = uetTags [0].Id;  	// Optionally you can update the name and description of a UetTag with the UpdateUetTags operation.  	OutputStatusMessage ("UET Tag BEFORE update:\n");  	OutputUetTag (uetTags [0]);  	uetTags = new[] {  		new UetTag {  			Description = "Updated Uet Tag Description"'  			Id = tagId'  			Name = "Updated Uet Tag Name " + DateTime.UtcNow'  		}  	};  	await UpdateUetTagsAsync (uetTags);  	uetTags = (await GetUetTagsByIdsAsync (new[] {  		(long)tagId  	})).UetTags;  	OutputStatusMessage ("UET Tag AFTER update:\n");  	OutputUetTag (uetTags [0]);  	// Add conversion goals that depend on the UET Tag Id retreived above.  	// Please note that you cannot delete conversion goals. If you want to stop   	// tracking conversions for the goal' you can set the goal status to Paused.  	var conversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumDurationInSeconds = 60'  			Name = "My Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new EventGoal {  			// The type of user interaction you want to track.  			ActionExpression = "play"'  			ActionOperator = ExpressionOperator.Contains'  			// The category of event you want to track.   			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Contains'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			// The name of the element that caused the action.  			LabelExpression = "trailer"'  			LabelOperator = ExpressionOperator.Contains'  			Name = "My Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			// A numerical value associated with that event.   			// Could be length of the video played etc.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumPagesViewed = 5'  			Name = "My Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new UrlGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My Url Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			UrlExpression = "contoso"'  			UrlOperator = ExpressionOperator.Contains  		}'  		new AppInstallGoal {  			// You must provide a valid app platform and app store identifier'   			// otherwise this goal will not be added successfully.   			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My App Install Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// Account scope is not supported for app install goals. You can  			// set scope to Customer or don't set it for the same result.  			Scope = EntityScope.Customer'  			Status = ConversionGoalStatus.Active'  			// The TagId is inherited from the ConversionGoal base class'  			// however' App Install goals do not use a UET tag.  			TagId = null'  		}'  	};  	var addConversionGoalsResponse = await AddConversionGoalsAsync (conversionGoals);  	// Find the conversion goals that were added successfully.   	List<long> conversionGoalIds = new List<long> ();  	foreach (var goalId in addConversionGoalsResponse.ConversionGoalIds) {  		if (goalId != null) {  			conversionGoalIds.Add ((long)goalId);  		}  	}  	OutputStatusMessage ("List of errors returned from AddConversionGoals (if any):\n");  	OutputPartialErrors (addConversionGoalsResponse.PartialErrors);  	var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url;  	var getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals BEFORE update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  	var updateConversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 60'  			CountType = ConversionGoalCountType.Unique'  			// You can change the conversion goal type e.g. in this example an event goal  			// had been created above at index 1. Now we are using the returned identifier  			// at index 1 to update the type from EventGoal to DurationGoal.  			Id = conversionGoalIds [1]'  			MinimumDurationInSeconds = 120'  			Name = "My Updated Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 10.00m'  				CurrencyCode = null  			}'  			// The Scope cannot be updated' even if you update the goal type.  			// You can either send the same value or leave Scope empty.  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Paused'  			// You can update the tag as needed. In this example we will explicitly use the same UET tag.  			// To keep the UET tag unchanged' you can also leave this element nil or empty.  			TagId = tagId'  		}'  		new EventGoal {  			// For both add and update conversion goal operations' you must include one or more    			// of the following events:   			// ActionExpression' CategoryExpression' LabelExpression' or Value.  			// For example if you do not include ActionExpression during update'   			// any existing ActionOperator and ActionExpression settings will be deleted.  			ActionExpression = null'  			ActionOperator = null'  			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Equals'  			Id = conversionGoalIds [0]'  			// You cannot update the operator unless you also include the expression.  			// The following attempt to update LabelOperator will result in an error.  			LabelExpression = null'  			LabelOperator = ExpressionOperator.Equals'  			Name = "My Updated Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// You must specify the previous settings unless you want  			// them replaced during the update conversion goal operation.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			Id = conversionGoalIds [2]'  			Name = "My Updated Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			// When updating a conversion goal' if the Revenue element is nil or empty then none   			// of the nested properties will be updated. However' if this element is not nil or empty   			// then you are effectively replacing any existing revenue properties. For example to delete   			// any previous revenue settings' set the Revenue element to an empty ConversionGoalRevenue object.  			Revenue = new ConversionGoalRevenue ()'  		}'  		new UrlGoal {  			Id = conversionGoalIds [3]'  			Name = "My Updated Url Goal" + DateTime.UtcNow'  			// If not specified during update' the previous Url settings are retained.  			UrlExpression = null'  			UrlOperator = ExpressionOperator.BeginsWith  		}  	};  	var updateConversionGoalsResponse = await UpdateConversionGoalsAsync (updateConversionGoals);  	OutputStatusMessage ("List of errors returned from UpdateConversionGoals (if any):\n");  	OutputPartialErrors (updateConversionGoalsResponse.PartialErrors);  	getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals AFTER update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch ConversionGoal Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Before you can track conversions or target audiences using a remarketing list'   	// you need to create a UET tag in Bing Ads (web application or API) and then   	// add the UET tag tracking code to every page of your website. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// First you should call the GetUetTagsByIds operation to check whether a tag has already been created.   	// You can leave the TagIds element null or empty to request all UET tags available for the customer.  	var uetTags = (await GetUetTagsByIdsAsync (null)).UetTags;  	// If you do not already have a UET tag that can be used' or if you need another UET tag'   	// call the AddUetTags service operation to create a new UET tag. If the call is successful'   	// the tracking script that you should add to your website is included in a corresponding   	// UetTag within the response message.   	if (uetTags == null || uetTags.Count < 1) {  		var uetTag = new UetTag {  			Description = "My First Uet Tag"'  			Name = "New Uet Tag"'  		};  		uetTags = (await AddUetTagsAsync (new[] {  			uetTag  		})).UetTags;  	}  	if (uetTags == null || uetTags.Count < 1) {  		OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	OutputStatusMessage ("List of all UET Tags:\n");  	foreach (var uetTag in uetTags) {  		OutputUetTag (uetTag);  	}  	// After you retreive the tracking script from the AddUetTags or GetUetTagsByIds operation'   	// the next step is to add the UET tag tracking code to your website. We recommend that you'   	// or your website administrator' add it to your entire website in either the head or body sections.   	// If your website has a master page' then that is the best place to add it because you add it once   	// and it is included on all pages. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// We will use the same UET tag for the remainder of this example.  	var tagId = uetTags [0].Id;  	// Optionally you can update the name and description of a UetTag with the UpdateUetTags operation.  	OutputStatusMessage ("UET Tag BEFORE update:\n");  	OutputUetTag (uetTags [0]);  	uetTags = new[] {  		new UetTag {  			Description = "Updated Uet Tag Description"'  			Id = tagId'  			Name = "Updated Uet Tag Name " + DateTime.UtcNow'  		}  	};  	await UpdateUetTagsAsync (uetTags);  	uetTags = (await GetUetTagsByIdsAsync (new[] {  		(long)tagId  	})).UetTags;  	OutputStatusMessage ("UET Tag AFTER update:\n");  	OutputUetTag (uetTags [0]);  	// Add conversion goals that depend on the UET Tag Id retreived above.  	// Please note that you cannot delete conversion goals. If you want to stop   	// tracking conversions for the goal' you can set the goal status to Paused.  	var conversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumDurationInSeconds = 60'  			Name = "My Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new EventGoal {  			// The type of user interaction you want to track.  			ActionExpression = "play"'  			ActionOperator = ExpressionOperator.Contains'  			// The category of event you want to track.   			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Contains'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			// The name of the element that caused the action.  			LabelExpression = "trailer"'  			LabelOperator = ExpressionOperator.Contains'  			Name = "My Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			// A numerical value associated with that event.   			// Could be length of the video played etc.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumPagesViewed = 5'  			Name = "My Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new UrlGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My Url Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			UrlExpression = "contoso"'  			UrlOperator = ExpressionOperator.Contains  		}'  		new AppInstallGoal {  			// You must provide a valid app platform and app store identifier'   			// otherwise this goal will not be added successfully.   			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My App Install Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// Account scope is not supported for app install goals. You can  			// set scope to Customer or don't set it for the same result.  			Scope = EntityScope.Customer'  			Status = ConversionGoalStatus.Active'  			// The TagId is inherited from the ConversionGoal base class'  			// however' App Install goals do not use a UET tag.  			TagId = null'  		}'  	};  	var addConversionGoalsResponse = await AddConversionGoalsAsync (conversionGoals);  	// Find the conversion goals that were added successfully.   	List<long> conversionGoalIds = new List<long> ();  	foreach (var goalId in addConversionGoalsResponse.ConversionGoalIds) {  		if (goalId != null) {  			conversionGoalIds.Add ((long)goalId);  		}  	}  	OutputStatusMessage ("List of errors returned from AddConversionGoals (if any):\n");  	OutputPartialErrors (addConversionGoalsResponse.PartialErrors);  	var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url;  	var getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals BEFORE update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  	var updateConversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 60'  			CountType = ConversionGoalCountType.Unique'  			// You can change the conversion goal type e.g. in this example an event goal  			// had been created above at index 1. Now we are using the returned identifier  			// at index 1 to update the type from EventGoal to DurationGoal.  			Id = conversionGoalIds [1]'  			MinimumDurationInSeconds = 120'  			Name = "My Updated Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 10.00m'  				CurrencyCode = null  			}'  			// The Scope cannot be updated' even if you update the goal type.  			// You can either send the same value or leave Scope empty.  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Paused'  			// You can update the tag as needed. In this example we will explicitly use the same UET tag.  			// To keep the UET tag unchanged' you can also leave this element nil or empty.  			TagId = tagId'  		}'  		new EventGoal {  			// For both add and update conversion goal operations' you must include one or more    			// of the following events:   			// ActionExpression' CategoryExpression' LabelExpression' or Value.  			// For example if you do not include ActionExpression during update'   			// any existing ActionOperator and ActionExpression settings will be deleted.  			ActionExpression = null'  			ActionOperator = null'  			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Equals'  			Id = conversionGoalIds [0]'  			// You cannot update the operator unless you also include the expression.  			// The following attempt to update LabelOperator will result in an error.  			LabelExpression = null'  			LabelOperator = ExpressionOperator.Equals'  			Name = "My Updated Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// You must specify the previous settings unless you want  			// them replaced during the update conversion goal operation.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			Id = conversionGoalIds [2]'  			Name = "My Updated Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			// When updating a conversion goal' if the Revenue element is nil or empty then none   			// of the nested properties will be updated. However' if this element is not nil or empty   			// then you are effectively replacing any existing revenue properties. For example to delete   			// any previous revenue settings' set the Revenue element to an empty ConversionGoalRevenue object.  			Revenue = new ConversionGoalRevenue ()'  		}'  		new UrlGoal {  			Id = conversionGoalIds [3]'  			Name = "My Updated Url Goal" + DateTime.UtcNow'  			// If not specified during update' the previous Url settings are retained.  			UrlExpression = null'  			UrlOperator = ExpressionOperator.BeginsWith  		}  	};  	var updateConversionGoalsResponse = await UpdateConversionGoalsAsync (updateConversionGoals);  	OutputStatusMessage ("List of errors returned from UpdateConversionGoals (if any):\n");  	OutputPartialErrors (updateConversionGoalsResponse.PartialErrors);  	getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals AFTER update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch ConversionGoal Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Before you can track conversions or target audiences using a remarketing list'   	// you need to create a UET tag in Bing Ads (web application or API) and then   	// add the UET tag tracking code to every page of your website. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// First you should call the GetUetTagsByIds operation to check whether a tag has already been created.   	// You can leave the TagIds element null or empty to request all UET tags available for the customer.  	var uetTags = (await GetUetTagsByIdsAsync (null)).UetTags;  	// If you do not already have a UET tag that can be used' or if you need another UET tag'   	// call the AddUetTags service operation to create a new UET tag. If the call is successful'   	// the tracking script that you should add to your website is included in a corresponding   	// UetTag within the response message.   	if (uetTags == null || uetTags.Count < 1) {  		var uetTag = new UetTag {  			Description = "My First Uet Tag"'  			Name = "New Uet Tag"'  		};  		uetTags = (await AddUetTagsAsync (new[] {  			uetTag  		})).UetTags;  	}  	if (uetTags == null || uetTags.Count < 1) {  		OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	OutputStatusMessage ("List of all UET Tags:\n");  	foreach (var uetTag in uetTags) {  		OutputUetTag (uetTag);  	}  	// After you retreive the tracking script from the AddUetTags or GetUetTagsByIds operation'   	// the next step is to add the UET tag tracking code to your website. We recommend that you'   	// or your website administrator' add it to your entire website in either the head or body sections.   	// If your website has a master page' then that is the best place to add it because you add it once   	// and it is included on all pages. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// We will use the same UET tag for the remainder of this example.  	var tagId = uetTags [0].Id;  	// Optionally you can update the name and description of a UetTag with the UpdateUetTags operation.  	OutputStatusMessage ("UET Tag BEFORE update:\n");  	OutputUetTag (uetTags [0]);  	uetTags = new[] {  		new UetTag {  			Description = "Updated Uet Tag Description"'  			Id = tagId'  			Name = "Updated Uet Tag Name " + DateTime.UtcNow'  		}  	};  	await UpdateUetTagsAsync (uetTags);  	uetTags = (await GetUetTagsByIdsAsync (new[] {  		(long)tagId  	})).UetTags;  	OutputStatusMessage ("UET Tag AFTER update:\n");  	OutputUetTag (uetTags [0]);  	// Add conversion goals that depend on the UET Tag Id retreived above.  	// Please note that you cannot delete conversion goals. If you want to stop   	// tracking conversions for the goal' you can set the goal status to Paused.  	var conversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumDurationInSeconds = 60'  			Name = "My Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new EventGoal {  			// The type of user interaction you want to track.  			ActionExpression = "play"'  			ActionOperator = ExpressionOperator.Contains'  			// The category of event you want to track.   			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Contains'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			// The name of the element that caused the action.  			LabelExpression = "trailer"'  			LabelOperator = ExpressionOperator.Contains'  			Name = "My Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			// A numerical value associated with that event.   			// Could be length of the video played etc.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumPagesViewed = 5'  			Name = "My Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new UrlGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My Url Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			UrlExpression = "contoso"'  			UrlOperator = ExpressionOperator.Contains  		}'  		new AppInstallGoal {  			// You must provide a valid app platform and app store identifier'   			// otherwise this goal will not be added successfully.   			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My App Install Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// Account scope is not supported for app install goals. You can  			// set scope to Customer or don't set it for the same result.  			Scope = EntityScope.Customer'  			Status = ConversionGoalStatus.Active'  			// The TagId is inherited from the ConversionGoal base class'  			// however' App Install goals do not use a UET tag.  			TagId = null'  		}'  	};  	var addConversionGoalsResponse = await AddConversionGoalsAsync (conversionGoals);  	// Find the conversion goals that were added successfully.   	List<long> conversionGoalIds = new List<long> ();  	foreach (var goalId in addConversionGoalsResponse.ConversionGoalIds) {  		if (goalId != null) {  			conversionGoalIds.Add ((long)goalId);  		}  	}  	OutputStatusMessage ("List of errors returned from AddConversionGoals (if any):\n");  	OutputPartialErrors (addConversionGoalsResponse.PartialErrors);  	var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url;  	var getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals BEFORE update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  	var updateConversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 60'  			CountType = ConversionGoalCountType.Unique'  			// You can change the conversion goal type e.g. in this example an event goal  			// had been created above at index 1. Now we are using the returned identifier  			// at index 1 to update the type from EventGoal to DurationGoal.  			Id = conversionGoalIds [1]'  			MinimumDurationInSeconds = 120'  			Name = "My Updated Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 10.00m'  				CurrencyCode = null  			}'  			// The Scope cannot be updated' even if you update the goal type.  			// You can either send the same value or leave Scope empty.  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Paused'  			// You can update the tag as needed. In this example we will explicitly use the same UET tag.  			// To keep the UET tag unchanged' you can also leave this element nil or empty.  			TagId = tagId'  		}'  		new EventGoal {  			// For both add and update conversion goal operations' you must include one or more    			// of the following events:   			// ActionExpression' CategoryExpression' LabelExpression' or Value.  			// For example if you do not include ActionExpression during update'   			// any existing ActionOperator and ActionExpression settings will be deleted.  			ActionExpression = null'  			ActionOperator = null'  			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Equals'  			Id = conversionGoalIds [0]'  			// You cannot update the operator unless you also include the expression.  			// The following attempt to update LabelOperator will result in an error.  			LabelExpression = null'  			LabelOperator = ExpressionOperator.Equals'  			Name = "My Updated Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// You must specify the previous settings unless you want  			// them replaced during the update conversion goal operation.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			Id = conversionGoalIds [2]'  			Name = "My Updated Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			// When updating a conversion goal' if the Revenue element is nil or empty then none   			// of the nested properties will be updated. However' if this element is not nil or empty   			// then you are effectively replacing any existing revenue properties. For example to delete   			// any previous revenue settings' set the Revenue element to an empty ConversionGoalRevenue object.  			Revenue = new ConversionGoalRevenue ()'  		}'  		new UrlGoal {  			Id = conversionGoalIds [3]'  			Name = "My Updated Url Goal" + DateTime.UtcNow'  			// If not specified during update' the previous Url settings are retained.  			UrlExpression = null'  			UrlOperator = ExpressionOperator.BeginsWith  		}  	};  	var updateConversionGoalsResponse = await UpdateConversionGoalsAsync (updateConversionGoals);  	OutputStatusMessage ("List of errors returned from UpdateConversionGoals (if any):\n");  	OutputPartialErrors (updateConversionGoalsResponse.PartialErrors);  	getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals AFTER update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch ConversionGoal Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ConversionGoals,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ConversionGoals.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Before you can track conversions or target audiences using a remarketing list'   	// you need to create a UET tag in Bing Ads (web application or API) and then   	// add the UET tag tracking code to every page of your website. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// First you should call the GetUetTagsByIds operation to check whether a tag has already been created.   	// You can leave the TagIds element null or empty to request all UET tags available for the customer.  	var uetTags = (await GetUetTagsByIdsAsync (null)).UetTags;  	// If you do not already have a UET tag that can be used' or if you need another UET tag'   	// call the AddUetTags service operation to create a new UET tag. If the call is successful'   	// the tracking script that you should add to your website is included in a corresponding   	// UetTag within the response message.   	if (uetTags == null || uetTags.Count < 1) {  		var uetTag = new UetTag {  			Description = "My First Uet Tag"'  			Name = "New Uet Tag"'  		};  		uetTags = (await AddUetTagsAsync (new[] {  			uetTag  		})).UetTags;  	}  	if (uetTags == null || uetTags.Count < 1) {  		OutputStatusMessage (string.Format ("You do not have any UET tags registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	OutputStatusMessage ("List of all UET Tags:\n");  	foreach (var uetTag in uetTags) {  		OutputUetTag (uetTag);  	}  	// After you retreive the tracking script from the AddUetTags or GetUetTagsByIds operation'   	// the next step is to add the UET tag tracking code to your website. We recommend that you'   	// or your website administrator' add it to your entire website in either the head or body sections.   	// If your website has a master page' then that is the best place to add it because you add it once   	// and it is included on all pages. For more information' please see   	// Universal Event Tracking at https://msdn.microsoft.com/library/bing-ads-universal-event-tracking-guide.aspx.  	// We will use the same UET tag for the remainder of this example.  	var tagId = uetTags [0].Id;  	// Optionally you can update the name and description of a UetTag with the UpdateUetTags operation.  	OutputStatusMessage ("UET Tag BEFORE update:\n");  	OutputUetTag (uetTags [0]);  	uetTags = new[] {  		new UetTag {  			Description = "Updated Uet Tag Description"'  			Id = tagId'  			Name = "Updated Uet Tag Name " + DateTime.UtcNow'  		}  	};  	await UpdateUetTagsAsync (uetTags);  	uetTags = (await GetUetTagsByIdsAsync (new[] {  		(long)tagId  	})).UetTags;  	OutputStatusMessage ("UET Tag AFTER update:\n");  	OutputUetTag (uetTags [0]);  	// Add conversion goals that depend on the UET Tag Id retreived above.  	// Please note that you cannot delete conversion goals. If you want to stop   	// tracking conversions for the goal' you can set the goal status to Paused.  	var conversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumDurationInSeconds = 60'  			Name = "My Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new EventGoal {  			// The type of user interaction you want to track.  			ActionExpression = "play"'  			ActionOperator = ExpressionOperator.Contains'  			// The category of event you want to track.   			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Contains'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			// The name of the element that caused the action.  			LabelExpression = "trailer"'  			LabelOperator = ExpressionOperator.Contains'  			Name = "My Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			// A numerical value associated with that event.   			// Could be length of the video played etc.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			MinimumPagesViewed = 5'  			Name = "My Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  		}'  		new UrlGoal {  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My Url Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Active'  			TagId = tagId'  			UrlExpression = "contoso"'  			UrlOperator = ExpressionOperator.Contains  		}'  		new AppInstallGoal {  			// You must provide a valid app platform and app store identifier'   			// otherwise this goal will not be added successfully.   			AppPlatform = "Windows"'  			AppStoreId = "AppStoreIdGoesHere"'  			ConversionWindowInMinutes = 30'  			CountType = ConversionGoalCountType.All'  			Name = "My App Install Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// Account scope is not supported for app install goals. You can  			// set scope to Customer or don't set it for the same result.  			Scope = EntityScope.Customer'  			Status = ConversionGoalStatus.Active'  			// The TagId is inherited from the ConversionGoal base class'  			// however' App Install goals do not use a UET tag.  			TagId = null'  		}'  	};  	var addConversionGoalsResponse = await AddConversionGoalsAsync (conversionGoals);  	// Find the conversion goals that were added successfully.   	List<long> conversionGoalIds = new List<long> ();  	foreach (var goalId in addConversionGoalsResponse.ConversionGoalIds) {  		if (goalId != null) {  			conversionGoalIds.Add ((long)goalId);  		}  	}  	OutputStatusMessage ("List of errors returned from AddConversionGoals (if any):\n");  	OutputPartialErrors (addConversionGoalsResponse.PartialErrors);  	var conversionGoalTypes = ConversionGoalType.AppInstall | ConversionGoalType.Duration | ConversionGoalType.Event | ConversionGoalType.PagesViewedPerVisit | ConversionGoalType.Url;  	var getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals BEFORE update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  	var updateConversionGoals = new ConversionGoal[] {  		new DurationGoal {  			ConversionWindowInMinutes = 60'  			CountType = ConversionGoalCountType.Unique'  			// You can change the conversion goal type e.g. in this example an event goal  			// had been created above at index 1. Now we are using the returned identifier  			// at index 1 to update the type from EventGoal to DurationGoal.  			Id = conversionGoalIds [1]'  			MinimumDurationInSeconds = 120'  			Name = "My Updated Duration Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 10.00m'  				CurrencyCode = null  			}'  			// The Scope cannot be updated' even if you update the goal type.  			// You can either send the same value or leave Scope empty.  			Scope = EntityScope.Account'  			Status = ConversionGoalStatus.Paused'  			// You can update the tag as needed. In this example we will explicitly use the same UET tag.  			// To keep the UET tag unchanged' you can also leave this element nil or empty.  			TagId = tagId'  		}'  		new EventGoal {  			// For both add and update conversion goal operations' you must include one or more    			// of the following events:   			// ActionExpression' CategoryExpression' LabelExpression' or Value.  			// For example if you do not include ActionExpression during update'   			// any existing ActionOperator and ActionExpression settings will be deleted.  			ActionExpression = null'  			ActionOperator = null'  			CategoryExpression = "video"'  			CategoryOperator = ExpressionOperator.Equals'  			Id = conversionGoalIds [0]'  			// You cannot update the operator unless you also include the expression.  			// The following attempt to update LabelOperator will result in an error.  			LabelExpression = null'  			LabelOperator = ExpressionOperator.Equals'  			Name = "My Updated Event Goal " + DateTime.UtcNow'  			Revenue = new ConversionGoalRevenue {  				Type = ConversionGoalRevenueType.FixedValue'  				Value = 5.00m'  				CurrencyCode = null  			}'  			// You must specify the previous settings unless you want  			// them replaced during the update conversion goal operation.  			Value = 5.00m'  			ValueOperator = ValueOperator.Equals'  		}'  		new PagesViewedPerVisitGoal {  			Id = conversionGoalIds [2]'  			Name = "My Updated Pages Viewed Per Visit Goal " + DateTime.UtcNow'  			// When updating a conversion goal' if the Revenue element is nil or empty then none   			// of the nested properties will be updated. However' if this element is not nil or empty   			// then you are effectively replacing any existing revenue properties. For example to delete   			// any previous revenue settings' set the Revenue element to an empty ConversionGoalRevenue object.  			Revenue = new ConversionGoalRevenue ()'  		}'  		new UrlGoal {  			Id = conversionGoalIds [3]'  			Name = "My Updated Url Goal" + DateTime.UtcNow'  			// If not specified during update' the previous Url settings are retained.  			UrlExpression = null'  			UrlOperator = ExpressionOperator.BeginsWith  		}  	};  	var updateConversionGoalsResponse = await UpdateConversionGoalsAsync (updateConversionGoals);  	OutputStatusMessage ("List of errors returned from UpdateConversionGoals (if any):\n");  	OutputPartialErrors (updateConversionGoalsResponse.PartialErrors);  	getConversionGoals = (await GetConversionGoalsByIdsAsync (conversionGoalIds' conversionGoalTypes)).ConversionGoals;  	OutputStatusMessage ("List of conversion goals AFTER update:\n");  	foreach (var conversionGoal in getConversionGoals) {  		OutputConversionGoal (conversionGoal);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch ConversionGoal Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleCampaign,The following statement contains a magic number: return new Campaign {  	Id = null'  	Name = "Women's Shoes " + DateTime.UtcNow'  	Description = "Red shoes line."'  	BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  	MonthlyBudget = 1000.00'  	TimeZone = "PacificTimeUSCanadaTijuana"'  	DaylightSaving = true'  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleAdGroup,The following statement contains a magic number: return new AdGroup {  	Name = "Women's Red Shoe Sale " + DateTime.UtcNow'  	AdDistribution = AdDistribution.Search'  	PricingModel = PricingModel.Cpc'  	StartDate = null'  	EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  		Month = 12'  		Day = 31'  		Year = DateTime.UtcNow.Year  	}'  	SearchBid = new Bid {  		Amount = 0.09  	}'  	Language = "English"'  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleAdGroup,The following statement contains a magic number: return new AdGroup {  	Name = "Women's Red Shoe Sale " + DateTime.UtcNow'  	AdDistribution = AdDistribution.Search'  	PricingModel = PricingModel.Cpc'  	StartDate = null'  	EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  		Month = 12'  		Day = 31'  		Year = DateTime.UtcNow.Year  	}'  	SearchBid = new Bid {  		Amount = 0.09  	}'  	Language = "English"'  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleAdGroup,The following statement contains a magic number: return new AdGroup {  	Name = "Women's Red Shoe Sale " + DateTime.UtcNow'  	AdDistribution = AdDistribution.Search'  	PricingModel = PricingModel.Cpc'  	StartDate = null'  	EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  		Month = 12'  		Day = 31'  		Year = DateTime.UtcNow.Year  	}'  	SearchBid = new Bid {  		Amount = 0.09  	}'  	Language = "English"'  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleKeyword,The following statement contains a magic number: return new Keyword {  	Bid = new Bid {  		Amount = 0.47  	}'  	Param2 = "10% Off"'  	MatchType = MatchType.Phrase'  	Text = "Brand-A Shoes"  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleFixedBid,The following statement contains a magic number: return new FixedBid {  	Bid = new Bid () {  		Amount = 0.35  	}'  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleAgeTarget,The following statement contains a magic number: return new AgeTarget {  	Bids = new List<AgeTargetBid> {  		new AgeTargetBid {  			Age = AgeRange.ThirtyFiveToFifty'  			BidAdjustment = 10'  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleAgeTargetBid,The following statement contains a magic number: return new AgeTargetBid {  	Age = AgeRange.ThirtyFiveToFifty'  	BidAdjustment = 10'  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleGenderTarget,The following statement contains a magic number: return new GenderTarget {  	Bids = new List<GenderTargetBid> {  		new GenderTargetBid {  			BidAdjustment = 10'  			Gender = GenderType.Female'  		}'  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleDayTimeTarget,The following statement contains a magic number: return new DayTimeTarget {  	Bids = new List<DayTimeTargetBid> {  		new DayTimeTargetBid {  			BidAdjustment = 10'  			Day = Day.Friday'  			FromHour = 11'  			FromMinute = Minute.Zero'  			ToHour = 13'  			ToMinute = Minute.Fifteen  		}'  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleDayTimeTarget,The following statement contains a magic number: return new DayTimeTarget {  	Bids = new List<DayTimeTargetBid> {  		new DayTimeTargetBid {  			BidAdjustment = 10'  			Day = Day.Friday'  			FromHour = 11'  			FromMinute = Minute.Zero'  			ToHour = 13'  			ToMinute = Minute.Fifteen  		}'  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleDayTimeTarget,The following statement contains a magic number: return new DayTimeTarget {  	Bids = new List<DayTimeTargetBid> {  		new DayTimeTargetBid {  			BidAdjustment = 10'  			Day = Day.Friday'  			FromHour = 11'  			FromMinute = Minute.Zero'  			ToHour = 13'  			ToMinute = Minute.Fifteen  		}'  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleDeviceOSTarget,The following statement contains a magic number: return new DeviceOSTarget {  	Bids = new List<DeviceOSTargetBid> {  		new DeviceOSTargetBid {  			BidAdjustment = 10'  			DeviceName = "Tablets"  		}'  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleCityTarget,The following statement contains a magic number: return new CityTarget {  	Bids = new List<CityTargetBid> {  		new CityTargetBid {  			BidAdjustment = 15'  			City = "Toronto' Toronto ON CA"'  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleCountryTarget,The following statement contains a magic number: return new CountryTarget {  	Bids = new List<CountryTargetBid> {  		new CountryTargetBid {  			BidAdjustment = 15'  			CountryAndRegion = "CA"'  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleMetroAreaTarget,The following statement contains a magic number: return new MetroAreaTarget {  	Bids = new List<MetroAreaTargetBid> {  		new MetroAreaTargetBid {  			BidAdjustment = 15'  			MetroArea = "Seattle-Tacoma' WA' WA US"'  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleStateTarget,The following statement contains a magic number: return new StateTarget {  	Bids = new List<StateTargetBid> {  		new StateTargetBid {  			BidAdjustment = 15'  			State = "US-WA"'  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExamplePostalCodeTarget,The following statement contains a magic number: return new PostalCodeTarget {  	Bids = new List<PostalCodeTargetBid> {  		new PostalCodeTargetBid {  			BidAdjustment = 10'  			PostalCode = "98052' WA US"'  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleRadiusTarget,The following statement contains a magic number: return new RadiusTarget {  	Bids = new List<RadiusTargetBid> {  		new RadiusTargetBid {  			BidAdjustment = 50'  			LatitudeDegrees = 47.755367'  			LongitudeDegrees = -122.091827'  			Radius = 11'  			RadiusUnit = DistanceUnit.Kilometers  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleRadiusTarget,The following statement contains a magic number: return new RadiusTarget {  	Bids = new List<RadiusTargetBid> {  		new RadiusTargetBid {  			BidAdjustment = 50'  			LatitudeDegrees = 47.755367'  			LongitudeDegrees = -122.091827'  			Radius = 11'  			RadiusUnit = DistanceUnit.Kilometers  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleRadiusTarget,The following statement contains a magic number: return new RadiusTarget {  	Bids = new List<RadiusTargetBid> {  		new RadiusTargetBid {  			BidAdjustment = 50'  			LatitudeDegrees = 47.755367'  			LongitudeDegrees = -122.091827'  			Radius = 11'  			RadiusUnit = DistanceUnit.Kilometers  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleRadiusTarget,The following statement contains a magic number: return new RadiusTarget {  	Bids = new List<RadiusTargetBid> {  		new RadiusTargetBid {  			BidAdjustment = 50'  			LatitudeDegrees = 47.755367'  			LongitudeDegrees = -122.091827'  			Radius = 11'  			RadiusUnit = DistanceUnit.Kilometers  		}  	}  };  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: try {  	CampaignService = new ServiceClient<ICampaignManagementService> (authorizationData);  	CustomerService = new ServiceClient<ICustomerManagementService> (authorizationData);  	// Determine whether you are able to add shared budgets by checking the pilot flags.  	bool enabledForSharedBudgets = false;  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync (authorizationData.CustomerId);  	// The pilot flag value for shared budgets is 263.  	// Pilot flags apply to all accounts within a given customer.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  		OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  		enabledForSharedBudgets = true;  	}  	else {  		OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  	}  	// If the customer is enabled for shared budgets' let's create a new budget and  	// share it with a new campaign.  	var budgetIds = new List<long?> ();  	if (enabledForSharedBudgets) {  		var budgets = new List<Budget> ();  		budgets.Add (new Budget {  			Amount = 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			Name = "My Shared Budget " + DateTime.UtcNow'  		});  		budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  	}  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			// You must choose to set either the shared  budget ID or daily amount.  			// You can set one or the other' but you may not set both.  			BudgetId = enabledForSharedBudgets ? budgetIds [0] : null'  			DailyBudget = enabledForSharedBudgets ? 0 : 50'  			BudgetType = BudgetLimitType.DailyBudgetStandard'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// You can set your campaign bid strategy to Enhanced CPC (EnhancedCpcBiddingScheme)   			// and then' at any time' set an individual ad group or keyword bid strategy to   			// Manual CPC (ManualCpcBiddingScheme).  			// For campaigns you can use either of the EnhancedCpcBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then ManualCpcBiddingScheme is used by default.  			BiddingScheme = new EnhancedCpcBiddingScheme {    			}'  			// Used with FinalUrls shown in the text ads that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}'  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			// For ad groups you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new ManualCpcBiddingScheme {    			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  		}  	};  	// In this example only the second keyword should succeed. The Text of the first keyword exceeds the limit'  	// and the third keyword is a duplicate of the second keyword.   	var keywords = new[] {  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Broad'  			Text = "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes " + "Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}'  		new Keyword {  			Bid = new Bid {  				Amount = 0.47  			}'  			Param2 = "10% Off"'  			MatchType = MatchType.Phrase'  			Text = "Brand-A Shoes"'  			// For keywords you can use either of the InheritFromParentBiddingScheme or ManualCpcBiddingScheme objects.   			// If you do not set this element' then InheritFromParentBiddingScheme is used by default.  			BiddingScheme = new InheritFromParentBiddingScheme {    			}'  		}  	};  	// In this example only the first 3 ads should succeed.   	// The Title of the fourth ad is empty and not valid'  	// and the fifth ad is a duplicate of the second ad.   	var ads = new Ad[] {  		new TextAd {  			Title = "Women's Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO1"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO2"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Red Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO3"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = ""'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.   			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO4"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  		new TextAd {  			Title = "Women's Super Shoe Sale"'  			Text = "Huge Savings on red shoes."'  			DisplayUrl = "Contoso.com"'  			// If you are currently using Destination URLs' you must replace them with Final URLs.   			// Here is an example of a DestinationUrl you might have used previously.                  			// DestinationUrl = "http://www.contoso.com/womenshoesale/?season=spring&promocode=PROMO123"'  			// To migrate from DestinationUrl to FinalUrls for existing ads' you can set DestinationUrl  			// to an empty string when updating the ad. If you are removing DestinationUrl'  			// then FinalUrls is required.  			// DestinationUrl = ""'  			// With FinalUrls you can separate the tracking template' custom parameters' and   			// landing page URLs.   			FinalUrls = new[] {  				"http://www.contoso.com/womenshoesale"  			}'  			// Final Mobile URLs can also be used if you want to direct the user to a different page   			// for mobile devices.  			FinalMobileUrls = new[] {  				"http://mobile.contoso.com/womenshoesale"  			}'  			// You could use a tracking template which would override the campaign level  			// tracking template. Tracking templates defined for lower level entities   			// override those set for higher level entities.  			// In this example we are using the campaign level tracking template.  			TrackingUrlTemplate = null'  			// Set custom parameters that are specific to this ad'   			// and can be used by the ad' ad group' campaign' or account level tracking template.   			// In this example we are using the campaign level tracking template.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "PROMO5"  					}'  					new CustomParameter () {  						Key = "season"'  						Value = "summer"  					}'  				}  			}'  		}'  	};  	// Add the campaign' ad group' keywords' and ads  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	AddKeywordsResponse addKeywordsResponse = await AddKeywordsAsync ((long)adGroupIds [0]' keywords);  	long?[] keywordIds = addKeywordsResponse.KeywordIds.ToArray ();  	BatchError[] keywordErrors = addKeywordsResponse.PartialErrors.ToArray ();  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	// Output the new assigned entity identifiers' as well as any partial errors  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	OutputKeywordsWithPartialErrors (keywords' keywordIds' keywordErrors);  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	// Here is a simple example that updates the campaign budget.  	// If the campaign has a shared budget you cannot update the Campaign budget amount'  	// and you must instead update the amount in the Budget object. If you try to update   	// the budget amount of a campaign that has a shared budget' the service will return   	// the CampaignServiceCannotUpdateSharedBudget error code.  	var getCampaigns = (await GetCampaignsByAccountIdAsync (authorizationData.AccountId' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	var updateCampaigns = new List<Campaign> ();  	var updateBudgets = new List<Budget> ();  	var getCampaignIds = new List<long> ();  	var getBudgetIds = new List<long> ();  	// Increase existing budgets by 20%  	foreach (var campaign in getCampaigns) {  		// If the campaign has a shared budget' let's add the budget ID to the list we will update later.  		if (campaign != null && campaign.BudgetId > 0) {  			getBudgetIds.Add ((long)campaign.BudgetId);  		}  		// If the campaign has its own budget' let's add it to the list of campaigns to update later.  		else if (campaign != null) {  			updateCampaigns.Add (campaign);  		}  	}  	// Update shared budgets in Budget objects.  	if (getBudgetIds.Count > 0) {  		getBudgetIds = getBudgetIds.Distinct ().ToList ();  		var getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets BEFORE update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  		OutputStatusMessage ("List of campaigns that share each budget:\n");  		var getCampaignIdCollection = (await GetCampaignIdsByBudgetIdsAsync (getBudgetIds)).CampaignIdCollection;  		for (int index = 0; index < getCampaignIdCollection.Count; index++) {  			OutputStatusMessage (string.Format ("BudgetId: {0}"' getBudgetIds [index]));  			OutputStatusMessage ("Campaign Ids:");  			if (getCampaignIdCollection [index] != null) {  				foreach (var id in getCampaignIdCollection [index].Ids) {  					OutputStatusMessage (string.Format ("\t{0}"' id));  				}  			}  		}  		foreach (var budget in getBudgets) {  			if (budget != null) {  				// Increase budget by 20 %  				budget.Amount *= 1.2m;  				updateBudgets.Add (budget);  			}  		}  		await UpdateBudgetsAsync (updateBudgets);  		getBudgets = (await GetBudgetsByIdsAsync (getBudgetIds)).Budgets;  		OutputStatusMessage ("List of shared budgets AFTER update:\n");  		foreach (var budget in getBudgets) {  			OutputStatusMessage ("Budget:");  			OutputBudget (budget);  		}  	}  	// Update unshared budgets in Campaign objects.  	if (updateCampaigns.Count > 0) {  		// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   		// To simply the example we will update the first 100.  		updateCampaigns = updateCampaigns.Take (100).ToList ();  		OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  		foreach (var campaign in updateCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  			// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   			// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   			// During the migration all campaign level unshared budgets will be rationalized as daily.   			// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  			// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   			if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  				// Increase budget by 20 %  				campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  				campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  			}  			else {  				// Increase budget by 20 %  				campaign.DailyBudget *= 1.2;  			}  			getCampaignIds.Add ((long)campaign.Id);  		}  		await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  		getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  		OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  		foreach (var campaign in getCampaigns) {  			OutputStatusMessage ("Campaign:");  			OutputCampaign (campaign);  		}  	}  	// Update the Text for the 3 successfully created ads' and update some UrlCustomParameters.  	var updateAds = new Ad[] {  		new TextAd {  			Id = adIds [0]'  			Text = "Huge Savings on All Red Shoes."'  			// Set the UrlCustomParameters element to null or empty to retain any   			// existing custom parameters.  			UrlCustomParameters = null'  		}'  		new TextAd {  			Id = adIds [1]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove all custom parameters' set the Parameters element of the   			// CustomParameters object to null or empty.  			UrlCustomParameters = new CustomParameters {  				Parameters = null'  			}'  		}'  		new TextAd {  			Id = adIds [2]'  			Text = "Huge Savings on All Red Shoes."'  			// To remove a subset of custom parameters' specify the custom parameters that   			// you want to keep in the Parameters element of the CustomParameters object.  			UrlCustomParameters = new CustomParameters {  				Parameters = new[] {  					new CustomParameter () {  						Key = "promoCode"'  						Value = "updatedpromo"  					}'  				}  			}  		}'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	var updateAdsResponse = await UpdateAdsAsync ((long)adGroupIds [0]' updateAds);  	getAdsByAdGroupIdResponse = await GetAdsByAdGroupIdAsync ((long)adGroupIds [0]);  	// Here is a simple example that updates the keyword bid to use the ad group bid.  	var updateKeyword = new Keyword {  		// Set Bid.Amount null (new empty Bid) to use the ad group bid.  		// If the Bid property is null' your keyword bid will not be updated.  		Bid = new Bid ()'  		Id = keywordIds [1]'  	};  	// As an exercise you can step through using the debugger and view the results.  	var getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	var updateKeywordsResponse = await UpdateKeywordsAsync ((long)adGroupIds [0]' new[] {  		updateKeyword  	});  	getKeywordsByAdGroupIdResponse = await GetKeywordsByAdGroupIdAsync ((long)adGroupIds [0]' KeywordAdditionalField.BiddingScheme);  	// Delete the campaign' ad group' keyword' and ad that were previously added.   	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  	// This sample will attempt to delete the budget that was created above   	// if the customer is enabled for shared budgets.  	if (enabledForSharedBudgets) {  		await DeleteBudgetsAsync (new[] {  			(long)budgetIds [0]  		});  		OutputStatusMessage (String.Format ("Deleted Budget Id {0}\n"' budgetIds [0]));  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: if (featurePilotFlags.Any (pilotFlag => pilotFlag == 263)) {  	OutputStatusMessage ("Customer is in pilot for Shared Budget.\n");  	enabledForSharedBudgets = true;  }  else {  	OutputStatusMessage ("Customer is not in pilot for Shared Budget.\n");  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: if (enabledForSharedBudgets) {  	var budgets = new List<Budget> ();  	budgets.Add (new Budget {  		Amount = 50'  		BudgetType = BudgetLimitType.DailyBudgetStandard'  		Name = "My Shared Budget " + DateTime.UtcNow'  	});  	budgetIds = (await AddBudgetsAsync (budgets)).BudgetIds.ToList ();  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: budgets.Add (new Budget {  	Amount = 50'  	BudgetType = BudgetLimitType.DailyBudgetStandard'  	Name = "My Shared Budget " + DateTime.UtcNow'  });  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: if (updateCampaigns.Count > 0) {  	// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   	// To simply the example we will update the first 100.  	updateCampaigns = updateCampaigns.Take (100).ToList ();  	OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  	foreach (var campaign in updateCampaigns) {  		OutputStatusMessage ("Campaign:");  		OutputCampaign (campaign);  		// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   		// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   		// During the migration all campaign level unshared budgets will be rationalized as daily.   		// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  		// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   		if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  			// Increase budget by 20 %  			campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  			campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  		}  		else {  			// Increase budget by 20 %  			campaign.DailyBudget *= 1.2;  		}  		getCampaignIds.Add ((long)campaign.Id);  	}  	await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  	getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  	foreach (var campaign in getCampaigns) {  		OutputStatusMessage ("Campaign:");  		OutputCampaign (campaign);  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: if (updateCampaigns.Count > 0) {  	// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   	// To simply the example we will update the first 100.  	updateCampaigns = updateCampaigns.Take (100).ToList ();  	OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  	foreach (var campaign in updateCampaigns) {  		OutputStatusMessage ("Campaign:");  		OutputCampaign (campaign);  		// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   		// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   		// During the migration all campaign level unshared budgets will be rationalized as daily.   		// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  		// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   		if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  			// Increase budget by 20 %  			campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  			campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  		}  		else {  			// Increase budget by 20 %  			campaign.DailyBudget *= 1.2;  		}  		getCampaignIds.Add ((long)campaign.Id);  	}  	await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  	getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  	foreach (var campaign in getCampaigns) {  		OutputStatusMessage ("Campaign:");  		OutputCampaign (campaign);  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: if (updateCampaigns.Count > 0) {  	// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   	// To simply the example we will update the first 100.  	updateCampaigns = updateCampaigns.Take (100).ToList ();  	OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  	foreach (var campaign in updateCampaigns) {  		OutputStatusMessage ("Campaign:");  		OutputCampaign (campaign);  		// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   		// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   		// During the migration all campaign level unshared budgets will be rationalized as daily.   		// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  		// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   		if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  			// Increase budget by 20 %  			campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  			campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  		}  		else {  			// Increase budget by 20 %  			campaign.DailyBudget *= 1.2;  		}  		getCampaignIds.Add ((long)campaign.Id);  	}  	await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  	getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  	foreach (var campaign in getCampaigns) {  		OutputStatusMessage ("Campaign:");  		OutputCampaign (campaign);  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: if (updateCampaigns.Count > 0) {  	// The UpdateCampaigns operation only accepts 100 Campaign objects per call.   	// To simply the example we will update the first 100.  	updateCampaigns = updateCampaigns.Take (100).ToList ();  	OutputStatusMessage ("List of campaigns with unshared budget BEFORE budget update:\n");  	foreach (var campaign in updateCampaigns) {  		OutputStatusMessage ("Campaign:");  		OutputCampaign (campaign);  		// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   		// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   		// During the migration all campaign level unshared budgets will be rationalized as daily.   		// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  		// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   		if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  			// Increase budget by 20 %  			campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  			campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  		}  		else {  			// Increase budget by 20 %  			campaign.DailyBudget *= 1.2;  		}  		getCampaignIds.Add ((long)campaign.Id);  	}  	await UpdateCampaignsAsync (authorizationData.AccountId' updateCampaigns);  	getCampaigns = (await GetCampaignsByIdsAsync (authorizationData.AccountId' getCampaignIds' CampaignType.SearchAndContent | CampaignType.Shopping' CampaignAdditionalField.BiddingScheme | CampaignAdditionalField.BudgetId)).Campaigns;  	OutputStatusMessage ("List of campaigns with unshared budget AFTER budget update:\n");  	foreach (var campaign in getCampaigns) {  		OutputStatusMessage ("Campaign:");  		OutputCampaign (campaign);  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: updateCampaigns = updateCampaigns.Take (100).ToList ();  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: foreach (var campaign in updateCampaigns) {  	OutputStatusMessage ("Campaign:");  	OutputCampaign (campaign);  	// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   	// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   	// During the migration all campaign level unshared budgets will be rationalized as daily.   	// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  	// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   	if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  		// Increase budget by 20 %  		campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  		campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  	}  	else {  		// Increase budget by 20 %  		campaign.DailyBudget *= 1.2;  	}  	getCampaignIds.Add ((long)campaign.Id);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: foreach (var campaign in updateCampaigns) {  	OutputStatusMessage ("Campaign:");  	OutputCampaign (campaign);  	// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   	// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   	// During the migration all campaign level unshared budgets will be rationalized as daily.   	// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  	// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   	if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  		// Increase budget by 20 %  		campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  		campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  	}  	else {  		// Increase budget by 20 %  		campaign.DailyBudget *= 1.2;  	}  	getCampaignIds.Add ((long)campaign.Id);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: foreach (var campaign in updateCampaigns) {  	OutputStatusMessage ("Campaign:");  	OutputCampaign (campaign);  	// Monthly budgets are deprecated and there will be a forced migration to daily budgets in calendar year 2017.   	// Shared budgets do not support the monthly budget type' so this is only applicable to unshared budgets.   	// During the migration all campaign level unshared budgets will be rationalized as daily.   	// The formula that will be used to convert monthly to daily budgets is: Monthly budget amount / 30.4.  	// Moving campaign monthly budget to daily budget is encouraged before monthly budgets are migrated.   	if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  		// Increase budget by 20 %  		campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  		campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  	}  	else {  		// Increase budget by 20 %  		campaign.DailyBudget *= 1.2;  	}  	getCampaignIds.Add ((long)campaign.Id);  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  	// Increase budget by 20 %  	campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  	campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  }  else {  	// Increase budget by 20 %  	campaign.DailyBudget *= 1.2;  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  	// Increase budget by 20 %  	campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  	campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  }  else {  	// Increase budget by 20 %  	campaign.DailyBudget *= 1.2;  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: if (campaign.BudgetType == BudgetLimitType.MonthlyBudgetSpendUntilDepleted) {  	// Increase budget by 20 %  	campaign.BudgetType = BudgetLimitType.DailyBudgetStandard;  	campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  }  else {  	// Increase budget by 20 %  	campaign.DailyBudget *= 1.2;  }  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: campaign.DailyBudget = (campaign.MonthlyBudget / 30.4) * 1.2;  
Magic Number,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The following statement contains a magic number: campaign.DailyBudget *= 1.2;  
Magic Number,BingAdsExamplesLibrary.V10,NegativeKeywords,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\NegativeKeywords.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Add a campaign that will later be associated with negative keywords.   	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	// You may choose to associate an exclusive set of negative keywords to an individual campaign   	// or ad group. An exclusive set of negative keywords cannot be shared with other campaigns   	// or ad groups. This example only associates negative keywords with a campaign.  	var entityNegativeKeywords = new[] {  		new EntityNegativeKeyword {  			EntityId = campaignId'  			EntityType = "Campaign"'  			NegativeKeywords = new[] {  				new NegativeKeyword {  					MatchType = MatchType.Phrase'  					Text = "auto"  				}'  				new NegativeKeyword {  					MatchType = MatchType.Phrase'  					Text = "auto"  				}'  			}  		}  	};  	AddNegativeKeywordsToEntitiesResponse addNegativeKeywordsToEntitiesResponse = await AddNegativeKeywordsToEntitiesAsync (entityNegativeKeywords);  	OutputNegativeKeywordIds (addNegativeKeywordsToEntitiesResponse.NegativeKeywordIds);  	OutputNestedPartialErrors (addNegativeKeywordsToEntitiesResponse.NestedPartialErrors);  	if (addNegativeKeywordsToEntitiesResponse.NestedPartialErrors == null || addNegativeKeywordsToEntitiesResponse.NestedPartialErrors.Count == 0) {  		OutputStatusMessage ("Added an exclusive set of negative keywords to the Campaign.\n");  		OutputNegativeKeywordIds (addNegativeKeywordsToEntitiesResponse.NegativeKeywordIds);  	}  	else {  		OutputNestedPartialErrors (addNegativeKeywordsToEntitiesResponse.NestedPartialErrors);  	}  	GetNegativeKeywordsByEntityIdsResponse getNegativeKeywordsByEntityIdsResponse = await GetNegativeKeywordsByEntityIdsAsync (new[] {  		campaignId  	}' "Campaign"' authorizationData.AccountId);  	OutputEntityNegativeKeywords (getNegativeKeywordsByEntityIdsResponse.EntityNegativeKeywords);  	OutputPartialErrors (getNegativeKeywordsByEntityIdsResponse.PartialErrors);  	if (getNegativeKeywordsByEntityIdsResponse.PartialErrors == null || getNegativeKeywordsByEntityIdsResponse.PartialErrors.Count == 0) {  		OutputStatusMessage ("Retrieved an exclusive set of negative keywords for the Campaign.\n");  		OutputEntityNegativeKeywords (getNegativeKeywordsByEntityIdsResponse.EntityNegativeKeywords);  	}  	else {  		OutputPartialErrors (getNegativeKeywordsByEntityIdsResponse.PartialErrors);  	}  	// If you attempt to delete a negative keyword without an identifier the operation will  	// succeed but will return partial errors corresponding to the index of the negative keyword  	// that was not deleted.   	var nestedPartialErrors = (BatchErrorCollection[])await DeleteNegativeKeywordsFromEntitiesAsync (entityNegativeKeywords);  	if (nestedPartialErrors == null || nestedPartialErrors.Length == 0) {  		OutputStatusMessage ("Deleted an exclusive set of negative keywords from the Campaign.\n");  	}  	else {  		OutputStatusMessage ("Attempt to DeleteNegativeKeywordsFromEntities without NegativeKeyword identifier partially fails by design.");  		OutputNestedPartialErrors (nestedPartialErrors);  	}  	// Delete the negative keywords with identifiers that were returned above.  	nestedPartialErrors = (BatchErrorCollection[])await DeleteNegativeKeywordsFromEntitiesAsync (getNegativeKeywordsByEntityIdsResponse.EntityNegativeKeywords);  	if (nestedPartialErrors == null || nestedPartialErrors.Length == 0) {  		OutputStatusMessage ("Deleted an exclusive set of negative keywords from the Campaign.\n");  	}  	else {  		OutputNestedPartialErrors (nestedPartialErrors);  	}  	// Negative keywords can also be added and deleted from a shared negative keyword list.   	// The negative keyword list can be shared or associated with multiple campaigns.  	// NegativeKeywordList inherits from SharedList which inherits from SharedEntity.  	var negativeKeywordList = new NegativeKeywordList {  		Name = "My Negative Keyword List" + DateTime.UtcNow'  		Type = "NegativeKeywordList"  	};  	SharedListItem[] negativeKeywords =  {  		new NegativeKeyword {  			Text = "car"'  			Type = "NegativeKeyword"'  			MatchType = MatchType.Exact  		}'  		new NegativeKeyword {  			Text = "car"'  			Type = "NegativeKeyword"'  			MatchType = MatchType.Phrase  		}  	};  	// You can create a new list for negative keywords with or without negative keywords.  	var addSharedEntityResponse = await AddSharedEntityAsync (negativeKeywordList' negativeKeywords);  	var sharedEntityId = addSharedEntityResponse.SharedEntityId;  	long[] listItemIds = addSharedEntityResponse.ListItemIds.ToArray ();  	OutputStatusMessage (String.Format ("NegativeKeywordList successfully added to account library and assigned identifer {0}\n"' sharedEntityId));  	OutputNegativeKeywordsWithPartialErrors (sharedEntityId' negativeKeywords' listItemIds' addSharedEntityResponse.PartialErrors.ToArray ());  	OutputStatusMessage ("Negative keywords currently in NegativeKeywordList:");  	negativeKeywords = (SharedListItem[])await GetListItemsBySharedListAsync (new NegativeKeywordList {  		Id = sharedEntityId  	});  	if (negativeKeywords == null || negativeKeywords.Length == 0) {  		OutputStatusMessage ("None\n");  	}  	else {  		OutputNegativeKeywords (negativeKeywords.Cast<NegativeKeyword> ());  	}  	// To update the list of negative keywords' you must either add or remove from the list  	// using the respective AddListItemsToSharedList or DeleteListItemsFromSharedList operations.  	// To remove the negative keywords from the list pass the negative keyword identifers  	// and negative keyword list (SharedEntity) identifer.  	var partialErrors = await DeleteListItemsFromSharedListAsync (listItemIds' new NegativeKeywordList {  		Id = sharedEntityId  	});  	if (partialErrors == null || !partialErrors.Any ()) {  		OutputStatusMessage ("Deleted most recently added negative keywords from negative keyword list.\n");  	}  	else {  		OutputPartialErrors (partialErrors);  	}  	OutputStatusMessage ("Negative keywords currently in NegativeKeywordList:");  	negativeKeywords = (SharedListItem[])await GetListItemsBySharedListAsync (new NegativeKeywordList {  		Id = sharedEntityId  	});  	if (negativeKeywords == null || negativeKeywords.Length == 0) {  		OutputStatusMessage ("None\n");  	}  	else {  		OutputNegativeKeywords (negativeKeywords.Cast<NegativeKeyword> ());  	}  	// Whether you created the list with or without negative keywords' more can be added   	// using the AddListItemsToSharedList operation.  	negativeKeywords = new SharedListItem[] {  		new NegativeKeyword {  			Text = "auto"'  			Type = "NegativeKeyword"'  			MatchType = MatchType.Exact  		}'  		new NegativeKeyword {  			Text = "auto"'  			Type = "NegativeKeyword"'  			MatchType = MatchType.Phrase  		}  	};  	var addListItemsToSharedListResponse = await AddListItemsToSharedListAsync (negativeKeywords' new NegativeKeywordList {  		Id = sharedEntityId  	});  	listItemIds = addListItemsToSharedListResponse.ListItemIds.ToArray ();  	OutputNegativeKeywordsWithPartialErrors (sharedEntityId' negativeKeywords' listItemIds' addListItemsToSharedListResponse.PartialErrors.ToArray ());  	OutputStatusMessage ("Negative keywords currently in NegativeKeywordList:");  	negativeKeywords = (SharedListItem[])await GetListItemsBySharedListAsync (new NegativeKeywordList {  		Id = sharedEntityId  	});  	if (negativeKeywords == null || negativeKeywords.Length == 0) {  		OutputStatusMessage ("None\n");  	}  	else {  		OutputNegativeKeywords (negativeKeywords.Cast<NegativeKeyword> ());  	}  	// You can update the name of the negative keyword list.   	negativeKeywordList = new NegativeKeywordList {  		Id = sharedEntityId'  		Name = "My Updated Negative Keyword List"'  		Type = "NegativeKeywordList"  	};  	partialErrors = await UpdateSharedEntitiesAsync (new SharedEntity[] {  		negativeKeywordList  	});  	if (partialErrors == null || !partialErrors.Any ()) {  		OutputStatusMessage (String.Format ("Updated Negative Keyword List Name to {0}.\n"' negativeKeywordList.Name));  	}  	else {  		OutputPartialErrors (partialErrors);  	}  	// Get and output the negative keyword lists and store the list of identifiers.  	const string sharedEntityType = "NegativeKeywordList";  	var sharedEntities = await GetSharedEntitiesByAccountIdAsync (sharedEntityType);  	OutputSharedEntityIdentifiersAsync (sharedEntities);  	var sharedEntityIds = new long[sharedEntities.Count];  	for (int index = 0; index < sharedEntities.Count; index++) {  		if (sharedEntities [index].Id != null) {  			sharedEntityIds [index] = (long)sharedEntities [index].Id;  		}  	}  	// Negative keywords were added to the negative keyword list above. You can associate the   	// shared list of negative keywords with a campaign with or without negative keywords.   	// Shared negative keyword lists cannot be associated with an ad group. An ad group can only   	// be assigned an exclusive set of negative keywords.   	var associations = new[] {  		new SharedEntityAssociation {  			EntityId = campaignId'  			EntityType = "Campaign"'  			SharedEntityId = sharedEntityId'  			SharedEntityType = "NegativeKeywordList"  		}  	};  	partialErrors = await SetSharedEntityAssociationsAsync (associations);  	if (partialErrors == null || !partialErrors.Any ()) {  		OutputStatusMessage (String.Format ("Associated CampaignId {0} with Negative Keyword List Id {1}.\n"' campaignId' sharedEntityId));  	}  	else {  		OutputPartialErrors (partialErrors);  	}  	// Get and output the associations either by Campaign or NegativeKeywordList identifier.  	GetSharedEntityAssociationsByEntityIdsResponse getSharedEntityAssociationsByEntityIdsResponse = await GetSharedEntityAssociationsByEntityIdsAsync (new[] {  		campaignId  	}' "Campaign"' "NegativeKeywordList");  	OutputSharedEntityAssociations (getSharedEntityAssociationsByEntityIdsResponse.Associations);  	OutputPartialErrors (getSharedEntityAssociationsByEntityIdsResponse.PartialErrors);  	// Currently the GetSharedEntityAssociationsBySharedEntityIds operation accepts only one shared entity identifier in the list.  	GetSharedEntityAssociationsBySharedEntityIdsResponse getSharedEntityAssociationsBySharedEntityIdsResponse = await GetSharedEntityAssociationsBySharedEntityIdsAsync ("Campaign"' new[] {  		sharedEntityIds [sharedEntityIds.Length - 1]  	}' "NegativeKeywordList");  	OutputSharedEntityAssociations (getSharedEntityAssociationsBySharedEntityIdsResponse.Associations);  	OutputPartialErrors (getSharedEntityAssociationsBySharedEntityIdsResponse.PartialErrors);  	// Explicitly delete the association between the campaign and the negative keyword list.  	partialErrors = await DeleteSharedEntityAssociationsAsync (associations);  	if (partialErrors == null || !partialErrors.Any ()) {  		OutputStatusMessage ("Deleted NegativeKeywordList associations\n");  	}  	else {  		OutputPartialErrors (partialErrors);  	}  	// Delete the campaign and any remaining assocations.   	await DeleteCampaigns (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns does not delete the negative keyword list from the account's library.   	// Call the DeleteSharedEntities operation to delete the shared entities.  	partialErrors = await DeleteSharedEntitiesAsync (new SharedEntity[] {  		new NegativeKeywordList {  			Id = sharedEntityId  		}  	});  	if (partialErrors == null || !partialErrors.Any ()) {  		OutputStatusMessage (String.Format ("Deleted Negative Keyword List (SharedEntity) Id {0}\n"' sharedEntityId));  	}  	else {  		OutputPartialErrors (partialErrors);  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// To discover all remarketing lists that the user can associate with ad groups in the current account (per CustomerAccountId header)'   	// set RemarketingListIds to null when calling the GetRemarketingLists operation.  	var remarketingLists = (await GetRemarketingListsAsync (null)).RemarketingLists;  	// You must already have at least one remarketing list for the remainder of this example.   	// The Bing Ads API does not support remarketing list add' update' or delete operations.  	if (remarketingLists.Count < 1) {  		return;  	}  	// Add an ad group in a campaign. The ad group will later be associated with remarketing lists.   	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			TrackingUrlTemplate = null  		}'  	};  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			TrackingUrlTemplate = null'  			// Applicable for all remarketing lists that are associated with this ad group. TargetAndBid indicates   			// that you want to show ads only to people included in the remarketing list' with the option to change  			// the bid amount. Ads in this ad group will only show to people included in the remarketing list.  			RemarketingTargetingSetting = RemarketingTargetingSetting.TargetAndBid  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// If the campaign or ad group add operations failed then we cannot continue this example.   	if (addAdGroupsResponse.AdGroupIds == null || addAdGroupsResponse.AdGroupIds.Count < 1) {  		return;  	}  	var adGroupRemarketingListAssociations = new List<AdGroupRemarketingListAssociation> ();  	// This example associates all of the remarketing lists with the new ad group.  	foreach (var remarketingList in remarketingLists) {  		if (remarketingList.Id != null) {  			var adGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  				AdGroupId = (long)adGroupIds [0]'  				BidAdjustment = 20.00'  				RemarketingListId = (long)remarketingList.Id'  				Status = AdGroupRemarketingListAssociationStatus.Paused  			};  			adGroupRemarketingListAssociations.Add (adGroupRemarketingListAssociation);  			OutputStatusMessage ("\nAssociating the following remarketing list with the ad group.\n");  			OutputRemarketingList (remarketingList);  		}  	}  	var addAdGroupRemarketingListAssociationsResponse = await AddAdGroupRemarketingListAssociationsAsync (adGroupRemarketingListAssociations);  	var getAdGroupRemarketingListAssociationsResponse = await GetAdGroupRemarketingListAssociationsAsync (new[] {  		(long)adGroupIds [0]  	});  	foreach (var adGroupRemarketingListAssociation in getAdGroupRemarketingListAssociationsResponse.AdGroupRemarketingListAssociations) {  		OutputStatusMessage ("\nThe following ad group remarketing list association was added.\n");  		OutputAdGroupRemarketingListAssociation (adGroupRemarketingListAssociation);  	}  	// You can store the association IDs which can be used to update or delete associations later.   	var associationIds = addAdGroupRemarketingListAssociationsResponse.AssociationIds;  	// If the associations were added and retrieved successfully let's practice updating and deleting one of them.  	if (associationIds != null && associationIds.Count > 0) {  		var updateAdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  			AdGroupId = (long)adGroupIds [0]'  			BidAdjustment = 10.00'  			Id = associationIds [0]'  			Status = AdGroupRemarketingListAssociationStatus.Active'  		};  		var updateAdGroupRemarketingListAssociationsResponse = await UpdateAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  		var deleteAdGroupRemarketingListAssociationsResponse = await DeleteAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  	}  	// Delete the campaign' ad group' and ad group remarketing list associations that were previously added.   	// The remarketing lists will not be deleted.  	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// To discover all remarketing lists that the user can associate with ad groups in the current account (per CustomerAccountId header)'   	// set RemarketingListIds to null when calling the GetRemarketingLists operation.  	var remarketingLists = (await GetRemarketingListsAsync (null)).RemarketingLists;  	// You must already have at least one remarketing list for the remainder of this example.   	// The Bing Ads API does not support remarketing list add' update' or delete operations.  	if (remarketingLists.Count < 1) {  		return;  	}  	// Add an ad group in a campaign. The ad group will later be associated with remarketing lists.   	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			TrackingUrlTemplate = null  		}'  	};  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			TrackingUrlTemplate = null'  			// Applicable for all remarketing lists that are associated with this ad group. TargetAndBid indicates   			// that you want to show ads only to people included in the remarketing list' with the option to change  			// the bid amount. Ads in this ad group will only show to people included in the remarketing list.  			RemarketingTargetingSetting = RemarketingTargetingSetting.TargetAndBid  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// If the campaign or ad group add operations failed then we cannot continue this example.   	if (addAdGroupsResponse.AdGroupIds == null || addAdGroupsResponse.AdGroupIds.Count < 1) {  		return;  	}  	var adGroupRemarketingListAssociations = new List<AdGroupRemarketingListAssociation> ();  	// This example associates all of the remarketing lists with the new ad group.  	foreach (var remarketingList in remarketingLists) {  		if (remarketingList.Id != null) {  			var adGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  				AdGroupId = (long)adGroupIds [0]'  				BidAdjustment = 20.00'  				RemarketingListId = (long)remarketingList.Id'  				Status = AdGroupRemarketingListAssociationStatus.Paused  			};  			adGroupRemarketingListAssociations.Add (adGroupRemarketingListAssociation);  			OutputStatusMessage ("\nAssociating the following remarketing list with the ad group.\n");  			OutputRemarketingList (remarketingList);  		}  	}  	var addAdGroupRemarketingListAssociationsResponse = await AddAdGroupRemarketingListAssociationsAsync (adGroupRemarketingListAssociations);  	var getAdGroupRemarketingListAssociationsResponse = await GetAdGroupRemarketingListAssociationsAsync (new[] {  		(long)adGroupIds [0]  	});  	foreach (var adGroupRemarketingListAssociation in getAdGroupRemarketingListAssociationsResponse.AdGroupRemarketingListAssociations) {  		OutputStatusMessage ("\nThe following ad group remarketing list association was added.\n");  		OutputAdGroupRemarketingListAssociation (adGroupRemarketingListAssociation);  	}  	// You can store the association IDs which can be used to update or delete associations later.   	var associationIds = addAdGroupRemarketingListAssociationsResponse.AssociationIds;  	// If the associations were added and retrieved successfully let's practice updating and deleting one of them.  	if (associationIds != null && associationIds.Count > 0) {  		var updateAdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  			AdGroupId = (long)adGroupIds [0]'  			BidAdjustment = 10.00'  			Id = associationIds [0]'  			Status = AdGroupRemarketingListAssociationStatus.Active'  		};  		var updateAdGroupRemarketingListAssociationsResponse = await UpdateAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  		var deleteAdGroupRemarketingListAssociationsResponse = await DeleteAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  	}  	// Delete the campaign' ad group' and ad group remarketing list associations that were previously added.   	// The remarketing lists will not be deleted.  	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// To discover all remarketing lists that the user can associate with ad groups in the current account (per CustomerAccountId header)'   	// set RemarketingListIds to null when calling the GetRemarketingLists operation.  	var remarketingLists = (await GetRemarketingListsAsync (null)).RemarketingLists;  	// You must already have at least one remarketing list for the remainder of this example.   	// The Bing Ads API does not support remarketing list add' update' or delete operations.  	if (remarketingLists.Count < 1) {  		return;  	}  	// Add an ad group in a campaign. The ad group will later be associated with remarketing lists.   	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			TrackingUrlTemplate = null  		}'  	};  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			TrackingUrlTemplate = null'  			// Applicable for all remarketing lists that are associated with this ad group. TargetAndBid indicates   			// that you want to show ads only to people included in the remarketing list' with the option to change  			// the bid amount. Ads in this ad group will only show to people included in the remarketing list.  			RemarketingTargetingSetting = RemarketingTargetingSetting.TargetAndBid  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// If the campaign or ad group add operations failed then we cannot continue this example.   	if (addAdGroupsResponse.AdGroupIds == null || addAdGroupsResponse.AdGroupIds.Count < 1) {  		return;  	}  	var adGroupRemarketingListAssociations = new List<AdGroupRemarketingListAssociation> ();  	// This example associates all of the remarketing lists with the new ad group.  	foreach (var remarketingList in remarketingLists) {  		if (remarketingList.Id != null) {  			var adGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  				AdGroupId = (long)adGroupIds [0]'  				BidAdjustment = 20.00'  				RemarketingListId = (long)remarketingList.Id'  				Status = AdGroupRemarketingListAssociationStatus.Paused  			};  			adGroupRemarketingListAssociations.Add (adGroupRemarketingListAssociation);  			OutputStatusMessage ("\nAssociating the following remarketing list with the ad group.\n");  			OutputRemarketingList (remarketingList);  		}  	}  	var addAdGroupRemarketingListAssociationsResponse = await AddAdGroupRemarketingListAssociationsAsync (adGroupRemarketingListAssociations);  	var getAdGroupRemarketingListAssociationsResponse = await GetAdGroupRemarketingListAssociationsAsync (new[] {  		(long)adGroupIds [0]  	});  	foreach (var adGroupRemarketingListAssociation in getAdGroupRemarketingListAssociationsResponse.AdGroupRemarketingListAssociations) {  		OutputStatusMessage ("\nThe following ad group remarketing list association was added.\n");  		OutputAdGroupRemarketingListAssociation (adGroupRemarketingListAssociation);  	}  	// You can store the association IDs which can be used to update or delete associations later.   	var associationIds = addAdGroupRemarketingListAssociationsResponse.AssociationIds;  	// If the associations were added and retrieved successfully let's practice updating and deleting one of them.  	if (associationIds != null && associationIds.Count > 0) {  		var updateAdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  			AdGroupId = (long)adGroupIds [0]'  			BidAdjustment = 10.00'  			Id = associationIds [0]'  			Status = AdGroupRemarketingListAssociationStatus.Active'  		};  		var updateAdGroupRemarketingListAssociationsResponse = await UpdateAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  		var deleteAdGroupRemarketingListAssociationsResponse = await DeleteAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  	}  	// Delete the campaign' ad group' and ad group remarketing list associations that were previously added.   	// The remarketing lists will not be deleted.  	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// To discover all remarketing lists that the user can associate with ad groups in the current account (per CustomerAccountId header)'   	// set RemarketingListIds to null when calling the GetRemarketingLists operation.  	var remarketingLists = (await GetRemarketingListsAsync (null)).RemarketingLists;  	// You must already have at least one remarketing list for the remainder of this example.   	// The Bing Ads API does not support remarketing list add' update' or delete operations.  	if (remarketingLists.Count < 1) {  		return;  	}  	// Add an ad group in a campaign. The ad group will later be associated with remarketing lists.   	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			TrackingUrlTemplate = null  		}'  	};  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			TrackingUrlTemplate = null'  			// Applicable for all remarketing lists that are associated with this ad group. TargetAndBid indicates   			// that you want to show ads only to people included in the remarketing list' with the option to change  			// the bid amount. Ads in this ad group will only show to people included in the remarketing list.  			RemarketingTargetingSetting = RemarketingTargetingSetting.TargetAndBid  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// If the campaign or ad group add operations failed then we cannot continue this example.   	if (addAdGroupsResponse.AdGroupIds == null || addAdGroupsResponse.AdGroupIds.Count < 1) {  		return;  	}  	var adGroupRemarketingListAssociations = new List<AdGroupRemarketingListAssociation> ();  	// This example associates all of the remarketing lists with the new ad group.  	foreach (var remarketingList in remarketingLists) {  		if (remarketingList.Id != null) {  			var adGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  				AdGroupId = (long)adGroupIds [0]'  				BidAdjustment = 20.00'  				RemarketingListId = (long)remarketingList.Id'  				Status = AdGroupRemarketingListAssociationStatus.Paused  			};  			adGroupRemarketingListAssociations.Add (adGroupRemarketingListAssociation);  			OutputStatusMessage ("\nAssociating the following remarketing list with the ad group.\n");  			OutputRemarketingList (remarketingList);  		}  	}  	var addAdGroupRemarketingListAssociationsResponse = await AddAdGroupRemarketingListAssociationsAsync (adGroupRemarketingListAssociations);  	var getAdGroupRemarketingListAssociationsResponse = await GetAdGroupRemarketingListAssociationsAsync (new[] {  		(long)adGroupIds [0]  	});  	foreach (var adGroupRemarketingListAssociation in getAdGroupRemarketingListAssociationsResponse.AdGroupRemarketingListAssociations) {  		OutputStatusMessage ("\nThe following ad group remarketing list association was added.\n");  		OutputAdGroupRemarketingListAssociation (adGroupRemarketingListAssociation);  	}  	// You can store the association IDs which can be used to update or delete associations later.   	var associationIds = addAdGroupRemarketingListAssociationsResponse.AssociationIds;  	// If the associations were added and retrieved successfully let's practice updating and deleting one of them.  	if (associationIds != null && associationIds.Count > 0) {  		var updateAdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  			AdGroupId = (long)adGroupIds [0]'  			BidAdjustment = 10.00'  			Id = associationIds [0]'  			Status = AdGroupRemarketingListAssociationStatus.Active'  		};  		var updateAdGroupRemarketingListAssociationsResponse = await UpdateAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  		var deleteAdGroupRemarketingListAssociationsResponse = await DeleteAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  	}  	// Delete the campaign' ad group' and ad group remarketing list associations that were previously added.   	// The remarketing lists will not be deleted.  	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// To discover all remarketing lists that the user can associate with ad groups in the current account (per CustomerAccountId header)'   	// set RemarketingListIds to null when calling the GetRemarketingLists operation.  	var remarketingLists = (await GetRemarketingListsAsync (null)).RemarketingLists;  	// You must already have at least one remarketing list for the remainder of this example.   	// The Bing Ads API does not support remarketing list add' update' or delete operations.  	if (remarketingLists.Count < 1) {  		return;  	}  	// Add an ad group in a campaign. The ad group will later be associated with remarketing lists.   	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			TrackingUrlTemplate = null  		}'  	};  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			TrackingUrlTemplate = null'  			// Applicable for all remarketing lists that are associated with this ad group. TargetAndBid indicates   			// that you want to show ads only to people included in the remarketing list' with the option to change  			// the bid amount. Ads in this ad group will only show to people included in the remarketing list.  			RemarketingTargetingSetting = RemarketingTargetingSetting.TargetAndBid  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// If the campaign or ad group add operations failed then we cannot continue this example.   	if (addAdGroupsResponse.AdGroupIds == null || addAdGroupsResponse.AdGroupIds.Count < 1) {  		return;  	}  	var adGroupRemarketingListAssociations = new List<AdGroupRemarketingListAssociation> ();  	// This example associates all of the remarketing lists with the new ad group.  	foreach (var remarketingList in remarketingLists) {  		if (remarketingList.Id != null) {  			var adGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  				AdGroupId = (long)adGroupIds [0]'  				BidAdjustment = 20.00'  				RemarketingListId = (long)remarketingList.Id'  				Status = AdGroupRemarketingListAssociationStatus.Paused  			};  			adGroupRemarketingListAssociations.Add (adGroupRemarketingListAssociation);  			OutputStatusMessage ("\nAssociating the following remarketing list with the ad group.\n");  			OutputRemarketingList (remarketingList);  		}  	}  	var addAdGroupRemarketingListAssociationsResponse = await AddAdGroupRemarketingListAssociationsAsync (adGroupRemarketingListAssociations);  	var getAdGroupRemarketingListAssociationsResponse = await GetAdGroupRemarketingListAssociationsAsync (new[] {  		(long)adGroupIds [0]  	});  	foreach (var adGroupRemarketingListAssociation in getAdGroupRemarketingListAssociationsResponse.AdGroupRemarketingListAssociations) {  		OutputStatusMessage ("\nThe following ad group remarketing list association was added.\n");  		OutputAdGroupRemarketingListAssociation (adGroupRemarketingListAssociation);  	}  	// You can store the association IDs which can be used to update or delete associations later.   	var associationIds = addAdGroupRemarketingListAssociationsResponse.AssociationIds;  	// If the associations were added and retrieved successfully let's practice updating and deleting one of them.  	if (associationIds != null && associationIds.Count > 0) {  		var updateAdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  			AdGroupId = (long)adGroupIds [0]'  			BidAdjustment = 10.00'  			Id = associationIds [0]'  			Status = AdGroupRemarketingListAssociationStatus.Active'  		};  		var updateAdGroupRemarketingListAssociationsResponse = await UpdateAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  		var deleteAdGroupRemarketingListAssociationsResponse = await DeleteAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  	}  	// Delete the campaign' ad group' and ad group remarketing list associations that were previously added.   	// The remarketing lists will not be deleted.  	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// To discover all remarketing lists that the user can associate with ad groups in the current account (per CustomerAccountId header)'   	// set RemarketingListIds to null when calling the GetRemarketingLists operation.  	var remarketingLists = (await GetRemarketingListsAsync (null)).RemarketingLists;  	// You must already have at least one remarketing list for the remainder of this example.   	// The Bing Ads API does not support remarketing list add' update' or delete operations.  	if (remarketingLists.Count < 1) {  		return;  	}  	// Add an ad group in a campaign. The ad group will later be associated with remarketing lists.   	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			TrackingUrlTemplate = null  		}'  	};  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  			TrackingUrlTemplate = null'  			// Applicable for all remarketing lists that are associated with this ad group. TargetAndBid indicates   			// that you want to show ads only to people included in the remarketing list' with the option to change  			// the bid amount. Ads in this ad group will only show to people included in the remarketing list.  			RemarketingTargetingSetting = RemarketingTargetingSetting.TargetAndBid  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignIds [0]' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// If the campaign or ad group add operations failed then we cannot continue this example.   	if (addAdGroupsResponse.AdGroupIds == null || addAdGroupsResponse.AdGroupIds.Count < 1) {  		return;  	}  	var adGroupRemarketingListAssociations = new List<AdGroupRemarketingListAssociation> ();  	// This example associates all of the remarketing lists with the new ad group.  	foreach (var remarketingList in remarketingLists) {  		if (remarketingList.Id != null) {  			var adGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  				AdGroupId = (long)adGroupIds [0]'  				BidAdjustment = 20.00'  				RemarketingListId = (long)remarketingList.Id'  				Status = AdGroupRemarketingListAssociationStatus.Paused  			};  			adGroupRemarketingListAssociations.Add (adGroupRemarketingListAssociation);  			OutputStatusMessage ("\nAssociating the following remarketing list with the ad group.\n");  			OutputRemarketingList (remarketingList);  		}  	}  	var addAdGroupRemarketingListAssociationsResponse = await AddAdGroupRemarketingListAssociationsAsync (adGroupRemarketingListAssociations);  	var getAdGroupRemarketingListAssociationsResponse = await GetAdGroupRemarketingListAssociationsAsync (new[] {  		(long)adGroupIds [0]  	});  	foreach (var adGroupRemarketingListAssociation in getAdGroupRemarketingListAssociationsResponse.AdGroupRemarketingListAssociations) {  		OutputStatusMessage ("\nThe following ad group remarketing list association was added.\n");  		OutputAdGroupRemarketingListAssociation (adGroupRemarketingListAssociation);  	}  	// You can store the association IDs which can be used to update or delete associations later.   	var associationIds = addAdGroupRemarketingListAssociationsResponse.AssociationIds;  	// If the associations were added and retrieved successfully let's practice updating and deleting one of them.  	if (associationIds != null && associationIds.Count > 0) {  		var updateAdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  			AdGroupId = (long)adGroupIds [0]'  			BidAdjustment = 10.00'  			Id = associationIds [0]'  			Status = AdGroupRemarketingListAssociationStatus.Active'  		};  		var updateAdGroupRemarketingListAssociationsResponse = await UpdateAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  		var deleteAdGroupRemarketingListAssociationsResponse = await DeleteAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  			updateAdGroupRemarketingListAssociation  		});  	}  	// Delete the campaign' ad group' and ad group remarketing list associations that were previously added.   	// The remarketing lists will not be deleted.  	// You should remove this line if you want to view the added entities in the   	// Bing Ads web application or another tool.  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignIds [0]  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignIds [0]));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The following statement contains a magic number: foreach (var remarketingList in remarketingLists) {  	if (remarketingList.Id != null) {  		var adGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  			AdGroupId = (long)adGroupIds [0]'  			BidAdjustment = 20.00'  			RemarketingListId = (long)remarketingList.Id'  			Status = AdGroupRemarketingListAssociationStatus.Paused  		};  		adGroupRemarketingListAssociations.Add (adGroupRemarketingListAssociation);  		OutputStatusMessage ("\nAssociating the following remarketing list with the ad group.\n");  		OutputRemarketingList (remarketingList);  	}  }  
Magic Number,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The following statement contains a magic number: if (remarketingList.Id != null) {  	var adGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  		AdGroupId = (long)adGroupIds [0]'  		BidAdjustment = 20.00'  		RemarketingListId = (long)remarketingList.Id'  		Status = AdGroupRemarketingListAssociationStatus.Paused  	};  	adGroupRemarketingListAssociations.Add (adGroupRemarketingListAssociation);  	OutputStatusMessage ("\nAssociating the following remarketing list with the ad group.\n");  	OutputRemarketingList (remarketingList);  }  
Magic Number,BingAdsExamplesLibrary.V10,RemarketingLists,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\RemarketingLists.cs,RunAsync,The following statement contains a magic number: if (associationIds != null && associationIds.Count > 0) {  	var updateAdGroupRemarketingListAssociation = new AdGroupRemarketingListAssociation {  		AdGroupId = (long)adGroupIds [0]'  		BidAdjustment = 10.00'  		Id = associationIds [0]'  		Status = AdGroupRemarketingListAssociationStatus.Active'  	};  	var updateAdGroupRemarketingListAssociationsResponse = await UpdateAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  		updateAdGroupRemarketingListAssociation  	});  	var deleteAdGroupRemarketingListAssociationsResponse = await DeleteAdGroupRemarketingListAssociationsAsync (new AdGroupRemarketingListAssociation[] {  		updateAdGroupRemarketingListAssociation  	});  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Get a list of all Bing Merchant Center stores associated with your CustomerId  	IList<BMCStore> stores = await GetBMCStoresByCustomerIdAsync ();  	if (stores == null) {  		OutputStatusMessage (String.Format ("You do not have any BMC stores registered for CustomerId {0}.\n"' authorizationData.CustomerId));  		return;  	}  	#region ManageCampaign  	/* Add a new Bing Shopping campaign that will be associated with a ProductScope criterion.                  *  - Set the CampaignType element of the Campaign to Shopping.                  *  - Create a ShoppingSetting instance and set its Priority (0' 1' or 2)' SalesCountryCode' and StoreId elements.                   *    Add this shopping setting to the Settings list of the Campaign.                  */var campaigns = new[] {  		new Campaign {  			CampaignType = CampaignType.Shopping'  			Settings = new[] {  				new ShoppingSetting () {  					Priority = 0'  					SalesCountryCode = "US"'  					StoreId = (int)stores [0].Id  				}  			}'  			Name = "Bing Shopping Campaign " + DateTime.UtcNow'  			Description = "Bing Shopping Campaign Example."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  			// Used with FinalUrls shown in the product partitions that we will add below.  			TrackingUrlTemplate = "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"  		}  	};  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	long campaignId = (long)campaignIds [0];  	/* Optionally' you can create a ProductScope criterion that will be associated with your Bing Shopping campaign.                   * Use the product scope criterion to include a subset of your product catalog' for example a specific brand'                   * category' or product type. A campaign can only be associated with one ProductScope' which contains a list                   * of up to 7 ProductCondition. You'll also be able to specify more specific product conditions for each ad group.                  */var campaignCriterions = new CampaignCriterion[] {  		new CampaignCriterion () {  			CampaignId = campaignId'  			BidAdjustment = null'  			// Reserved for future use  			Criterion = new ProductScope () {  				Conditions = new ProductCondition[] {  					new ProductCondition {  						Operand = "Condition"'  						Attribute = "New"  					}'  					new ProductCondition {  						Operand = "CustomLabel0"'  						Attribute = "MerchantDefinedCustomLabel"  					}'  				}  			}'  		}  	};  	var addCampaignCriterionsResponse = await(AddCampaignCriterionsAsync (campaignCriterions' CampaignCriterionType.ProductScope));  	#endregion ManageCampaign  	#region ManageAdGroup  	// Create the ad group that will have the product partitions.  	var adGroups = new[] {  		new AdGroup {  			Name = "Product Categories"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			Language = "English"  		}  	};  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	long adGroupId = (long)adGroupIds [0];  	#region BidAllProducts  	var helper = new PartitionActionHelper (adGroupId);  	var root = helper.AddUnit (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying only the root as a Unit with a bid . . . \n");  	var applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	var adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("The ad group's product partition only has a tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	/*                  * Let's update the bid of the root Unit we just added.                  */BiddableAdGroupCriterion updatedRoot = new BiddableAdGroupCriterion {  		Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [0]'  		CriterionBid = new FixedBid {  			Bid = new Bid {  				Amount = 0.45  			}  		}  	};  	helper = new PartitionActionHelper (adGroupId);  	helper.UpdatePartition (updatedRoot);  	OutputStatusMessage ("Updating the bid for the tree root node . . . \n");  	await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	OutputStatusMessage ("Updated the bid for the tree root node: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion BidAllProducts  	#region InitializeTree  	/*                  * Now we will overwrite any existing tree root' and build a product partition group tree structure in multiple steps.                   * You could build the entire tree in a single call since there are less than 5'000 nodes; however'                   * we will build it in steps to demonstrate how to use the results from ApplyProductPartitionActions to update the tree.                   *                   * For a list of validation rules' see the Bing Shopping Campaigns technical guide:                  * https://msdn.microsoft.com/en-US/library/bing-ads-campaign-management-bing-shopping-campaigns.aspx                  */helper = new PartitionActionHelper (adGroupId);  	/*                  * Check whether a root node exists already.                  */adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	var existingRoot = GetRootNode (adGroupCriterions);  	if (existingRoot != null) {  		helper.DeletePartition (existingRoot);  	}  	root = helper.AddSubdivision (null' new ProductCondition {  		Operand = "All"'  		Attribute = null  	});  	/*                  * The direct children of any node must have the same Operand.                   * For this example we will use CategoryL1 nodes as children of the root.                   * For a list of valid CategoryL1 through CategoryL5 values' see the Bing Category Taxonomy:                  * http://advertise.bingads.microsoft.com/en-us/WWDocs/user/search/en-us/Bing_Category_Taxonomy.txt                  */var animalsSubdivision = helper.AddSubdivision (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Animals & Pet Supplies"  	});  	/*                  * If you use a CategoryL2 node' it must be a descendant (child or later) of a CategoryL1 node.                   * In other words you cannot have a CategoryL2 node as parent of a CategoryL1 node.                   * For this example we will a CategoryL2 node as child of the CategoryL1 Animals & Pet Supplies node.                   */var petSuppliesSubdivision = helper.AddSubdivision (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = "Pet Supplies"  	});  	var brandA = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand A"  	}' 0.35' false);  	/*                  * If you won't bid on Brand B' set the helper method's bidAmount to '0' and isNegative to true.                   * The helper method will create a NegativeAdGroupCriterion and apply the condition.                  */var brandB = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand B"  	}' 0' true);  	var otherBrands = helper.AddUnit (petSuppliesSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	var otherPetSupplies = helper.AddUnit (animalsSubdivision' new ProductCondition {  		Operand = "CategoryL2"'  		Attribute = null  	}' 0.35' false);  	var electronics = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	}' 0.35' false);  	var otherCategoryL1 = helper.AddUnit (root' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Applying product partitions to the ad group . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	// To retrieve product partitions after they have been applied' call GetAdGroupCriterionsByIds.   	// The product partition with ParentCriterionId set to null is the root node.  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 9 nodes.                                       All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |                        +-- All other (CategoryL1)                   */OutputStatusMessage ("The product partition group tree now has 9 nodes: \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion InitializeTree  	#region UpdateTree  	/*                  * Let's replace the Electronics (CategoryL1) node created above with an Electronics (CategoryL1) node that                   * has children i.e. Brand C (Brand)' Brand D (Brand)' and All other (Brand) as follows:                                        Electronics (CategoryL1)                     |                     +-- Brand C (Brand)                     |                     +-- Brand D (Brand)                     |                     +-- All other (Brand)                              */helper = new PartitionActionHelper (adGroupId);  	/*                  * To replace a node we must know its Id and its ParentCriterionId. In this case the parent of the node                   * we are replacing is All other (Root Node)' and was created at Index 1 of the previous ApplyProductPartitionActions call.                   * The node that we are replacing is Electronics (CategoryL1)' and was created at Index 8.                   */var rootId = applyProductPartitionActionsResponse.AdGroupCriterionIds [1];  	electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  	helper.DeletePartition (electronics);  	var parent = new BiddableAdGroupCriterion () {  		Id = rootId  	};  	var electronicsSubdivision = helper.AddSubdivision (parent' new ProductCondition {  		Operand = "CategoryL1"'  		Attribute = "Electronics"  	});  	var brandC = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand C"  	}' 0.35' false);  	var brandD = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = "Brand D"  	}' 0.35' false);  	var otherElectronicsBrands = helper.AddUnit (electronicsSubdivision' new ProductCondition {  		Operand = "Brand"'  		Attribute = null  	}' 0.35' false);  	OutputStatusMessage ("Updating the product partition group to refine Electronics (CategoryL1) with 3 child nodes . . . \n");  	applyProductPartitionActionsResponse = await ApplyProductPartitionActionsAsync (helper.PartitionActions);  	adGroupCriterions = await GetAdGroupCriterionsByIdsAsync (adGroupId' null' CriterionType.ProductPartition);  	/*                  * The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1):                                      All other (Root Node)                     |                     +-- Animals & Pet Supplies (CategoryL1)                     |    |                     |    +-- Pet Supplies (CategoryL2)                     |    |    |                     |    |    +-- Brand A                     |    |    |                         |    |    +-- Brand B                     |    |    |                         |    |    +-- All other (Brand)                     |    |                              |    +-- All other (CategoryL2)                     |                             +-- Electronics (CategoryL1)                     |    |                     |    +-- Brand C (Brand)                     |    |                     |    +-- Brand D (Brand)                     |    |                     |    +-- All other (Brand)                     |                        +-- All other (CategoryL1)                                    */OutputStatusMessage ("The product partition group tree now has 12 nodes' including the children of Electronics (CategoryL1): \n");  	OutputProductPartitions (adGroupCriterions);  	#endregion UpdateTree  	#endregion ManageAdGroup  	#region ManageAds  	/*                  * Create a product ad. You must add at least one ProductAd to the corresponding ad group.                   * A ProductAd is not used directly for delivered ad copy. Instead' the delivery engine generates                   * product ads from the product details that it finds in your Bing Merchant Center store's product catalog.                   * The primary purpose of the ProductAd object is to provide promotional text that the delivery engine                   * adds to the product ads that it generates. For example' if the promotional text is set to                   * “Free shipping on $99 purchases”' the delivery engine will set the product ad’s description to                   * “Free shipping on $99 purchases.”                  */var ads = new Ad[] {  		new ProductAd {  			PromotionalText = "Free shipping on $99 purchases."  		}'  	};  	AddAdsResponse addAdsResponse = await AddAdsAsync ((long)adGroupIds [0]' ads);  	long?[] adIds = addAdsResponse.AdIds.ToArray ();  	BatchError[] adErrors = addAdsResponse.PartialErrors.ToArray ();  	OutputAdsWithPartialErrors (ads' adIds' adErrors);  	#endregion ManageAds  	#region CleanUp  	/* Delete the campaign' ad group' criterion' and ad that were previously added.                   * You should remove this region if you want to view the added entities in the                   * Bing Ads web application or another tool.                  */await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		(long)campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	#endregion CleanUp  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,ShoppingCampaigns,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ShoppingCampaigns.cs,RunAsync,The following statement contains a magic number: electronics.Id = applyProductPartitionActionsResponse.AdGroupCriterionIds [8];  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V10,Targets,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\Targets.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICampaignManagementService> (authorizationData);  	// Specify one or more campaigns.  	var campaigns = new[] {  		new Campaign {  			Name = "Women's Shoes" + DateTime.UtcNow'  			Description = "Red shoes line."'  			BudgetType = BudgetLimitType.MonthlyBudgetSpendUntilDepleted'  			MonthlyBudget = 1000.00'  			TimeZone = "PacificTimeUSCanadaTijuana"'  			DaylightSaving = true'  		}  	};  	// Specify one or more ad groups.  	var adGroups = new[] {  		new AdGroup {  			Name = "Women's Red Shoe Sale"'  			AdDistribution = AdDistribution.Search'  			BiddingModel = BiddingModel.Keyword'  			PricingModel = PricingModel.Cpc'  			StartDate = null'  			EndDate = new Microsoft.BingAds.V10.CampaignManagement.Date {  				Month = 12'  				Day = 31'  				Year = DateTime.UtcNow.Year + 1  			}'  			SearchBid = new Bid {  				Amount = 0.09  			}'  			Language = "English"'  		}  	};  	// Add the campaign and ad group  	AddCampaignsResponse addCampaignsResponse = await AddCampaignsAsync (authorizationData.AccountId' campaigns);  	long?[] campaignIds = addCampaignsResponse.CampaignIds.ToArray ();  	BatchError[] campaignErrors = addCampaignsResponse.PartialErrors.ToArray ();  	long campaignId = (long)campaignIds [0];  	AddAdGroupsResponse addAdGroupsResponse = await AddAdGroupsAsync ((long)campaignId' adGroups);  	long?[] adGroupIds = addAdGroupsResponse.AdGroupIds.ToArray ();  	BatchError[] adGroupErrors = addAdGroupsResponse.PartialErrors.ToArray ();  	long adGroupId = (long)adGroupIds [0];  	// Print the new assigned campaign and ad group identifiers  	OutputCampaignsWithPartialErrors (campaigns' campaignIds' campaignErrors);  	OutputAdGroupsWithPartialErrors (adGroups' adGroupIds' adGroupErrors);  	// Create targets to associate with the campaign and ad group.  	var campaignTarget = new Target {  		Name = "My Campaign Target"'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Tablets"'  					OSNames = new string[] {  						"Windows"  					}  				}'  				new DeviceOSTargetBid {  					BidAdjustment = 10'  					DeviceName = "Smartphones"'  					OSNames = new string[] {  						"Windows"  					}  				}'  			}'  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Monday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleIn'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 50'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 5'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	var adGroupTarget = new Target {  		Name = "My Ad Group Target"'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  	};  	// Each customer has a target library that can be used to set up targeting for any campaign  	// or ad group within the specified customer.   	// Add a target to the library and associate it with the campaign.  	var campaignTargetId = (await AddTargetsToLibraryAsync (new[] {  		campaignTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' campaignTargetId));  	await SetTargetToCampaignAsync (campaignId' campaignTargetId);  	OutputStatusMessage (String.Format ("Associated CampaignId {0} with TargetId {1}.\n"' campaignId' campaignTargetId));  	// Add a target to the library and associate it with the ad group.  	var adGroupTargetId = (await AddTargetsToLibraryAsync (new[] {  		adGroupTarget  	})) [0];  	OutputStatusMessage (String.Format ("Added Target Id: {0}\n"' adGroupTargetId));  	await SetTargetToAdGroupAsync (adGroupId' adGroupTargetId);  	OutputStatusMessage (String.Format ("Associated AdGroupId {0} with TargetId {1}.\n"' adGroupId' adGroupTargetId));  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	var targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Update the ad group's Target object with additional target types.  	// Existing target types such as DayTime must be specified   	// or they will not be included in the updated target.  	var updateAdGroupTarget = new Target {  		Id = adGroupTargetId'  		Name = "My Target"'  		Age = new AgeTarget {  			Bids = new[] {  				new AgeTargetBid {  					BidAdjustment = 10'  					Age = AgeRange.EighteenToTwentyFive  				}  			}  		}'  		DayTime = new DayTimeTarget {  			Bids = new[] {  				new DayTimeTargetBid {  					BidAdjustment = 10'  					Day = Day.Friday'  					FromHour = 1'  					ToHour = 12'  					FromMinute = Minute.Zero'  					ToMinute = Minute.FortyFive  				}  			}  		}'  		DeviceOS = new DeviceOSTarget {  			Bids = new[] {  				new DeviceOSTargetBid {  					BidAdjustment = 20'  					DeviceName = "Tablets"'  				}'  			}'  		}'  		Gender = new GenderTarget {  			Bids = new[] {  				new GenderTargetBid {  					BidAdjustment = 10'  					Gender = GenderType.Female  				}  			}  		}'  		Location = new LocationTarget {  			IntentOption = IntentOption.PeopleSearchingForOrViewingPages'  			CountryTarget = new CountryTarget {  				Bids = new[] {  					new CountryTargetBid {  						BidAdjustment = 10'  						CountryAndRegion = "US"'  						IsExcluded = false  					}  				}  			}'  			MetroAreaTarget = new MetroAreaTarget {  				Bids = new List<MetroAreaTargetBid> {  					new MetroAreaTargetBid {  						BidAdjustment = 15'  						MetroArea = "Seattle-Tacoma' WA' WA US"'  						IsExcluded = false  					}  				}  			}'  			PostalCodeTarget = new PostalCodeTarget {  				Bids = new[] {  					new PostalCodeTargetBid {  						// Bid adjustments are not allowed for location exclusions.   						// If IsExcluded is true' this element will be ignored.  						BidAdjustment = 10'  						PostalCode = "98052' WA US"'  						IsExcluded = true  					}  				}  			}'  			RadiusTarget = new RadiusTarget {  				Bids = new[] {  					new RadiusTargetBid {  						BidAdjustment = 51'  						LatitudeDegrees = 47.755367'  						LongitudeDegrees = -122.091827'  						Radius = 11'  						RadiusUnit = DistanceUnit.Miles  					}  				}  			}  		}  	};  	// Update the Target object associated with the ad group.    	await UpdateTargetsInLibraryAsync (new[] {  		updateAdGroupTarget  	});  	OutputStatusMessage ("Updated the ad group level target as a Target object.\n");  	// Get and print the targets with the GetTargetsByIds operation  	OutputStatusMessage ("Get Campaign and AdGroup targets: \n");  	targets = await GetTargetsByIdsAsync (new[] {  		campaignTargetId'  		adGroupTargetId  	});  	foreach (var target in targets) {  		OutputTarget (target);  	}  	// Get all new and existing targets in the customer library' whether or not they are  	// associated with campaigns or ad groups.  	var allTargetsInfo = await GetTargetsInfoFromLibraryAsync ();  	OutputStatusMessage ("All target identifiers and names from the customer library: \n");  	PrintTargetsInfo (allTargetsInfo);  	// Delete the campaign' ad group' and targets that were previously added.   	// DeleteCampaigns would remove the campaign and ad group' as well as the association  	// between ad groups and campaigns. To explicitly delete the association between an entity   	// and the target' use DeleteTargetFromCampaign and DeleteTargetFromAdGroup respectively.  	await DeleteTargetFromCampaignAsync (campaignId);  	await DeleteTargetFromAdGroupAsync (adGroupId);  	await DeleteCampaignsAsync (authorizationData.AccountId' new[] {  		campaignId  	});  	OutputStatusMessage (String.Format ("Deleted CampaignId {0}\n"' campaignId));  	// DeleteCampaigns deletes the association between the campaign and target' but does not   	// delete the target from the customer library.   	// Call the DeleteTargetsFromLibrary operation for each target that you want to delete.   	// You must specify an array with exactly one item.  	await DeleteTargetsFromLibraryAsync (new[] {  		campaignTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' campaignTargetId));  	await DeleteTargetsFromLibraryAsync (new[] {  		adGroupTargetId  	});  	OutputStatusMessage (String.Format ("Deleted TargetId {0}\n"' adGroupTargetId));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Campaign Management service exceptions  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.ApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.V10.CampaignManagement.EditorialApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (string.Join ("; "' ex.Detail.BatchErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V9,CustomerSignup,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\CustomerSignup.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICustomerManagementService> (authorizationData);  	var getUserResponse = await GetUserAsync (null);  	var user = getUserResponse.User;  	// Only a user with the aggregator role (33) can sign up new customers.   	// If the user does not have the aggregator role' then do not continue.  	if (!getUserResponse.Roles.Contains (33)) {  		OutputStatusMessage ("Only a user with the aggregator role (33) can sign up new customers.");  		return;  	}  	// For Customer.CustomerAddress and Account.BusinessAddress' you can use the same address   	// as your aggregator user' although you must set Id and TimeStamp to null.  	var userAddress = user.ContactInfo.Address;  	userAddress.Id = null;  	userAddress.TimeStamp = null;  	var customer = new Customer {  		// The customer's business address.  		CustomerAddress = userAddress'  		// The list of key and value strings for forward compatibility. This element can be used  		// to avoid otherwise breaking changes when new elements are added in future releases.  		// There are currently no forward compatibility changes for the Customer object.  		ForwardCompatibilityMap = null'  		// The primary business segment of the customer' for example' automotive' food' or entertainment.  		Industry = Industry.Other'  		// The primary country where the customer operates. This country will be the   		// default country for ad groups in the customer’s campaigns.  		MarketCountry = "US"'  		// The primary language that the customer uses. This language will be the   		// default language for ad groups in the customer’s campaigns.  		MarketLanguage = LanguageType.English'  		// The name of the customer. This element can contain a maximum of 100 characters.  		Name = "Child Customer " + DateTime.UtcNow'  	};  	// Optionally you can set up each account with auto tagging.  	// The AutoTag key and value pair is an account level setting that determines whether to append or replace   	// the supported UTM tracking codes within the final URL of ads delivered. The default value is '0'' and  	// Bing Ads will not append any UTM tracking codes to your ad or keyword final URL.  	var accountFCM = new List<KeyValuePair<string' string>> ();  	accountFCM.Add (new KeyValuePair<string' string> ("AutoTag"' "0"));  	var account = new AdvertiserAccount {  		// The type of account. Bing Ads API only supports the Advertiser account.  		AccountType = AccountType.Advertiser'  		// The location where your business is legally registered.   		// The business address is used to determine your tax requirements.  		// BusinessAddress will be required in a future version of the Bing Ads API.  		// Please start using it.  		BusinessAddress = userAddress'  		// The type of currency that is used to settle the account. The service uses the currency information for billing purposes.  		CurrencyType = CurrencyType.USDollar'  		// The list of key and value strings for forward compatibility. This element can be used  		// to avoid otherwise breaking changes when new elements are added in future releases.  		ForwardCompatibilityMap = accountFCM'  		// The name of the account. The name can contain a maximum of 100 characters and must be unique within the customer.  		Name = "Child Account " + DateTime.UtcNow'  		// The identifier of the customer that owns the account. In the Bing Ads API operations   		// that require a customer identifier' this is the identifier that you set the CustomerId SOAP header to.  		ParentCustomerId = (long)user.CustomerId'  		// The TaxId (VAT identifier) is optional. If specified' The VAT identifier must be valid   		// in the country that you specified in the BusinessAddress element. Without a VAT registration   		// number or exemption certificate' taxes might apply based on your business location.  		TaxId = null'  		// The default time-zone value to use for campaigns in this account.  		// If not specified' the time zone will be set to PacificTimeUSCanadaTijuana by default.  		// TimeZone will be required in a future version of the Bing Ads API.  		// Please start using it.  		TimeZone = TimeZoneType.PacificTimeUSCanadaTijuana'  	};  	// Signup a new customer and account for the reseller.   	var signupCustomerResponse = await SignupCustomerAsync (customer' account' user.CustomerId);  	OutputStatusMessage (string.Format ("New Customer and Account:\n"));  	// This is the identifier that you will use to set the CustomerId   	// element in most of the Bing Ads API service operations.  	OutputStatusMessage (string.Format ("\tCustomerId: {0}"' signupCustomerResponse.CustomerId));  	// The read-only system-generated customer number that is used in the Bing Ads web application.   	// The customer number is of the form' Cnnnnnnn' where nnnnnnn is a series of digits.  	OutputStatusMessage (string.Format ("\tCustomerNumber: {0}"' signupCustomerResponse.CustomerNumber));  	// This is the identifier that you will use to set the AccountId and CustomerAccountId   	// elements in most of the Bing Ads API service operations.  	OutputStatusMessage (string.Format ("\tAccountId: {0}"' signupCustomerResponse.AccountId));  	// The read-only system generated account number that is used to identify the account in the Bing Ads web application.   	// The account number has the form xxxxxxxx' where xxxxxxxx is a series of any eight alphanumeric characters.  	OutputStatusMessage (string.Format ("\tAccountNumber: {0}"' signupCustomerResponse.AccountNumber));  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V9,CustomerSignup,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\CustomerSignup.cs,RunAsync,The following statement contains a magic number: if (!getUserResponse.Roles.Contains (33)) {  	OutputStatusMessage ("Only a user with the aggregator role (33) can sign up new customers.");  	return;  }  
Magic Number,BingAdsExamplesLibrary.V9,ManageClient,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ManageClient.cs,RunAsync,The following statement contains a magic number: try {  	OutputStatusMessage ("You must edit the ManageClient.cs file to provide the ClientAccountId for " + "the client link.");  	OutputStatusMessage ("When adding a client link' the client link's ManagingCustomerId is set to the CustomerId of the current " + "authenticated user' who must be a Super Admin of the agency.");  	OutputStatusMessage ("Login as an agency Super Admin user to send a client link invitation' " + "or unlink an existing client link.");  	OutputStatusMessage ("Login as a client Super Admin user to accept a client link invitation.\n");  	Service = new ServiceClient<ICustomerManagementService> (authorizationData);  	UpdateClientLinksResponse updateClientLinksResponse = null;  	// Specify the client link search criteria  	var pageInfo = new Paging {  		Index = 0'  		// The first page  		Size = 100  	// The first 100 client links for this page of results  	};  	var ordering = new OrderBy {  		Field = OrderByField.Number'  		Order = SortOrder.Ascending  	};  	var predicate = new Predicate {  		Field = "ClientAccountId"'  		Operator = PredicateOperator.In'  		Value = ClientAccountId.ToString (CultureInfo.InvariantCulture)  	};  	// Search for client links that match the specified criteria.  	var clientLinks = await SearchClientLinksAsync (new[] {  		ordering  	}' pageInfo' new[] {  		predicate  	});  	// Determine whether the agency is already managing the specified client account.   	// If a link exists with status either Active' LinkInProgress' LinkPending'   	// UnlinkInProgress' or UnlinkPending' the agency may not initiate a duplicate client link.  	ClientLink clientLink;  	var newLinkRequired = true;  	if (clientLinks.Count > 0) {  		clientLink = clientLinks [0];  		OutputStatusMessage (String.Format ("Current ClientLink Status: {0}.\n"' clientLink.Status));  		switch (clientLink.Status) {  		// The agency may choose to initiate the unlink process'   		// which would terminate the existing relationship with the client.   		case ClientLinkStatus.Active:  			clientLink.Status = ClientLinkStatus.UnlinkRequested;  			updateClientLinksResponse = await UpdateClientLinksAsync (new[] {  				clientLink  			});  			OutputStatusMessage ("UpdateClientLinks : UnlinkRequested.\n");  			newLinkRequired = false;  			break;  		// Waiting on a system status transition or waiting for the StartDate.  		case ClientLinkStatus.LinkAccepted:  			OutputStatusMessage ("The status is transitioning towards LinkInProgress.\n");  			newLinkRequired = false;  			break;  		// Waiting on a system status transition.  		case ClientLinkStatus.LinkInProgress:  			OutputStatusMessage ("The status is transitioning towards Active.\n");  			newLinkRequired = false;  			break;  		// When the status is LinkPending' either the agency or client may update the status.  		// The agency may choose to cancel the client link invitation; however' in this example   		// the client will accept the invitation.   		// If the client does not accept or decline the invitation within 30 days' and if the agency  		// does not update the status to LinkCanceled' the system updates the status to LinkExpired.  		case ClientLinkStatus.LinkPending:  			/*                             clientLink.Status = ClientLinkStatus.LinkCanceled;                             updateClientLinksResponse = UpdateClientLinks(new[] { clientLink });                             WriteMessage(String.Format("The agency updated status: LinkCanceled.\n");                              */clientLink.Status = ClientLinkStatus.LinkAccepted;  			updateClientLinksResponse = await UpdateClientLinksAsync (new[] {  				clientLink  			});  			OutputStatusMessage ("UpdateClientLinks: LinkAccepted.\n");  			newLinkRequired = false;  			break;  		// Waiting on a system status transition.  		case ClientLinkStatus.UnlinkInProgress:  			OutputStatusMessage ("The status is transitioning towards Inactive.\n");  			newLinkRequired = false;  			break;  		// Waiting on a system status transition.  		case ClientLinkStatus.UnlinkPending:  			OutputStatusMessage ("The status is transitioning towards Inactive.\n");  			newLinkRequired = false;  			break;  		// The link lifecycle has ended.    		default:  			OutputStatusMessage ("A new client link invitation is required.\n");  			break;  		}  		// Print errors if any occurred when updating the client link.  		if (updateClientLinksResponse != null) {  			PrintPartialErrors (updateClientLinksResponse.OperationErrors' updateClientLinksResponse.PartialErrors);  		}  	}  	// If no links exist between the agency and specified client account' or a link exists with status    	// either Inactive' LinkCanceled' LinkDeclined' LinkExpired' or LinkFailed' then the agency must  	// initiate a new client link.  	if (newLinkRequired) {  		clientLink = new ClientLink {  			ClientAccountId = ClientAccountId'  			ManagingCustomerId = authorizationData.CustomerId'  			IsBillToClient = true'  			Name = "My Client Link"'  			StartDate = null'  			SuppressNotification = true  		};  		var addClientLinksResponse = await AddClientLinksAsync (new[] {  			clientLink  		});  		// Print errors if any occurred when adding the client link.  		PrintPartialErrors (addClientLinksResponse.OperationErrors.ToArray ()' addClientLinksResponse.PartialErrors.ToArray ());  		OutputStatusMessage (string.Format ("The user attempted to add a new ClientLink.\n"));  		OutputStatusMessage (string.Format ("Login as the client Super Admin to accept the agency's request to manage AccountId {0}.\n"' ClientAccountId));  	}  	// Get and print the current client link  	clientLinks = await SearchClientLinksAsync (new[] {  		ordering  	}' pageInfo' new[] {  		predicate  	});  	PrintClientLinks (clientLinks);  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V9,ReportRequests,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ReportRequests.cs,RunAsync,The following statement contains a magic number: try {  	ReportingService = new ReportingServiceManager (authorizationData);  	ReportingService.StatusPollIntervalInMilliseconds = 5000;  	// You can submit one of the example reports' or build your own.  	var reportRequest = GetAccountPerformanceReportRequest (authorizationData.AccountId);  	//var reportRequest = GetAdGroupPerformanceReportRequest(authorizationData.AccountId);  	//var reportRequest = GetAudiencePerformanceReportRequest(authorizationData.AccountId);  	//var reportRequest = GetCampaignPerformanceReportRequest(authorizationData.AccountId);  	//var reportRequest = GetKeywordPerformanceReportRequest(authorizationData.AccountId);  	//var reportRequest = GetProductDimensionPerformanceReportRequest(authorizationData.AccountId);  	//var reportRequest = GetProductPartitionPerformanceReportRequest(authorizationData.AccountId);  	//var reportRequest = GetSearchCampaignChangeHistoryReportRequest(authorizationData.AccountId);  	var reportingDownloadParameters = new ReportingDownloadParameters {  		ReportRequest = reportRequest'  		ResultFileDirectory = FileDirectory'  		ResultFileName = ResultFileName'  		OverwriteResultFile = true'  	};  	// Option A - Background Completion with ReportingServiceManager  	// You can submit a download request and the ReportingServiceManager will automatically   	// return results. The ReportingServiceManager abstracts the details of checking for result file   	// completion' and you don't have to write any code for results polling.  	OutputStatusMessage ("Awaiting Background Completion . . .");  	await BackgroundCompletionAsync (reportingDownloadParameters);  	// Option B - Submit and Download with ReportingServiceManager  	// Submit the download request and then use the ReportingDownloadOperation result to   	// track status until the report is complete e.g. either using  	// TrackAsync or GetStatusAsync.  	//OutputStatusMessage("Awaiting Submit and Download . . .");  	//await SubmitAndDownloadAsync(reportRequest);  	// Option C - Download Results with ReportingServiceManager  	// If for any reason you have to resume from a previous application state'   	// you can use an existing download request identifier and use it   	// to download the result file.   	// For example you might have previously retrieved a request ID using SubmitDownloadAsync.  	//var reportingDownloadOperation = await ReportingService.SubmitDownloadAsync(reportRequest);  	//var requestId = reportingDownloadOperation.RequestId;  	// Given the request ID above' you can resume the workflow and download the report.  	// The report request identifier is valid for two days.   	// If you do not download the report within two days' you must request the report again.  	//OutputStatusMessage("Awaiting Download Results . . .");  	//await DownloadResultsAsync(requestId' authorizationData);  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (String.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Reporting service exceptions  catch (FaultException<Microsoft.BingAds.Reporting.AdApiFaultDetail> ex) {  	OutputStatusMessage (String.Join ("; "' ex.Detail.Errors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.Reporting.ApiFaultDetail> ex) {  	OutputStatusMessage (String.Join ("; "' ex.Detail.OperationErrors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message))));  	OutputStatusMessage (String.Join ("; "' ex.Detail.BatchErrors.Select (error => String.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (ReportingOperationInProgressException ex) {  	OutputStatusMessage ("The result file for the reporting operation is not yet available for download.");  	OutputStatusMessage (ex.Message);  }  catch (ReportingOperationCouldNotBeCompletedException ex) {  	OutputStatusMessage (String.Format ("ReportingOperationCouldNotBeCompletedException Message: {0}"' ex.Message));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V9,ReportRequests,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\ReportRequests.cs,RunAsync,The following statement contains a magic number: ReportingService.StatusPollIntervalInMilliseconds = 5000;  
Magic Number,BingAdsExamplesLibrary.V9,SearchUserAccounts,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\SearchUserAccounts.cs,RunAsync,The following statement contains a magic number: try {  	Service = new ServiceClient<ICustomerManagementService> (authorizationData);  	var getUserResponse = await GetUserAsync (null);  	var user = getUserResponse.User;  	// Search for the Bing Ads accounts that the user can access.  	var accounts = await SearchAccountsByUserIdAsync (user.Id);  	// Optionally if you are enabled for Final Urls' you can update each account with a tracking template.  	var accountFCM = new List<KeyValuePair<string' string>> ();  	accountFCM.Add (new KeyValuePair<string' string> ("TrackingUrlTemplate"' "http://tracker.example.com/?season={_season}&promocode={_promocode}&u={lpurl}"));  	OutputStatusMessage ("The user can access the following Bing Ads accounts: \n");  	foreach (var account in accounts) {  		OutputAccount (account);  		// Optionally you can find out which pilot features the customer is able to use.   		// Each account could belong to a different customer' so use the customer ID in each account.  		var featurePilotFlags = await GetCustomerPilotFeaturesAsync ((long)account.ParentCustomerId);  		OutputStatusMessage ("Customer Pilot flags:");  		OutputStatusMessage (string.Join ("; "' featurePilotFlags.Select (flag => string.Format ("{0}"' flag))));  		// Optionally if you are enabled for Final Urls' you can update each account with a tracking template.  		// The pilot flag value for Final Urls is 194.  		if (featurePilotFlags.Any (pilotFlag => pilotFlag == 194)) {  			account.ForwardCompatibilityMap = accountFCM;  			await UpdateAccountAsync (account);  			OutputStatusMessage (string.Format ("Updated the account with a TrackingUrlTemplate: {0}\n"' accountFCM.ToArray ().SingleOrDefault (keyValuePair => keyValuePair.Key == "TrackingUrlTemplate").Value));  		}  	}  }  // Catch authentication exceptions  catch (OAuthTokenRequestException ex) {  	OutputStatusMessage (string.Format ("Couldn't get OAuth tokens. Error: {0}. Description: {1}"' ex.Details.Error' ex.Details.Description));  }  // Catch Customer Management service exceptions  catch (FaultException<Microsoft.BingAds.CustomerManagement.AdApiFaultDetail> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.Errors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (FaultException<Microsoft.BingAds.CustomerManagement.ApiFault> ex) {  	OutputStatusMessage (string.Join ("; "' ex.Detail.OperationErrors.Select (error => string.Format ("{0}: {1}"' error.Code' error.Message))));  }  catch (Exception ex) {  	OutputStatusMessage (ex.Message);  }  
Magic Number,BingAdsExamplesLibrary.V9,SearchUserAccounts,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\SearchUserAccounts.cs,RunAsync,The following statement contains a magic number: foreach (var account in accounts) {  	OutputAccount (account);  	// Optionally you can find out which pilot features the customer is able to use.   	// Each account could belong to a different customer' so use the customer ID in each account.  	var featurePilotFlags = await GetCustomerPilotFeaturesAsync ((long)account.ParentCustomerId);  	OutputStatusMessage ("Customer Pilot flags:");  	OutputStatusMessage (string.Join ("; "' featurePilotFlags.Select (flag => string.Format ("{0}"' flag))));  	// Optionally if you are enabled for Final Urls' you can update each account with a tracking template.  	// The pilot flag value for Final Urls is 194.  	if (featurePilotFlags.Any (pilotFlag => pilotFlag == 194)) {  		account.ForwardCompatibilityMap = accountFCM;  		await UpdateAccountAsync (account);  		OutputStatusMessage (string.Format ("Updated the account with a TrackingUrlTemplate: {0}\n"' accountFCM.ToArray ().SingleOrDefault (keyValuePair => keyValuePair.Key == "TrackingUrlTemplate").Value));  	}  }  
Magic Number,BingAdsExamplesLibrary.V9,SearchUserAccounts,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v9\SearchUserAccounts.cs,RunAsync,The following statement contains a magic number: if (featurePilotFlags.Any (pilotFlag => pilotFlag == 194)) {  	account.ForwardCompatibilityMap = accountFCM;  	await UpdateAccountAsync (account);  	OutputStatusMessage (string.Format ("Updated the account with a TrackingUrlTemplate: {0}\n"' accountFCM.ToArray ().SingleOrDefault (keyValuePair => keyValuePair.Key == "TrackingUrlTemplate").Value));  }  
Duplicate Code,BingAdsExamplesLibrary.V10,AdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\AdExtensions.cs,GetSampleSiteLinksAdExtensions,The method contains a code clone-set at the following line numbers (starting from the method definition): ((9' 37)' (51' 79))
Duplicate Code,BingAdsExamplesLibrary.V10,BulkAdExtensions,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkAdExtensions.cs,GetSampleBulkSiteLinkAdExtensions,The method contains a code clone-set at the following line numbers (starting from the method definition): ((18' 46)' (58' 86))
Duplicate Code,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The method contains a code clone-set at the following line numbers (starting from the method definition): ((109' 131)' (125' 147))
Duplicate Code,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The method contains a code clone-set at the following line numbers (starting from the method definition): ((196' 232)' (331' 367))
Duplicate Code,BingAdsExamplesLibrary.V10,BulkKeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\BulkKeywordsAds.cs,RunAsync,The method contains a code clone-set at the following line numbers (starting from the method definition): ((202' 232)' (247' 277)' (292' 322)' (337' 367))
Duplicate Code,BingAdsExamplesLibrary.V10,ExampleBase,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\ExampleBase.cs,GetExampleSiteLinksAdExtension,The method contains a code clone-set at the following line numbers (starting from the method definition): ((7' 31)' (43' 67))
Duplicate Code,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The method contains a code clone-set at the following line numbers (starting from the method definition): ((131' 161)' (173' 203)' (215' 245)' (257' 287)' (299' 329))
Duplicate Code,BingAdsExamplesLibrary.V10,KeywordsAds,C:\repos\bing-ads-sdk_BingAds-dotNet-SDK\examples\BingAdsExamples\BingAdsExamplesLibrary\v10\KeywordsAds.cs,RunAsync,The method contains a code clone-set at the following line numbers (starting from the method definition): ((170' 191)' (296' 317))
