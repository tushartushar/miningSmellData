Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Register,The method has 9 parameters.
Long Parameter List,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,RegisterHandler,The method has 6 parameters.
Long Statement,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Register,The length of the statement  "		x.ReceiveFrom (string.Format ("tcp://{2}:{0}/{1}/"' port' Process.GetCurrentProcess ().ProcessName' Environment.MachineName)); " is 126.
Long Statement,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Register,The length of the statement  "	string instanceName = string.Format ("{0}_{1}{2}"' _bus.Endpoint.Address.Uri.Scheme' _bus.Endpoint.Address.Uri.Host' _bus.Endpoint.Address.Uri.AbsolutePath.Replace ("/"' "_")); " is 176.
Long Statement,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Register,The length of the statement  "	var perf = counters.GetType ().GetProperties ().Where (p => p.PropertyType == typeof(RuntimePerformanceCounter)).ToList (); " is 123.
Long Statement,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Register,The length of the statement  "	ThreadPool.RegisterWaitForSingleObject (heartbeat' (state' @out) => SendCustomUpdate ()' null' TimeSpan.FromSeconds (30)' false); " is 129.
Long Statement,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,RegisterRequstReponse,The length of the statement  "		resp.HandleTimeout (_Settings.MessageWaitLifespan.GetValueOrDefault (TimeSpan.FromSeconds (10))' () => handlerComplete.Set ()); " is 127.
Empty Catch Block,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Cleanup,The method has an empty catch block.
Empty Catch Block,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Cleanup,The method has an empty catch block.
Magic Number,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Register,The following statement contains a magic number: _bus = ServiceBusFactory.New (x =>  {  	var port = FindFreePort ();  	ZeroMqAddress.RegisterLocalPort (port);  	x.ReceiveFrom (string.Format ("tcp://{2}:{0}/{1}/"' port' Process.GetCurrentProcess ().ProcessName' Environment.MachineName));  	Log.InfoFormat ("Configured to recieve from port {0} on local machine"' port);  	x.SetPurgeOnStartup (true);  	x.SetNetwork (settings.Network);  	x.UseBsonSerializer ();  	x.SetShutdownTimeout (TimeSpan.FromSeconds (15));  	x.UseZeroMq (configurator =>  {  		if (!string.IsNullOrWhiteSpace (settings.SubscriberOnMachine)) {  			configurator.UseSubscriptionService (string.Format ("tcp://{0}:50000/"' settings.SubscriberOnMachine));  			Log.InfoFormat ("Configured to subscribe to service at tcp://{0}:50000/"' settings.SubscriberOnMachine);  		}  	});  	x.SetDefaultRetryLimit (settings.NumberOfRetries);  	x.UseControlBus ();  	x.UseLog4Net ();  	x.EnableMessageTracing ();  	x.EnableRemoteIntrospection ();  	x.UseHealthMonitoring (30);  	foreach (var a in distributedActions) {  		x.Worker (a);  	}  	foreach (var a in nonDistributedActions) {  		x.Subscribe (a);  	}  	foreach (var s in distributerSettings) {  		x.Distributor (s);  	}  });  
Magic Number,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Register,The following statement contains a magic number: _bus = ServiceBusFactory.New (x =>  {  	var port = FindFreePort ();  	ZeroMqAddress.RegisterLocalPort (port);  	x.ReceiveFrom (string.Format ("tcp://{2}:{0}/{1}/"' port' Process.GetCurrentProcess ().ProcessName' Environment.MachineName));  	Log.InfoFormat ("Configured to recieve from port {0} on local machine"' port);  	x.SetPurgeOnStartup (true);  	x.SetNetwork (settings.Network);  	x.UseBsonSerializer ();  	x.SetShutdownTimeout (TimeSpan.FromSeconds (15));  	x.UseZeroMq (configurator =>  {  		if (!string.IsNullOrWhiteSpace (settings.SubscriberOnMachine)) {  			configurator.UseSubscriptionService (string.Format ("tcp://{0}:50000/"' settings.SubscriberOnMachine));  			Log.InfoFormat ("Configured to subscribe to service at tcp://{0}:50000/"' settings.SubscriberOnMachine);  		}  	});  	x.SetDefaultRetryLimit (settings.NumberOfRetries);  	x.UseControlBus ();  	x.UseLog4Net ();  	x.EnableMessageTracing ();  	x.EnableRemoteIntrospection ();  	x.UseHealthMonitoring (30);  	foreach (var a in distributedActions) {  		x.Worker (a);  	}  	foreach (var a in nonDistributedActions) {  		x.Subscribe (a);  	}  	foreach (var s in distributerSettings) {  		x.Distributor (s);  	}  });  
Magic Number,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Register,The following statement contains a magic number: x.SetShutdownTimeout (TimeSpan.FromSeconds (15));  
Magic Number,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Register,The following statement contains a magic number: x.UseHealthMonitoring (30);  
Magic Number,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,Register,The following statement contains a magic number: ThreadPool.RegisterWaitForSingleObject (heartbeat' (state' @out) => SendCustomUpdate ()' null' TimeSpan.FromSeconds (30)' false);  
Magic Number,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,FindFreePort,The following statement contains a magic number: while (attempts < 1000) {  	var port = randomizer.Next (10000' 20000);  	if (tcpConnInfoArray.All (x => x.LocalEndPoint.Port != port))  		return port;  	attempts++;  }  
Magic Number,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,FindFreePort,The following statement contains a magic number: while (attempts < 1000) {  	var port = randomizer.Next (10000' 20000);  	if (tcpConnInfoArray.All (x => x.LocalEndPoint.Port != port))  		return port;  	attempts++;  }  
Magic Number,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,FindFreePort,The following statement contains a magic number: while (attempts < 1000) {  	var port = randomizer.Next (10000' 20000);  	if (tcpConnInfoArray.All (x => x.LocalEndPoint.Port != port))  		return port;  	attempts++;  }  
Magic Number,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,RegisterRequstReponse,The following statement contains a magic number: _bus.PublishRequest (msg' resp =>  {  	resp.Handle<TOut> (respMsg =>  {  		result = respMsg;  		handlerComplete.Set ();  	});  	resp.HandleTimeout (_Settings.MessageWaitLifespan.GetValueOrDefault (TimeSpan.FromSeconds (10))' () => handlerComplete.Set ());  	resp.HandleFault (fault =>  {  		Log.Error (fault.FailedMessage);  		handlerComplete.Set ();  	});  });  
Magic Number,ShortBus.ZeroMqHost,ZeroMqTransitHost,C:\repos\ewassef_MiniBus\Core Implementations\ShortBus.ZeroMqHost\ZeroMqTransitHost.cs,RegisterRequstReponse,The following statement contains a magic number: resp.HandleTimeout (_Settings.MessageWaitLifespan.GetValueOrDefault (TimeSpan.FromSeconds (10))' () => handlerComplete.Set ());  
