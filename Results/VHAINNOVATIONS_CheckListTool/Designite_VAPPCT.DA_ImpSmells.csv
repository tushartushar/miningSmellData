Implementation smell,Namespace,Class,File,Method,Description
Long Method,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The method has 195 lines of code.
Long Method,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The method has 200 lines of code.
Complex Method,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,GetAuditXML,Cyclomatic complexity of the method is 9
Complex Method,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,Cyclomatic complexity of the method is 38
Complex Method,VAPPCT.DA,CParameter,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CParameter.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,Cyclomatic complexity of the method is 29
Long Parameter List,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,AuditTransaction,The method has 6 parameters.
Long Parameter List,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The method has 5 parameters.
Long Parameter List,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,AuditTransaction,The method has 7 parameters.
Long Parameter List,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The method has 6 parameters.
Long Parameter List,VAPPCT.DA,CData,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CData.cs,CData,The method has 6 parameters.
Long Statement,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,AuditTransaction,The length of the statement  "	plistAudit.AddInputParameter ("pi_vSessionClientIP"' ParamList.GetItemByName ("pi_vSessionClientIP").StringParameterValue); " is 123.
Long Statement,VAPPCT.DA,CParameterList,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CParameterList.cs,GetStatusCode,The length of the statement  "		if ((k_STATUS_CODE)pStatusCode.LongParameterValue == k_STATUS_CODE.Failed || (k_STATUS_CODE)pStatusCode.LongParameterValue == k_STATUS_CODE.Success || (k_STATUS_CODE)pStatusCode.LongParameterValue == k_STATUS_CODE.Unknown) { " is 224.
Long Statement,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,AuditTransaction,The length of the statement  "		return conn.AuditTransaction (strSPName' ParamList' lInStatusCode' strInStatus' out lAuditStatusCode' out strAuditStatus); " is 122.
Long Statement,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,GetMDWSDate,The length of the statement  "	return new System.DateTime (Convert.ToInt32 (strYear)' Convert.ToInt32 (strMonth)' Convert.ToInt32 (strDay)' Convert.ToInt32 (strHH)' Convert.ToInt32 (strMM)' 0); " is 162.
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: for (int i = 0; i < ParamList.Count; i++) {  	CParameter parameter = ParamList.GetItemByIndex (i);  	if (parameter != null) {  		//create a new oledb param from our param and add it to the list  		//this follows how we currently do it in medbase  		OracleParameter oraParameter = new OracleParameter ();  		oraParameter.ParameterName = parameter.ParameterName;  		//set the parameter value' default to string. Probably a better way than the  		//if then else' but this works and we can find it later'  		if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  			oraParameter.Value = parameter.StringParameterValue;  			oraParameter.OracleType = OracleType.VarChar;  			oraParameter.Size = 4000;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  			oraParameter.Value = parameter.LongParameterValue;  			oraParameter.OracleType = OracleType.Int32;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  			oraParameter.Value = parameter.DoubleParameterValue;  			oraParameter.OracleType = OracleType.Double;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.IntParameter) {  			oraParameter.Value = parameter.IntParameterValue;  			oraParameter.OracleType = OracleType.Int32;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  			oraParameter.Value = parameter.DateParameterValue;  			if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  				//if the date is not null then set the value  				oraParameter.Value = parameter.DateParameterValue;  			}  			else {  				//set value to DBNull if date is null  				oraParameter.Value = DBNull.Value;  			}  			oraParameter.OracleType = OracleType.DateTime;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  			//You must begin a transaction before obtaining a temporary LOB.   			//Otherwise' the OracleDataReader may fail to obtain data later.  			OracleTransaction transaction = m_OracleConnection.BeginTransaction ();  			//make a new command  			OracleCommand command = m_OracleConnection.CreateCommand ();  			command.Connection = m_OracleConnection;  			command.Transaction = transaction;  			command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  			command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  			command.ExecuteNonQuery ();  			//get a temp lob  			OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  			//begin batch  			tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  			//convert string to byte array and write to lob'  			//note:encoding must be set to match oracle encoding  			//default encoding for oracle can be found by running  			//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  			System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  			//ascii chars  			byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  			//destination to convert to. convert from ascii to unicode  			UnicodeEncoding encDest = new UnicodeEncoding ();  			byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  			//write the converted data to the lob  			tempLob.Write (buffDest' 0' buffDest.Length);  			//end batch  			tempLob.EndBatch ();  			//set the value of the param =  lob  			oraParameter.OracleType = OracleType.Clob;  			//oraParameter.OracleType = OracleType.NClob;  			oraParameter.Value = tempLob;  			//all done so commit;  			transaction.Commit ();  		}  		else {  			oraParameter.Value = parameter.StringParameterValue;  			oraParameter.OracleType = OracleType.VarChar;  			oraParameter.Size = 4000;  		}  		oraParameter.Direction = parameter.Direction;  		cmd.Parameters.Add (oraParameter);  	}  }  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: for (int i = 0; i < ParamList.Count; i++) {  	CParameter parameter = ParamList.GetItemByIndex (i);  	if (parameter != null) {  		//create a new oledb param from our param and add it to the list  		//this follows how we currently do it in medbase  		OracleParameter oraParameter = new OracleParameter ();  		oraParameter.ParameterName = parameter.ParameterName;  		//set the parameter value' default to string. Probably a better way than the  		//if then else' but this works and we can find it later'  		if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  			oraParameter.Value = parameter.StringParameterValue;  			oraParameter.OracleType = OracleType.VarChar;  			oraParameter.Size = 4000;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  			oraParameter.Value = parameter.LongParameterValue;  			oraParameter.OracleType = OracleType.Int32;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  			oraParameter.Value = parameter.DoubleParameterValue;  			oraParameter.OracleType = OracleType.Double;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.IntParameter) {  			oraParameter.Value = parameter.IntParameterValue;  			oraParameter.OracleType = OracleType.Int32;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  			oraParameter.Value = parameter.DateParameterValue;  			if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  				//if the date is not null then set the value  				oraParameter.Value = parameter.DateParameterValue;  			}  			else {  				//set value to DBNull if date is null  				oraParameter.Value = DBNull.Value;  			}  			oraParameter.OracleType = OracleType.DateTime;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  			//You must begin a transaction before obtaining a temporary LOB.   			//Otherwise' the OracleDataReader may fail to obtain data later.  			OracleTransaction transaction = m_OracleConnection.BeginTransaction ();  			//make a new command  			OracleCommand command = m_OracleConnection.CreateCommand ();  			command.Connection = m_OracleConnection;  			command.Transaction = transaction;  			command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  			command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  			command.ExecuteNonQuery ();  			//get a temp lob  			OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  			//begin batch  			tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  			//convert string to byte array and write to lob'  			//note:encoding must be set to match oracle encoding  			//default encoding for oracle can be found by running  			//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  			System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  			//ascii chars  			byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  			//destination to convert to. convert from ascii to unicode  			UnicodeEncoding encDest = new UnicodeEncoding ();  			byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  			//write the converted data to the lob  			tempLob.Write (buffDest' 0' buffDest.Length);  			//end batch  			tempLob.EndBatch ();  			//set the value of the param =  lob  			oraParameter.OracleType = OracleType.Clob;  			//oraParameter.OracleType = OracleType.NClob;  			oraParameter.Value = tempLob;  			//all done so commit;  			transaction.Commit ();  		}  		else {  			oraParameter.Value = parameter.StringParameterValue;  			oraParameter.OracleType = OracleType.VarChar;  			oraParameter.Size = 4000;  		}  		oraParameter.Direction = parameter.Direction;  		cmd.Parameters.Add (oraParameter);  	}  }  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: if (parameter != null) {  	//create a new oledb param from our param and add it to the list  	//this follows how we currently do it in medbase  	OracleParameter oraParameter = new OracleParameter ();  	oraParameter.ParameterName = parameter.ParameterName;  	//set the parameter value' default to string. Probably a better way than the  	//if then else' but this works and we can find it later'  	if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  		oraParameter.Value = parameter.StringParameterValue;  		oraParameter.OracleType = OracleType.VarChar;  		oraParameter.Size = 4000;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  		oraParameter.Value = parameter.LongParameterValue;  		oraParameter.OracleType = OracleType.Int32;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  		oraParameter.Value = parameter.DoubleParameterValue;  		oraParameter.OracleType = OracleType.Double;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.IntParameter) {  		oraParameter.Value = parameter.IntParameterValue;  		oraParameter.OracleType = OracleType.Int32;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  		oraParameter.Value = parameter.DateParameterValue;  		if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  			//if the date is not null then set the value  			oraParameter.Value = parameter.DateParameterValue;  		}  		else {  			//set value to DBNull if date is null  			oraParameter.Value = DBNull.Value;  		}  		oraParameter.OracleType = OracleType.DateTime;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  		//You must begin a transaction before obtaining a temporary LOB.   		//Otherwise' the OracleDataReader may fail to obtain data later.  		OracleTransaction transaction = m_OracleConnection.BeginTransaction ();  		//make a new command  		OracleCommand command = m_OracleConnection.CreateCommand ();  		command.Connection = m_OracleConnection;  		command.Transaction = transaction;  		command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  		command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		//get a temp lob  		OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  		//begin batch  		tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  		//convert string to byte array and write to lob'  		//note:encoding must be set to match oracle encoding  		//default encoding for oracle can be found by running  		//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  		System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  		//ascii chars  		byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  		//destination to convert to. convert from ascii to unicode  		UnicodeEncoding encDest = new UnicodeEncoding ();  		byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  		//write the converted data to the lob  		tempLob.Write (buffDest' 0' buffDest.Length);  		//end batch  		tempLob.EndBatch ();  		//set the value of the param =  lob  		oraParameter.OracleType = OracleType.Clob;  		//oraParameter.OracleType = OracleType.NClob;  		oraParameter.Value = tempLob;  		//all done so commit;  		transaction.Commit ();  	}  	else {  		oraParameter.Value = parameter.StringParameterValue;  		oraParameter.OracleType = OracleType.VarChar;  		oraParameter.Size = 4000;  	}  	oraParameter.Direction = parameter.Direction;  	cmd.Parameters.Add (oraParameter);  }  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: if (parameter != null) {  	//create a new oledb param from our param and add it to the list  	//this follows how we currently do it in medbase  	OracleParameter oraParameter = new OracleParameter ();  	oraParameter.ParameterName = parameter.ParameterName;  	//set the parameter value' default to string. Probably a better way than the  	//if then else' but this works and we can find it later'  	if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  		oraParameter.Value = parameter.StringParameterValue;  		oraParameter.OracleType = OracleType.VarChar;  		oraParameter.Size = 4000;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  		oraParameter.Value = parameter.LongParameterValue;  		oraParameter.OracleType = OracleType.Int32;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  		oraParameter.Value = parameter.DoubleParameterValue;  		oraParameter.OracleType = OracleType.Double;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.IntParameter) {  		oraParameter.Value = parameter.IntParameterValue;  		oraParameter.OracleType = OracleType.Int32;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  		oraParameter.Value = parameter.DateParameterValue;  		if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  			//if the date is not null then set the value  			oraParameter.Value = parameter.DateParameterValue;  		}  		else {  			//set value to DBNull if date is null  			oraParameter.Value = DBNull.Value;  		}  		oraParameter.OracleType = OracleType.DateTime;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  		//You must begin a transaction before obtaining a temporary LOB.   		//Otherwise' the OracleDataReader may fail to obtain data later.  		OracleTransaction transaction = m_OracleConnection.BeginTransaction ();  		//make a new command  		OracleCommand command = m_OracleConnection.CreateCommand ();  		command.Connection = m_OracleConnection;  		command.Transaction = transaction;  		command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  		command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		//get a temp lob  		OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  		//begin batch  		tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  		//convert string to byte array and write to lob'  		//note:encoding must be set to match oracle encoding  		//default encoding for oracle can be found by running  		//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  		System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  		//ascii chars  		byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  		//destination to convert to. convert from ascii to unicode  		UnicodeEncoding encDest = new UnicodeEncoding ();  		byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  		//write the converted data to the lob  		tempLob.Write (buffDest' 0' buffDest.Length);  		//end batch  		tempLob.EndBatch ();  		//set the value of the param =  lob  		oraParameter.OracleType = OracleType.Clob;  		//oraParameter.OracleType = OracleType.NClob;  		oraParameter.Value = tempLob;  		//all done so commit;  		transaction.Commit ();  	}  	else {  		oraParameter.Value = parameter.StringParameterValue;  		oraParameter.OracleType = OracleType.VarChar;  		oraParameter.Size = 4000;  	}  	oraParameter.Direction = parameter.Direction;  	cmd.Parameters.Add (oraParameter);  }  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  	oraParameter.Value = parameter.LongParameterValue;  	oraParameter.OracleType = OracleType.Int32;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  	oraParameter.Value = parameter.DoubleParameterValue;  	oraParameter.OracleType = OracleType.Double;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.IntParameter) {  	oraParameter.Value = parameter.IntParameterValue;  	oraParameter.OracleType = OracleType.Int32;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  	oraParameter.Value = parameter.DateParameterValue;  	if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  		//if the date is not null then set the value  		oraParameter.Value = parameter.DateParameterValue;  	}  	else {  		//set value to DBNull if date is null  		oraParameter.Value = DBNull.Value;  	}  	oraParameter.OracleType = OracleType.DateTime;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = m_OracleConnection.BeginTransaction ();  	//make a new command  	OracleCommand command = m_OracleConnection.CreateCommand ();  	command.Connection = m_OracleConnection;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  	oraParameter.Value = parameter.LongParameterValue;  	oraParameter.OracleType = OracleType.Int32;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  	oraParameter.Value = parameter.DoubleParameterValue;  	oraParameter.OracleType = OracleType.Double;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.IntParameter) {  	oraParameter.Value = parameter.IntParameterValue;  	oraParameter.OracleType = OracleType.Int32;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  	oraParameter.Value = parameter.DateParameterValue;  	if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  		//if the date is not null then set the value  		oraParameter.Value = parameter.DateParameterValue;  	}  	else {  		//set value to DBNull if date is null  		oraParameter.Value = DBNull.Value;  	}  	oraParameter.OracleType = OracleType.DateTime;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = m_OracleConnection.BeginTransaction ();  	//make a new command  	OracleCommand command = m_OracleConnection.CreateCommand ();  	command.Connection = m_OracleConnection;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: oraParameter.Size = 4000;  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  	oraParameter.Value = parameter.LongParameterValue;  	oraParameter.OracleType = OracleType.Int32;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  	oraParameter.Value = parameter.DoubleParameterValue;  	oraParameter.OracleType = OracleType.Double;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.IntParameter) {  	oraParameter.Value = parameter.IntParameterValue;  	oraParameter.OracleType = OracleType.Int32;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  	oraParameter.Value = parameter.DateParameterValue;  	if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  		//if the date is not null then set the value  		oraParameter.Value = parameter.DateParameterValue;  	}  	else {  		//set value to DBNull if date is null  		oraParameter.Value = DBNull.Value;  	}  	oraParameter.OracleType = OracleType.DateTime;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = m_OracleConnection.BeginTransaction ();  	//make a new command  	OracleCommand command = m_OracleConnection.CreateCommand ();  	command.Connection = m_OracleConnection;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  	oraParameter.Value = parameter.DoubleParameterValue;  	oraParameter.OracleType = OracleType.Double;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.IntParameter) {  	oraParameter.Value = parameter.IntParameterValue;  	oraParameter.OracleType = OracleType.Int32;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  	oraParameter.Value = parameter.DateParameterValue;  	if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  		//if the date is not null then set the value  		oraParameter.Value = parameter.DateParameterValue;  	}  	else {  		//set value to DBNull if date is null  		oraParameter.Value = DBNull.Value;  	}  	oraParameter.OracleType = OracleType.DateTime;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = m_OracleConnection.BeginTransaction ();  	//make a new command  	OracleCommand command = m_OracleConnection.CreateCommand ();  	command.Connection = m_OracleConnection;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.IntParameter) {  	oraParameter.Value = parameter.IntParameterValue;  	oraParameter.OracleType = OracleType.Int32;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  	oraParameter.Value = parameter.DateParameterValue;  	if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  		//if the date is not null then set the value  		oraParameter.Value = parameter.DateParameterValue;  	}  	else {  		//set value to DBNull if date is null  		oraParameter.Value = DBNull.Value;  	}  	oraParameter.OracleType = OracleType.DateTime;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = m_OracleConnection.BeginTransaction ();  	//make a new command  	OracleCommand command = m_OracleConnection.CreateCommand ();  	command.Connection = m_OracleConnection;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  	oraParameter.Value = parameter.DateParameterValue;  	if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  		//if the date is not null then set the value  		oraParameter.Value = parameter.DateParameterValue;  	}  	else {  		//set value to DBNull if date is null  		oraParameter.Value = DBNull.Value;  	}  	oraParameter.OracleType = OracleType.DateTime;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = m_OracleConnection.BeginTransaction ();  	//make a new command  	OracleCommand command = m_OracleConnection.CreateCommand ();  	command.Connection = m_OracleConnection;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = m_OracleConnection.BeginTransaction ();  	//make a new command  	OracleCommand command = m_OracleConnection.CreateCommand ();  	command.Connection = m_OracleConnection;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataConnection,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataConnection.cs,ExecuteOracleSP,The following statement contains a magic number: oraParameter.Size = 4000;  
Magic Number,VAPPCT.DA,CParameterList,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CParameterList.cs,CParameterList,The following statement contains a magic number: this.Capacity = 25;  
Magic Number,VAPPCT.DA,CParameterList,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CParameterList.cs,CParameterList,The following statement contains a magic number: this.Capacity = 25;  
Magic Number,VAPPCT.DA,CParameterList,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CParameterList.cs,AddParameter,The following statement contains a magic number: if (dtValue.Year < 1800) {  	dtValue = new System.DateTime (0);  }  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: for (int i = 0; i < ParamList.Count; i++) {  	CParameter parameter = ParamList.GetItemByIndex (i);  	if (parameter != null) {  		//create a new oledb param from our param and add it to the list  		//this follows how we currently do it in medbase  		//TODO: get direction' length etc from the parameter not hard coded below  		OracleParameter oraParameter = new OracleParameter ();  		oraParameter.ParameterName = parameter.ParameterName;  		//set the parameter value' default to string.   		if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  			oraParameter.Value = parameter.StringParameterValue;  			oraParameter.OracleType = OracleType.VarChar;  			oraParameter.Size = 4000;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  			oraParameter.Value = parameter.LongParameterValue;  			oraParameter.OracleType = OracleType.Int32;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  			oraParameter.Value = parameter.DoubleParameterValue;  			oraParameter.OracleType = OracleType.Double;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  			if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  				//if the date is not null then set the value  				oraParameter.Value = parameter.DateParameterValue;  			}  			else {  				//set value to DBNull if date is null  				oraParameter.Value = DBNull.Value;  			}  			oraParameter.OracleType = OracleType.DateTime;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  			//You must begin a transaction before obtaining a temporary LOB.   			//Otherwise' the OracleDataReader may fail to obtain data later.  			OracleTransaction transaction = conn.Conn.BeginTransaction ();  			//make a new command  			OracleCommand command = conn.Conn.CreateCommand ();  			command.Connection = conn.Conn;  			command.Transaction = transaction;  			command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  			command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  			command.ExecuteNonQuery ();  			//get a temp lob  			OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  			//begin batch  			tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  			//convert string to byte array and write to lob'  			//note:encoding must be set to match oracle encoding  			//default encoding for oracle can be found by running  			//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  			System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  			//ascii chars  			byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  			//destination to convert to. convert from ascii to unicode  			UnicodeEncoding encDest = new UnicodeEncoding ();  			byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  			//write the converted data to the lob  			tempLob.Write (buffDest' 0' buffDest.Length);  			//end batch  			tempLob.EndBatch ();  			//set the value of the param =  lob  			oraParameter.OracleType = OracleType.Clob;  			//oraParameter.OracleType = OracleType.NClob;  			oraParameter.Value = tempLob;  			//all done so commit;  			transaction.Commit ();  		}  		else {  			oraParameter.Value = parameter.StringParameterValue;  			oraParameter.OracleType = OracleType.VarChar;  			oraParameter.Size = 4000;  		}  		oraParameter.Direction = parameter.Direction;  		cmd.Parameters.Add (oraParameter);  	}  }  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: for (int i = 0; i < ParamList.Count; i++) {  	CParameter parameter = ParamList.GetItemByIndex (i);  	if (parameter != null) {  		//create a new oledb param from our param and add it to the list  		//this follows how we currently do it in medbase  		//TODO: get direction' length etc from the parameter not hard coded below  		OracleParameter oraParameter = new OracleParameter ();  		oraParameter.ParameterName = parameter.ParameterName;  		//set the parameter value' default to string.   		if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  			oraParameter.Value = parameter.StringParameterValue;  			oraParameter.OracleType = OracleType.VarChar;  			oraParameter.Size = 4000;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  			oraParameter.Value = parameter.LongParameterValue;  			oraParameter.OracleType = OracleType.Int32;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  			oraParameter.Value = parameter.DoubleParameterValue;  			oraParameter.OracleType = OracleType.Double;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  			if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  				//if the date is not null then set the value  				oraParameter.Value = parameter.DateParameterValue;  			}  			else {  				//set value to DBNull if date is null  				oraParameter.Value = DBNull.Value;  			}  			oraParameter.OracleType = OracleType.DateTime;  		}  		else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  			//You must begin a transaction before obtaining a temporary LOB.   			//Otherwise' the OracleDataReader may fail to obtain data later.  			OracleTransaction transaction = conn.Conn.BeginTransaction ();  			//make a new command  			OracleCommand command = conn.Conn.CreateCommand ();  			command.Connection = conn.Conn;  			command.Transaction = transaction;  			command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  			command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  			command.ExecuteNonQuery ();  			//get a temp lob  			OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  			//begin batch  			tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  			//convert string to byte array and write to lob'  			//note:encoding must be set to match oracle encoding  			//default encoding for oracle can be found by running  			//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  			System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  			//ascii chars  			byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  			//destination to convert to. convert from ascii to unicode  			UnicodeEncoding encDest = new UnicodeEncoding ();  			byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  			//write the converted data to the lob  			tempLob.Write (buffDest' 0' buffDest.Length);  			//end batch  			tempLob.EndBatch ();  			//set the value of the param =  lob  			oraParameter.OracleType = OracleType.Clob;  			//oraParameter.OracleType = OracleType.NClob;  			oraParameter.Value = tempLob;  			//all done so commit;  			transaction.Commit ();  		}  		else {  			oraParameter.Value = parameter.StringParameterValue;  			oraParameter.OracleType = OracleType.VarChar;  			oraParameter.Size = 4000;  		}  		oraParameter.Direction = parameter.Direction;  		cmd.Parameters.Add (oraParameter);  	}  }  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: if (parameter != null) {  	//create a new oledb param from our param and add it to the list  	//this follows how we currently do it in medbase  	//TODO: get direction' length etc from the parameter not hard coded below  	OracleParameter oraParameter = new OracleParameter ();  	oraParameter.ParameterName = parameter.ParameterName;  	//set the parameter value' default to string.   	if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  		oraParameter.Value = parameter.StringParameterValue;  		oraParameter.OracleType = OracleType.VarChar;  		oraParameter.Size = 4000;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  		oraParameter.Value = parameter.LongParameterValue;  		oraParameter.OracleType = OracleType.Int32;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  		oraParameter.Value = parameter.DoubleParameterValue;  		oraParameter.OracleType = OracleType.Double;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  		if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  			//if the date is not null then set the value  			oraParameter.Value = parameter.DateParameterValue;  		}  		else {  			//set value to DBNull if date is null  			oraParameter.Value = DBNull.Value;  		}  		oraParameter.OracleType = OracleType.DateTime;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  		//You must begin a transaction before obtaining a temporary LOB.   		//Otherwise' the OracleDataReader may fail to obtain data later.  		OracleTransaction transaction = conn.Conn.BeginTransaction ();  		//make a new command  		OracleCommand command = conn.Conn.CreateCommand ();  		command.Connection = conn.Conn;  		command.Transaction = transaction;  		command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  		command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		//get a temp lob  		OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  		//begin batch  		tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  		//convert string to byte array and write to lob'  		//note:encoding must be set to match oracle encoding  		//default encoding for oracle can be found by running  		//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  		System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  		//ascii chars  		byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  		//destination to convert to. convert from ascii to unicode  		UnicodeEncoding encDest = new UnicodeEncoding ();  		byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  		//write the converted data to the lob  		tempLob.Write (buffDest' 0' buffDest.Length);  		//end batch  		tempLob.EndBatch ();  		//set the value of the param =  lob  		oraParameter.OracleType = OracleType.Clob;  		//oraParameter.OracleType = OracleType.NClob;  		oraParameter.Value = tempLob;  		//all done so commit;  		transaction.Commit ();  	}  	else {  		oraParameter.Value = parameter.StringParameterValue;  		oraParameter.OracleType = OracleType.VarChar;  		oraParameter.Size = 4000;  	}  	oraParameter.Direction = parameter.Direction;  	cmd.Parameters.Add (oraParameter);  }  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: if (parameter != null) {  	//create a new oledb param from our param and add it to the list  	//this follows how we currently do it in medbase  	//TODO: get direction' length etc from the parameter not hard coded below  	OracleParameter oraParameter = new OracleParameter ();  	oraParameter.ParameterName = parameter.ParameterName;  	//set the parameter value' default to string.   	if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  		oraParameter.Value = parameter.StringParameterValue;  		oraParameter.OracleType = OracleType.VarChar;  		oraParameter.Size = 4000;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  		oraParameter.Value = parameter.LongParameterValue;  		oraParameter.OracleType = OracleType.Int32;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  		oraParameter.Value = parameter.DoubleParameterValue;  		oraParameter.OracleType = OracleType.Double;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  		if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  			//if the date is not null then set the value  			oraParameter.Value = parameter.DateParameterValue;  		}  		else {  			//set value to DBNull if date is null  			oraParameter.Value = DBNull.Value;  		}  		oraParameter.OracleType = OracleType.DateTime;  	}  	else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  		//You must begin a transaction before obtaining a temporary LOB.   		//Otherwise' the OracleDataReader may fail to obtain data later.  		OracleTransaction transaction = conn.Conn.BeginTransaction ();  		//make a new command  		OracleCommand command = conn.Conn.CreateCommand ();  		command.Connection = conn.Conn;  		command.Transaction = transaction;  		command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  		command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  		command.ExecuteNonQuery ();  		//get a temp lob  		OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  		//begin batch  		tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  		//convert string to byte array and write to lob'  		//note:encoding must be set to match oracle encoding  		//default encoding for oracle can be found by running  		//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  		System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  		//ascii chars  		byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  		//destination to convert to. convert from ascii to unicode  		UnicodeEncoding encDest = new UnicodeEncoding ();  		byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  		//write the converted data to the lob  		tempLob.Write (buffDest' 0' buffDest.Length);  		//end batch  		tempLob.EndBatch ();  		//set the value of the param =  lob  		oraParameter.OracleType = OracleType.Clob;  		//oraParameter.OracleType = OracleType.NClob;  		oraParameter.Value = tempLob;  		//all done so commit;  		transaction.Commit ();  	}  	else {  		oraParameter.Value = parameter.StringParameterValue;  		oraParameter.OracleType = OracleType.VarChar;  		oraParameter.Size = 4000;  	}  	oraParameter.Direction = parameter.Direction;  	cmd.Parameters.Add (oraParameter);  }  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  	oraParameter.Value = parameter.LongParameterValue;  	oraParameter.OracleType = OracleType.Int32;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  	oraParameter.Value = parameter.DoubleParameterValue;  	oraParameter.OracleType = OracleType.Double;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  	if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  		//if the date is not null then set the value  		oraParameter.Value = parameter.DateParameterValue;  	}  	else {  		//set value to DBNull if date is null  		oraParameter.Value = DBNull.Value;  	}  	oraParameter.OracleType = OracleType.DateTime;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = conn.Conn.BeginTransaction ();  	//make a new command  	OracleCommand command = conn.Conn.CreateCommand ();  	command.Connection = conn.Conn;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.StringParameter) {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  	oraParameter.Value = parameter.LongParameterValue;  	oraParameter.OracleType = OracleType.Int32;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  	oraParameter.Value = parameter.DoubleParameterValue;  	oraParameter.OracleType = OracleType.Double;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  	if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  		//if the date is not null then set the value  		oraParameter.Value = parameter.DateParameterValue;  	}  	else {  		//set value to DBNull if date is null  		oraParameter.Value = DBNull.Value;  	}  	oraParameter.OracleType = OracleType.DateTime;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = conn.Conn.BeginTransaction ();  	//make a new command  	OracleCommand command = conn.Conn.CreateCommand ();  	command.Connection = conn.Conn;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: oraParameter.Size = 4000;  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.LongParameter) {  	oraParameter.Value = parameter.LongParameterValue;  	oraParameter.OracleType = OracleType.Int32;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  	oraParameter.Value = parameter.DoubleParameterValue;  	oraParameter.OracleType = OracleType.Double;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  	if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  		//if the date is not null then set the value  		oraParameter.Value = parameter.DateParameterValue;  	}  	else {  		//set value to DBNull if date is null  		oraParameter.Value = DBNull.Value;  	}  	oraParameter.OracleType = OracleType.DateTime;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = conn.Conn.BeginTransaction ();  	//make a new command  	OracleCommand command = conn.Conn.CreateCommand ();  	command.Connection = conn.Conn;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DoubleParameter) {  	oraParameter.Value = parameter.DoubleParameterValue;  	oraParameter.OracleType = OracleType.Double;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  	if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  		//if the date is not null then set the value  		oraParameter.Value = parameter.DateParameterValue;  	}  	else {  		//set value to DBNull if date is null  		oraParameter.Value = DBNull.Value;  	}  	oraParameter.OracleType = OracleType.DateTime;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = conn.Conn.BeginTransaction ();  	//make a new command  	OracleCommand command = conn.Conn.CreateCommand ();  	command.Connection = conn.Conn;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.DateParameter) {  	if (!CDataUtils.IsDateNull (parameter.DateParameterValue)) {  		//if the date is not null then set the value  		oraParameter.Value = parameter.DateParameterValue;  	}  	else {  		//set value to DBNull if date is null  		oraParameter.Value = DBNull.Value;  	}  	oraParameter.OracleType = OracleType.DateTime;  }  else if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = conn.Conn.BeginTransaction ();  	//make a new command  	OracleCommand command = conn.Conn.CreateCommand ();  	command.Connection = conn.Conn;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: if (parameter.ParameterType == k_DATA_PARAMETER_TYPE.CLOBParameter) {  	//You must begin a transaction before obtaining a temporary LOB.   	//Otherwise' the OracleDataReader may fail to obtain data later.  	OracleTransaction transaction = conn.Conn.BeginTransaction ();  	//make a new command  	OracleCommand command = conn.Conn.CreateCommand ();  	command.Connection = conn.Conn;  	command.Transaction = transaction;  	command.CommandText = "declare xx clob; begin dbms_lob.createtemporary(xx' false' 0); :tempclob := xx; end;";  	command.Parameters.Add (new OracleParameter ("tempclob"' OracleType.Clob)).Direction = ParameterDirection.Output;  	command.ExecuteNonQuery ();  	//get a temp lob  	OracleLob tempLob = (OracleLob)command.Parameters [0].Value;  	//begin batch  	tempLob.BeginBatch (OracleLobOpenMode.ReadWrite);  	//convert string to byte array and write to lob'  	//note:encoding must be set to match oracle encoding  	//default encoding for oracle can be found by running  	//SELECT value$ FROM sys.props$ WHERE name = 'NLS_CHARACTERSET' ;  	System.Text.ASCIIEncoding encASCII = new System.Text.ASCIIEncoding ();  	//ascii chars  	byte[] buffAsciiBytes = encASCII.GetBytes (parameter.CLOBParameterValue);  	//destination to convert to. convert from ascii to unicode  	UnicodeEncoding encDest = new UnicodeEncoding ();  	byte[] buffDest = Encoding.Convert (encASCII' encDest' buffAsciiBytes);  	//write the converted data to the lob  	tempLob.Write (buffDest' 0' buffDest.Length);  	//end batch  	tempLob.EndBatch ();  	//set the value of the param =  lob  	oraParameter.OracleType = OracleType.Clob;  	//oraParameter.OracleType = OracleType.NClob;  	oraParameter.Value = tempLob;  	//all done so commit;  	transaction.Commit ();  }  else {  	oraParameter.Value = parameter.StringParameterValue;  	oraParameter.OracleType = OracleType.VarChar;  	oraParameter.Size = 4000;  }  
Magic Number,VAPPCT.DA,CDataSet,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataSet.cs,GetOracleDataSet,The following statement contains a magic number: oraParameter.Size = 4000;  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,TruncateString,The following statement contains a magic number: return strText.Substring (0' nChars - 3) + "...";  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,GetMDWSDate,The following statement contains a magic number: if (strDateTime.Length < 15) {  	return GetNullDate ();  }  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,GetDate,The following statement contains a magic number: if (arstrDate.Length < 3) {  	return new System.DateTime (0001' 01' 01' 0' 0' 0);  }  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,GetMilitaryDateAsString,The following statement contains a magic number: if (strMonth.Length < 2)  	strMonth = "0" + strMonth;  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,GetMilitaryDateAsString,The following statement contains a magic number: if (strDay.Length < 2)  	strDay = "0" + strDay;  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,GetDateAsString,The following statement contains a magic number: if (strMonth.Length < 2)  	strMonth = "0" + strMonth;  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,GetDateAsString,The following statement contains a magic number: if (strDay.Length < 2)  	strDay = "0" + strDay;  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,GetDateTimeAsString,The following statement contains a magic number: if (strMonth.Length < 2)  	strMonth = "0" + strMonth;  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,GetDateTimeAsString,The following statement contains a magic number: if (strDay.Length < 2)  	strDay = "0" + strDay;  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,GetDateTimeAsString,The following statement contains a magic number: if (strHours.Length < 2)  	strHours = "0" + strHours;  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,GetDateTimeAsString,The following statement contains a magic number: if (strMinutes.Length < 2)  	strMinutes = "0" + strMinutes;  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,enc,The following statement contains a magic number: for (int i = 0; i < bCEncrypted.Length; i++) {  	string str = bCEncrypted [i].ToString ();  	while (str.Length < 3) {  		str = "0" + str;  	}  	strEnc += str;  }  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,enc,The following statement contains a magic number: while (str.Length < 3) {  	str = "0" + str;  }  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,dec,The following statement contains a magic number: for (int j = 0; j < strEnc.Length; j += 3) {  	bCEncrypted [noffset++] = Convert.ToByte (strEnc.Substring (j' 3));  }  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,dec,The following statement contains a magic number: for (int j = 0; j < strEnc.Length; j += 3) {  	bCEncrypted [noffset++] = Convert.ToByte (strEnc.Substring (j' 3));  }  
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,dec,The following statement contains a magic number: j += 3
Magic Number,VAPPCT.DA,CDataUtils,C:\repos\VHAINNOVATIONS_CheckListTool\VAPPCT.DA\VAPPCT.DA\CDataUtils.cs,dec,The following statement contains a magic number: bCEncrypted [noffset++] = Convert.ToByte (strEnc.Substring (j' 3));  
