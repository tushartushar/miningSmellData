Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The length of the statement  "						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3)); " is 127.
Long Statement,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The length of the statement  "						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this)); " is 126.
Long Statement,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The length of the statement  "						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this)); " is 139.
Long Statement,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The length of the statement  "						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3)); " is 170.
Long Statement,Sample,Resource,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\Resources\Resource.designer.cs,UpdateIdValues,The length of the statement  "			global::AndroidHUD.Resource.Styleable.ProgressWheel_ahBarColor = global::Sample.Resource.Styleable.ProgressWheel_ahBarColor; " is 124.
Long Statement,Sample,Resource,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\Resources\Resource.designer.cs,UpdateIdValues,The length of the statement  "			global::AndroidHUD.Resource.Styleable.ProgressWheel_ahBarLength = global::Sample.Resource.Styleable.ProgressWheel_ahBarLength; " is 126.
Long Statement,Sample,Resource,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\Resources\Resource.designer.cs,UpdateIdValues,The length of the statement  "			global::AndroidHUD.Resource.Styleable.ProgressWheel_ahBarWidth = global::Sample.Resource.Styleable.ProgressWheel_ahBarWidth; " is 124.
Long Statement,Sample,Resource,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\Resources\Resource.designer.cs,UpdateIdValues,The length of the statement  "			global::AndroidHUD.Resource.Styleable.ProgressWheel_ahCircleColor = global::Sample.Resource.Styleable.ProgressWheel_ahCircleColor; " is 130.
Long Statement,Sample,Resource,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\Resources\Resource.designer.cs,UpdateIdValues,The length of the statement  "			global::AndroidHUD.Resource.Styleable.ProgressWheel_ahDelayMillis = global::Sample.Resource.Styleable.ProgressWheel_ahDelayMillis; " is 130.
Long Statement,Sample,Resource,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\Resources\Resource.designer.cs,UpdateIdValues,The length of the statement  "			global::AndroidHUD.Resource.Styleable.ProgressWheel_ahRadius = global::Sample.Resource.Styleable.ProgressWheel_ahRadius; " is 120.
Long Statement,Sample,Resource,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\Resources\Resource.designer.cs,UpdateIdValues,The length of the statement  "			global::AndroidHUD.Resource.Styleable.ProgressWheel_ahRimColor = global::Sample.Resource.Styleable.ProgressWheel_ahRimColor; " is 124.
Long Statement,Sample,Resource,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\Resources\Resource.designer.cs,UpdateIdValues,The length of the statement  "			global::AndroidHUD.Resource.Styleable.ProgressWheel_ahRimWidth = global::Sample.Resource.Styleable.ProgressWheel_ahRimWidth; " is 124.
Long Statement,Sample,Resource,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\Resources\Resource.designer.cs,UpdateIdValues,The length of the statement  "			global::AndroidHUD.Resource.Styleable.ProgressWheel_ahSpinSpeed = global::Sample.Resource.Styleable.ProgressWheel_ahSpinSpeed; " is 126.
Long Statement,Sample,Resource,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\Resources\Resource.designer.cs,UpdateIdValues,The length of the statement  "			global::AndroidHUD.Resource.Styleable.ProgressWheel_ahTextColor = global::Sample.Resource.Styleable.ProgressWheel_ahTextColor; " is 126.
Long Statement,Sample,Resource,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\Resources\Resource.designer.cs,UpdateIdValues,The length of the statement  "			global::AndroidHUD.Resource.Styleable.ProgressWheel_ahTextSize = global::Sample.Resource.Styleable.ProgressWheel_ahTextSize; " is 124.
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following statement contains a magic number: ListView.ItemClick += (sender' e) =>   			{  				var demo = demos[e.Position];    				switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}  			  			};
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,ShowProgressDemo,The following statement contains a magic number: Task.Factory.StartNew (() => {    				int progress = 0;    				while (progress <= 100)  				{  					action (progress);    					Thread.Sleep (500);  					progress += 10;  				}    				AndHUD.Shared.Dismiss (this);  			});
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,ShowProgressDemo,The following statement contains a magic number: Task.Factory.StartNew (() => {    				int progress = 0;    				while (progress <= 100)  				{  					action (progress);    					Thread.Sleep (500);  					progress += 10;  				}    				AndHUD.Shared.Dismiss (this);  			});
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,ShowProgressDemo,The following statement contains a magic number: Task.Factory.StartNew (() => {    				int progress = 0;    				while (progress <= 100)  				{  					action (progress);    					Thread.Sleep (500);  					progress += 10;  				}    				AndHUD.Shared.Dismiss (this);  			});
Magic Number,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,ShowDemo,The following statement contains a magic number: Task.Factory.StartNew(() => {    				action();    				Thread.Sleep(3000);    				AndHUD.Shared.Dismiss(this);  			});
Missing Default,Sample,MainActivity,D:\research\architectureSmells\repos\aritchie_acrmvvmcross\Components\AndHUD-1.3.1\samples\AndHUD.Sample\AndHUD.Sample\MainActivity.cs,OnCreate,The following switch statement is missing a default case: switch (demo)  				{  					case "Status Indicator Only":  						AndHUD.Shared.Show(this' null' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Status Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Non-Modal Indicator and Text":  						AndHUD.Shared.Show(this' "Loading..."' -1' MaskType.None' TimeSpan.FromSeconds(5));  						break;  					case "Progress Only":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' null' progress' MaskType.Clear));  						break;  					case "Progress and Text":  						ShowProgressDemo(progress => AndHUD.Shared.Show(this' "Loading... " + progress + "%"' progress' MaskType.Clear));  						break;  					case "Success Image Only":  						AndHUD.Shared.ShowSuccessWithStatus(this' null' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Success Image and Text":  						AndHUD.Shared.ShowSuccessWithStatus(this' "It Worked!"' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image Only":  						AndHUD.Shared.ShowErrorWithStatus(this' null' MaskType.Clear' TimeSpan.FromSeconds(3));  						break;  					case "Error Image and Text":  						AndHUD.Shared.ShowErrorWithStatus(this' "It no worked :("' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Toast":  						AndHUD.Shared.ShowToast(this' "This is a toast... Cheers!"' MaskType.Black' TimeSpan.FromSeconds(3)' true);  						break;  					case "Toast Non-Centered":  						AndHUD.Shared.ShowToast(this' "This is a non-centered Toast..."' MaskType.Clear' TimeSpan.FromSeconds(3)' false);  						break;  					case "Custom Image":  						AndHUD.Shared.ShowImage(this' Resource.Drawable.ic_questionstatus' "Custom Image..."' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Click Callback":  						AndHUD.Shared.ShowToast(this' "Click this toast to close it!"' MaskType.Clear' null' true' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Cancellable Callback":  						AndHUD.Shared.ShowToast(this' "Click back button to cancel/close it!"' MaskType.None' null' true' null' () => AndHUD.Shared.Dismiss(this));  						break;  					case "Long Message":  						AndHUD.Shared.Show(this' "This is a longer message to display!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  					case "Really Long Message":  						AndHUD.Shared.Show(this' "This is a really really long message to display as a status indicator' so you should shorten it!"' -1' MaskType.Black' TimeSpan.FromSeconds(3));  						break;  				}
