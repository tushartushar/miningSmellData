Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Neo.IronLua,Program,C:\repos\neolithos_neolua\NeoCmd\Program.cs,RunScript,The length of the statement  "				Console.CursorLeft = Console.WindowWidth - csCompile.Length - (sSize.Length > 0 ? sSize.Length + 3 : 0) - sCompileTime.Length - csRuntime.Length - sRunTime.Length - 1; " is 167.
Long Statement,Neo.IronLua,Program,C:\repos\neolithos_neolua\NeoCmd\Program.cs,Main,The length of the statement  "              WriteText(ConsoleColor.DarkYellow' "Compile emits stack trace information and runtime functions' now."); Console.WriteLine(); " is 125.
Magic Number,Neo.IronLua,Program,C:\repos\neolithos_neolua\NeoCmd\Program.cs,WriteVariableValue,The following statement contains a magic number: if (iLength < sValue.Length)  			{  				sValue = sValue.Substring(0' iLength - 3) + "...";  				WriteText(ConsoleColor.DarkCyan' sValue);  			}  			else  			{  				WriteText(ConsoleColor.DarkCyan' sValue);  				Console.WriteLine();  			}
Magic Number,Neo.IronLua,Program,C:\repos\neolithos_neolua\NeoCmd\Program.cs,WriteCommand,The following statement contains a magic number: Console.CursorLeft = 2;
Magic Number,Neo.IronLua,Program,C:\repos\neolithos_neolua\NeoCmd\Program.cs,WriteCommand,The following statement contains a magic number: Console.CursorLeft = 12;
Magic Number,Neo.IronLua,Program,C:\repos\neolithos_neolua\NeoCmd\Program.cs,InputCommand,The following statement contains a magic number: while (true)        {          string sInput = Console.ReadLine();          if (sInput.Length == 0)          {            sLine = sbLine.ToString();            return Commands.Run;          }          else if (IsCommand(sInput))          {            string sCommand = sInput.Trim();            if (sCommand.StartsWith(":q"' StringComparison.OrdinalIgnoreCase))            {              sLine = String.Empty;              return Commands.Exit;            }            if (sCommand.StartsWith(":h"' StringComparison.OrdinalIgnoreCase))            {              sLine = String.Empty;              return Commands.Help;            }            else if (sCommand.StartsWith(":load"' StringComparison.OrdinalIgnoreCase))            {              sLine = sCommand.Substring(5).Trim();              return Commands.Load;            }            else if (sCommand.StartsWith(":list"' StringComparison.OrdinalIgnoreCase))            {              sLine = sCommand.Substring(5).Trim();              return Commands.List;            }  					else if (sCommand.StartsWith(":cache"' StringComparison.OrdinalIgnoreCase))  					{  						sLine = sCommand.Substring(6).Trim();  						return Commands.Cache;  					}            else if (sCommand.StartsWith(":c"' StringComparison.OrdinalIgnoreCase))            {              sbLine.Clear();              Console.WriteLine("> ");            }            else if (sCommand.StartsWith(":debugoff"' StringComparison.OrdinalIgnoreCase))            {              sLine = Boolean.FalseString;              return Commands.Debug;            }            else if (sCommand.StartsWith(":debugon"' StringComparison.OrdinalIgnoreCase))            {              sLine = Boolean.TrueString;              return Commands.Debug;            }            else if (sCommand.StartsWith(":debugtrace"' StringComparison.OrdinalIgnoreCase))            {              sLine = "trace";              return Commands.Debug;            }            else if (sCommand.StartsWith(":env"' StringComparison.OrdinalIgnoreCase))            {              sLine = "true";              return Commands.Environment;            }            else              WriteError("Unkown command.");          }  				else if (sbLine.Length == 0 && sInput.Length > 1 && sInput[0] == '=')  				{  					sLine = "return " + sInput.Substring(1);  					return Commands.Run;  				}  				else          {            sbLine.AppendLine(sInput);            Console.Write("> ");          }        }
Magic Number,Neo.IronLua,Program,C:\repos\neolithos_neolua\NeoCmd\Program.cs,InputCommand,The following statement contains a magic number: while (true)        {          string sInput = Console.ReadLine();          if (sInput.Length == 0)          {            sLine = sbLine.ToString();            return Commands.Run;          }          else if (IsCommand(sInput))          {            string sCommand = sInput.Trim();            if (sCommand.StartsWith(":q"' StringComparison.OrdinalIgnoreCase))            {              sLine = String.Empty;              return Commands.Exit;            }            if (sCommand.StartsWith(":h"' StringComparison.OrdinalIgnoreCase))            {              sLine = String.Empty;              return Commands.Help;            }            else if (sCommand.StartsWith(":load"' StringComparison.OrdinalIgnoreCase))            {              sLine = sCommand.Substring(5).Trim();              return Commands.Load;            }            else if (sCommand.StartsWith(":list"' StringComparison.OrdinalIgnoreCase))            {              sLine = sCommand.Substring(5).Trim();              return Commands.List;            }  					else if (sCommand.StartsWith(":cache"' StringComparison.OrdinalIgnoreCase))  					{  						sLine = sCommand.Substring(6).Trim();  						return Commands.Cache;  					}            else if (sCommand.StartsWith(":c"' StringComparison.OrdinalIgnoreCase))            {              sbLine.Clear();              Console.WriteLine("> ");            }            else if (sCommand.StartsWith(":debugoff"' StringComparison.OrdinalIgnoreCase))            {              sLine = Boolean.FalseString;              return Commands.Debug;            }            else if (sCommand.StartsWith(":debugon"' StringComparison.OrdinalIgnoreCase))            {              sLine = Boolean.TrueString;              return Commands.Debug;            }            else if (sCommand.StartsWith(":debugtrace"' StringComparison.OrdinalIgnoreCase))            {              sLine = "trace";              return Commands.Debug;            }            else if (sCommand.StartsWith(":env"' StringComparison.OrdinalIgnoreCase))            {              sLine = "true";              return Commands.Environment;            }            else              WriteError("Unkown command.");          }  				else if (sbLine.Length == 0 && sInput.Length > 1 && sInput[0] == '=')  				{  					sLine = "return " + sInput.Substring(1);  					return Commands.Run;  				}  				else          {            sbLine.AppendLine(sInput);            Console.Write("> ");          }        }
Magic Number,Neo.IronLua,Program,C:\repos\neolithos_neolua\NeoCmd\Program.cs,InputCommand,The following statement contains a magic number: while (true)        {          string sInput = Console.ReadLine();          if (sInput.Length == 0)          {            sLine = sbLine.ToString();            return Commands.Run;          }          else if (IsCommand(sInput))          {            string sCommand = sInput.Trim();            if (sCommand.StartsWith(":q"' StringComparison.OrdinalIgnoreCase))            {              sLine = String.Empty;              return Commands.Exit;            }            if (sCommand.StartsWith(":h"' StringComparison.OrdinalIgnoreCase))            {              sLine = String.Empty;              return Commands.Help;            }            else if (sCommand.StartsWith(":load"' StringComparison.OrdinalIgnoreCase))            {              sLine = sCommand.Substring(5).Trim();              return Commands.Load;            }            else if (sCommand.StartsWith(":list"' StringComparison.OrdinalIgnoreCase))            {              sLine = sCommand.Substring(5).Trim();              return Commands.List;            }  					else if (sCommand.StartsWith(":cache"' StringComparison.OrdinalIgnoreCase))  					{  						sLine = sCommand.Substring(6).Trim();  						return Commands.Cache;  					}            else if (sCommand.StartsWith(":c"' StringComparison.OrdinalIgnoreCase))            {              sbLine.Clear();              Console.WriteLine("> ");            }            else if (sCommand.StartsWith(":debugoff"' StringComparison.OrdinalIgnoreCase))            {              sLine = Boolean.FalseString;              return Commands.Debug;            }            else if (sCommand.StartsWith(":debugon"' StringComparison.OrdinalIgnoreCase))            {              sLine = Boolean.TrueString;              return Commands.Debug;            }            else if (sCommand.StartsWith(":debugtrace"' StringComparison.OrdinalIgnoreCase))            {              sLine = "trace";              return Commands.Debug;            }            else if (sCommand.StartsWith(":env"' StringComparison.OrdinalIgnoreCase))            {              sLine = "true";              return Commands.Environment;            }            else              WriteError("Unkown command.");          }  				else if (sbLine.Length == 0 && sInput.Length > 1 && sInput[0] == '=')  				{  					sLine = "return " + sInput.Substring(1);  					return Commands.Run;  				}  				else          {            sbLine.AppendLine(sInput);            Console.Write("> ");          }        }
Magic Number,Neo.IronLua,Program,C:\repos\neolithos_neolua\NeoCmd\Program.cs,RunScript,The following statement contains a magic number: try  			{  				Stopwatch sw = new Stopwatch();  				sw.Start();    				// compile chunk  				LuaChunk c = lua.CompileChunk(code()' sName' new LuaCompileOptions() { DebugEngine = debugEngine });    				string sCompileTime = String.Format("{0:N0} ms"' sw.ElapsedMilliseconds);  				sw.Reset();  				sw.Start();    				// run chunk  				LuaResult r = global.DoChunk(c);  				string sRunTime = String.Format("{0:N0} ms"' sw.ElapsedMilliseconds);    				string sSize;  				if (c.Size < 0)  					sSize = "unknown";  				else if (c.Size == 0)  					sSize = String.Empty;  				else  					sSize = c.Size.ToString("N0") + " byte";    				// start with a new line  				if (Console.CursorLeft > 0)  					Console.WriteLine();    				// print result  				if (r.Count > 0)  				{  					for (int i = 0; i < r.Count; i++)  						WriteVariable(i' r[i]);  				}    				// print summary  				const string csCompile = "==> compile: ";  				const string csRuntime = " run: ";    				Console.CursorLeft = Console.WindowWidth - csCompile.Length - (sSize.Length > 0 ? sSize.Length + 3 : 0) - sCompileTime.Length - csRuntime.Length - sRunTime.Length - 1;  				WriteText(ConsoleColor.DarkGreen' csCompile);  				WriteText(ConsoleColor.Green' sCompileTime);  				if (sSize.Length > 0)  				{  					WriteText(ConsoleColor.DarkGreen' " [");  					WriteText(ConsoleColor.Green' sSize);  					WriteText(ConsoleColor.DarkGreen' "]");  				}  				WriteText(ConsoleColor.DarkGreen' csRuntime);  				WriteText(ConsoleColor.Green' sRunTime);  				Console.WriteLine();  			}  			catch (LuaParseException e)  			{  				WriteText(ConsoleColor.DarkRed' String.Format("Parse error at line {0:N0} (column: {1:N0}):"' e.Line' e.Column));  				Console.WriteLine();  				WriteText(ConsoleColor.DarkRed' "  " + e.Message);  				Console.WriteLine();  			}  			catch (Exception e)  			{  				Exception ex = e is TargetInvocationException ? e.InnerException : e;  				WriteException(ex);  			}
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStackLine,The following statement contains a magic number: Console.CursorLeft = Console.WindowWidth - 16;
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStackLine,The following statement contains a magic number: if (e == null)            Console.Write(new string(' '' 16));          else          {            string sFileName = Path.GetFileName(e.SourceName);            if (sFileName.Length > 12)              sFileName = sFileName.Substring(0' 12);            else if (sFileName.Length < 12)              sFileName = sFileName.PadRight(12);              string sLine = e.SourceLine.ToString().PadLeft(4);            if (sLine.Length > 4)              sLine = sLine.Substring(0' 4);              WriteText(ConsoleColor.DarkGray' sFileName);            WriteText(ConsoleColor.Gray' sLine);          }
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStackLine,The following statement contains a magic number: if (e == null)            Console.Write(new string(' '' 16));          else          {            string sFileName = Path.GetFileName(e.SourceName);            if (sFileName.Length > 12)              sFileName = sFileName.Substring(0' 12);            else if (sFileName.Length < 12)              sFileName = sFileName.PadRight(12);              string sLine = e.SourceLine.ToString().PadLeft(4);            if (sLine.Length > 4)              sLine = sLine.Substring(0' 4);              WriteText(ConsoleColor.DarkGray' sFileName);            WriteText(ConsoleColor.Gray' sLine);          }
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStackLine,The following statement contains a magic number: if (e == null)            Console.Write(new string(' '' 16));          else          {            string sFileName = Path.GetFileName(e.SourceName);            if (sFileName.Length > 12)              sFileName = sFileName.Substring(0' 12);            else if (sFileName.Length < 12)              sFileName = sFileName.PadRight(12);              string sLine = e.SourceLine.ToString().PadLeft(4);            if (sLine.Length > 4)              sLine = sLine.Substring(0' 4);              WriteText(ConsoleColor.DarkGray' sFileName);            WriteText(ConsoleColor.Gray' sLine);          }
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStackLine,The following statement contains a magic number: if (e == null)            Console.Write(new string(' '' 16));          else          {            string sFileName = Path.GetFileName(e.SourceName);            if (sFileName.Length > 12)              sFileName = sFileName.Substring(0' 12);            else if (sFileName.Length < 12)              sFileName = sFileName.PadRight(12);              string sLine = e.SourceLine.ToString().PadLeft(4);            if (sLine.Length > 4)              sLine = sLine.Substring(0' 4);              WriteText(ConsoleColor.DarkGray' sFileName);            WriteText(ConsoleColor.Gray' sLine);          }
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStackLine,The following statement contains a magic number: if (e == null)            Console.Write(new string(' '' 16));          else          {            string sFileName = Path.GetFileName(e.SourceName);            if (sFileName.Length > 12)              sFileName = sFileName.Substring(0' 12);            else if (sFileName.Length < 12)              sFileName = sFileName.PadRight(12);              string sLine = e.SourceLine.ToString().PadLeft(4);            if (sLine.Length > 4)              sLine = sLine.Substring(0' 4);              WriteText(ConsoleColor.DarkGray' sFileName);            WriteText(ConsoleColor.Gray' sLine);          }
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStackLine,The following statement contains a magic number: if (e == null)            Console.Write(new string(' '' 16));          else          {            string sFileName = Path.GetFileName(e.SourceName);            if (sFileName.Length > 12)              sFileName = sFileName.Substring(0' 12);            else if (sFileName.Length < 12)              sFileName = sFileName.PadRight(12);              string sLine = e.SourceLine.ToString().PadLeft(4);            if (sLine.Length > 4)              sLine = sLine.Substring(0' 4);              WriteText(ConsoleColor.DarkGray' sFileName);            WriteText(ConsoleColor.Gray' sLine);          }
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStackLine,The following statement contains a magic number: if (e == null)            Console.Write(new string(' '' 16));          else          {            string sFileName = Path.GetFileName(e.SourceName);            if (sFileName.Length > 12)              sFileName = sFileName.Substring(0' 12);            else if (sFileName.Length < 12)              sFileName = sFileName.PadRight(12);              string sLine = e.SourceLine.ToString().PadLeft(4);            if (sLine.Length > 4)              sLine = sLine.Substring(0' 4);              WriteText(ConsoleColor.DarkGray' sFileName);            WriteText(ConsoleColor.Gray' sLine);          }
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStackLine,The following statement contains a magic number: if (e == null)            Console.Write(new string(' '' 16));          else          {            string sFileName = Path.GetFileName(e.SourceName);            if (sFileName.Length > 12)              sFileName = sFileName.Substring(0' 12);            else if (sFileName.Length < 12)              sFileName = sFileName.PadRight(12);              string sLine = e.SourceLine.ToString().PadLeft(4);            if (sLine.Length > 4)              sLine = sLine.Substring(0' 4);              WriteText(ConsoleColor.DarkGray' sFileName);            WriteText(ConsoleColor.Gray' sLine);          }
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStack,The following statement contains a magic number: try          {            if (stack.Length > 9)              iStart = stack.Length - 8;            else              iStart = 0;              for (int i = iStart; i < stack.Length; i++)              UpdateStackLine(iTop++' stack[i]);            UpdateStackLine(iTop++' e);              while (iTop < 9)              UpdateStackLine(iTop++' null);          }          finally          {            Console.CursorLeft = iCurrentLeft;            Console.CursorTop = iCurrentTop;          }
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStack,The following statement contains a magic number: try          {            if (stack.Length > 9)              iStart = stack.Length - 8;            else              iStart = 0;              for (int i = iStart; i < stack.Length; i++)              UpdateStackLine(iTop++' stack[i]);            UpdateStackLine(iTop++' e);              while (iTop < 9)              UpdateStackLine(iTop++' null);          }          finally          {            Console.CursorLeft = iCurrentLeft;            Console.CursorTop = iCurrentTop;          }
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStack,The following statement contains a magic number: try          {            if (stack.Length > 9)              iStart = stack.Length - 8;            else              iStart = 0;              for (int i = iStart; i < stack.Length; i++)              UpdateStackLine(iTop++' stack[i]);            UpdateStackLine(iTop++' e);              while (iTop < 9)              UpdateStackLine(iTop++' null);          }          finally          {            Console.CursorLeft = iCurrentLeft;            Console.CursorTop = iCurrentTop;          }
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStack,The following statement contains a magic number: Thread.Sleep(100);
Missing Default,Neo.IronLua,Program,C:\repos\neolithos_neolua\NeoCmd\Program.cs,Main,The following switch statement is missing a default case: switch (cmd)          {            case Commands.List:              // list all variables in global              WriteText(ConsoleColor.DarkYellow' "List global:");              Console.WriteLine();              foreach (var c in global)                WriteVariable(c.Key' c.Value);              Console.WriteLine();              break;            case Commands.Load:              RunScript(() => File.ReadAllText(Path.GetFullPath(sLine))' Path.GetFileName(sLine));              break;            case Commands.Debug:             if(sLine =="trace")             {               WriteText(ConsoleColor.DarkYellow' "Compile emits traceline code' now."); Console.WriteLine();               debugEngine = debugConsole;             }             else if (sLine == Boolean.TrueString)              {                WriteText(ConsoleColor.DarkYellow' "Compile emits stack trace information and runtime functions' now."); Console.WriteLine();  							debugEngine = LuaStackTraceDebugger.Default;              }              else              {                WriteText(ConsoleColor.DarkYellow' "Compile creates dynamic functions' now."); Console.WriteLine();                debugEngine = null;              }              Console.WriteLine();              break;            case Commands.Environment:              WriteText(ConsoleColor.DarkYellow' "New environment created."); Console.WriteLine();              Console.WriteLine();              global = lua.CreateEnvironment<LuaCommandGlobal>();              break;  					case Commands.Cache:  						lua.DumpRuleCaches(Console.Out);  				    Console.WriteLine();  						break;            case Commands.Help:              WriteText(ConsoleColor.DarkYellow' "Commands:"); Console.WriteLine();              WriteCommand(":q"' "Exit the application.");              WriteCommand(":list"' "Lists all global variables.");              WriteCommand(":load"' "Loads the lua-script from a file.");              WriteCommand(":debugoff"' "Tell the compiler to emit no debug informations.");              WriteCommand(":debugon"' "Let the compiler emit debug informations.");              WriteCommand(":debugtrace"' "Let the compiler emit trace line functionality.");              WriteCommand(":c"' "Clears the current script buffer.");              WriteCommand(":env"' "Create a fresh environment.");              WriteCommand(":cache"' "Shows the content of the binder cache.");              Console.WriteLine();              break;            case Commands.Run:              if (sLine.Length > 0)                RunScript(() => sLine' "line");              break;            case Commands.Exit:              return;          }
