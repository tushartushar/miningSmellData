Implementation smell,Namespace,Class,File,Method,Description
Long Method,Neo.IronLua,Program,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,Main,The method has 104 lines of code.
Complex Method,Neo.IronLua,Program,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,InputCommand,Cyclomatic complexity of the method is 17
Complex Method,Neo.IronLua,Program,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,Main,Cyclomatic complexity of the method is 16
Long Statement,Neo.IronLua,Program,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,RunScript,The length of the statement  "				Console.CursorLeft = Console.WindowWidth - csCompile.Length - (chunkSize.Length > 0 ? chunkSize.Length + 3 : 0) - compileTime.Length - csRuntime.Length - sRunTime.Length - 1; " is 174.
Long Statement,Neo.IronLua,Program,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,Main,The length of the statement  "							WriteText(ConsoleColor.DarkYellow' "Compile emits stack trace information and runtime functions' now."); Console.WriteLine(); " is 125.
Magic Number,Neo.IronLua,Program,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,WriteVariableValue,The following statement contains a magic number: stringValue = stringValue.Substring(0' length - 3) + "...";
Magic Number,Neo.IronLua,Program,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,WriteCommand,The following statement contains a magic number: Console.CursorLeft = 2;
Magic Number,Neo.IronLua,Program,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,WriteCommand,The following statement contains a magic number: Console.CursorLeft = 12;
Magic Number,Neo.IronLua,Program,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,RunScript,The following statement contains a magic number: Console.CursorLeft = Console.WindowWidth - csCompile.Length - (chunkSize.Length > 0 ? chunkSize.Length + 3 : 0) - compileTime.Length - csRuntime.Length - sRunTime.Length - 1;
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStackLine,The following statement contains a magic number: Console.CursorLeft = Console.WindowWidth - 16;
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStackLine,The following statement contains a magic number: Console.Write(new string(' '' 16));
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStack,The following statement contains a magic number: var start = stack.Length > 9  						? stack.Length - 8  						: 0;
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStack,The following statement contains a magic number: var start = stack.Length > 9  						? stack.Length - 8  						: 0;
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStack,The following statement contains a magic number: top < 9
Magic Number,Neo.IronLua,LuaTraceLineConsoleDebugger,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,UpdateStack,The following statement contains a magic number: Thread.Sleep(100);
Missing Default,Neo.IronLua,Program,C:\research\architectureSmells\repos\neolithos_neolua\NeoCmd\Program.cs,Main,The following switch statement is missing a default case: switch (cmd)  				{  					case Commands.List:  						// list all variables in global  						WriteText(ConsoleColor.DarkYellow' "List global:");  						Console.WriteLine();  						foreach (var c in global)  							WriteVariable(c.Key' c.Value);  						Console.WriteLine();  						break;  					case Commands.Load:  						RunScript(() => File.ReadAllText(Path.GetFullPath(line))' Path.GetFileName(line));  						break;  					case Commands.Debug:  						if (line == "trace")  						{  							WriteText(ConsoleColor.DarkYellow' "Compile emits traceline code' now."); Console.WriteLine();  							debugEngine = debugConsole;  						}  						else if(line == "except")  						{  							WriteText(ConsoleColor.DarkYellow' "Compile emits exception code' now."); Console.WriteLine();  							debugEngine = LuaExceptionDebugger.Default;  						}  						else if (line == Boolean.TrueString)  						{  							WriteText(ConsoleColor.DarkYellow' "Compile emits stack trace information and runtime functions' now."); Console.WriteLine();  							debugEngine = LuaStackTraceDebugger.Default;  						}  						else  						{  							WriteText(ConsoleColor.DarkYellow' "Compile creates dynamic functions' now."); Console.WriteLine();  							debugEngine = null;  						}  						Console.WriteLine();  						break;  					case Commands.Environment:  						WriteText(ConsoleColor.DarkYellow' "New environment created."); Console.WriteLine();  						Console.WriteLine();  						global = lua.CreateEnvironment<LuaCommandGlobal>();  						break;  					case Commands.Cache:  						lua.DumpRuleCaches(Console.Out);  						Console.WriteLine();  						break;  					case Commands.Help:  						WriteText(ConsoleColor.DarkYellow' "Commands:"); Console.WriteLine();  						WriteCommand(":q"' "Exit the application.");  						WriteCommand(":list"' "Lists all global variables.");  						WriteCommand(":load"' "Loads the lua-script from a file.");  						WriteCommand(":debugoff"' "Tell the compiler to emit no debug informations.");  						WriteCommand(":debugon"' "Let the compiler emit debug informations.");  						WriteCommand(":debugtrace"' "Let the compiler emit trace line functionality.");  						WriteCommand(":debugexcept"' "Let the compiler emit exception line functionality.");  						WriteCommand(":c"' "Clears the current script buffer.");  						WriteCommand(":env"' "Create a fresh environment.");  						WriteCommand(":cache"' "Shows the content of the binder cache.");  						Console.WriteLine();  						break;  					case Commands.Run:  						if (line.Length > 0)  							RunScript(() => line' "line");  						break;  					case Commands.Exit:  						return;  				}
