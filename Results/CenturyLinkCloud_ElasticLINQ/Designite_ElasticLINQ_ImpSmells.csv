Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ElasticLinq.Request.Formatters,SearchRequestFormatter,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Formatters\SearchRequestFormatter.cs,CreateBody,Cyclomatic complexity of the method is 11
Complex Method,ElasticLinq.Request.Formatters,SearchRequestFormatter,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Formatters\SearchRequestFormatter.cs,Build,Cyclomatic complexity of the method is 13
Complex Method,ElasticLinq.Request.Visitors,FacetExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,VisitMethodCall,Cyclomatic complexity of the method is 8
Complex Method,ElasticLinq.Utility,TypeHelper,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Utility\TypeHelper.cs,FindIEnumerable,Cyclomatic complexity of the method is 9
Long Parameter List,ElasticLinq,ElasticConnection,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticConnection.cs,ElasticConnection,The method has 6 parameters. Parameters: endpoint' userName' password' timeout' index' options
Long Parameter List,ElasticLinq,ElasticConnection,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticConnection.cs,ElasticConnection,The method has 7 parameters. Parameters: innerMessageHandler' endpoint' userName' password' index' timeout' options
Long Parameter List,ElasticLinq.Logging,ILog,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Logging\ILog.cs,Log,The method has 5 parameters. Parameters: type' ex' additionalInfo' messageFormat' args
Long Parameter List,ElasticLinq.Logging,NullLog,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Logging\NullLog.cs,Log,The method has 5 parameters. Parameters: type' ex' additionalInfo' messageFormat' args
Long Parameter List,ElasticLinq.Mapping,ElasticMapping,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Mapping\ElasticMapping.cs,ElasticMapping,The method has 6 parameters. Parameters: camelCaseFieldNames' camelCaseTypeNames' pluralizeTypeNames' lowerCaseAnalyzedFieldValues' enumFormat' conversionCulture
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter averageFloatNullableMethodInfo is 30.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter averageDoubleNullableMethodInfo is 31.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter averageDecimalNullableMethodInfo is 32.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter averageIntNullableSelectorMethodInfo is 36.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter averageLongNullableSelectorMethodInfo is 37.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter averageFloatSelectorMethodInfo is 30.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter averageFloatNullableSelectorMethodInfo is 38.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter averageDoubleSelectorMethodInfo is 31.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter averageDoubleNullableSelectorMethodInfo is 39.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter averageDecimalSelectorMethodInfo is 32.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter averageDecimalNullableSelectorMethodInfo is 40.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter sumIntNullableSelectorMethodInfo is 32.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter sumLongNullableSelectorMethodInfo is 33.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter sumFloatNullableSelectorMethodInfo is 34.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter sumDoubleNullableSelectorMethodInfo is 35.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter sumDecimalNullableSelectorMethodInfo is 36.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter firstOrDefaultPredicateMethodInfo is 33.
Long Identifier,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,,The length of the parameter singleOrDefaultPredicateMethodInfo is 34.
Long Identifier,ElasticLinq,ElasticQueryExtensions,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticQueryExtensions.cs,,The length of the parameter queryStringWithFieldsMethodInfo is 31.
Long Identifier,ElasticLinq,ElasticQueryExtensions,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticQueryExtensions.cs,,The length of the parameter orderByScoreDescendingMethodInfo is 32.
Long Identifier,ElasticLinq,ElasticQueryExtensions,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticQueryExtensions.cs,,The length of the parameter thenByScoreDescendingMethodInfo is 31.
Long Identifier,ElasticLinq.Mapping,CouchbaseElasticMapping,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Mapping\CouchbaseElasticMapping.cs,,The length of the parameter TypeCriteriaMissingExceptionMessage is 35.
Long Identifier,ElasticLinq.Mapping,MappingHelpers,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Mapping\MappingHelpers.cs,,The length of the parameter BasicTypeSelectionPropertyCriteria is 34.
Long Identifier,ElasticLinq.Request.Visitors,PartialEvaluator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\PartialEvaluator.cs,,The length of the parameter doNotEvaluateMembersDeclaredOn is 30.
Long Identifier,ElasticLinq.Request.Visitors,PartialEvaluator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\PartialEvaluator.cs,,The length of the parameter doNotEvaluateMethodsDeclaredOn is 30.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,CountAsync,The length of the statement  "            return (int)await ExecuteAsync(source.Provider' FinalExpression(source' countPredicateMethodInfo.Value' predicate)' cancellationToken); " is 135.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,LongCountAsync,The length of the statement  "            return (long)await ExecuteAsync(source.Provider' FinalExpression(source' longCountMethodInfo.Value)' cancellationToken); " is 120.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,LongCountAsync,The length of the statement  "            return (long)await ExecuteAsync(source.Provider' FinalExpression(source' longCountPredicateMethodInfo.Value' predicate)' cancellationToken); " is 140.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,MinAsync,The length of the statement  "            return (TResult)await ExecuteAsync(source.Provider' FinalExpression<TSource' TResult>(source' minSelectorMethodInfo.Value' selector)' cancellationToken); " is 153.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,MaxAsync,The length of the statement  "            return (TResult)await ExecuteAsync(source.Provider' FinalExpression<TSource' TResult>(source' maxSelectorMethodInfo.Value' selector)' cancellationToken); " is 153.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,ToDictionaryAsync,The length of the statement  "            return ((IEnumerable<TSource>)await ExecuteAsync(source.Provider' source.Expression' cancellationToken)).ToDictionary(keySelector); " is 131.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,ToDictionaryAsync,The length of the statement  "            return ((IEnumerable<TSource>)await ExecuteAsync(source.Provider' source.Expression' cancellationToken)).ToDictionary(keySelector' elementSelector); " is 148.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,FinalExpression,The length of the statement  "            return Expression.Call(null' method.MakeGenericMethod(typeof(TSource)' typeof(TResult))' new[] { source.Expression }.Concat(arguments)); " is 136.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double)await ExecuteAsync(source.Provider' FinalExpression(source' averageIntMethodInfo.Value)' cancellationToken); " is 123.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double?)await ExecuteAsync(source.Provider' FinalExpression(source' averageIntNullableMethodInfo.Value)' cancellationToken); " is 132.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double)await ExecuteAsync(source.Provider' FinalExpression(source' averageLongMethodInfo.Value)' cancellationToken); " is 124.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double)await ExecuteAsync(source.Provider' FinalExpression(source' averageLongNullableMethodInfo.Value)' cancellationToken); " is 132.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (float)await ExecuteAsync(source.Provider' FinalExpression(source' averageFloatMethodInfo.Value)' cancellationToken); " is 124.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (float?)await ExecuteAsync(source.Provider' FinalExpression(source' averageFloatNullableMethodInfo.Value)' cancellationToken); " is 133.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double)await ExecuteAsync(source.Provider' FinalExpression(source' averageDoubleMethodInfo.Value)' cancellationToken); " is 126.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double?)await ExecuteAsync(source.Provider' FinalExpression(source' averageDoubleNullableMethodInfo.Value)' cancellationToken); " is 135.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (decimal)await ExecuteAsync(source.Provider' FinalExpression(source' averageDecimalMethodInfo.Value)' cancellationToken); " is 128.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (decimal?)await ExecuteAsync(source.Provider' FinalExpression(source' averageDecimalNullableMethodInfo.Value)' cancellationToken); " is 137.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double)await ExecuteAsync(source.Provider' FinalExpression(source' averageIntSelectorMethodInfo.Value' selector)' cancellationToken); " is 141.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double?)await ExecuteAsync(source.Provider' FinalExpression(source' averageIntNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 150.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (float)await ExecuteAsync(source.Provider' FinalExpression(source' averageFloatSelectorMethodInfo.Value' selector)' cancellationToken); " is 142.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (float?)await ExecuteAsync(source.Provider' FinalExpression(source' averageFloatNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 151.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double)await ExecuteAsync(source.Provider' FinalExpression(source' averageLongSelectorMethodInfo.Value' selector)' cancellationToken); " is 142.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double?)await ExecuteAsync(source.Provider' FinalExpression(source' averageLongNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 151.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double)await ExecuteAsync(source.Provider' FinalExpression(source' averageDoubleSelectorMethodInfo.Value' selector)' cancellationToken); " is 144.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (double?)await ExecuteAsync(source.Provider' FinalExpression(source' averageDoubleNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 153.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (decimal)await ExecuteAsync(source.Provider' FinalExpression(source' averageDecimalSelectorMethodInfo.Value' selector)' cancellationToken); " is 146.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,AverageAsync,The length of the statement  "            return (decimal)await ExecuteAsync(source.Provider' FinalExpression(source' averageDecimalNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 154.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (int)await ExecuteAsync(source.Provider' FinalExpression(source' sumIntNullableMethodInfo.Value)' cancellationToken); " is 124.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (long?)await ExecuteAsync(source.Provider' FinalExpression(source' sumLongNullableMethodInfo.Value)' cancellationToken); " is 127.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (float)await ExecuteAsync(source.Provider' FinalExpression(source' sumFloatMethodInfo.Value)' cancellationToken); " is 120.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (float?)await ExecuteAsync(source.Provider' FinalExpression(source' sumFloatNullableMethodInfo.Value)' cancellationToken); " is 129.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (double)await ExecuteAsync(source.Provider' FinalExpression(source' sumDoubleMethodInfo.Value)' cancellationToken); " is 122.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (double?)await ExecuteAsync(source.Provider' FinalExpression(source' sumDoubleNullableMethodInfo.Value)' cancellationToken); " is 131.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (decimal)await ExecuteAsync(source.Provider' FinalExpression(source' sumDecimalMethodInfo.Value)' cancellationToken); " is 124.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (decimal?)await ExecuteAsync(source.Provider' FinalExpression(source' sumDecimalNullableMethodInfo.Value)' cancellationToken); " is 133.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (int)await ExecuteAsync(source.Provider' FinalExpression(source' sumIntSelectorMethodInfo.Value' selector)' cancellationToken); " is 134.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (int?)await ExecuteAsync(source.Provider' FinalExpression(source' sumIntNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 143.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (long)await ExecuteAsync(source.Provider' FinalExpression(source' sumLongSelectorMethodInfo.Value' selector)' cancellationToken); " is 136.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (long?)await ExecuteAsync(source.Provider' FinalExpression(source' sumLongNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 145.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (float)await ExecuteAsync(source.Provider' FinalExpression(source' sumFloatSelectorMethodInfo.Value' selector)' cancellationToken); " is 138.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (float?)await ExecuteAsync(source.Provider' FinalExpression(source' sumFloatNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 147.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (double)await ExecuteAsync(source.Provider' FinalExpression(source' sumDoubleSelectorMethodInfo.Value' selector)' cancellationToken); " is 140.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (double?)await ExecuteAsync(source.Provider' FinalExpression(source' sumDoubleNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 149.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (decimal)await ExecuteAsync(source.Provider' FinalExpression(source' sumDecimalSelectorMethodInfo.Value' selector)' cancellationToken); " is 142.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SumAsync,The length of the statement  "            return (decimal?)await ExecuteAsync(source.Provider' FinalExpression(source' sumDecimalNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 151.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,FirstAsync,The length of the statement  "            return (TSource)await ExecuteAsync(source.Provider' FinalExpression(source' firstPredicateMethodInfo.Value' predicate)' cancellationToken); " is 139.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,FirstOrDefaultAsync,The length of the statement  "            return (TSource)await ExecuteAsync(source.Provider' FinalExpression(source' firstOrDefaultMethodInfo.Value)' cancellationToken); " is 128.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,FirstOrDefaultAsync,The length of the statement  "            return (TSource)await ExecuteAsync(source.Provider' FinalExpression(source' firstOrDefaultPredicateMethodInfo.Value' predicate)' cancellationToken); " is 148.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SingleAsync,The length of the statement  "            return (TSource)await ExecuteAsync(source.Provider' FinalExpression(source' singleMethodInfo.Value)' cancellationToken); " is 120.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SingleAsync,The length of the statement  "            return (TSource)await ExecuteAsync(source.Provider' FinalExpression(source' singlePredicateMethodInfo.Value' predicate)' cancellationToken); " is 140.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SingleOrDefaultAsync,The length of the statement  "            return (TSource)await ExecuteAsync(source.Provider' FinalExpression(source' singleOrDefaultMethodInfo.Value)' cancellationToken); " is 129.
Long Statement,ElasticLinq.Async,AsyncQueryable,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Async\AsyncQueryable.cs,SingleOrDefaultAsync,The length of the statement  "            return (TSource)await ExecuteAsync(source.Provider' FinalExpression(source' singleOrDefaultPredicateMethodInfo.Value' predicate)' cancellationToken); " is 149.
Long Statement,ElasticLinq,ElasticConnection,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticConnection.cs,SendRequestAsync,The length of the statement  "            log.Debug(null' null' "Response: {0} {1} (in {2}ms)"' (int)response.StatusCode' response.StatusCode' stopwatch.ElapsedMilliseconds); " is 132.
Long Statement,ElasticLinq,ElasticConnection,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticConnection.cs,ParseResponse,The length of the statement  "                log.Debug(null' null' "Deserialized {0} bytes into {1} in {2}ms"' responseStream.Length' resultSummary' stopwatch.ElapsedMilliseconds); " is 135.
Long Statement,ElasticLinq,ElasticFields,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticFields.cs,BuildException,The length of the statement  "            return new InvalidOperationException($"ElasticFields.{memberName} is a property for mapping queries to Elasticsearch and should not be evaluated directly."); " is 157.
Long Statement,ElasticLinq,ElasticMethods,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticMethods.cs,BuildException,The length of the statement  "            return new InvalidOperationException($"ElasticMethods.{memberName} is a method for mapping queries to Elasticsearch and should not be called directly."); " is 153.
Long Statement,ElasticLinq,ElasticQueryExtensions,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticQueryExtensions.cs,QueryString,The length of the statement  "            return CreateQueryMethodCall(source' queryStringWithFieldsMethodInfo' Expression.Constant(query)' Expression.Constant(fields)); " is 127.
Long Statement,ElasticLinq,ElasticQueryExtensions,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticQueryExtensions.cs,Highlight,The length of the statement  "            return CreateQueryMethodCall<TSource' TKey>(source' highlightScoreMethodInfo' Expression.Quote(predicate)' Expression.Constant(highlight ?? new Highlight())); " is 158.
Long Statement,ElasticLinq,ElasticQueryExtensions,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticQueryExtensions.cs,CreateQueryMethodCall,The length of the statement  "            var callExpression = Expression.Call(null' method.MakeGenericMethod(typeof(TSource))' new[] { source.Expression }.Concat(arguments)); " is 133.
Long Statement,ElasticLinq,ElasticQueryExtensions,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticQueryExtensions.cs,CreateQueryMethodCall,The length of the statement  "            var callExpression = Expression.Call(null' method.MakeGenericMethod(typeof(TSource)' typeof(TKey))' new[] { source.Expression }.Concat(arguments)); " is 147.
Long Statement,ElasticLinq,ElasticQueryProvider,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticQueryProvider.cs,ExecuteAsync,The length of the statement  "                        // If the response has a large number of hits then the List<T> instance might end up allocating an array on the large object heap. " is 130.
Long Statement,ElasticLinq,ElasticQueryProvider,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticQueryProvider.cs,ExecuteAsync,The length of the statement  "                        // This means that the elements in that array can survive multiple rounds of garbage collection' even if they are not actually " is 126.
Long Statement,ElasticLinq.Mapping,CouchbaseElasticMapping,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Mapping\CouchbaseElasticMapping.cs,GetFieldName,The length of the statement  "                    return GetFieldName(type' (MemberExpression)memberExpression.Expression) + "." + GetMemberName(memberExpression.Member); " is 120.
Long Statement,ElasticLinq.Mapping,CouchbaseElasticMapping,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Mapping\CouchbaseElasticMapping.cs,GetFieldName,The length of the statement  "                    throw new NotSupportedException($"Unknown expression type {memberExpression.Expression.NodeType} for left hand side of expression {memberExpression}"); " is 151.
Long Statement,ElasticLinq.Mapping,ElasticMapping,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Mapping\ElasticMapping.cs,ReformatValueIfEnum,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(value)' $"Value '{value}' is not defined for enum type '{returnType.FullName}'."); " is 127.
Long Statement,ElasticLinq.Mapping,ElasticMapping,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Mapping\ElasticMapping.cs,GetFieldName,The length of the statement  "                    return GetFieldName(type' (MemberExpression)memberExpression.Expression) + "." + GetFieldName(type' memberExpression.Member); " is 125.
Long Statement,ElasticLinq.Mapping,ElasticMapping,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Mapping\ElasticMapping.cs,GetFieldName,The length of the statement  "                    throw new NotSupportedException($"Unknown expression type {memberExpression.Expression.NodeType} for left hand side of expression {memberExpression}"); " is 151.
Long Statement,ElasticLinq.Request.Criteria,QueryCriteriaRewriter,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Criteria\QueryCriteriaRewriter.cs,Rewrite,The length of the statement  "            var shouldCriteria = (canFlattenOrCriteria ? orCriteria.SelectMany(o => o.Criteria) : Enumerable.Empty<OrCriteria>()).ToList(); " is 127.
Long Statement,ElasticLinq.Request.Criteria,RangeCriteria,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Criteria\RangeCriteria.cs,SpecificationsCanBeCombined,The length of the statement  "            return specifications.Count(r => r.Comparison == RangeComparison.GreaterThan || r.Comparison == RangeComparison.GreaterThanOrEqual) < 2 " is 135.
Long Statement,ElasticLinq.Request.Criteria,RangeCriteria,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Criteria\RangeCriteria.cs,SpecificationsCanBeCombined,The length of the statement  "                 && specifications.Count(r => r.Comparison == RangeComparison.LessThan || r.Comparison == RangeComparison.LessThanOrEqual) < 2; " is 126.
Long Statement,ElasticLinq.Request,ElasticRequestProcessor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\ElasticRequestProcessor.cs,ParseResponse,The length of the statement  "                log.Debug(null' null' "Deserialized {0} bytes into {1} in {2}ms"' responseStream.Length' resultSummary' stopwatch.ElapsedMilliseconds); " is 135.
Long Statement,ElasticLinq.Request.Visitors,FacetExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,GetFacetMaterializer,The length of the statement  "                return new ListTermlessFacetsElasticMaterializer(projector' projection.ReturnType' ((ConstantExpression)groupBy).Value); " is 120.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitPrefix,The length of the statement  "                return new CriteriaExpression(new PrefixCriteria(fieldName' ((ConstantExpression)startsWithExpression).Value.ToString())); " is 122.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitContains,The length of the statement  "                return new CriteriaExpression(TermsCriteria.Build(executionMode' Mapping.GetFieldName(SourceType' cm.MemberExpression)' cm.MemberExpression.Member' values)); " is 157.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitEquals,The length of the statement  "                    : new CriteriaExpression(new TermCriteria(Mapping.GetFieldName(SourceType' cm.MemberExpression)' cm.MemberExpression.Member' cm.ConstantExpression.Value)); " is 155.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,UnwrapNullableMethodExpression,The length of the statement  "            if (lhsMemberExpression != null && m.Member.Name == "HasValue" && m.Member.DeclaringType.IsGenericOf(typeof(Nullable<>))) " is 121.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitNotEqual,The length of the statement  "                : new CriteriaExpression(NotCriteria.Create(new TermCriteria(Mapping.GetFieldName(SourceType' cm.MemberExpression)' cm.MemberExpression.Member' cm.ConstantExpression.Value))); " is 175.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitRange,The length of the statement  "            return new CriteriaExpression(new RangeCriteria(field' cm.MemberExpression.Member' rangeComparison' cm.ConstantExpression.Value)); " is 130.
Long Statement,ElasticLinq.Request.Visitors,ElasticFieldsExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticFieldsExpressionVisitor.cs,VisitElasticField,The length of the statement  "            return Expression.Convert(Expression.PropertyOrField(BindingParameter' "_" + m.Member.Name.ToLowerInvariant())' m.Type); " is 120.
Long Statement,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,CompleteHitTranslation,The length of the statement  "                ((ChainMaterializer)materializer).Next = new ListHitsElasticMaterializer(itemProjector ?? DefaultItemProjector' finalItemType ?? SourceType); " is 141.
Long Statement,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryString,The length of the statement  "            var criteriaExpression = new CriteriaExpression(new QueryStringCriteria(constantQueryExpression.Value.ToString()' constantFields)); " is 131.
Long Statement,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitWhere,The length of the statement  "            var criteriaExpression = lambda.Body as CriteriaExpression ?? BooleanMemberAccessBecomesEquals(lambda.Body) as CriteriaExpression; " is 130.
Long Statement,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitSelect,The length of the statement  "                throw new NotSupportedException("Select method with T parameter is supported' additional parameters like index are not"); " is 121.
Long Statement,ElasticLinq.Request.Visitors,MemberProjectionExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\MemberProjectionExpressionVisitor.cs,VisitFieldSelection,The length of the statement  "            var getFieldExpression = Expression.Call(null' GetDictionaryValueMethod' Expression.PropertyOrField(BindingParameter' "fields")' Expression.Constant(fieldName)' Expression.Constant(m.Type)); " is 190.
Long Statement,ElasticLinq.Utility,TypeHelper,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Utility\TypeHelper.cs,GetReturnType,The length of the statement  "            throw new NotSupportedException($"Member '{memberInfo.Name}' on type {declaredName} is of unsupported type '{memberInfo.GetType().FullName}'"); " is 143.
Complex Conditional,ElasticLinq.Request.Visitors,PartialEvaluator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\PartialEvaluator.cs,ShouldEvaluate,The conditional expression  "e is MemberExpression && doNotEvaluateMembersDeclaredOn.Contains(((MemberExpression)e).Member.DeclaringType) ||                 (e is MethodCallExpression && doNotEvaluateMethodsDeclaredOn.Contains(((MethodCallExpression)e).Method.DeclaringType))"  is complex.
Magic Number,ElasticLinq,ElasticQueryProvider,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\ElasticQueryProvider.cs,ExecuteAsync,The following statement contains a magic number: try              {                  ElasticResponse response;                  if (translation.SearchRequest.Filter == ConstantCriteria.False)                  {                      response = new ElasticResponse();                  }                  else                  {                      response = await requestProcessor.SearchAsync(translation.SearchRequest' cancellationToken);                      if (response == null)                          throw new InvalidOperationException("No HTTP response received.");                  }                    var result = translation.Materializer.Materialize(response);                    if (response.hits != null)                  {                      var hits = response.hits.hits;                      if (hits != null && hits.Capacity > 4096)                      {                          // If the response has a large number of hits then the List<T> instance might end up allocating an array on the large object heap.                          // This means that the elements in that array can survive multiple rounds of garbage collection' even if they are not actually                          // reachable anymore.                          // Clearing out the collection after we materialized the result means the elements can be freed up.                          hits.Clear();                      }                  }                    return result;              }              catch (AggregateException ex)              {                  ExceptionDispatchInfo.Capture(ex.InnerException).Throw();                  return null;  // Never called' as the above code re-throws              }
Magic Number,ElasticLinq.Request.Criteria,RangeCriteria,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Criteria\RangeCriteria.cs,SpecificationsCanBeCombined,The following statement contains a magic number: return specifications.Count(r => r.Comparison == RangeComparison.GreaterThan || r.Comparison == RangeComparison.GreaterThanOrEqual) < 2                   && specifications.Count(r => r.Comparison == RangeComparison.LessThan || r.Comparison == RangeComparison.LessThanOrEqual) < 2;
Magic Number,ElasticLinq.Request.Criteria,RangeCriteria,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Criteria\RangeCriteria.cs,SpecificationsCanBeCombined,The following statement contains a magic number: return specifications.Count(r => r.Comparison == RangeComparison.GreaterThan || r.Comparison == RangeComparison.GreaterThanOrEqual) < 2                   && specifications.Count(r => r.Comparison == RangeComparison.LessThan || r.Comparison == RangeComparison.LessThanOrEqual) < 2;
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (node.Method.DeclaringType == typeof(Enumerable) || node.Method.DeclaringType == typeof(Queryable))              {                  var source = node.Arguments[0];                    if (node.Method.Name == "GroupBy" && node.Arguments.Count == 2)                  {                      groupBy = node.Arguments[1].GetLambda().Body;                      return Visit(source);                  }                    if (node.Method.Name == "Select" && node.Arguments.Count == 2)                  {                      var y = Visit(node.Arguments[1]).GetLambda();                      selectProjection = Expression.Lambda(y.Body' bindingParameter);                      return Visit(source);                  }                    if (node.Method.Name == "Take" && node.Arguments.Count == 2)                      return VisitTake(source' node.Arguments[1]);                    // Consider whether to take the groupby operation and rebind the semantics into the projection                  // and remove it from the expression tree so that processing can continue.                  var reboundExpression = RebindAggregateOperation(node);                  if (reboundExpression != null && !source.Type.IsGenericOf(typeof(IGrouping<'>)))                  {                      selectProjection = Expression.Lambda(reboundExpression' bindingParameter);                      return Visit(source);                  }                    // Rebinding an individual element within a Select                  if (source is ParameterExpression)                  {                      if (reboundExpression != null)                          return reboundExpression;                  }              }
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (node.Method.DeclaringType == typeof(Enumerable) || node.Method.DeclaringType == typeof(Queryable))              {                  var source = node.Arguments[0];                    if (node.Method.Name == "GroupBy" && node.Arguments.Count == 2)                  {                      groupBy = node.Arguments[1].GetLambda().Body;                      return Visit(source);                  }                    if (node.Method.Name == "Select" && node.Arguments.Count == 2)                  {                      var y = Visit(node.Arguments[1]).GetLambda();                      selectProjection = Expression.Lambda(y.Body' bindingParameter);                      return Visit(source);                  }                    if (node.Method.Name == "Take" && node.Arguments.Count == 2)                      return VisitTake(source' node.Arguments[1]);                    // Consider whether to take the groupby operation and rebind the semantics into the projection                  // and remove it from the expression tree so that processing can continue.                  var reboundExpression = RebindAggregateOperation(node);                  if (reboundExpression != null && !source.Type.IsGenericOf(typeof(IGrouping<'>)))                  {                      selectProjection = Expression.Lambda(reboundExpression' bindingParameter);                      return Visit(source);                  }                    // Rebinding an individual element within a Select                  if (source is ParameterExpression)                  {                      if (reboundExpression != null)                          return reboundExpression;                  }              }
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (node.Method.DeclaringType == typeof(Enumerable) || node.Method.DeclaringType == typeof(Queryable))              {                  var source = node.Arguments[0];                    if (node.Method.Name == "GroupBy" && node.Arguments.Count == 2)                  {                      groupBy = node.Arguments[1].GetLambda().Body;                      return Visit(source);                  }                    if (node.Method.Name == "Select" && node.Arguments.Count == 2)                  {                      var y = Visit(node.Arguments[1]).GetLambda();                      selectProjection = Expression.Lambda(y.Body' bindingParameter);                      return Visit(source);                  }                    if (node.Method.Name == "Take" && node.Arguments.Count == 2)                      return VisitTake(source' node.Arguments[1]);                    // Consider whether to take the groupby operation and rebind the semantics into the projection                  // and remove it from the expression tree so that processing can continue.                  var reboundExpression = RebindAggregateOperation(node);                  if (reboundExpression != null && !source.Type.IsGenericOf(typeof(IGrouping<'>)))                  {                      selectProjection = Expression.Lambda(reboundExpression' bindingParameter);                      return Visit(source);                  }                    // Rebinding an individual element within a Select                  if (source is ParameterExpression)                  {                      if (reboundExpression != null)                          return reboundExpression;                  }              }
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,RebindAggregateOperation,The following statement contains a magic number: if (aggregateOperations.TryGetValue(m.Method.Name' out operation))                  switch (m.Arguments.Count)                  {                      case 1:                          return VisitAggregateGroupKeyOperation(operation' m.Method.ReturnType);                      case 2:                          return VisitAggregateGroupPredicateOperation(m.Arguments[1]' operation' m.Method.ReturnType);                  }
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,RebindAggregateOperation,The following statement contains a magic number: if (aggregateMemberOperations.TryGetValue(m.Method.Name' out operation) && m.Arguments.Count == 2)                  return VisitAggregateMemberOperation(m.Arguments[1]' operation' m.Method.ReturnType);
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitDefaultMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Equals":                      if (m.Arguments.Count == 1)                          return VisitEquals(Visit(m.Object)' Visit(m.Arguments[0]));                      if (m.Arguments.Count == 2)                          return VisitEquals(Visit(m.Arguments[0])' Visit(m.Arguments[1]));                      break;                    case "Contains":                      if (TypeHelper.FindIEnumerable(m.Method.DeclaringType) != null)                          return VisitEnumerableContainsMethodCall(m.Object' m.Arguments[0]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "ContainsAny":                      if (m.Arguments.Count == 2)                          return VisitContains("ContainsAny"' m.Arguments[0]' m.Arguments[1]' TermsExecutionMode.@bool);                      break;                    case "ContainsAll":                      if (m.Arguments.Count == 2)                          return VisitContains("ContainsAll"' m.Arguments[0]' m.Arguments[1]' TermsExecutionMode.and);                      break;                    case "Regexp":                      if (m.Arguments.Count == 2)                          return VisitRegexp(m.Arguments[0]' m.Arguments[1]);                      break;                    case "Prefix":                      if (m.Arguments.Count == 2)                          return VisitPrefix(m.Arguments[0]' m.Arguments[1]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "ContainsAny":                      if (m.Arguments.Count == 2)                          return VisitContains("ContainsAny"' m.Arguments[0]' m.Arguments[1]' TermsExecutionMode.@bool);                      break;                    case "ContainsAll":                      if (m.Arguments.Count == 2)                          return VisitContains("ContainsAll"' m.Arguments[0]' m.Arguments[1]' TermsExecutionMode.and);                      break;                    case "Regexp":                      if (m.Arguments.Count == 2)                          return VisitRegexp(m.Arguments[0]' m.Arguments[1]);                      break;                    case "Prefix":                      if (m.Arguments.Count == 2)                          return VisitPrefix(m.Arguments[0]' m.Arguments[1]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "ContainsAny":                      if (m.Arguments.Count == 2)                          return VisitContains("ContainsAny"' m.Arguments[0]' m.Arguments[1]' TermsExecutionMode.@bool);                      break;                    case "ContainsAll":                      if (m.Arguments.Count == 2)                          return VisitContains("ContainsAll"' m.Arguments[0]' m.Arguments[1]' TermsExecutionMode.and);                      break;                    case "Regexp":                      if (m.Arguments.Count == 2)                          return VisitRegexp(m.Arguments[0]' m.Arguments[1]);                      break;                    case "Prefix":                      if (m.Arguments.Count == 2)                          return VisitPrefix(m.Arguments[0]' m.Arguments[1]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "ContainsAny":                      if (m.Arguments.Count == 2)                          return VisitContains("ContainsAny"' m.Arguments[0]' m.Arguments[1]' TermsExecutionMode.@bool);                      break;                    case "ContainsAll":                      if (m.Arguments.Count == 2)                          return VisitContains("ContainsAll"' m.Arguments[0]' m.Arguments[1]' TermsExecutionMode.and);                      break;                    case "Regexp":                      if (m.Arguments.Count == 2)                          return VisitRegexp(m.Arguments[0]' m.Arguments[1]);                      break;                    case "Prefix":                      if (m.Arguments.Count == 2)                          return VisitPrefix(m.Arguments[0]' m.Arguments[1]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitEnumerableMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Contains":                      if (m.Arguments.Count == 2)                          return VisitEnumerableContainsMethodCall(m.Arguments[0]' m.Arguments[1]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Query":                      if (m.Arguments.Count == 2)                          return VisitQuery(m.Arguments[0]' m.Arguments[1]);                      break;                    case "QueryString":                      if (m.Arguments.Count == 2)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]);                      if (m.Arguments.Count == 3)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;                    case "OrderByScore":                  case "OrderByScoreDescending":                  case "ThenByScore":                  case "ThenByScoreDescending":                      if (m.Arguments.Count == 1)                          return VisitOrderByScore(m.Arguments[0]' !m.Method.Name.EndsWith("Descending"' StringComparison.Ordinal));                      break;                    case "MinScore":                      if (m.Arguments.Count == 2)                          return VisitMinimumScore(m.Arguments[0]' m.Arguments[1]);                      break;                  case "Highlight":                      if (m.Arguments.Count == 3)                          return VisitHighlight(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Query":                      if (m.Arguments.Count == 2)                          return VisitQuery(m.Arguments[0]' m.Arguments[1]);                      break;                    case "QueryString":                      if (m.Arguments.Count == 2)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]);                      if (m.Arguments.Count == 3)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;                    case "OrderByScore":                  case "OrderByScoreDescending":                  case "ThenByScore":                  case "ThenByScoreDescending":                      if (m.Arguments.Count == 1)                          return VisitOrderByScore(m.Arguments[0]' !m.Method.Name.EndsWith("Descending"' StringComparison.Ordinal));                      break;                    case "MinScore":                      if (m.Arguments.Count == 2)                          return VisitMinimumScore(m.Arguments[0]' m.Arguments[1]);                      break;                  case "Highlight":                      if (m.Arguments.Count == 3)                          return VisitHighlight(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Query":                      if (m.Arguments.Count == 2)                          return VisitQuery(m.Arguments[0]' m.Arguments[1]);                      break;                    case "QueryString":                      if (m.Arguments.Count == 2)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]);                      if (m.Arguments.Count == 3)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;                    case "OrderByScore":                  case "OrderByScoreDescending":                  case "ThenByScore":                  case "ThenByScoreDescending":                      if (m.Arguments.Count == 1)                          return VisitOrderByScore(m.Arguments[0]' !m.Method.Name.EndsWith("Descending"' StringComparison.Ordinal));                      break;                    case "MinScore":                      if (m.Arguments.Count == 2)                          return VisitMinimumScore(m.Arguments[0]' m.Arguments[1]);                      break;                  case "Highlight":                      if (m.Arguments.Count == 3)                          return VisitHighlight(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Query":                      if (m.Arguments.Count == 2)                          return VisitQuery(m.Arguments[0]' m.Arguments[1]);                      break;                    case "QueryString":                      if (m.Arguments.Count == 2)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]);                      if (m.Arguments.Count == 3)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;                    case "OrderByScore":                  case "OrderByScoreDescending":                  case "ThenByScore":                  case "ThenByScoreDescending":                      if (m.Arguments.Count == 1)                          return VisitOrderByScore(m.Arguments[0]' !m.Method.Name.EndsWith("Descending"' StringComparison.Ordinal));                      break;                    case "MinScore":                      if (m.Arguments.Count == 2)                          return VisitMinimumScore(m.Arguments[0]' m.Arguments[1]);                      break;                  case "Highlight":                      if (m.Arguments.Count == 3)                          return VisitHighlight(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Query":                      if (m.Arguments.Count == 2)                          return VisitQuery(m.Arguments[0]' m.Arguments[1]);                      break;                    case "QueryString":                      if (m.Arguments.Count == 2)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]);                      if (m.Arguments.Count == 3)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;                    case "OrderByScore":                  case "OrderByScoreDescending":                  case "ThenByScore":                  case "ThenByScoreDescending":                      if (m.Arguments.Count == 1)                          return VisitOrderByScore(m.Arguments[0]' !m.Method.Name.EndsWith("Descending"' StringComparison.Ordinal));                      break;                    case "MinScore":                      if (m.Arguments.Count == 2)                          return VisitMinimumScore(m.Arguments[0]' m.Arguments[1]);                      break;                  case "Highlight":                      if (m.Arguments.Count == 3)                          return VisitHighlight(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Query":                      if (m.Arguments.Count == 2)                          return VisitQuery(m.Arguments[0]' m.Arguments[1]);                      break;                    case "QueryString":                      if (m.Arguments.Count == 2)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]);                      if (m.Arguments.Count == 3)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;                    case "OrderByScore":                  case "OrderByScoreDescending":                  case "ThenByScore":                  case "ThenByScoreDescending":                      if (m.Arguments.Count == 1)                          return VisitOrderByScore(m.Arguments[0]' !m.Method.Name.EndsWith("Descending"' StringComparison.Ordinal));                      break;                    case "MinScore":                      if (m.Arguments.Count == 2)                          return VisitMinimumScore(m.Arguments[0]' m.Arguments[1]);                      break;                  case "Highlight":                      if (m.Arguments.Count == 3)                          return VisitHighlight(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Query":                      if (m.Arguments.Count == 2)                          return VisitQuery(m.Arguments[0]' m.Arguments[1]);                      break;                    case "QueryString":                      if (m.Arguments.Count == 2)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]);                      if (m.Arguments.Count == 3)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;                    case "OrderByScore":                  case "OrderByScoreDescending":                  case "ThenByScore":                  case "ThenByScoreDescending":                      if (m.Arguments.Count == 1)                          return VisitOrderByScore(m.Arguments[0]' !m.Method.Name.EndsWith("Descending"' StringComparison.Ordinal));                      break;                    case "MinScore":                      if (m.Arguments.Count == 2)                          return VisitMinimumScore(m.Arguments[0]' m.Arguments[1]);                      break;                  case "Highlight":                      if (m.Arguments.Count == 3)                          return VisitHighlight(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Select":                      if (m.Arguments.Count == 2)                          return VisitSelect(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "First":                  case "FirstOrDefault":                  case "Single":                  case "SingleOrDefault":                      if (m.Arguments.Count == 1)                          return VisitFirstOrSingle(m.Arguments[0]' null' m.Method.Name);                      if (m.Arguments.Count == 2)                          return VisitFirstOrSingle(m.Arguments[0]' m.Arguments[1]' m.Method.Name);                      throw GetOverloadUnsupportedException(m.Method);                    case "Where":                      if (m.Arguments.Count == 2)                          return VisitWhere(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Skip":                      if (m.Arguments.Count == 2)                          return VisitSkip(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Take":                      if (m.Arguments.Count == 2)                          return VisitTake(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "OrderBy":                  case "OrderByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "OrderBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "ThenBy":                  case "ThenByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "ThenBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "Count":                  case "LongCount":                      if (m.Arguments.Count == 1)                          return VisitCount(m.Arguments[0]' null' m.Method.ReturnType);                      if (m.Arguments.Count == 2)                          return VisitCount(m.Arguments[0]' m.Arguments[1]' m.Method.ReturnType);                      throw GetOverloadUnsupportedException(m.Method);                    case "Any":                      if (m.Arguments.Count == 1)                          return VisitAny(m.Arguments[0]' null);                      if (m.Arguments.Count == 2)                          return VisitAny(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Select":                      if (m.Arguments.Count == 2)                          return VisitSelect(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "First":                  case "FirstOrDefault":                  case "Single":                  case "SingleOrDefault":                      if (m.Arguments.Count == 1)                          return VisitFirstOrSingle(m.Arguments[0]' null' m.Method.Name);                      if (m.Arguments.Count == 2)                          return VisitFirstOrSingle(m.Arguments[0]' m.Arguments[1]' m.Method.Name);                      throw GetOverloadUnsupportedException(m.Method);                    case "Where":                      if (m.Arguments.Count == 2)                          return VisitWhere(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Skip":                      if (m.Arguments.Count == 2)                          return VisitSkip(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Take":                      if (m.Arguments.Count == 2)                          return VisitTake(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "OrderBy":                  case "OrderByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "OrderBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "ThenBy":                  case "ThenByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "ThenBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "Count":                  case "LongCount":                      if (m.Arguments.Count == 1)                          return VisitCount(m.Arguments[0]' null' m.Method.ReturnType);                      if (m.Arguments.Count == 2)                          return VisitCount(m.Arguments[0]' m.Arguments[1]' m.Method.ReturnType);                      throw GetOverloadUnsupportedException(m.Method);                    case "Any":                      if (m.Arguments.Count == 1)                          return VisitAny(m.Arguments[0]' null);                      if (m.Arguments.Count == 2)                          return VisitAny(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Select":                      if (m.Arguments.Count == 2)                          return VisitSelect(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "First":                  case "FirstOrDefault":                  case "Single":                  case "SingleOrDefault":                      if (m.Arguments.Count == 1)                          return VisitFirstOrSingle(m.Arguments[0]' null' m.Method.Name);                      if (m.Arguments.Count == 2)                          return VisitFirstOrSingle(m.Arguments[0]' m.Arguments[1]' m.Method.Name);                      throw GetOverloadUnsupportedException(m.Method);                    case "Where":                      if (m.Arguments.Count == 2)                          return VisitWhere(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Skip":                      if (m.Arguments.Count == 2)                          return VisitSkip(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Take":                      if (m.Arguments.Count == 2)                          return VisitTake(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "OrderBy":                  case "OrderByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "OrderBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "ThenBy":                  case "ThenByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "ThenBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "Count":                  case "LongCount":                      if (m.Arguments.Count == 1)                          return VisitCount(m.Arguments[0]' null' m.Method.ReturnType);                      if (m.Arguments.Count == 2)                          return VisitCount(m.Arguments[0]' m.Arguments[1]' m.Method.ReturnType);                      throw GetOverloadUnsupportedException(m.Method);                    case "Any":                      if (m.Arguments.Count == 1)                          return VisitAny(m.Arguments[0]' null);                      if (m.Arguments.Count == 2)                          return VisitAny(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Select":                      if (m.Arguments.Count == 2)                          return VisitSelect(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "First":                  case "FirstOrDefault":                  case "Single":                  case "SingleOrDefault":                      if (m.Arguments.Count == 1)                          return VisitFirstOrSingle(m.Arguments[0]' null' m.Method.Name);                      if (m.Arguments.Count == 2)                          return VisitFirstOrSingle(m.Arguments[0]' m.Arguments[1]' m.Method.Name);                      throw GetOverloadUnsupportedException(m.Method);                    case "Where":                      if (m.Arguments.Count == 2)                          return VisitWhere(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Skip":                      if (m.Arguments.Count == 2)                          return VisitSkip(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Take":                      if (m.Arguments.Count == 2)                          return VisitTake(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "OrderBy":                  case "OrderByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "OrderBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "ThenBy":                  case "ThenByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "ThenBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "Count":                  case "LongCount":                      if (m.Arguments.Count == 1)                          return VisitCount(m.Arguments[0]' null' m.Method.ReturnType);                      if (m.Arguments.Count == 2)                          return VisitCount(m.Arguments[0]' m.Arguments[1]' m.Method.ReturnType);                      throw GetOverloadUnsupportedException(m.Method);                    case "Any":                      if (m.Arguments.Count == 1)                          return VisitAny(m.Arguments[0]' null);                      if (m.Arguments.Count == 2)                          return VisitAny(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Select":                      if (m.Arguments.Count == 2)                          return VisitSelect(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "First":                  case "FirstOrDefault":                  case "Single":                  case "SingleOrDefault":                      if (m.Arguments.Count == 1)                          return VisitFirstOrSingle(m.Arguments[0]' null' m.Method.Name);                      if (m.Arguments.Count == 2)                          return VisitFirstOrSingle(m.Arguments[0]' m.Arguments[1]' m.Method.Name);                      throw GetOverloadUnsupportedException(m.Method);                    case "Where":                      if (m.Arguments.Count == 2)                          return VisitWhere(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Skip":                      if (m.Arguments.Count == 2)                          return VisitSkip(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Take":                      if (m.Arguments.Count == 2)                          return VisitTake(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "OrderBy":                  case "OrderByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "OrderBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "ThenBy":                  case "ThenByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "ThenBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "Count":                  case "LongCount":                      if (m.Arguments.Count == 1)                          return VisitCount(m.Arguments[0]' null' m.Method.ReturnType);                      if (m.Arguments.Count == 2)                          return VisitCount(m.Arguments[0]' m.Arguments[1]' m.Method.ReturnType);                      throw GetOverloadUnsupportedException(m.Method);                    case "Any":                      if (m.Arguments.Count == 1)                          return VisitAny(m.Arguments[0]' null);                      if (m.Arguments.Count == 2)                          return VisitAny(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Select":                      if (m.Arguments.Count == 2)                          return VisitSelect(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "First":                  case "FirstOrDefault":                  case "Single":                  case "SingleOrDefault":                      if (m.Arguments.Count == 1)                          return VisitFirstOrSingle(m.Arguments[0]' null' m.Method.Name);                      if (m.Arguments.Count == 2)                          return VisitFirstOrSingle(m.Arguments[0]' m.Arguments[1]' m.Method.Name);                      throw GetOverloadUnsupportedException(m.Method);                    case "Where":                      if (m.Arguments.Count == 2)                          return VisitWhere(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Skip":                      if (m.Arguments.Count == 2)                          return VisitSkip(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Take":                      if (m.Arguments.Count == 2)                          return VisitTake(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "OrderBy":                  case "OrderByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "OrderBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "ThenBy":                  case "ThenByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "ThenBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "Count":                  case "LongCount":                      if (m.Arguments.Count == 1)                          return VisitCount(m.Arguments[0]' null' m.Method.ReturnType);                      if (m.Arguments.Count == 2)                          return VisitCount(m.Arguments[0]' m.Arguments[1]' m.Method.ReturnType);                      throw GetOverloadUnsupportedException(m.Method);                    case "Any":                      if (m.Arguments.Count == 1)                          return VisitAny(m.Arguments[0]' null);                      if (m.Arguments.Count == 2)                          return VisitAny(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Select":                      if (m.Arguments.Count == 2)                          return VisitSelect(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "First":                  case "FirstOrDefault":                  case "Single":                  case "SingleOrDefault":                      if (m.Arguments.Count == 1)                          return VisitFirstOrSingle(m.Arguments[0]' null' m.Method.Name);                      if (m.Arguments.Count == 2)                          return VisitFirstOrSingle(m.Arguments[0]' m.Arguments[1]' m.Method.Name);                      throw GetOverloadUnsupportedException(m.Method);                    case "Where":                      if (m.Arguments.Count == 2)                          return VisitWhere(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Skip":                      if (m.Arguments.Count == 2)                          return VisitSkip(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Take":                      if (m.Arguments.Count == 2)                          return VisitTake(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "OrderBy":                  case "OrderByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "OrderBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "ThenBy":                  case "ThenByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "ThenBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "Count":                  case "LongCount":                      if (m.Arguments.Count == 1)                          return VisitCount(m.Arguments[0]' null' m.Method.ReturnType);                      if (m.Arguments.Count == 2)                          return VisitCount(m.Arguments[0]' m.Arguments[1]' m.Method.ReturnType);                      throw GetOverloadUnsupportedException(m.Method);                    case "Any":                      if (m.Arguments.Count == 1)                          return VisitAny(m.Arguments[0]' null);                      if (m.Arguments.Count == 2)                          return VisitAny(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Select":                      if (m.Arguments.Count == 2)                          return VisitSelect(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "First":                  case "FirstOrDefault":                  case "Single":                  case "SingleOrDefault":                      if (m.Arguments.Count == 1)                          return VisitFirstOrSingle(m.Arguments[0]' null' m.Method.Name);                      if (m.Arguments.Count == 2)                          return VisitFirstOrSingle(m.Arguments[0]' m.Arguments[1]' m.Method.Name);                      throw GetOverloadUnsupportedException(m.Method);                    case "Where":                      if (m.Arguments.Count == 2)                          return VisitWhere(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Skip":                      if (m.Arguments.Count == 2)                          return VisitSkip(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Take":                      if (m.Arguments.Count == 2)                          return VisitTake(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "OrderBy":                  case "OrderByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "OrderBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "ThenBy":                  case "ThenByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "ThenBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "Count":                  case "LongCount":                      if (m.Arguments.Count == 1)                          return VisitCount(m.Arguments[0]' null' m.Method.ReturnType);                      if (m.Arguments.Count == 2)                          return VisitCount(m.Arguments[0]' m.Arguments[1]' m.Method.ReturnType);                      throw GetOverloadUnsupportedException(m.Method);                    case "Any":                      if (m.Arguments.Count == 1)                          return VisitAny(m.Arguments[0]' null);                      if (m.Arguments.Count == 2)                          return VisitAny(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name)              {                  case "Select":                      if (m.Arguments.Count == 2)                          return VisitSelect(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "First":                  case "FirstOrDefault":                  case "Single":                  case "SingleOrDefault":                      if (m.Arguments.Count == 1)                          return VisitFirstOrSingle(m.Arguments[0]' null' m.Method.Name);                      if (m.Arguments.Count == 2)                          return VisitFirstOrSingle(m.Arguments[0]' m.Arguments[1]' m.Method.Name);                      throw GetOverloadUnsupportedException(m.Method);                    case "Where":                      if (m.Arguments.Count == 2)                          return VisitWhere(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Skip":                      if (m.Arguments.Count == 2)                          return VisitSkip(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Take":                      if (m.Arguments.Count == 2)                          return VisitTake(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "OrderBy":                  case "OrderByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "OrderBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "ThenBy":                  case "ThenByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "ThenBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "Count":                  case "LongCount":                      if (m.Arguments.Count == 1)                          return VisitCount(m.Arguments[0]' null' m.Method.ReturnType);                      if (m.Arguments.Count == 2)                          return VisitCount(m.Arguments[0]' m.Arguments[1]' m.Method.ReturnType);                      throw GetOverloadUnsupportedException(m.Method);                    case "Any":                      if (m.Arguments.Count == 1)                          return VisitAny(m.Arguments[0]' null);                      if (m.Arguments.Count == 2)                          return VisitAny(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);              }
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitFirstOrSingle,The following statement contains a magic number: searchRequest.Size = single ? 2 : 1;
Magic Number,ElasticLinq.Retry,RetryPolicy,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Retry\RetryPolicy.cs,ExecuteAsync,The following statement contains a magic number: while (true)              {                  Exception operationException = null;                  var operationResult = default(TOperation);                  try                  {                      operationResult = await operationFunc(cancellationToken);                  }                  catch (Exception ex)                  {                      operationException = ex;                  }                    if (!shouldRetryFunc(operationResult' operationException))                  {                      if (operationException != null)                          ExceptionDispatchInfo.Capture(operationException).Throw();                        return operationResult;                  }                    // Something failed. Attempt to retry the operation.                  var loggerInfo = new Dictionary<string' object>                  {                      { "category"' "retry" }'                      { "elapsedMilliseconds"' stopwatch.ElapsedMilliseconds }'                      { "operationRetryDelayMS"' retryDelay }'                      { "operationAttempt"' ++attempt }'                      { "operationName"' "ElasticLINQ" }                  };                    if (appendLogInfoFunc != null)                      appendLogInfoFunc(operationResult' loggerInfo);                    if (attempt >= MaxAttempts)                  {                      Log.Warn(operationException' loggerInfo' "The operation failed {0} times' which is the maximum allowed."' MaxAttempts);                      throw new RetryFailedException(MaxAttempts);                  }                    Log.Info(operationException' loggerInfo' "The operation failed (attempt #{0}) and will be retried."' attempt);                    await Delay.For(retryDelay' cancellationToken);                  retryDelay = retryDelay * 2;              }
Missing Default,ElasticLinq.Request.Visitors,FacetExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,RebindAggregateOperation,The following switch statement is missing a default case: switch (m.Arguments.Count)                  {                      case 1:                          return VisitAggregateGroupKeyOperation(operation' m.Method.ReturnType);                      case 2:                          return VisitAggregateGroupPredicateOperation(m.Arguments[1]' operation' m.Method.ReturnType);                  }
Missing Default,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitDefaultMethodCall,The following switch statement is missing a default case: switch (m.Method.Name)              {                  case "Equals":                      if (m.Arguments.Count == 1)                          return VisitEquals(Visit(m.Object)' Visit(m.Arguments[0]));                      if (m.Arguments.Count == 2)                          return VisitEquals(Visit(m.Arguments[0])' Visit(m.Arguments[1]));                      break;                    case "Contains":                      if (TypeHelper.FindIEnumerable(m.Method.DeclaringType) != null)                          return VisitEnumerableContainsMethodCall(m.Object' m.Arguments[0]);                      break;              }
Missing Default,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following switch statement is missing a default case: switch (m.Method.Name)              {                  case "ContainsAny":                      if (m.Arguments.Count == 2)                          return VisitContains("ContainsAny"' m.Arguments[0]' m.Arguments[1]' TermsExecutionMode.@bool);                      break;                    case "ContainsAll":                      if (m.Arguments.Count == 2)                          return VisitContains("ContainsAll"' m.Arguments[0]' m.Arguments[1]' TermsExecutionMode.and);                      break;                    case "Regexp":                      if (m.Arguments.Count == 2)                          return VisitRegexp(m.Arguments[0]' m.Arguments[1]);                      break;                    case "Prefix":                      if (m.Arguments.Count == 2)                          return VisitPrefix(m.Arguments[0]' m.Arguments[1]);                      break;              }
Missing Default,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitEnumerableMethodCall,The following switch statement is missing a default case: switch (m.Method.Name)              {                  case "Contains":                      if (m.Arguments.Count == 2)                          return VisitEnumerableContainsMethodCall(m.Arguments[0]' m.Arguments[1]);                      break;              }
Missing Default,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitStringMethodCall,The following switch statement is missing a default case: switch (m.Method.Name)              {                  case "Contains":  // Where(x => x.StringProperty.Contains(value))                      if (m.Arguments.Count == 1)                          return VisitStringPatternCheckMethodCall(m.Object' m.Arguments[0]' "*{0}*"' m.Method.Name);                      break;                    case "StartsWith": // Where(x => x.StringProperty.StartsWith(value))                      if (m.Arguments.Count == 1)                          return VisitStringPatternCheckMethodCall(m.Object' m.Arguments[0]' "{0}*"' m.Method.Name);                      break;                    case "EndsWith": // Where(x => x.StringProperty.EndsWith(value))                      if (m.Arguments.Count == 1)                          return VisitStringPatternCheckMethodCall(m.Object' m.Arguments[0]' "*{0}"' m.Method.Name);                      break;              }
Missing Default,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitUnary,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.Convert:                      return node.Operand;                    case ExpressionType.Not:                      {                          var subExpression = Visit(node.Operand) as CriteriaExpression;                          if (subExpression != null)                              return new CriteriaExpression(NotCriteria.Create(subExpression.Criteria));                          break;                      }              }
Missing Default,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following switch statement is missing a default case: switch (m.Method.Name)              {                  case "Query":                      if (m.Arguments.Count == 2)                          return VisitQuery(m.Arguments[0]' m.Arguments[1]);                      break;                    case "QueryString":                      if (m.Arguments.Count == 2)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]);                      if (m.Arguments.Count == 3)                          return VisitQueryString(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;                    case "OrderByScore":                  case "OrderByScoreDescending":                  case "ThenByScore":                  case "ThenByScoreDescending":                      if (m.Arguments.Count == 1)                          return VisitOrderByScore(m.Arguments[0]' !m.Method.Name.EndsWith("Descending"' StringComparison.Ordinal));                      break;                    case "MinScore":                      if (m.Arguments.Count == 2)                          return VisitMinimumScore(m.Arguments[0]' m.Arguments[1]);                      break;                  case "Highlight":                      if (m.Arguments.Count == 3)                          return VisitHighlight(m.Arguments[0]' m.Arguments[1]' m.Arguments[2]);                      break;              }
Missing Default,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following switch statement is missing a default case: switch (m.Method.Name)              {                  case "Select":                      if (m.Arguments.Count == 2)                          return VisitSelect(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "First":                  case "FirstOrDefault":                  case "Single":                  case "SingleOrDefault":                      if (m.Arguments.Count == 1)                          return VisitFirstOrSingle(m.Arguments[0]' null' m.Method.Name);                      if (m.Arguments.Count == 2)                          return VisitFirstOrSingle(m.Arguments[0]' m.Arguments[1]' m.Method.Name);                      throw GetOverloadUnsupportedException(m.Method);                    case "Where":                      if (m.Arguments.Count == 2)                          return VisitWhere(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Skip":                      if (m.Arguments.Count == 2)                          return VisitSkip(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "Take":                      if (m.Arguments.Count == 2)                          return VisitTake(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);                    case "OrderBy":                  case "OrderByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "OrderBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "ThenBy":                  case "ThenByDescending":                      if (m.Arguments.Count == 2)                          return VisitOrderBy(m.Arguments[0]' m.Arguments[1]' m.Method.Name == "ThenBy");                      throw GetOverloadUnsupportedException(m.Method);                    case "Count":                  case "LongCount":                      if (m.Arguments.Count == 1)                          return VisitCount(m.Arguments[0]' null' m.Method.ReturnType);                      if (m.Arguments.Count == 2)                          return VisitCount(m.Arguments[0]' m.Arguments[1]' m.Method.ReturnType);                      throw GetOverloadUnsupportedException(m.Method);                    case "Any":                      if (m.Arguments.Count == 1)                          return VisitAny(m.Arguments[0]' null);                      if (m.Arguments.Count == 2)                          return VisitAny(m.Arguments[0]' m.Arguments[1]);                      throw GetOverloadUnsupportedException(m.Method);              }
Missing Default,ElasticLinq.Request.Visitors,ElasticQueryTranslator,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitUnary,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.Convert:                      return node.Operand;                    case ExpressionType.Not:                      {                          var subExpression = Visit(node.Operand) as CriteriaExpression;                          if (subExpression != null)                              return new CriteriaExpression(NotCriteria.Create(subExpression.Criteria));                          break;                      }              }
Missing Default,ElasticLinq.Request.Visitors,MemberProjectionExpressionVisitor,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Request\Visitors\MemberProjectionExpressionVisitor.cs,VisitMember,The following switch statement is missing a default case: switch (node.Expression.NodeType)                  {                      case ExpressionType.Parameter:                          return VisitFieldSelection(node);                      case ExpressionType.MemberAccess:                          if (!IsElasticField(node)) return VisitFieldSelection(node);                          break;                  }
Missing Default,ElasticLinq.Response.Materializers,AggregateRow,C:\repos\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ\Response\Materializers\Aggregates.cs,ParseValue,The following switch statement is missing a default case: switch (token.ToString())              {                  case "Infinity":                  case "∞":                      {                          if (valueType == typeof(double))                              return double.PositiveInfinity;                            if (valueType == typeof(float))                              return float.PositiveInfinity;                            if (valueType == typeof(decimal?))                              return null;                            break;                      }                    case "-Infinity":                  case "-∞":                      {                          if (valueType == typeof(double))                              return double.NegativeInfinity;                            if (valueType == typeof(float))                              return float.NegativeInfinity;                            if (valueType == typeof(decimal?))                              return null;                            break;                      }              }
