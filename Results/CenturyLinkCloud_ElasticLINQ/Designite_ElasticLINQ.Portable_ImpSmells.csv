Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ElasticLinq.Request.Formatters,SearchRequestFormatter,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Formatters\SearchRequestFormatter.cs,CreateBody,Cyclomatic complexity of the method is 11
Complex Method,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,Cyclomatic complexity of the method is 12
Complex Method,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitStringMethodCall,Cyclomatic complexity of the method is 9
Complex Method,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitBinary,Cyclomatic complexity of the method is 10
Complex Method,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,Cyclomatic complexity of the method is 19
Complex Method,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,Cyclomatic complexity of the method is 36
Long Parameter List,ElasticLinq,ElasticConnection,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticConnection.cs,ElasticConnection,The method has 6 parameters.
Long Parameter List,ElasticLinq,ElasticConnection,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticConnection.cs,ElasticConnection,The method has 7 parameters.
Long Parameter List,ElasticLinq.Logging,ILog,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Logging\ILog.cs,Log,The method has 5 parameters.
Long Parameter List,ElasticLinq.Logging,NullLog,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Logging\NullLog.cs,Log,The method has 5 parameters.
Long Parameter List,ElasticLinq.Mapping,ElasticMapping,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Mapping\ElasticMapping.cs,ElasticMapping,The method has 6 parameters.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double)await ExecuteAsync (source.Provider' FinalExpression (source' averageIntMethodInfo.Value)' cancellationToken); " is 125.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double?)await ExecuteAsync (source.Provider' FinalExpression (source' averageIntNullableMethodInfo.Value)' cancellationToken); " is 134.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double)await ExecuteAsync (source.Provider' FinalExpression (source' averageLongMethodInfo.Value)' cancellationToken); " is 126.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double)await ExecuteAsync (source.Provider' FinalExpression (source' averageLongNullableMethodInfo.Value)' cancellationToken); " is 134.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (float)await ExecuteAsync (source.Provider' FinalExpression (source' averageFloatMethodInfo.Value)' cancellationToken); " is 126.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (float?)await ExecuteAsync (source.Provider' FinalExpression (source' averageFloatNullableMethodInfo.Value)' cancellationToken); " is 135.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double)await ExecuteAsync (source.Provider' FinalExpression (source' averageDoubleMethodInfo.Value)' cancellationToken); " is 128.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double?)await ExecuteAsync (source.Provider' FinalExpression (source' averageDoubleNullableMethodInfo.Value)' cancellationToken); " is 137.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (decimal)await ExecuteAsync (source.Provider' FinalExpression (source' averageDecimalMethodInfo.Value)' cancellationToken); " is 130.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (decimal?)await ExecuteAsync (source.Provider' FinalExpression (source' averageDecimalNullableMethodInfo.Value)' cancellationToken); " is 139.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double)await ExecuteAsync (source.Provider' FinalExpression (source' averageIntSelectorMethodInfo.Value' selector)' cancellationToken); " is 143.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double?)await ExecuteAsync (source.Provider' FinalExpression (source' averageIntNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 152.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (float)await ExecuteAsync (source.Provider' FinalExpression (source' averageFloatSelectorMethodInfo.Value' selector)' cancellationToken); " is 144.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (float?)await ExecuteAsync (source.Provider' FinalExpression (source' averageFloatNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 153.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double)await ExecuteAsync (source.Provider' FinalExpression (source' averageLongSelectorMethodInfo.Value' selector)' cancellationToken); " is 144.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double?)await ExecuteAsync (source.Provider' FinalExpression (source' averageLongNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 153.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double)await ExecuteAsync (source.Provider' FinalExpression (source' averageDoubleSelectorMethodInfo.Value' selector)' cancellationToken); " is 146.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (double?)await ExecuteAsync (source.Provider' FinalExpression (source' averageDoubleNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 155.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (decimal)await ExecuteAsync (source.Provider' FinalExpression (source' averageDecimalSelectorMethodInfo.Value' selector)' cancellationToken); " is 148.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,AverageAsync,The length of the statement  "	return (decimal)await ExecuteAsync (source.Provider' FinalExpression (source' averageDecimalNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 156.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,CountAsync,The length of the statement  "	return (int)await ExecuteAsync (source.Provider' FinalExpression (source' countPredicateMethodInfo.Value' predicate)' cancellationToken); " is 137.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,LongCountAsync,The length of the statement  "	return (long)await ExecuteAsync (source.Provider' FinalExpression (source' longCountMethodInfo.Value)' cancellationToken); " is 122.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,LongCountAsync,The length of the statement  "	return (long)await ExecuteAsync (source.Provider' FinalExpression (source' longCountPredicateMethodInfo.Value' predicate)' cancellationToken); " is 142.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,MinAsync,The length of the statement  "	return (TResult)await ExecuteAsync (source.Provider' FinalExpression<TSource' TResult> (source' minSelectorMethodInfo.Value' selector)' cancellationToken); " is 155.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,MaxAsync,The length of the statement  "	return (TResult)await ExecuteAsync (source.Provider' FinalExpression<TSource' TResult> (source' maxSelectorMethodInfo.Value' selector)' cancellationToken); " is 155.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,ToDictionaryAsync,The length of the statement  "	return ((IEnumerable<TSource>)await ExecuteAsync (source.Provider' source.Expression' cancellationToken)).ToDictionary (keySelector); " is 133.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,ToDictionaryAsync,The length of the statement  "	return ((IEnumerable<TSource>)await ExecuteAsync (source.Provider' source.Expression' cancellationToken)).ToDictionary (keySelector' elementSelector); " is 150.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,QueryableMethodByArgs,The length of the statement  "	return new Lazy<MethodInfo> (() => typeof(Queryable).GetTypeInfo ().DeclaredMethods.Single (m => m.Name == name && m.GetParameters ().Length == parameterCount && (secondParameterType == null || m.GetParameters () [1].ParameterType == secondParameterType))); " is 257.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,QueryableMethodByReturnType,The length of the statement  "	return new Lazy<MethodInfo> (() => typeof(Queryable).GetTypeInfo ().DeclaredMethods.Single (m => m.Name == name && m.ReturnType == returnType && m.GetParameters ().Length == parameterCount)); " is 191.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,QueryableMethodBySelectorParameterType,The length of the statement  "		return typeof(Queryable).GetTypeInfo ().DeclaredMethods.Where (m => m.Name == name && m.IsGenericMethod).Select (m => Tuple.Create (m' m.GetParameters ())).Where (m => m.Item2.Length == parameterCount).Single (m => m.Item2 [1].ParameterType.GenericTypeArguments [0].GenericTypeArguments [1] == selectorParameterType).Item1; " is 323.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,QueryableMethodByQueryableParameterType,The length of the statement  "		return typeof(Queryable).GetTypeInfo ().DeclaredMethods.Single (m => m.Name == name && m.GetParameters ().Length == parameterCount && m.GetParameters () [0].ParameterType == parameterType); " is 189.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,FirstAsync,The length of the statement  "	return (TSource)await ExecuteAsync (source.Provider' FinalExpression (source' firstMethodInfo.Value)' cancellationToken); " is 121.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,FirstAsync,The length of the statement  "	return (TSource)await ExecuteAsync (source.Provider' FinalExpression (source' firstPredicateMethodInfo.Value' predicate)' cancellationToken); " is 141.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,FirstOrDefaultAsync,The length of the statement  "	return (TSource)await ExecuteAsync (source.Provider' FinalExpression (source' firstOrDefaultMethodInfo.Value)' cancellationToken); " is 130.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,FirstOrDefaultAsync,The length of the statement  "	return (TSource)await ExecuteAsync (source.Provider' FinalExpression (source' firstOrDefaultPredicateMethodInfo.Value' predicate)' cancellationToken); " is 150.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SingleAsync,The length of the statement  "	return (TSource)await ExecuteAsync (source.Provider' FinalExpression (source' singleMethodInfo.Value)' cancellationToken); " is 122.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SingleAsync,The length of the statement  "	return (TSource)await ExecuteAsync (source.Provider' FinalExpression (source' singlePredicateMethodInfo.Value' predicate)' cancellationToken); " is 142.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SingleOrDefaultAsync,The length of the statement  "	return (TSource)await ExecuteAsync (source.Provider' FinalExpression (source' singleOrDefaultMethodInfo.Value)' cancellationToken); " is 131.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SingleOrDefaultAsync,The length of the statement  "	return (TSource)await ExecuteAsync (source.Provider' FinalExpression (source' singleOrDefaultPredicateMethodInfo.Value' predicate)' cancellationToken); " is 151.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (int)await ExecuteAsync (source.Provider' FinalExpression (source' sumIntNullableMethodInfo.Value)' cancellationToken); " is 126.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (long)await ExecuteAsync (source.Provider' FinalExpression (source' sumLongMethodInfo.Value)' cancellationToken); " is 120.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (long?)await ExecuteAsync (source.Provider' FinalExpression (source' sumLongNullableMethodInfo.Value)' cancellationToken); " is 129.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (float)await ExecuteAsync (source.Provider' FinalExpression (source' sumFloatMethodInfo.Value)' cancellationToken); " is 122.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (float?)await ExecuteAsync (source.Provider' FinalExpression (source' sumFloatNullableMethodInfo.Value)' cancellationToken); " is 131.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (double)await ExecuteAsync (source.Provider' FinalExpression (source' sumDoubleMethodInfo.Value)' cancellationToken); " is 124.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (double?)await ExecuteAsync (source.Provider' FinalExpression (source' sumDoubleNullableMethodInfo.Value)' cancellationToken); " is 133.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (decimal)await ExecuteAsync (source.Provider' FinalExpression (source' sumDecimalMethodInfo.Value)' cancellationToken); " is 126.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (decimal?)await ExecuteAsync (source.Provider' FinalExpression (source' sumDecimalNullableMethodInfo.Value)' cancellationToken); " is 135.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (int)await ExecuteAsync (source.Provider' FinalExpression (source' sumIntSelectorMethodInfo.Value' selector)' cancellationToken); " is 136.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (int?)await ExecuteAsync (source.Provider' FinalExpression (source' sumIntNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 145.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (long)await ExecuteAsync (source.Provider' FinalExpression (source' sumLongSelectorMethodInfo.Value' selector)' cancellationToken); " is 138.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (long?)await ExecuteAsync (source.Provider' FinalExpression (source' sumLongNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 147.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (float)await ExecuteAsync (source.Provider' FinalExpression (source' sumFloatSelectorMethodInfo.Value' selector)' cancellationToken); " is 140.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (float?)await ExecuteAsync (source.Provider' FinalExpression (source' sumFloatNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 149.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (double)await ExecuteAsync (source.Provider' FinalExpression (source' sumDoubleSelectorMethodInfo.Value' selector)' cancellationToken); " is 142.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (double?)await ExecuteAsync (source.Provider' FinalExpression (source' sumDoubleNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 151.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (decimal)await ExecuteAsync (source.Provider' FinalExpression (source' sumDecimalSelectorMethodInfo.Value' selector)' cancellationToken); " is 144.
Long Statement,ElasticLinq.Async,AsyncQueryable,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Async\AsyncQueryable.Average.cs,SumAsync,The length of the statement  "	return (decimal?)await ExecuteAsync (source.Provider' FinalExpression (source' sumDecimalNullableSelectorMethodInfo.Value' selector)' cancellationToken); " is 153.
Long Statement,ElasticLinq,ElasticConnection,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticConnection.cs,GetSearchUri,The length of the statement  "	var parameters = builder.Uri.GetComponents (UriComponents.Query' UriFormat.Unescaped).Split (parameterSeparator' StringSplitOptions.RemoveEmptyEntries).Select (p => p.Split ('=')).ToDictionary (k => k [0]' v => v.Length > 1 ? v [1] : null); " is 240.
Long Statement,ElasticLinq,ElasticConnection,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticConnection.cs,SendRequestAsync,The length of the statement  "	log.Debug (null' null' "Response: {0} {1} (in {2}ms)"' (int)response.StatusCode' response.StatusCode' stopwatch.ElapsedMilliseconds); " is 133.
Long Statement,ElasticLinq,ElasticConnection,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticConnection.cs,ParseResponse,The length of the statement  "		log.Debug (null' null' "Deserialized {0} bytes into {1} in {2}ms"' responseStream.Length' resultSummary' stopwatch.ElapsedMilliseconds); " is 136.
Long Statement,ElasticLinq,ElasticQueryExtensions,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticQueryExtensions.cs,QueryString,The length of the statement  "	return CreateQueryMethodCall (source' queryStringWithFieldsMethodInfo' Expression.Constant (query)' Expression.Constant (fields)); " is 130.
Long Statement,ElasticLinq,ElasticQueryExtensions,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticQueryExtensions.cs,Highlight,The length of the statement  "	return CreateQueryMethodCall<TSource' TKey> (source' highlightScoreMethodInfo' Expression.Quote (predicate)' Expression.Constant (highlight ?? new Highlight ())); " is 162.
Long Statement,ElasticLinq,ElasticQueryProvider,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticQueryProvider.cs,ExecuteAsync,The length of the statement  "				// If the response has a large number of hits then the List<T> instance might end up allocating an array on the large object heap. " is 130.
Long Statement,ElasticLinq,ElasticQueryProvider,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticQueryProvider.cs,ExecuteAsync,The length of the statement  "				// This means that the elements in that array can survive multiple rounds of garbage collection' even if they are not actually " is 126.
Long Statement,ElasticLinq.Mapping,CouchbaseElasticMapping,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Mapping\CouchbaseElasticMapping.cs,GetFieldName,The length of the statement  "		return GetFieldName (type' (MemberExpression)memberExpression.Expression) + "." + GetMemberName (memberExpression.Member); " is 122.
Long Statement,ElasticLinq.Mapping,ElasticFieldsMappingWrapper,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Mapping\ElasticFieldsMappingWrapper.cs,GetFieldName,The length of the statement  "	return memberExpression.Member.DeclaringType == typeof(ElasticFields) ? "_" + memberExpression.Member.Name.ToLowerInvariant () : wrapped.GetFieldName (type' memberExpression); " is 175.
Long Statement,ElasticLinq.Mapping,ElasticMapping,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Mapping\ElasticMapping.cs,GetFieldName,The length of the statement  "		return GetFieldName (type' (MemberExpression)memberExpression.Expression) + "." + GetFieldName (type' memberExpression.Member); " is 127.
Long Statement,ElasticLinq.Request.Criteria,AndCriteria,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Criteria\AndCriteria.cs,Combine,The length of the statement  "	var combinedCriteria = criteria.SelectMany (c => c is AndCriteria ? ((AndCriteria)c).Criteria : new ReadOnlyCollection<ICriteria> (new[] { " is 138.
Long Statement,ElasticLinq.Request.Criteria,ConstantCriteriaFilterReducer,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Criteria\ConstantCriteriaFilterReducer.cs,Reduce,The length of the statement  "	return AndCriteria.Combine (andCriteria.Criteria.Select (Reduce).Where (c => c != ConstantCriteria.True && c != null).ToArray ()); " is 130.
Long Statement,ElasticLinq.Request.Criteria,ConstantCriteriaFilterReducer,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Criteria\ConstantCriteriaFilterReducer.cs,Reduce,The length of the statement  "	return OrCriteria.Combine (orCriteria.Criteria.Select (Reduce).Where (c => c != ConstantCriteria.False && c != null).ToArray ()); " is 129.
Long Statement,ElasticLinq.Request.Criteria,OrCriteria,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Criteria\OrCriteria.cs,CombineTermsForSameField,The length of the statement  "	var areAllSameTerm = termCriteria.Length == criteria.Count && termCriteria.Select (f => f.Field).Distinct ().Count () == 1 && termCriteria.All (f => f.IsOrCriteria); " is 165.
Long Statement,ElasticLinq.Request.Criteria,OrCriteria,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Criteria\OrCriteria.cs,CombineTermsForSameField,The length of the statement  "	return areAllSameTerm ? TermsCriteria.Build (termCriteria [0].Field' termCriteria [0].Member' termCriteria.SelectMany (f => f.Values).Distinct ()) : null; " is 154.
Long Statement,ElasticLinq.Request.Criteria,QueryCriteriaRewriter,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Criteria\QueryCriteriaRewriter.cs,Rewrite,The length of the statement  "	var mustNotCriteria = not.Criteria is OrCriteria ? ((OrCriteria)not.Criteria).Criteria : Enumerable.Repeat (not.Criteria' 1); " is 125.
Long Statement,ElasticLinq.Request.Criteria,QueryCriteriaRewriter,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Criteria\QueryCriteriaRewriter.cs,Rewrite,The length of the statement  "	var shouldCriteria = (canFlattenOrCriteria ? orCriteria.SelectMany (o => o.Criteria) : Enumerable.Empty<OrCriteria> ()).ToList (); " is 130.
Long Statement,ElasticLinq.Request.Criteria,QueryCriteriaRewriter,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Criteria\QueryCriteriaRewriter.cs,Rewrite,The length of the statement  "	return new BoolCriteria (must.Select (Compensate)' shouldCriteria' mustNot.Select (c => c.Criteria).Select (Compensate)); " is 121.
Long Statement,ElasticLinq.Request,ElasticRequestProcessor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\ElasticRequestProcessor.cs,SearchAsync,The length of the statement  "	return retryPolicy.ExecuteAsync (async token => await connection.SearchAsync (formatter.Body' searchRequest' token' log)' (response' exception) => !cancellationToken.IsCancellationRequested && exception != null' (response' additionalInfo) => { " is 243.
Long Statement,ElasticLinq.Request,ElasticRequestProcessor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\ElasticRequestProcessor.cs,ParseResponse,The length of the statement  "		log.Debug (null' null' "Deserialized {0} bytes into {1} in {2}ms"' responseStream.Length' resultSummary' stopwatch.ElapsedMilliseconds); " is 136.
Long Statement,ElasticLinq.Request.Formatters,SearchRequestFormatter,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Formatters\SearchRequestFormatter.cs,Build,The length of the statement  "	return new JObject (new JProperty ("key_field"' termStatsFacet.Key)' new JProperty ("value_field"' termStatsFacet.Value)); " is 122.
Long Statement,ElasticLinq.Request.Formatters,SearchRequestFormatter,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Formatters\SearchRequestFormatter.cs,Build,The length of the statement  "	return new JObject (new JProperty (criteria.Name' new JObject (new JProperty (criteria.Field' new JObject (criteria.Specifications.Select (s => new JProperty (s.Name' mapping.FormatValue (criteria.Member' s.Value))).ToList ()))))); " is 231.
Long Statement,ElasticLinq.Request.Formatters,SearchRequestFormatter,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Formatters\SearchRequestFormatter.cs,Build,The length of the statement  "	return new JObject (new JProperty (criteria.Name' new JObject (new JProperty (criteria.Field' mapping.FormatValue (criteria.Member' criteria.Value))))); " is 152.
Long Statement,ElasticLinq.Request.Formatters,SearchRequestFormatter,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Formatters\SearchRequestFormatter.cs,Build,The length of the statement  "	var termsCriteria = new JObject (new JProperty (criteria.Field' new JArray (criteria.Values.Select (x => mapping.FormatValue (criteria.Member' x)).Cast<object> ().ToArray ()))); " is 177.
Long Statement,ElasticLinq.Request.Formatters,SearchRequestFormatter,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Formatters\SearchRequestFormatter.cs,Build,The length of the statement  "	return criteria.Criteria.Count == 1 ? Build (criteria.Criteria.First ()) : new JObject (new JProperty (criteria.Name' new JArray (criteria.Criteria.Select (Build).ToList ()))); " is 176.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitPrefix,The length of the statement  "		return new CriteriaExpression (new PrefixCriteria (fieldName' ((ConstantExpression)startsWithExpression).Value.ToString ())); " is 125.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitRegexp,The length of the statement  "		return new CriteriaExpression (new RegexpCriteria (fieldName' ((ConstantExpression)regexpExpression).Value.ToString ())); " is 121.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitAndAlso,The length of the statement  "	return new CriteriaExpression (AndCriteria.Combine (CombineExpressions<CriteriaExpression> (b.Left' b.Right).Select (f => f.Criteria).ToArray ())); " is 147.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitOrElse,The length of the statement  "	return new CriteriaExpression (OrCriteria.Combine (CombineExpressions<CriteriaExpression> (b.Left' b.Right).Select (f => f.Criteria).ToArray ())); " is 146.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitContains,The length of the statement  "		return new CriteriaExpression (TermsCriteria.Build (executionMode' Mapping.GetFieldName (SourceType' cm.MemberExpression)' cm.MemberExpression.Member' values)); " is 160.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitEquals,The length of the statement  "		return cm.IsNullTest ? CreateExists (cm' true) : new CriteriaExpression (new TermCriteria (Mapping.GetFieldName (SourceType' cm.MemberExpression)' cm.MemberExpression.Member' cm.ConstantExpression.Value)); " is 205.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,UnwrapNullableMethodExpression,The length of the statement  "	if (lhsMemberExpression != null && m.Member.Name == "HasValue" && m.Member.DeclaringType.IsGenericOf (typeof(Nullable<>))) " is 122.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitNotEqual,The length of the statement  "	return cm.IsNullTest ? CreateExists (cm' false) : new CriteriaExpression (NotCriteria.Create (new TermCriteria (Mapping.GetFieldName (SourceType' cm.MemberExpression)' cm.MemberExpression.Member' cm.ConstantExpression.Value))); " is 227.
Long Statement,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitRange,The length of the statement  "	return new CriteriaExpression (new RangeCriteria (field' cm.MemberExpression.Member' rangeComparison' cm.ConstantExpression.Value)); " is 132.
Long Statement,ElasticLinq.Request.Visitors,ElasticFieldsExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticFieldsExpressionVisitor.cs,VisitElasticField,The length of the statement  "	return Expression.Convert (Expression.PropertyOrField (BindingParameter' "_" + m.Member.Name.ToLowerInvariant ())' m.Type); " is 123.
Long Statement,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,ApplyTypeSelectionCriteria,The length of the statement  "	searchRequest.Filter = searchRequest.Filter == null || searchRequest.Filter == ConstantCriteria.True ? typeCriteria : AndCriteria.Combine (typeCriteria' searchRequest.Filter); " is 175.
Long Statement,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,CompleteHitTranslation,The length of the statement  "		((ChainMaterializer)materializer).Next = new ListHitsElasticMaterializer (itemProjector ?? DefaultItemProjector' finalItemType ?? SourceType); " is 142.
Long Statement,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryString,The length of the statement  "	var criteriaExpression = new CriteriaExpression (new QueryStringCriteria (constantQueryExpression.Value.ToString ()' constantFields)); " is 134.
Long Statement,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitWhere,The length of the statement  "	var criteriaExpression = lambda.Body as CriteriaExpression ?? BooleanMemberAccessBecomesEquals (lambda.Body) as CriteriaExpression; " is 131.
Long Statement,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitSelect,The length of the statement  "		throw new NotSupportedException ("Select method with T parameter is supported' additional parameters like index are not"); " is 122.
Long Statement,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitTake,The length of the statement  "		searchRequest.Size = searchRequest.Size.HasValue ? Math.Min (searchRequest.Size.GetValueOrDefault ()' takeValue) : takeValue; " is 125.
Long Statement,ElasticLinq.Request.Visitors,EvaluatingExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\EvaluatingExpressionVisitor.cs,Visit,The length of the statement  "	return chosenForEvaluation.Contains (node) ? Expression.Constant (Expression.Lambda (node).Compile ().DynamicInvoke (null)' node.Type) : base.Visit (node); " is 155.
Long Statement,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,GetFacetMaterializer,The length of the statement  "		return new ListTermlessFacetsElasticMaterializer (projector' projection.ReturnType' ((ConstantExpression)groupBy).Value); " is 121.
Long Statement,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,RebindValue,The length of the statement  "	var getValueExpression = Expression.Call (null' getValue' bindingParameter' Expression.Constant (valueField)' Expression.Constant (operation)' Expression.Constant (returnType)); " is 177.
Long Statement,ElasticLinq.Request.Visitors,MemberProjectionExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\MemberProjectionExpressionVisitor.cs,VisitFieldSelection,The length of the statement  "	var getFieldExpression = Expression.Call (null' GetDictionaryValueMethod' Expression.PropertyOrField (BindingParameter' "fields")' Expression.Constant (fieldName)' Expression.Constant (m.Type)); " is 194.
Long Statement,ElasticLinq.Request.Visitors,PartialEvaluator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\PartialEvaluator.cs,ShouldEvaluate,The length of the statement  "	if (e is MemberExpression && doNotEvaluateMembersDeclaredOn.Contains (((MemberExpression)e).Member.DeclaringType) || (e is MethodCallExpression && doNotEvaluateMethodsDeclaredOn.Contains (((MethodCallExpression)e).Method.DeclaringType))) " is 237.
Long Statement,ElasticLinq.Response.Materializers,AggregateStatisticalRow,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Response\Materializers\Aggregates.cs,GetValue,The length of the statement  "	return facets.TryGetValue (name' out facetObject) && facetObject is JObject && ((JObject)facetObject).TryGetValue (operation' out operationObject) ? ParseValue (operationObject' valueType) : TypeHelper.CreateDefault (valueType); " is 228.
Long Statement,ElasticLinq.Response.Materializers,ListTermFacetsElasticMaterializer,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Response\Materializers\ListTermFacetsElasticMaterializer.cs,Many,The length of the statement  "	return termFacetsValues.Any () ? FlattenTermsToAggregateRows (termFacetsValues).Select (projector).Cast<T> ().ToList () : new List<T> (); " is 137.
Long Statement,ElasticLinq.Response.Materializers,ListTermFacetsElasticMaterializer,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Response\Materializers\ListTermFacetsElasticMaterializer.cs,FlattenTermsToAggregateRows,The length of the statement  "	return termsStats.SelectMany (t => t ["terms"]).GroupBy (t => t ["term"]).Select (g => new AggregateTermRow (AggregateRow.ParseValue (g.Key' groupKeyType)' g.SelectMany (CreateAggregateFields))); " is 195.
Long Statement,ElasticLinq.Response.Materializers,ListTermFacetsElasticMaterializer,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Response\Materializers\ListTermFacetsElasticMaterializer.cs,CreateAggregateFields,The length of the statement  "	return termFields.Cast<JProperty> ().Where (z => z.Name != "term").Select (z => new AggregateField (name' z.Name' z.Value)); " is 124.
Long Statement,ElasticLinq.Response.Materializers,ListTermlessFacetsElasticMaterializer,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Response\Materializers\ListTermlessFacetsElasticMaterializer.cs,Materialize,The length of the statement  "	return element == null ? Activator.CreateInstance (listType) : manyMethodInfo.MakeGenericMethod (ElementType).Invoke (null' new[] { " is 131.
Long Statement,ElasticLinq.Retry,RetryPolicy,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Retry\RetryPolicy.cs,ExecuteAsync,The length of the statement  "			Log.Warn (operationException' loggerInfo' "The operation failed {0} times' which is the maximum allowed."' MaxAttempts); " is 120.
Long Statement,ElasticLinq.Utility,AsyncHelper,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Utility\AsyncHelper.cs,RunSync,The length of the statement  "	return SynchronizationContext.Current == null ? action ().GetAwaiter ().GetResult () : Task.Run (async () => await action ()).GetAwaiter ().GetResult (); " is 153.
Long Statement,ElasticLinq.Utility,TypeHelper,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Utility\TypeHelper.cs,IsGenericOf,The length of the statement  "	return type != null && genericType != null && type.GetTypeInfo ().IsGenericType && type.GetGenericTypeDefinition () == genericType; " is 131.
Complex Conditional,ElasticLinq.Request.Visitors,PartialEvaluator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\PartialEvaluator.cs,ShouldEvaluate,The conditional expression  "e is MemberExpression && doNotEvaluateMembersDeclaredOn.Contains (((MemberExpression)e).Member.DeclaringType) || (e is MethodCallExpression && doNotEvaluateMethodsDeclaredOn.Contains (((MethodCallExpression)e).Method.DeclaringType))"  is complex.
Magic Number,ElasticLinq,ElasticQueryProvider,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticQueryProvider.cs,ExecuteAsync,The following statement contains a magic number: try {  	ElasticResponse response;  	if (translation.SearchRequest.Filter == ConstantCriteria.False) {  		response = new ElasticResponse ();  	} else {  		response = await requestProcessor.SearchAsync (translation.SearchRequest' cancellationToken);  		if (response == null)  			throw new InvalidOperationException ("No HTTP response received.");  	}  	var result = translation.Materializer.Materialize (response);  	if (response.hits != null) {  		var hits = response.hits.hits;  		if (hits != null && hits.Capacity > 4096) {  			// If the response has a large number of hits then the List<T> instance might end up allocating an array on the large object heap.  			// This means that the elements in that array can survive multiple rounds of garbage collection' even if they are not actually  			// reachable anymore.  			// Clearing out the collection after we materialized the result means the elements can be freed up.  			hits.Clear ();  		}  	}  	return result;  } catch (AggregateException ex) {  	ExceptionDispatchInfo.Capture (ex.InnerException).Throw ();  	return null;  	// Never called' as the above code re-throws  }  
Magic Number,ElasticLinq,ElasticQueryProvider,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticQueryProvider.cs,ExecuteAsync,The following statement contains a magic number: if (response.hits != null) {  	var hits = response.hits.hits;  	if (hits != null && hits.Capacity > 4096) {  		// If the response has a large number of hits then the List<T> instance might end up allocating an array on the large object heap.  		// This means that the elements in that array can survive multiple rounds of garbage collection' even if they are not actually  		// reachable anymore.  		// Clearing out the collection after we materialized the result means the elements can be freed up.  		hits.Clear ();  	}  }  
Magic Number,ElasticLinq,ElasticQueryProvider,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\ElasticQueryProvider.cs,ExecuteAsync,The following statement contains a magic number: if (hits != null && hits.Capacity > 4096) {  	// If the response has a large number of hits then the List<T> instance might end up allocating an array on the large object heap.  	// This means that the elements in that array can survive multiple rounds of garbage collection' even if they are not actually  	// reachable anymore.  	// Clearing out the collection after we materialized the result means the elements can be freed up.  	hits.Clear ();  }  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitDefaultMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Equals":  	if (m.Arguments.Count == 1)  		return VisitEquals (Visit (m.Object)' Visit (m.Arguments [0]));  	if (m.Arguments.Count == 2)  		return VisitEquals (Visit (m.Arguments [0])' Visit (m.Arguments [1]));  	break;  case "Contains":  	if (TypeHelper.FindIEnumerable (m.Method.DeclaringType) != null)  		return VisitEnumerableContainsMethodCall (m.Object' m.Arguments [0]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitDefaultMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitEquals (Visit (m.Arguments [0])' Visit (m.Arguments [1]));  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "ContainsAny":  	if (m.Arguments.Count == 2)  		return VisitContains ("ContainsAny"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.@bool);  	break;  case "ContainsAll":  	if (m.Arguments.Count == 2)  		return VisitContains ("ContainsAll"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.and);  	break;  case "Regexp":  	if (m.Arguments.Count == 2)  		return VisitRegexp (m.Arguments [0]' m.Arguments [1]);  	break;  case "Prefix":  	if (m.Arguments.Count == 2)  		return VisitPrefix (m.Arguments [0]' m.Arguments [1]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "ContainsAny":  	if (m.Arguments.Count == 2)  		return VisitContains ("ContainsAny"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.@bool);  	break;  case "ContainsAll":  	if (m.Arguments.Count == 2)  		return VisitContains ("ContainsAll"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.and);  	break;  case "Regexp":  	if (m.Arguments.Count == 2)  		return VisitRegexp (m.Arguments [0]' m.Arguments [1]);  	break;  case "Prefix":  	if (m.Arguments.Count == 2)  		return VisitPrefix (m.Arguments [0]' m.Arguments [1]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "ContainsAny":  	if (m.Arguments.Count == 2)  		return VisitContains ("ContainsAny"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.@bool);  	break;  case "ContainsAll":  	if (m.Arguments.Count == 2)  		return VisitContains ("ContainsAll"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.and);  	break;  case "Regexp":  	if (m.Arguments.Count == 2)  		return VisitRegexp (m.Arguments [0]' m.Arguments [1]);  	break;  case "Prefix":  	if (m.Arguments.Count == 2)  		return VisitPrefix (m.Arguments [0]' m.Arguments [1]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "ContainsAny":  	if (m.Arguments.Count == 2)  		return VisitContains ("ContainsAny"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.@bool);  	break;  case "ContainsAll":  	if (m.Arguments.Count == 2)  		return VisitContains ("ContainsAll"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.and);  	break;  case "Regexp":  	if (m.Arguments.Count == 2)  		return VisitRegexp (m.Arguments [0]' m.Arguments [1]);  	break;  case "Prefix":  	if (m.Arguments.Count == 2)  		return VisitPrefix (m.Arguments [0]' m.Arguments [1]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitContains ("ContainsAny"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.@bool);  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitContains ("ContainsAll"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.and);  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitRegexp (m.Arguments [0]' m.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitPrefix (m.Arguments [0]' m.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitEnumerableMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Contains":  	if (m.Arguments.Count == 2)  		return VisitEnumerableContainsMethodCall (m.Arguments [0]' m.Arguments [1]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitEnumerableMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitEnumerableContainsMethodCall (m.Arguments [0]' m.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Query":  	if (m.Arguments.Count == 2)  		return VisitQuery (m.Arguments [0]' m.Arguments [1]);  	break;  case "QueryString":  	if (m.Arguments.Count == 2)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]);  	if (m.Arguments.Count == 3)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  case "OrderByScore":  case "OrderByScoreDescending":  case "ThenByScore":  case "ThenByScoreDescending":  	if (m.Arguments.Count == 1)  		return VisitOrderByScore (m.Arguments [0]' !m.Method.Name.EndsWith ("Descending"' StringComparison.Ordinal));  	break;  case "MinScore":  	if (m.Arguments.Count == 2)  		return VisitMinimumScore (m.Arguments [0]' m.Arguments [1]);  	break;  case "Highlight":  	if (m.Arguments.Count == 3)  		return VisitHighlight (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Query":  	if (m.Arguments.Count == 2)  		return VisitQuery (m.Arguments [0]' m.Arguments [1]);  	break;  case "QueryString":  	if (m.Arguments.Count == 2)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]);  	if (m.Arguments.Count == 3)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  case "OrderByScore":  case "OrderByScoreDescending":  case "ThenByScore":  case "ThenByScoreDescending":  	if (m.Arguments.Count == 1)  		return VisitOrderByScore (m.Arguments [0]' !m.Method.Name.EndsWith ("Descending"' StringComparison.Ordinal));  	break;  case "MinScore":  	if (m.Arguments.Count == 2)  		return VisitMinimumScore (m.Arguments [0]' m.Arguments [1]);  	break;  case "Highlight":  	if (m.Arguments.Count == 3)  		return VisitHighlight (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Query":  	if (m.Arguments.Count == 2)  		return VisitQuery (m.Arguments [0]' m.Arguments [1]);  	break;  case "QueryString":  	if (m.Arguments.Count == 2)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]);  	if (m.Arguments.Count == 3)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  case "OrderByScore":  case "OrderByScoreDescending":  case "ThenByScore":  case "ThenByScoreDescending":  	if (m.Arguments.Count == 1)  		return VisitOrderByScore (m.Arguments [0]' !m.Method.Name.EndsWith ("Descending"' StringComparison.Ordinal));  	break;  case "MinScore":  	if (m.Arguments.Count == 2)  		return VisitMinimumScore (m.Arguments [0]' m.Arguments [1]);  	break;  case "Highlight":  	if (m.Arguments.Count == 3)  		return VisitHighlight (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Query":  	if (m.Arguments.Count == 2)  		return VisitQuery (m.Arguments [0]' m.Arguments [1]);  	break;  case "QueryString":  	if (m.Arguments.Count == 2)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]);  	if (m.Arguments.Count == 3)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  case "OrderByScore":  case "OrderByScoreDescending":  case "ThenByScore":  case "ThenByScoreDescending":  	if (m.Arguments.Count == 1)  		return VisitOrderByScore (m.Arguments [0]' !m.Method.Name.EndsWith ("Descending"' StringComparison.Ordinal));  	break;  case "MinScore":  	if (m.Arguments.Count == 2)  		return VisitMinimumScore (m.Arguments [0]' m.Arguments [1]);  	break;  case "Highlight":  	if (m.Arguments.Count == 3)  		return VisitHighlight (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Query":  	if (m.Arguments.Count == 2)  		return VisitQuery (m.Arguments [0]' m.Arguments [1]);  	break;  case "QueryString":  	if (m.Arguments.Count == 2)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]);  	if (m.Arguments.Count == 3)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  case "OrderByScore":  case "OrderByScoreDescending":  case "ThenByScore":  case "ThenByScoreDescending":  	if (m.Arguments.Count == 1)  		return VisitOrderByScore (m.Arguments [0]' !m.Method.Name.EndsWith ("Descending"' StringComparison.Ordinal));  	break;  case "MinScore":  	if (m.Arguments.Count == 2)  		return VisitMinimumScore (m.Arguments [0]' m.Arguments [1]);  	break;  case "Highlight":  	if (m.Arguments.Count == 3)  		return VisitHighlight (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Query":  	if (m.Arguments.Count == 2)  		return VisitQuery (m.Arguments [0]' m.Arguments [1]);  	break;  case "QueryString":  	if (m.Arguments.Count == 2)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]);  	if (m.Arguments.Count == 3)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  case "OrderByScore":  case "OrderByScoreDescending":  case "ThenByScore":  case "ThenByScoreDescending":  	if (m.Arguments.Count == 1)  		return VisitOrderByScore (m.Arguments [0]' !m.Method.Name.EndsWith ("Descending"' StringComparison.Ordinal));  	break;  case "MinScore":  	if (m.Arguments.Count == 2)  		return VisitMinimumScore (m.Arguments [0]' m.Arguments [1]);  	break;  case "Highlight":  	if (m.Arguments.Count == 3)  		return VisitHighlight (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Query":  	if (m.Arguments.Count == 2)  		return VisitQuery (m.Arguments [0]' m.Arguments [1]);  	break;  case "QueryString":  	if (m.Arguments.Count == 2)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]);  	if (m.Arguments.Count == 3)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  case "OrderByScore":  case "OrderByScoreDescending":  case "ThenByScore":  case "ThenByScoreDescending":  	if (m.Arguments.Count == 1)  		return VisitOrderByScore (m.Arguments [0]' !m.Method.Name.EndsWith ("Descending"' StringComparison.Ordinal));  	break;  case "MinScore":  	if (m.Arguments.Count == 2)  		return VisitMinimumScore (m.Arguments [0]' m.Arguments [1]);  	break;  case "Highlight":  	if (m.Arguments.Count == 3)  		return VisitHighlight (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitQuery (m.Arguments [0]' m.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitQueryString (m.Arguments [0]' m.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 3)  	return VisitQueryString (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 3)  	return VisitQueryString (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: return VisitQueryString (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitMinimumScore (m.Arguments [0]' m.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 3)  	return VisitHighlight (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 3)  	return VisitHighlight (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following statement contains a magic number: return VisitHighlight (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Select":  	if (m.Arguments.Count == 2)  		return VisitSelect (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "First":  case "FirstOrDefault":  case "Single":  case "SingleOrDefault":  	if (m.Arguments.Count == 1)  		return VisitFirstOrSingle (m.Arguments [0]' null' m.Method.Name);  	if (m.Arguments.Count == 2)  		return VisitFirstOrSingle (m.Arguments [0]' m.Arguments [1]' m.Method.Name);  	throw GetOverloadUnsupportedException (m.Method);  case "Where":  	if (m.Arguments.Count == 2)  		return VisitWhere (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Skip":  	if (m.Arguments.Count == 2)  		return VisitSkip (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Take":  	if (m.Arguments.Count == 2)  		return VisitTake (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "OrderBy":  case "OrderByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "OrderBy");  	throw GetOverloadUnsupportedException (m.Method);  case "ThenBy":  case "ThenByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "ThenBy");  	throw GetOverloadUnsupportedException (m.Method);  case "Count":  case "LongCount":  	if (m.Arguments.Count == 1)  		return VisitCount (m.Arguments [0]' null' m.Method.ReturnType);  	if (m.Arguments.Count == 2)  		return VisitCount (m.Arguments [0]' m.Arguments [1]' m.Method.ReturnType);  	throw GetOverloadUnsupportedException (m.Method);  case "Any":  	if (m.Arguments.Count == 1)  		return VisitAny (m.Arguments [0]' null);  	if (m.Arguments.Count == 2)  		return VisitAny (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Select":  	if (m.Arguments.Count == 2)  		return VisitSelect (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "First":  case "FirstOrDefault":  case "Single":  case "SingleOrDefault":  	if (m.Arguments.Count == 1)  		return VisitFirstOrSingle (m.Arguments [0]' null' m.Method.Name);  	if (m.Arguments.Count == 2)  		return VisitFirstOrSingle (m.Arguments [0]' m.Arguments [1]' m.Method.Name);  	throw GetOverloadUnsupportedException (m.Method);  case "Where":  	if (m.Arguments.Count == 2)  		return VisitWhere (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Skip":  	if (m.Arguments.Count == 2)  		return VisitSkip (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Take":  	if (m.Arguments.Count == 2)  		return VisitTake (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "OrderBy":  case "OrderByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "OrderBy");  	throw GetOverloadUnsupportedException (m.Method);  case "ThenBy":  case "ThenByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "ThenBy");  	throw GetOverloadUnsupportedException (m.Method);  case "Count":  case "LongCount":  	if (m.Arguments.Count == 1)  		return VisitCount (m.Arguments [0]' null' m.Method.ReturnType);  	if (m.Arguments.Count == 2)  		return VisitCount (m.Arguments [0]' m.Arguments [1]' m.Method.ReturnType);  	throw GetOverloadUnsupportedException (m.Method);  case "Any":  	if (m.Arguments.Count == 1)  		return VisitAny (m.Arguments [0]' null);  	if (m.Arguments.Count == 2)  		return VisitAny (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Select":  	if (m.Arguments.Count == 2)  		return VisitSelect (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "First":  case "FirstOrDefault":  case "Single":  case "SingleOrDefault":  	if (m.Arguments.Count == 1)  		return VisitFirstOrSingle (m.Arguments [0]' null' m.Method.Name);  	if (m.Arguments.Count == 2)  		return VisitFirstOrSingle (m.Arguments [0]' m.Arguments [1]' m.Method.Name);  	throw GetOverloadUnsupportedException (m.Method);  case "Where":  	if (m.Arguments.Count == 2)  		return VisitWhere (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Skip":  	if (m.Arguments.Count == 2)  		return VisitSkip (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Take":  	if (m.Arguments.Count == 2)  		return VisitTake (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "OrderBy":  case "OrderByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "OrderBy");  	throw GetOverloadUnsupportedException (m.Method);  case "ThenBy":  case "ThenByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "ThenBy");  	throw GetOverloadUnsupportedException (m.Method);  case "Count":  case "LongCount":  	if (m.Arguments.Count == 1)  		return VisitCount (m.Arguments [0]' null' m.Method.ReturnType);  	if (m.Arguments.Count == 2)  		return VisitCount (m.Arguments [0]' m.Arguments [1]' m.Method.ReturnType);  	throw GetOverloadUnsupportedException (m.Method);  case "Any":  	if (m.Arguments.Count == 1)  		return VisitAny (m.Arguments [0]' null);  	if (m.Arguments.Count == 2)  		return VisitAny (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Select":  	if (m.Arguments.Count == 2)  		return VisitSelect (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "First":  case "FirstOrDefault":  case "Single":  case "SingleOrDefault":  	if (m.Arguments.Count == 1)  		return VisitFirstOrSingle (m.Arguments [0]' null' m.Method.Name);  	if (m.Arguments.Count == 2)  		return VisitFirstOrSingle (m.Arguments [0]' m.Arguments [1]' m.Method.Name);  	throw GetOverloadUnsupportedException (m.Method);  case "Where":  	if (m.Arguments.Count == 2)  		return VisitWhere (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Skip":  	if (m.Arguments.Count == 2)  		return VisitSkip (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Take":  	if (m.Arguments.Count == 2)  		return VisitTake (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "OrderBy":  case "OrderByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "OrderBy");  	throw GetOverloadUnsupportedException (m.Method);  case "ThenBy":  case "ThenByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "ThenBy");  	throw GetOverloadUnsupportedException (m.Method);  case "Count":  case "LongCount":  	if (m.Arguments.Count == 1)  		return VisitCount (m.Arguments [0]' null' m.Method.ReturnType);  	if (m.Arguments.Count == 2)  		return VisitCount (m.Arguments [0]' m.Arguments [1]' m.Method.ReturnType);  	throw GetOverloadUnsupportedException (m.Method);  case "Any":  	if (m.Arguments.Count == 1)  		return VisitAny (m.Arguments [0]' null);  	if (m.Arguments.Count == 2)  		return VisitAny (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Select":  	if (m.Arguments.Count == 2)  		return VisitSelect (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "First":  case "FirstOrDefault":  case "Single":  case "SingleOrDefault":  	if (m.Arguments.Count == 1)  		return VisitFirstOrSingle (m.Arguments [0]' null' m.Method.Name);  	if (m.Arguments.Count == 2)  		return VisitFirstOrSingle (m.Arguments [0]' m.Arguments [1]' m.Method.Name);  	throw GetOverloadUnsupportedException (m.Method);  case "Where":  	if (m.Arguments.Count == 2)  		return VisitWhere (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Skip":  	if (m.Arguments.Count == 2)  		return VisitSkip (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Take":  	if (m.Arguments.Count == 2)  		return VisitTake (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "OrderBy":  case "OrderByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "OrderBy");  	throw GetOverloadUnsupportedException (m.Method);  case "ThenBy":  case "ThenByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "ThenBy");  	throw GetOverloadUnsupportedException (m.Method);  case "Count":  case "LongCount":  	if (m.Arguments.Count == 1)  		return VisitCount (m.Arguments [0]' null' m.Method.ReturnType);  	if (m.Arguments.Count == 2)  		return VisitCount (m.Arguments [0]' m.Arguments [1]' m.Method.ReturnType);  	throw GetOverloadUnsupportedException (m.Method);  case "Any":  	if (m.Arguments.Count == 1)  		return VisitAny (m.Arguments [0]' null);  	if (m.Arguments.Count == 2)  		return VisitAny (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Select":  	if (m.Arguments.Count == 2)  		return VisitSelect (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "First":  case "FirstOrDefault":  case "Single":  case "SingleOrDefault":  	if (m.Arguments.Count == 1)  		return VisitFirstOrSingle (m.Arguments [0]' null' m.Method.Name);  	if (m.Arguments.Count == 2)  		return VisitFirstOrSingle (m.Arguments [0]' m.Arguments [1]' m.Method.Name);  	throw GetOverloadUnsupportedException (m.Method);  case "Where":  	if (m.Arguments.Count == 2)  		return VisitWhere (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Skip":  	if (m.Arguments.Count == 2)  		return VisitSkip (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Take":  	if (m.Arguments.Count == 2)  		return VisitTake (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "OrderBy":  case "OrderByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "OrderBy");  	throw GetOverloadUnsupportedException (m.Method);  case "ThenBy":  case "ThenByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "ThenBy");  	throw GetOverloadUnsupportedException (m.Method);  case "Count":  case "LongCount":  	if (m.Arguments.Count == 1)  		return VisitCount (m.Arguments [0]' null' m.Method.ReturnType);  	if (m.Arguments.Count == 2)  		return VisitCount (m.Arguments [0]' m.Arguments [1]' m.Method.ReturnType);  	throw GetOverloadUnsupportedException (m.Method);  case "Any":  	if (m.Arguments.Count == 1)  		return VisitAny (m.Arguments [0]' null);  	if (m.Arguments.Count == 2)  		return VisitAny (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Select":  	if (m.Arguments.Count == 2)  		return VisitSelect (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "First":  case "FirstOrDefault":  case "Single":  case "SingleOrDefault":  	if (m.Arguments.Count == 1)  		return VisitFirstOrSingle (m.Arguments [0]' null' m.Method.Name);  	if (m.Arguments.Count == 2)  		return VisitFirstOrSingle (m.Arguments [0]' m.Arguments [1]' m.Method.Name);  	throw GetOverloadUnsupportedException (m.Method);  case "Where":  	if (m.Arguments.Count == 2)  		return VisitWhere (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Skip":  	if (m.Arguments.Count == 2)  		return VisitSkip (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Take":  	if (m.Arguments.Count == 2)  		return VisitTake (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "OrderBy":  case "OrderByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "OrderBy");  	throw GetOverloadUnsupportedException (m.Method);  case "ThenBy":  case "ThenByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "ThenBy");  	throw GetOverloadUnsupportedException (m.Method);  case "Count":  case "LongCount":  	if (m.Arguments.Count == 1)  		return VisitCount (m.Arguments [0]' null' m.Method.ReturnType);  	if (m.Arguments.Count == 2)  		return VisitCount (m.Arguments [0]' m.Arguments [1]' m.Method.ReturnType);  	throw GetOverloadUnsupportedException (m.Method);  case "Any":  	if (m.Arguments.Count == 1)  		return VisitAny (m.Arguments [0]' null);  	if (m.Arguments.Count == 2)  		return VisitAny (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Select":  	if (m.Arguments.Count == 2)  		return VisitSelect (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "First":  case "FirstOrDefault":  case "Single":  case "SingleOrDefault":  	if (m.Arguments.Count == 1)  		return VisitFirstOrSingle (m.Arguments [0]' null' m.Method.Name);  	if (m.Arguments.Count == 2)  		return VisitFirstOrSingle (m.Arguments [0]' m.Arguments [1]' m.Method.Name);  	throw GetOverloadUnsupportedException (m.Method);  case "Where":  	if (m.Arguments.Count == 2)  		return VisitWhere (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Skip":  	if (m.Arguments.Count == 2)  		return VisitSkip (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Take":  	if (m.Arguments.Count == 2)  		return VisitTake (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "OrderBy":  case "OrderByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "OrderBy");  	throw GetOverloadUnsupportedException (m.Method);  case "ThenBy":  case "ThenByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "ThenBy");  	throw GetOverloadUnsupportedException (m.Method);  case "Count":  case "LongCount":  	if (m.Arguments.Count == 1)  		return VisitCount (m.Arguments [0]' null' m.Method.ReturnType);  	if (m.Arguments.Count == 2)  		return VisitCount (m.Arguments [0]' m.Arguments [1]' m.Method.ReturnType);  	throw GetOverloadUnsupportedException (m.Method);  case "Any":  	if (m.Arguments.Count == 1)  		return VisitAny (m.Arguments [0]' null);  	if (m.Arguments.Count == 2)  		return VisitAny (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: switch (m.Method.Name) {  case "Select":  	if (m.Arguments.Count == 2)  		return VisitSelect (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "First":  case "FirstOrDefault":  case "Single":  case "SingleOrDefault":  	if (m.Arguments.Count == 1)  		return VisitFirstOrSingle (m.Arguments [0]' null' m.Method.Name);  	if (m.Arguments.Count == 2)  		return VisitFirstOrSingle (m.Arguments [0]' m.Arguments [1]' m.Method.Name);  	throw GetOverloadUnsupportedException (m.Method);  case "Where":  	if (m.Arguments.Count == 2)  		return VisitWhere (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Skip":  	if (m.Arguments.Count == 2)  		return VisitSkip (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Take":  	if (m.Arguments.Count == 2)  		return VisitTake (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "OrderBy":  case "OrderByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "OrderBy");  	throw GetOverloadUnsupportedException (m.Method);  case "ThenBy":  case "ThenByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "ThenBy");  	throw GetOverloadUnsupportedException (m.Method);  case "Count":  case "LongCount":  	if (m.Arguments.Count == 1)  		return VisitCount (m.Arguments [0]' null' m.Method.ReturnType);  	if (m.Arguments.Count == 2)  		return VisitCount (m.Arguments [0]' m.Arguments [1]' m.Method.ReturnType);  	throw GetOverloadUnsupportedException (m.Method);  case "Any":  	if (m.Arguments.Count == 1)  		return VisitAny (m.Arguments [0]' null);  	if (m.Arguments.Count == 2)  		return VisitAny (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  }  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitSelect (m.Arguments [0]' m.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitFirstOrSingle (m.Arguments [0]' m.Arguments [1]' m.Method.Name);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitWhere (m.Arguments [0]' m.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitSkip (m.Arguments [0]' m.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitTake (m.Arguments [0]' m.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "OrderBy");  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "ThenBy");  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitCount (m.Arguments [0]' m.Arguments [1]' m.Method.ReturnType);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following statement contains a magic number: if (m.Arguments.Count == 2)  	return VisitAny (m.Arguments [0]' m.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitFirstOrSingle,The following statement contains a magic number: searchRequest.Size = single ? 2 : 1;  
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (node.Method.DeclaringType == typeof(Enumerable) || node.Method.DeclaringType == typeof(Queryable)) {  	var source = node.Arguments [0];  	if (node.Method.Name == "GroupBy" && node.Arguments.Count == 2) {  		groupBy = node.Arguments [1].GetLambda ().Body;  		return Visit (source);  	}  	if (node.Method.Name == "Select" && node.Arguments.Count == 2) {  		var y = Visit (node.Arguments [1]).GetLambda ();  		selectProjection = Expression.Lambda (y.Body' bindingParameter);  		return Visit (source);  	}  	if (node.Method.Name == "Take" && node.Arguments.Count == 2)  		return VisitTake (source' node.Arguments [1]);  	// Consider whether to take the groupby operation and rebind the semantics into the projection  	// and remove it from the expression tree so that processing can continue.  	var reboundExpression = RebindAggregateOperation (node);  	if (reboundExpression != null && !source.Type.IsGenericOf (typeof(IGrouping<' >))) {  		selectProjection = Expression.Lambda (reboundExpression' bindingParameter);  		return Visit (source);  	}  	// Rebinding an individual element within a Select  	if (source is ParameterExpression) {  		if (reboundExpression != null)  			return reboundExpression;  	}  }  
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (node.Method.DeclaringType == typeof(Enumerable) || node.Method.DeclaringType == typeof(Queryable)) {  	var source = node.Arguments [0];  	if (node.Method.Name == "GroupBy" && node.Arguments.Count == 2) {  		groupBy = node.Arguments [1].GetLambda ().Body;  		return Visit (source);  	}  	if (node.Method.Name == "Select" && node.Arguments.Count == 2) {  		var y = Visit (node.Arguments [1]).GetLambda ();  		selectProjection = Expression.Lambda (y.Body' bindingParameter);  		return Visit (source);  	}  	if (node.Method.Name == "Take" && node.Arguments.Count == 2)  		return VisitTake (source' node.Arguments [1]);  	// Consider whether to take the groupby operation and rebind the semantics into the projection  	// and remove it from the expression tree so that processing can continue.  	var reboundExpression = RebindAggregateOperation (node);  	if (reboundExpression != null && !source.Type.IsGenericOf (typeof(IGrouping<' >))) {  		selectProjection = Expression.Lambda (reboundExpression' bindingParameter);  		return Visit (source);  	}  	// Rebinding an individual element within a Select  	if (source is ParameterExpression) {  		if (reboundExpression != null)  			return reboundExpression;  	}  }  
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (node.Method.DeclaringType == typeof(Enumerable) || node.Method.DeclaringType == typeof(Queryable)) {  	var source = node.Arguments [0];  	if (node.Method.Name == "GroupBy" && node.Arguments.Count == 2) {  		groupBy = node.Arguments [1].GetLambda ().Body;  		return Visit (source);  	}  	if (node.Method.Name == "Select" && node.Arguments.Count == 2) {  		var y = Visit (node.Arguments [1]).GetLambda ();  		selectProjection = Expression.Lambda (y.Body' bindingParameter);  		return Visit (source);  	}  	if (node.Method.Name == "Take" && node.Arguments.Count == 2)  		return VisitTake (source' node.Arguments [1]);  	// Consider whether to take the groupby operation and rebind the semantics into the projection  	// and remove it from the expression tree so that processing can continue.  	var reboundExpression = RebindAggregateOperation (node);  	if (reboundExpression != null && !source.Type.IsGenericOf (typeof(IGrouping<' >))) {  		selectProjection = Expression.Lambda (reboundExpression' bindingParameter);  		return Visit (source);  	}  	// Rebinding an individual element within a Select  	if (source is ParameterExpression) {  		if (reboundExpression != null)  			return reboundExpression;  	}  }  
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (node.Method.Name == "GroupBy" && node.Arguments.Count == 2) {  	groupBy = node.Arguments [1].GetLambda ().Body;  	return Visit (source);  }  
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (node.Method.Name == "Select" && node.Arguments.Count == 2) {  	var y = Visit (node.Arguments [1]).GetLambda ();  	selectProjection = Expression.Lambda (y.Body' bindingParameter);  	return Visit (source);  }  
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,VisitMethodCall,The following statement contains a magic number: if (node.Method.Name == "Take" && node.Arguments.Count == 2)  	return VisitTake (source' node.Arguments [1]);  
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,RebindAggregateOperation,The following statement contains a magic number: if (aggregateOperations.TryGetValue (m.Method.Name' out operation))  	switch (m.Arguments.Count) {  	case 1:  		return VisitAggregateGroupKeyOperation (operation' m.Method.ReturnType);  	case 2:  		return VisitAggregateGroupPredicateOperation (m.Arguments [1]' operation' m.Method.ReturnType);  	}  
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,RebindAggregateOperation,The following statement contains a magic number: switch (m.Arguments.Count) {  case 1:  	return VisitAggregateGroupKeyOperation (operation' m.Method.ReturnType);  case 2:  	return VisitAggregateGroupPredicateOperation (m.Arguments [1]' operation' m.Method.ReturnType);  }  
Magic Number,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,RebindAggregateOperation,The following statement contains a magic number: if (aggregateMemberOperations.TryGetValue (m.Method.Name' out operation) && m.Arguments.Count == 2)  	return VisitAggregateMemberOperation (m.Arguments [1]' operation' m.Method.ReturnType);  
Magic Number,ElasticLinq.Retry,RetryPolicy,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Retry\RetryPolicy.cs,ExecuteAsync,The following statement contains a magic number: while (true) {  	Exception operationException = null;  	var operationResult = default(TOperation);  	try {  		operationResult = await operationFunc (cancellationToken);  	} catch (Exception ex) {  		operationException = ex;  	}  	if (!shouldRetryFunc (operationResult' operationException)) {  		if (operationException != null)  			ExceptionDispatchInfo.Capture (operationException).Throw ();  		return operationResult;  	}  	// Something failed. Attempt to retry the operation.  	var loggerInfo = new Dictionary<string' object> {  		{  			"category"'  			"retry"  		}'  		{  			"elapsedMilliseconds"'  			stopwatch.ElapsedMilliseconds  		}'  		{  			"operationRetryDelayMS"'  			retryDelay  		}'  		{  			"operationAttempt"'  			++attempt  		}'  		{  			"operationName"'  			"ElasticLINQ"  		}  	};  	if (appendLogInfoFunc != null)  		appendLogInfoFunc (operationResult' loggerInfo);  	if (attempt >= MaxAttempts) {  		Log.Warn (operationException' loggerInfo' "The operation failed {0} times' which is the maximum allowed."' MaxAttempts);  		throw new RetryFailedException (MaxAttempts);  	}  	Log.Info (operationException' loggerInfo' "The operation failed (attempt #{0}) and will be retried."' attempt);  	await Delay.For (retryDelay' cancellationToken);  	retryDelay = retryDelay * 2;  }  
Magic Number,ElasticLinq.Retry,RetryPolicy,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Retry\RetryPolicy.cs,ExecuteAsync,The following statement contains a magic number: retryDelay = retryDelay * 2;  
Missing Default,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitDefaultMethodCall,The following switch statement is missing a default case: switch (m.Method.Name) {  case "Equals":  	if (m.Arguments.Count == 1)  		return VisitEquals (Visit (m.Object)' Visit (m.Arguments [0]));  	if (m.Arguments.Count == 2)  		return VisitEquals (Visit (m.Arguments [0])' Visit (m.Arguments [1]));  	break;  case "Contains":  	if (TypeHelper.FindIEnumerable (m.Method.DeclaringType) != null)  		return VisitEnumerableContainsMethodCall (m.Object' m.Arguments [0]);  	break;  }  
Missing Default,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitElasticMethodsMethodCall,The following switch statement is missing a default case: switch (m.Method.Name) {  case "ContainsAny":  	if (m.Arguments.Count == 2)  		return VisitContains ("ContainsAny"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.@bool);  	break;  case "ContainsAll":  	if (m.Arguments.Count == 2)  		return VisitContains ("ContainsAll"' m.Arguments [0]' m.Arguments [1]' TermsExecutionMode.and);  	break;  case "Regexp":  	if (m.Arguments.Count == 2)  		return VisitRegexp (m.Arguments [0]' m.Arguments [1]);  	break;  case "Prefix":  	if (m.Arguments.Count == 2)  		return VisitPrefix (m.Arguments [0]' m.Arguments [1]);  	break;  }  
Missing Default,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitEnumerableMethodCall,The following switch statement is missing a default case: switch (m.Method.Name) {  case "Contains":  	if (m.Arguments.Count == 2)  		return VisitEnumerableContainsMethodCall (m.Arguments [0]' m.Arguments [1]);  	break;  }  
Missing Default,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitStringMethodCall,The following switch statement is missing a default case: switch (m.Method.Name) {  case "Contains":  	// Where(x => x.StringProperty.Contains(value))  	if (m.Arguments.Count == 1)  		return VisitStringPatternCheckMethodCall (m.Object' m.Arguments [0]' "*{0}*"' m.Method.Name);  	break;  case "StartsWith":  	// Where(x => x.StringProperty.StartsWith(value))  	if (m.Arguments.Count == 1)  		return VisitStringPatternCheckMethodCall (m.Object' m.Arguments [0]' "{0}*"' m.Method.Name);  	break;  case "EndsWith":  	// Where(x => x.StringProperty.EndsWith(value))  	if (m.Arguments.Count == 1)  		return VisitStringPatternCheckMethodCall (m.Object' m.Arguments [0]' "*{0}"' m.Method.Name);  	break;  }  
Missing Default,ElasticLinq.Request.Visitors,CriteriaExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\CriteriaExpressionVisitor.cs,VisitUnary,The following switch statement is missing a default case: switch (node.NodeType) {  case ExpressionType.Convert:  	return node.Operand;  case ExpressionType.Not: {  	var subExpression = Visit (node.Operand) as CriteriaExpression;  	if (subExpression != null)  		return new CriteriaExpression (NotCriteria.Create (subExpression.Criteria));  	break;  }  }  
Missing Default,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitElasticQueryExtensionsMethodCall,The following switch statement is missing a default case: switch (m.Method.Name) {  case "Query":  	if (m.Arguments.Count == 2)  		return VisitQuery (m.Arguments [0]' m.Arguments [1]);  	break;  case "QueryString":  	if (m.Arguments.Count == 2)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]);  	if (m.Arguments.Count == 3)  		return VisitQueryString (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  case "OrderByScore":  case "OrderByScoreDescending":  case "ThenByScore":  case "ThenByScoreDescending":  	if (m.Arguments.Count == 1)  		return VisitOrderByScore (m.Arguments [0]' !m.Method.Name.EndsWith ("Descending"' StringComparison.Ordinal));  	break;  case "MinScore":  	if (m.Arguments.Count == 2)  		return VisitMinimumScore (m.Arguments [0]' m.Arguments [1]);  	break;  case "Highlight":  	if (m.Arguments.Count == 3)  		return VisitHighlight (m.Arguments [0]' m.Arguments [1]' m.Arguments [2]);  	break;  }  
Missing Default,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitQueryableMethodCall,The following switch statement is missing a default case: switch (m.Method.Name) {  case "Select":  	if (m.Arguments.Count == 2)  		return VisitSelect (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "First":  case "FirstOrDefault":  case "Single":  case "SingleOrDefault":  	if (m.Arguments.Count == 1)  		return VisitFirstOrSingle (m.Arguments [0]' null' m.Method.Name);  	if (m.Arguments.Count == 2)  		return VisitFirstOrSingle (m.Arguments [0]' m.Arguments [1]' m.Method.Name);  	throw GetOverloadUnsupportedException (m.Method);  case "Where":  	if (m.Arguments.Count == 2)  		return VisitWhere (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Skip":  	if (m.Arguments.Count == 2)  		return VisitSkip (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "Take":  	if (m.Arguments.Count == 2)  		return VisitTake (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  case "OrderBy":  case "OrderByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "OrderBy");  	throw GetOverloadUnsupportedException (m.Method);  case "ThenBy":  case "ThenByDescending":  	if (m.Arguments.Count == 2)  		return VisitOrderBy (m.Arguments [0]' m.Arguments [1]' m.Method.Name == "ThenBy");  	throw GetOverloadUnsupportedException (m.Method);  case "Count":  case "LongCount":  	if (m.Arguments.Count == 1)  		return VisitCount (m.Arguments [0]' null' m.Method.ReturnType);  	if (m.Arguments.Count == 2)  		return VisitCount (m.Arguments [0]' m.Arguments [1]' m.Method.ReturnType);  	throw GetOverloadUnsupportedException (m.Method);  case "Any":  	if (m.Arguments.Count == 1)  		return VisitAny (m.Arguments [0]' null);  	if (m.Arguments.Count == 2)  		return VisitAny (m.Arguments [0]' m.Arguments [1]);  	throw GetOverloadUnsupportedException (m.Method);  }  
Missing Default,ElasticLinq.Request.Visitors,ElasticQueryTranslator,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\ElasticQueryTranslator.cs,VisitUnary,The following switch statement is missing a default case: switch (node.NodeType) {  case ExpressionType.Convert:  	return node.Operand;  case ExpressionType.Not: {  	var subExpression = Visit (node.Operand) as CriteriaExpression;  	if (subExpression != null)  		return new CriteriaExpression (NotCriteria.Create (subExpression.Criteria));  	break;  }  }  
Missing Default,ElasticLinq.Request.Visitors,FacetExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\FacetExpressionVisitor.cs,RebindAggregateOperation,The following switch statement is missing a default case: switch (m.Arguments.Count) {  case 1:  	return VisitAggregateGroupKeyOperation (operation' m.Method.ReturnType);  case 2:  	return VisitAggregateGroupPredicateOperation (m.Arguments [1]' operation' m.Method.ReturnType);  }  
Missing Default,ElasticLinq.Request.Visitors,MemberProjectionExpressionVisitor,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Request\Visitors\MemberProjectionExpressionVisitor.cs,VisitMember,The following switch statement is missing a default case: switch (node.Expression.NodeType) {  case ExpressionType.Parameter:  	return VisitFieldSelection (node);  case ExpressionType.MemberAccess:  	if (!IsElasticField (node))  		return VisitFieldSelection (node);  	break;  }  
Missing Default,ElasticLinq.Response.Materializers,AggregateRow,F:\newReposMay17\CenturyLinkCloud_ElasticLINQ\Source\ElasticLINQ.Portable\..\ElasticLINQ\Response\Materializers\Aggregates.cs,ParseValue,The following switch statement is missing a default case: switch (token.ToString ()) {  case "Infinity":  case "∞": {  	if (valueType == typeof(double))  		return double.PositiveInfinity;  	if (valueType == typeof(float))  		return float.PositiveInfinity;  	if (valueType == typeof(decimal?))  		return null;  	break;  }  case "-Infinity":  case "-∞": {  	if (valueType == typeof(double))  		return double.NegativeInfinity;  	if (valueType == typeof(float))  		return float.NegativeInfinity;  	if (valueType == typeof(decimal?))  		return null;  	break;  }  }  
