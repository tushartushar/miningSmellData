Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,_mapToURI,Cyclomatic complexity of the method is 9
Complex Method,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Request,Cyclomatic complexity of the method is 29
Complex Method,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Raw,Cyclomatic complexity of the method is 24
Long Parameter List,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,_mapToURI,The method has 7 parameters.
Long Parameter List,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Find,The method has 5 parameters.
Long Parameter List,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Request,The method has 11 parameters.
Long Parameter List,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Raw,The method has 6 parameters.
Long Statement,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Signature,The length of the statement  "	return @"ChargeOver co_public_key=""" + this.username + @""" co_nonce=""" + nonce + @""" co_timestamp=""" + timestamp + @""" co_signature_method=""HMAC-SHA256"" co_version=""1.0"" co_signature=""" + signature + @""" "; " is 218.
Long Statement,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Raw,The length of the statement  "		// Authorization: ChargeOver co_public_key="' . $public . '" co_nonce="' . $nonce . '" co_timestamp="' . $time . '" co_signature_method="HMAC-SHA256" co_version="1.0" co_signature="' . $signature . '"  " is 200.
Magic Number,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Signature,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * random.NextDouble () + 65)));  	builder.Append (ch);  }  
Magic Number,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Signature,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * random.NextDouble () + 65)));  	builder.Append (ch);  }  
Magic Number,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Signature,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * random.NextDouble () + 65)));  	builder.Append (ch);  }  
Magic Number,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Signature,The following statement contains a magic number: ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * random.NextDouble () + 65)));  
Magic Number,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Signature,The following statement contains a magic number: ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * random.NextDouble () + 65)));  
Missing Default,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Request,The following switch statement is missing a default case: switch (coMethod) {  case ChargeOverAPI.MethodCreate:  	JObject oc = JObject.Parse (http.Item2);  	resp.id = (int)oc ["response"] ["id"];  	break;  case ChargeOverAPI.MethodModify:  	//JObject om = JObject.Parse (http.Item2);  	break;  case ChargeOverAPI.MethodFind:  	JObject objf = JObject.Parse (http.Item2);  	if (type == typeof(Customer)) {  		List<Customer> list = JsonConvert.DeserializeObject<List<Customer>> (objf ["response"].ToString ());  		resp.list = list.ConvertAll (i => i as Base);  	}  	else if (type == typeof(User)) {  		List<User> list = JsonConvert.DeserializeObject<List<User>> (objf ["response"].ToString ());  		resp.list = list.ConvertAll (i => i as Base);  	}  	else if (type == typeof(Invoice)) {  		List<Invoice> list = JsonConvert.DeserializeObject<List<Invoice>> (objf ["response"].ToString ());  		resp.list = list.ConvertAll (i => i as Base);  	}  	else if (type == typeof(Transaction)) {  		List<Transaction> list = JsonConvert.DeserializeObject<List<Transaction>> (objf ["response"].ToString ());  		resp.list = list.ConvertAll (i => i as Base);  	}  	else if (type == typeof(Package)) {  		List<Package> list = JsonConvert.DeserializeObject<List<Package>> (objf ["response"].ToString ());  		resp.list = list.ConvertAll (i => i as Base);  	}  	break;  case ChargeOverAPI.MethodGet:  	JObject objg = JObject.Parse (http.Item2);  	if (type == typeof(Customer)) {  		Customer cust = JsonConvert.DeserializeObject<Customer> (objg ["response"].ToString ());  		resp.obj = (Customer)cust;  	}  	else if (type == typeof(User)) {  		User user = JsonConvert.DeserializeObject<User> (objg ["response"].ToString ());  		resp.obj = (User)user;  	}  	else if (type == typeof(Invoice)) {  		Invoice inv = JsonConvert.DeserializeObject<Invoice> (objg ["response"].ToString ());  		resp.obj = (Invoice)inv;  	}  	else if (type == typeof(Transaction)) {  		Transaction trans = JsonConvert.DeserializeObject<Transaction> (objg ["response"].ToString ());  		resp.obj = (Transaction)trans;  	}  	break;  case ChargeOverAPI.MethodBulk:  	JObject objb = JObject.Parse (http.Item2);  	List<Response> listb = JsonConvert.DeserializeObject<List<Response>> (objb ["response"] ["_bulk"].ToString ());  	resp.bulk = listb;  	break;  }  
Missing Default,ChargeOver,ChargeOverAPI,C:\repos\chargeover_chargeover_csharp\src\ChargeOverAPI\ChargeOverAPI.cs,Raw,The following switch statement is missing a default case: switch (coMethod) {  case ChargeOverAPI.MethodCreate:  	httpMethod = "POST";  	data = JsonConvert.SerializeObject (obj);  	break;  case ChargeOverAPI.MethodAction:  	httpMethod = "POST";  	break;  case ChargeOverAPI.MethodDelete:  	httpMethod = "DELETE";  	break;  case ChargeOverAPI.MethodFind:  case ChargeOverAPI.MethodGet:  	httpMethod = "GET";  	break;  case ChargeOverAPI.MethodModify:  	httpMethod = "PUT";  	data = JsonConvert.SerializeObject (obj);  	break;  case ChargeOverAPI.MethodBulk:  	httpMethod = "POST";  	data = JsonConvert.SerializeObject (bulk);  	break;  }  
