Implementation smell,Namespace,Class,File,Method,Description
Long Method,SimpleSpeedTester.Example,JsonSerializersSpeedTest,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\JsonSerializersSpeedTest.cs,Run,The method has 124 lines of code.
Complex Method,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Long Parameter List,SimpleSpeedTester.Example,JsonSerializersSpeedTest,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\JsonSerializersSpeedTest.cs,DoSpeedTest,The method has 6 parameters. Parameters: testGroupName' serializeFunc' deserializeFunc' getAvgPayload' ignoreSerializationResult' ignoreDeserializationResult
Long Statement,System.Text.Json,JsonWriter,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,GetWriter,The length of the statement  "            var Writer = (Action<TextWriter' T>)Delegate.CreateDelegate(typeof(Action<TextWriter' T>)' CurrentMethod.Options.CompiledType.GetMethod(CurrentMethod.Name)); " is 157.
Long Statement,System.Text.Json,JsonWriter,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,GenerateFuncForArrayType,The length of the statement  "                        format = string.Format("if (item != null) {{ {0}.{1}(wr' item); }} else {{ wr.Write(\"null\"); }}"' genFuncName.Options.FullName' genFuncName.Name); " is 148.
Long Statement,System.Text.Json,JsonWriter,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,GenerateFuncForType,The length of the statement  "                        globalCodes.AppendFormat("wr.Write(\"{1}'{0}':\"); System.Text.Json.JsonWriterTools.EncodeJsString(wr' graph.{0});"' item.Name' isCont ? "'" : ""); " is 147.
Long Statement,System.Text.Json,JsonWriter,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,GenerateFuncForType,The length of the statement  "                            globalCodes.AppendFormat("if (graph.{0}.HasValue) wr.Write(\"{1}'{0}':{{0}}\"' graph.{0}.Value);"' item.Name' isCont ? "'" : ""); " is 129.
Long Statement,System.Text.Json,JsonWriter,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,GenerateFuncForType,The length of the statement  "                            globalCodes.AppendFormat("if (graph.{0} != null) wr.Write(\"{1}'{0}':\"); {2}.{3}(wr' graph.{0});"' item.Name' isCont ? "'" : ""' genFuncName.Options.FullName' genFuncName.Name); " is 178.
Long Statement,System.Text.Json,MethodTarget,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,Generate,The length of the statement  "                //    method = (Action<TextWriter' object>)Delegate.CreateDelegate(typeof(Action<TextWriter' object>)' Options.CompiledType.GetMethod(Name)); " is 141.
Long Statement,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,DeserializeObject,The length of the statement  "                return typeof(IConvertible).IsAssignableFrom(type) ? Convert.ChangeType(value' type' CultureInfo.InvariantCulture) : value; " is 123.
Long Statement,SimpleJson,PocoJsonSerializerStrategy,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,DeserializeObject,The length of the statement  "                return typeof(IConvertible).IsAssignableFrom(type) ? Convert.ChangeType(value' type' CultureInfo.InvariantCulture) : value; " is 123.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,IsTypeGenericeCollectionInterface,The length of the statement  "                return (genericDefinition == typeof(IList<>) || genericDefinition == typeof(ICollection<>) || genericDefinition == typeof(IEnumerable<>)); " is 138.
Long Statement,SimpleJson,ReflectionUtils,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,IsTypeGenericeCollectionInterface,The length of the statement  "                return (genericDefinition == typeof(IList<>) || genericDefinition == typeof(ICollection<>) || genericDefinition == typeof(IEnumerable<>)); " is 138.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,GetNewInstance,The length of the statement  "                    ConstructorInfo constructorInfo = type.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 153.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,GetNewInstance,The length of the statement  "                ConstructorInfo constructorInfo = type.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 153.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateGetHandler,The length of the statement  "                DynamicMethod dynamicGet = CreateDynamicMethod("Get" + fieldInfo.Name' fieldInfo.DeclaringType' new Type[] { typeof(object) }' fieldInfo.DeclaringType); " is 152.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateSetHandler,The length of the statement  "                DynamicMethod dynamicSet = CreateDynamicMethod("Set" + fieldInfo.Name' null' new Type[] { typeof(object)' typeof(object) }' fieldInfo.DeclaringType); " is 149.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateGetHandler,The length of the statement  "                DynamicMethod dynamicGet = CreateDynamicMethod("Get" + propertyInfo.Name' propertyInfo.DeclaringType' new Type[] { typeof(object) }' propertyInfo.DeclaringType); " is 161.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateSetHandler,The length of the statement  "                DynamicMethod dynamicSet = CreateDynamicMethod("Set" + propertyInfo.Name' null' new Type[] { typeof(object)' typeof(object) }' propertyInfo.DeclaringType); " is 155.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,GetNewInstance,The length of the statement  "                    ConstructorInfo constructorInfo = type.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 153.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,GetNewInstance,The length of the statement  "                ConstructorInfo constructorInfo = type.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 153.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateGetHandler,The length of the statement  "                DynamicMethod dynamicGet = CreateDynamicMethod("Get" + fieldInfo.Name' fieldInfo.DeclaringType' new Type[] { typeof(object) }' fieldInfo.DeclaringType); " is 152.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateSetHandler,The length of the statement  "                DynamicMethod dynamicSet = CreateDynamicMethod("Set" + fieldInfo.Name' null' new Type[] { typeof(object)' typeof(object) }' fieldInfo.DeclaringType); " is 149.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateGetHandler,The length of the statement  "                DynamicMethod dynamicGet = CreateDynamicMethod("Get" + propertyInfo.Name' propertyInfo.DeclaringType' new Type[] { typeof(object) }' propertyInfo.DeclaringType); " is 161.
Long Statement,SimpleJson,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateSetHandler,The length of the statement  "                DynamicMethod dynamicSet = CreateDynamicMethod("Set" + propertyInfo.Name' null' new Type[] { typeof(object)' typeof(object) }' propertyInfo.DeclaringType); " is 155.
Long Statement,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,Reflection,PocoJsonSerializerStrategy,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,DeserializeObject,The length of the statement  "                return typeof(IConvertible).IsAssignableFrom(type) ? Convert.ChangeType(value' type' CultureInfo.InvariantCulture) : value; " is 123.
Long Statement,Reflection,ReflectionUtils,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,IsTypeGenericeCollectionInterface,The length of the statement  "                return (genericDefinition == typeof(IList<>) || genericDefinition == typeof(ICollection<>) || genericDefinition == typeof(IEnumerable<>)); " is 138.
Long Statement,Reflection,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,GetNewInstance,The length of the statement  "                    ConstructorInfo constructorInfo = type.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 153.
Long Statement,Reflection,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,GetNewInstance,The length of the statement  "                ConstructorInfo constructorInfo = type.GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' Type.EmptyTypes' null); " is 153.
Long Statement,Reflection,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateGetHandler,The length of the statement  "                DynamicMethod dynamicGet = CreateDynamicMethod("Get" + fieldInfo.Name' fieldInfo.DeclaringType' new Type[] { typeof(object) }' fieldInfo.DeclaringType); " is 152.
Long Statement,Reflection,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateSetHandler,The length of the statement  "                DynamicMethod dynamicSet = CreateDynamicMethod("Set" + fieldInfo.Name' null' new Type[] { typeof(object)' typeof(object) }' fieldInfo.DeclaringType); " is 149.
Long Statement,Reflection,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateGetHandler,The length of the statement  "                DynamicMethod dynamicGet = CreateDynamicMethod("Get" + propertyInfo.Name' propertyInfo.DeclaringType' new Type[] { typeof(object) }' propertyInfo.DeclaringType); " is 161.
Long Statement,Reflection,CacheResolver,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,CreateSetHandler,The length of the statement  "                DynamicMethod dynamicSet = CreateDynamicMethod("Set" + propertyInfo.Name' null' new Type[] { typeof(object)' typeof(object) }' propertyInfo.DeclaringType); " is 155.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e'"  is complex.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e'"  is complex.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l'"  is complex.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e'"  is complex.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e'"  is complex.
Complex Conditional,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l'"  is complex.
Complex Conditional,SimpleJson,PocoJsonSerializerStrategy,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is long && type == typeof(long)) || (value is double && type == typeof(double))"  is complex.
Complex Conditional,SimpleJson,PocoJsonSerializerStrategy,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is double && type != typeof(double)) || (value is long && type != typeof(long))"  is complex.
Complex Conditional,SimpleJson,PocoJsonSerializerStrategy,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is long && type == typeof(long)) || (value is double && type == typeof(double))"  is complex.
Complex Conditional,SimpleJson,PocoJsonSerializerStrategy,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is double && type != typeof(double)) || (value is long && type != typeof(long))"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e'"  is complex.
Complex Conditional,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l'"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is long && type == typeof(long)) || (value is double && type == typeof(double))"  is complex.
Complex Conditional,Reflection,PocoJsonSerializerStrategy,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,DeserializeObject,The conditional expression  "(value is double && type != typeof(double)) || (value is long && type != typeof(long))"  is complex.
Empty Catch Block,System.Text.Json,JsonWriter,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,FindType,The method has an empty catch block.
Empty Catch Block,System.Text.Json,JsonWriter,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,FindType,The method has an empty catch block.
Magic Number,System.Text.Json,JsonWriterTools,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,EncodeJsString,The following statement contains a magic number: foreach (char c in s)              {                  switch (c)                  {                      case '\"':                          wr.Write("\\\"");                          break;                      case '\\':                          wr.Write("\\\\");                          break;                      case '\b':                          wr.Write("\\b");                          break;                      case '\f':                          wr.Write("\\f");                          break;                      case '\n':                          wr.Write("\\n");                          break;                      case '\r':                          wr.Write("\\r");                          break;                      case '\t':                          wr.Write("\\t");                          break;                      default:                          int i = (int)c;                          if (i < 32 || i > 127)                          {                              wr.Write("\\u{0:X04}"' i);                          }                          else                          {                              wr.Write(c);                          }                          break;                  }              }
Magic Number,System.Text.Json,JsonWriterTools,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,EncodeJsString,The following statement contains a magic number: foreach (char c in s)              {                  switch (c)                  {                      case '\"':                          wr.Write("\\\"");                          break;                      case '\\':                          wr.Write("\\\\");                          break;                      case '\b':                          wr.Write("\\b");                          break;                      case '\f':                          wr.Write("\\f");                          break;                      case '\n':                          wr.Write("\\n");                          break;                      case '\r':                          wr.Write("\\r");                          break;                      case '\t':                          wr.Write("\\t");                          break;                      default:                          int i = (int)c;                          if (i < 32 || i > 127)                          {                              wr.Write("\\u{0:X04}"' i);                          }                          else                          {                              wr.Write(c);                          }                          break;                  }              }
Magic Number,SimpleSpeedTester.Example,JsonSerializersSpeedTest,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\JsonSerializersSpeedTest.cs,GetSimpleObject,The following statement contains a magic number: return new SimpleObject              {                  Name = string.Format("Simple-{0}"' id)'                  Id = RandomGenerator.Next(1' ObjectsCount)'                  Address = "Planet Earth"'                  Scores = Enumerable.Range(0' 10).Select(i => RandomGenerator.Next(1' 100)).ToArray()              };
Magic Number,SimpleSpeedTester.Example,JsonSerializersSpeedTest,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\JsonSerializersSpeedTest.cs,GetSimpleObject,The following statement contains a magic number: return new SimpleObject              {                  Name = string.Format("Simple-{0}"' id)'                  Id = RandomGenerator.Next(1' ObjectsCount)'                  Address = "Planet Earth"'                  Scores = Enumerable.Range(0' 10).Select(i => RandomGenerator.Next(1' 100)).ToArray()              };
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                          break;                      c = json[index++];                      if (c == '"')                          s.Append('"');                      else if (c == '\\')                          s.Append('\\');                      else if (c == '/')                          s.Append('/');                      else if (c == 'b')                          s.Append('\b');                      else if (c == 'f')                          s.Append('\f');                      else if (c == 'n')                          s.Append('\n');                      else if (c == 'r')                          s.Append('\r');                      else if (c == 't')                          s.Append('\t');                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (                                  !(success =                                    UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber'                                                    CultureInfo.InvariantCulture' out codePoint)))                                  return "";                                // convert the integer codepoint to a unicode char and add to string                                if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" &&                                          UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber'                                                          CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }  #if SILVERLIGHT                              s.Append(ConvertFromUtf32((int)codePoint));  #else                              s.Append(Char.ConvertFromUtf32((int)codePoint));  #endif                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' &&                      json[index + 1] == 'a' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 's' &&                      json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' &&                      json[index + 1] == 'r' &&                      json[index + 2] == 'u' &&                      json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' &&                      json[index + 1] == 'u' &&                      json[index + 2] == 'l' &&                      json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Missing Default,System.Text.Json,JsonWriter,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,GenerateFuncForArrayType,The following switch statement is missing a default case: switch (Type.GetTypeCode(t))              {                  case TypeCode.String:                      format = "System.Text.Json.JsonWriterTools.EncodeJsString(wr' item);";                      break;                  case TypeCode.Object:                      if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Nullable<>))                      {                          format = "if (item.HasValue) { wr.Write(item.Value); } else { wr.Write(\"null\"); }";                      }                      else                      {                          var genFuncName = GenerateFuncForType(nstrBuilder' t' options);                          format = string.Format("if (item != null) {{ {0}.{1}(wr' item); }} else {{ wr.Write(\"null\"); }}"' genFuncName.Options.FullName' genFuncName.Name);                      }                      break;              }
Missing Default,System.Text.Json,JsonWriter,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\FastJsonWriter.cs,GenerateFuncForType,The following switch statement is missing a default case: switch (Type.GetTypeCode(item.PropertyType))                  {                      case TypeCode.Byte:                      case TypeCode.Decimal:                      case TypeCode.Double:                      case TypeCode.Int16:                      case TypeCode.Int32:                      case TypeCode.Int64:                      case TypeCode.SByte:                      case TypeCode.Single:                      case TypeCode.UInt16:                      case TypeCode.UInt32:                      case TypeCode.UInt64:                          globalCodes.AppendFormat("wr.Write(\"{1}'{0}':{{0}}\"' graph.{0});"' item.Name' isCont ? "'" : "");                          break;                      case TypeCode.String:                          globalCodes.AppendFormat("wr.Write(\"{1}'{0}':\"); System.Text.Json.JsonWriterTools.EncodeJsString(wr' graph.{0});"' item.Name' isCont ? "'" : "");                          break;                      case TypeCode.Object:                          if (item.PropertyType.IsGenericType && item.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))                          {                              globalCodes.AppendFormat("if (graph.{0}.HasValue) wr.Write(\"{1}'{0}':{{0}}\"' graph.{0}.Value);"' item.Name' isCont ? "'" : "");                          }                          else                          {                              var genFuncName = GenerateSource(nstrBuilder' item.PropertyType' options);                              globalCodes.AppendFormat("if (graph.{0} != null) wr.Write(\"{1}'{0}':\"); {2}.{3}(wr' graph.{0});"' item.Name' isCont ? "'" : ""' genFuncName.Options.FullName' genFuncName.Name);                          }                          break;                  }
Missing Default,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
Missing Default,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,SimpleJson,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
Missing Default,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,Reflection,SimpleJson,C:\repos\theburningmonk_SimpleSpeedTester\examples\JsonSerializersBenchmark\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
