Implementation smell,Namespace,Class,File,Method,Description
Long Method,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The method has 128 lines of code.
Long Method,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The method has 120 lines of code.
Long Method,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The method has 380 lines of code.
Long Method,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetWorkspaceActions,The method has 138 lines of code.
Long Method,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The method has 364 lines of code.
Long Method,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,PrintPart,The method has 103 lines of code.
Long Method,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ConnectToPrinter,The method has 129 lines of code.
Long Method,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The method has 383 lines of code.
Long Method,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The method has 322 lines of code.
Long Method,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The method has 113 lines of code.
Long Method,MatterHackers.MatterControl,ExportPrintItemPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ExportPrintItemPage.cs,ExportPrintItemPage,The method has 128 lines of code.
Long Method,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The method has 189 lines of code.
Long Method,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The method has 117 lines of code.
Long Method,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The method has 130 lines of code.
Long Method,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The method has 226 lines of code.
Long Method,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The method has 316 lines of code.
Long Method,MatterHackers.MatterControl,ImportSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\ImportSettingsPage.cs,ImportSettingsPage,The method has 158 lines of code.
Long Method,MatterHackers.MatterControl.ActionBar,ControlContentExtruder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,ControlContentExtruder,The method has 110 lines of code.
Long Method,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The method has 196 lines of code.
Long Method,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The method has 255 lines of code.
Long Method,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,GetPages,The method has 158 lines of code.
Long Method,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The method has 142 lines of code.
Long Method,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ZCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\ZCalibrationWizard.cs,GetPages,The method has 175 lines of code.
Long Method,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,OnDraw,The method has 107 lines of code.
Long Method,MatterHackers.MatterControl.CustomWidgets,DockingTabControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,Rebuild,The method has 128 lines of code.
Long Method,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The method has 145 lines of code.
Long Method,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The method has 110 lines of code.
Long Method,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The method has 140 lines of code.
Long Method,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreatePropertyEditor,The method has 328 lines of code.
Long Method,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,Create,The method has 132 lines of code.
Long Method,MatterHackers.MatterControl.Plugins.Lithophane,Lithophane,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Lithophane.cs,Generate,The method has 106 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow.View3D,BooleanProcessing,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\BooleanProcessing.cs,Do,The method has 107 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D_2.cs,SubtractAndReplace,The method has 102 lines of code.
Long Method,MatterHackers.MatterControl.EeProm,EePromMarlinSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinSettings.cs,update,The method has 184 lines of code.
Long Method,MatterHackers.MatterControl.EeProm,MarlinEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinWindow.cs,MarlinEEPromPage,The method has 118 lines of code.
Long Method,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The method has 141 lines of code.
Long Method,MatterHackers.MatterControl.Library.Export,GCodeExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\GCodeExport.cs,Generate,The method has 110 lines of code.
Long Method,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The method has 123 lines of code.
Long Method,MatterHackers.MatterControl.PrintLibrary,HardwareTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\HardwareTabPage.cs,HardwareTabPage,The method has 127 lines of code.
Long Method,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The method has 257 lines of code.
Long Method,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The method has 388 lines of code.
Long Method,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,PrintLibraryWidget,The method has 211 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,GCodeOptionsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeOptionsPanel.cs,GCodeOptionsPanel,The method has 124 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The method has 253 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The method has 122 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,Popover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Popover.cs,GetShape,The method has 108 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrinterTabPage,The method has 145 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The method has 207 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskRow.cs,RunningTaskRow,The method has 140 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,SetActiveItem,The method has 147 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,The method has 137 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,PrinterActionsBar,The method has 148 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,GeneratePrinterOverflowMenu,The method has 125 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,PrintPopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrintPopupMenu.cs,PrintPopupMenu,The method has 208 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,SceneActions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\SceneActions.cs,MakeLowestFaceFlat,The method has 130 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The method has 237 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,OnMouseDown,The method has 121 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,OnMouseMove,The method has 108 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,OnMouseUp,The method has 112 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The method has 276 lines of code.
Long Method,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The method has 117 lines of code.
Long Method,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The method has 108 lines of code.
Long Method,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,TourPopover,The method has 120 lines of code.
Long Method,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,EngineMappingsMatterSlice,The method has 125 lines of code.
Long Method,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,Slice,The method has 177 lines of code.
Long Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsTabView,The method has 164 lines of code.
Long Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateItemRow,The method has 245 lines of code.
Complex Method,MatterHackers.MatterControl,UpdateControlView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlView.cs,UpdateStatusChanged,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,RestoreUserTabs,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,Cyclomatic complexity of the method is 26
Complex Method,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl,ExportPrintItemPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ExportPrintItemPage.cs,ExportPrintItemPage,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl,CreateDiscreteMeshes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitVolumesIntoMeshes,Cyclomatic complexity of the method is 12
Complex Method,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,MoveToOpenPosition,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,Cyclomatic complexity of the method is 11
Complex Method,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls_KeyDown,Cyclomatic complexity of the method is 16
Complex Method,MatterHackers.MatterControl,ManualPrinterControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ManualPrinterControls.cs,SetVisibleControls,Cyclomatic complexity of the method is 12
Complex Method,MatterHackers.MatterControl,TextScrollWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TextScrollWidget.cs,OnKeyDown,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,OnClosing,Cyclomatic complexity of the method is 12
Complex Method,MatterHackers.MatterControl,ProjectFileHandler,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\ProjectFileHandler.cs,ImportFromProjectArchive,Cyclomatic complexity of the method is 12
Complex Method,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,Initialize,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,GetPages,Cyclomatic complexity of the method is 13
Complex Method,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ZCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\ZCalibrationWizard.cs,GetPages,Cyclomatic complexity of the method is 13
Complex Method,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbeFeedback,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbeFeedback.cs,GetZProbeHeight,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbePage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbePage.cs,GetZProbeHeight,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,OnDraw,Cyclomatic complexity of the method is 11
Complex Method,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ActiveContainer_Changed,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,DisplayContainerContent,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.DesignTools,CurveObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CurveObject3D.cs,Rebuild,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,DrawPath,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,Create,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreatePropertyEditor,Cyclomatic complexity of the method is 21
Complex Method,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,RequiresSupport,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.DesignTools,HitPlanes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,Simplify,Cyclomatic complexity of the method is 13
Complex Method,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleGrade2.cs,ConvertWord,Cyclomatic complexity of the method is 20
Complex Method,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleGrade2.cs,ConvertMappingStringToList,Cyclomatic complexity of the method is 14
Complex Method,MatterHackers.MatterControl.Library,LibraryConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryConfig.cs,LoadItemThumbnail,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.Plugins.EditorTools,PathControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,SetPosition,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,OnMouseMove,Cyclomatic complexity of the method is 13
Complex Method,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,Cyclomatic complexity of the method is 12
Complex Method,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,DrawGlContent,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.Plugins.Lithophane,Lithophane,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Lithophane.cs,Generate,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.PartPreviewWindow.View3D,MeshWrapperObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\MeshWrapperObject3D.cs,Flatten,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D_2.cs,DrawEditor,Cyclomatic complexity of the method is 14
Complex Method,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractObject3D_2.cs,Subtract,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,AdjustChildSize,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.DesignTools.Operations,OperationSourceContainerObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\OperationSourceObject3D.cs,Flatten,Cyclomatic complexity of the method is 10
Complex Method,MatterHackers.MatterControl.DesignTools.Operations,SmoothPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Path\SmoothPathObject3D.cs,DoSmoothing,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.DesignTools.Operations,ScaleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ScaleObject3D.cs,UpdateControls,Cyclomatic complexity of the method is 14
Complex Method,MatterHackers.MatterControl.EeProm,EePromMarlinSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinSettings.cs,update,Cyclomatic complexity of the method is 42
Complex Method,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.Library.Export,GCodeExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\GCodeExport.cs,Generate,Cyclomatic complexity of the method is 11
Complex Method,MatterHackers.MatterControl.Plugins.X3GDriver,X3GExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\X3GExport.cs,Generate,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,OnMouseMove,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,GCodeDebugView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeDebugView.cs,LayerFeaturesScrollbar_SecondValueChanged,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,Popover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Popover.cs,GetShape,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,SetActiveItem,Cyclomatic complexity of the method is 15
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,FindInteractionVolumeHit,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,FindDescendants,Cyclomatic complexity of the method is 18
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,GetItemColor,Cyclomatic complexity of the method is 19
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,Cyclomatic complexity of the method is 22
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,LevelingMeshVisualizer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\LevelingMeshVisualizer.cs,BuildMeshFromLevelingData,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,SceneActions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\SceneActions.cs,MakeLowestFaceFlat,Cyclomatic complexity of the method is 17
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,ConnectedFaces,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,Tile,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,Cyclomatic complexity of the method is 12
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetDirectionForFace,Cyclomatic complexity of the method is 14
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetHitData,Cyclomatic complexity of the method is 11
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,InSelectionBounds,Cyclomatic complexity of the method is 11
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,OnMouseDown,Cyclomatic complexity of the method is 19
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,DragSelectedObject,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,OnMouseUp,Cyclomatic complexity of the method is 20
Complex Method,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,Cyclomatic complexity of the method is 13
Complex Method,MatterHackers.MatterControl.SettingsManagement,OemSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\OemSettings.cs,SetManufacturers,Cyclomatic complexity of the method is 8
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,GetStlFileLocations,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,Slice,Cyclomatic complexity of the method is 12
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,StartGCodeGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,PreStartGCode,Cyclomatic complexity of the method is 10
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,CreateDropdown,Cyclomatic complexity of the method is 12
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,MenuItem_Selected,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,LoadSettingsAsync,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,ImportFromExisting,Cyclomatic complexity of the method is 11
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,Slicer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Slicer.cs,GetExtrudersUsed,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,ExtendPopover,Cyclomatic complexity of the method is 10
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,UpdateStyle,Cyclomatic complexity of the method is 19
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsTabView,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateItemRow,Cyclomatic complexity of the method is 34
Complex Method,JsonPath,Interpreter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\JsonPath.cs,Trace,Cyclomatic complexity of the method is 13
Complex Method,JsonPath,ReflectionValueSystem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\JsonPath.cs,GetMemberValue,Cyclomatic complexity of the method is 13
Complex Method,MatterHackers.MatterControl.VersionManagement,WebRequestBase<ResponseType>,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\VersionManagement\WebRequestHandler.cs,SendRequest,Cyclomatic complexity of the method is 8
Long Parameter List,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetActionMenuForSceneItem,The method has 5 parameters. Parameters: selectedItem' scene' addInSubmenu' view3DWidget' nodeOperations
Long Parameter List,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,AddModifyMenuItems,The method has 7 parameters. Parameters: selectedItem' scene' useSubMenu' nodeOperations' menuTheme' popupMenu' selectedItemType
Long Parameter List,MatterHackers.MatterControl,ContentStoreConverter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Parameter List,MatterHackers.MatterControl,LibraryItemConverter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\LibraryItemConverter.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Parameter List,MatterHackers.MatterControl,LogoSpinner,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\LogoSpinner.cs,LogoSpinner,The method has 5 parameters. Parameters: widget' scale' spinSpeed' yOffset' rotateX
Long Parameter List,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateMoveButton,The method has 5 parameters. Parameters: printer' label' axis' movementFeedRate' levelingButtons
Long Parameter List,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateExtrudeButton,The method has 5 parameters. Parameters: printer' label' movementFeedRate' extruderNumber' levelingButtons
Long Parameter List,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateSolidSlider,The method has 5 parameters. Parameters: wordOptionContainer' header' theme' min' max
Long Parameter List,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateCheckboxMenuItem,The method has 5 parameters. Parameters: text' itemValue' itemChecked' padding' eventHandler
Long Parameter List,MatterHackers.MatterControl,MHDropDownList,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHDropDownList.cs,MHDropDownList,The method has 5 parameters. Parameters: noSelectionString' theme' direction' maxHeight' useLeftIcons
Long Parameter List,MatterHackers.MatterControl,MHNumberEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHNumberEdit.cs,MHNumberEdit,The method has 11 parameters. Parameters: startingValue' theme' singleCharLabel' pixelWidth' pixelHeight' allowNegatives' allowDecimals' minValue' maxValue' increment' tabIndex
Long Parameter List,MatterHackers.MatterControl,MHPasswordTextEditWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHPasswordTextEditWidget.cs,MHPasswordTextEditWidget,The method has 7 parameters. Parameters: text' theme' pixelWidth' pixelHeight' multiLine' tabIndex' messageWhenEmptyAndNotSelected
Long Parameter List,MatterHackers.MatterControl,TextEditOverlay,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHPasswordTextEditWidget.cs,TextEditOverlay,The method has 5 parameters. Parameters: text' pointSize' pixelWidth' pixelHeight' multiLine
Long Parameter List,MatterHackers.MatterControl,MHTextEditWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHTextEditWidget.cs,MHTextEditWidget,The method has 8 parameters. Parameters: text' theme' pixelWidth' pixelHeight' multiLine' tabIndex' messageWhenEmptyAndNotSelected' typeFace
Long Parameter List,MatterHackers.MatterControl,StyledMessageBox,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\StyledMessageBoxWindow.cs,ShowMessageBox,The method has 6 parameters. Parameters: message' caption' messageType' yesOk' noCancel' useMarkdown
Long Parameter List,MatterHackers.MatterControl,StyledMessageBox,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\StyledMessageBoxWindow.cs,ShowMessageBox,The method has 7 parameters. Parameters: callback' message' caption' messageType' yesOk' noCancel' useMarkdown
Long Parameter List,MatterHackers.MatterControl,StyledMessageBox,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\StyledMessageBoxWindow.cs,ShowMessageBox,The method has 8 parameters. Parameters: callback' message' caption' extraWidgetsToAdd' messageType' yesOk' noCancel' useMarkdown
Long Parameter List,MatterHackers.MatterControl,MessageBoxPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\StyledMessageBoxWindow.cs,MessageBoxPage,The method has 11 parameters. Parameters: callback' message' caption' messageType' extraWidgetsToAdd' width' height' yesOk' noCancel' theme' useMarkdown
Long Parameter List,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlider,The method has 6 parameters. Parameters: positionOfTrackFirstValue' widthInPixels' theme' minimum' maximum' orientation
Long Parameter List,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlider,The method has 5 parameters. Parameters: lowerLeftX' lowerLeftY' upperRightX' upperRightY' theme
Long Parameter List,MatterHackers.MatterControl,ExportPrintItemPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ExportPrintItemPage.cs,DoExport,The method has 5 parameters. Parameters: libraryItems' printer' exportPlugin' centerOnBed' showFile
Long Parameter List,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,SolidSlider,The method has 6 parameters. Parameters: positionOfTrackFirstValue' thumbWidth' theme' minimum' maximum' orientation
Long Parameter List,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,CheckPosition,The method has 6 parameters. Parameters: itemsToAvoid' itemToMove' meshToMoveBounds' yStep' xStep' transform
Long Parameter List,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateZButtons,The method has 7 parameters. Parameters: printer' buttonSeparationDistance' zPlusControl' zMinusControl' colors' theme' levelingButtons
Long Parameter List,MatterHackers.MatterControl,MoveButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,MoveButton,The method has 5 parameters. Parameters: text' printer' axis' movementFeedRate' theme
Long Parameter List,MatterHackers.MatterControl,ExtrudeButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,ExtrudeButton,The method has 5 parameters. Parameters: printer' text' movementFeedRate' extruderNumber' theme
Long Parameter List,MatterHackers.MatterControl,InputBoxPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\InputBoxPage.cs,InputBoxPage,The method has 6 parameters. Parameters: windowTitle' label' initialValue' emptyText' actionButtonTitle' action
Long Parameter List,MatterHackers.MatterControl,RequestManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\RequestManager.cs,SendPOSTRequest,The method has 5 parameters. Parameters: uri' content' signIn' password' allowAutoRedirect
Long Parameter List,MatterHackers.MatterControl,RequestManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\RequestManager.cs,GenerateRequest,The method has 6 parameters. Parameters: uri' content' method' signIn' password' allowAutoRedirect
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage,SettingsItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\SettingsItem.cs,SettingsItem,The method has 6 parameters. Parameters: text' theme' toggleSwitchConfig' optionalControls' iconImage' enforceGutter
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage,SettingsItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\SettingsItem.cs,SettingsItem,The method has 6 parameters. Parameters: text' settingsControls' theme' optionalControls' imageBuffer' enforceGutter
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbeFeedback,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbeFeedback.cs,AutoProbeFeedback,The method has 6 parameters. Parameters: setupWizard' probeStartPosition' headerText' details' probePositions' probePositionsBeingEditedIndex
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbePage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbePage.cs,AutoProbePage,The method has 5 parameters. Parameters: setupWizard' printer' headerText' probePoints' probePositions
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,FindBedHeight,The method has 7 parameters. Parameters: setupWizard' pageDescription' setZHeightCoarseInstruction1' setZHeightCoarseInstruction2' moveDistance' probePositions' probePositionsBeingEditedIndex
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetCoarseBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\GetCoarseBedHeight.cs,GetCoarseBedHeight,The method has 6 parameters. Parameters: context' probeStartPosition' pageDescription' probePositions' probePositionsBeingEditedIndex' levelingStrings
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetFineBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\GetFineBedHeight.cs,GetFineBedHeight,The method has 5 parameters. Parameters: context' pageDescription' probePositions' probePositionsBeingEditedIndex' levelingStrings
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GettingThirdPointFor2PointCalibration,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\GettingThirdPointFor2PointCalibration.cs,GettingThirdPointFor2PointCalibration,The method has 5 parameters. Parameters: setupWizard' pageDescription' probeStartPosition' instructionsText' probePosition
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetUltraFineBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\GetUltraFineBedHeight.cs,GetUltraFineBedHeight,The method has 5 parameters. Parameters: setupWizard' pageDescription' probePositions' probePositionsBeingEditedIndex' levelingStrings
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,SelectMaterialPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\SelectMaterialPage.cs,SelectMaterialPage,The method has 7 parameters. Parameters: setupWizard' headerText' instructionsText' nextButtonText' extruderIndex' showLoadFilamentButton' showAlreadyLoadedButton
Long Parameter List,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The method has 5 parameters. Parameters: setupWizard' step' instructions' targetBedTemp' targetHotendTemps
Long Parameter List,MatterHackers.MatterControl.CustomWidgets.ColorPicker,Graphics2DOverrides,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,Ring,The method has 5 parameters. Parameters: graphics2D' center' radius' width' color
Long Parameter List,MatterHackers.MatterControl.CustomWidgets,HelpArticleHeader,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\HelpArticleHeader.cs,HelpArticleHeader,The method has 5 parameters. Parameters: helpArticle' theme' boldFont' pointSize' editToolTipText
Long Parameter List,MatterHackers.MatterControl.CustomWidgets,InlineStringEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineStringEdit.cs,InlineStringEdit,The method has 5 parameters. Parameters: stringValue' theme' automationName' boldFont' editable
Long Parameter List,MatterHackers.MatterControl.CustomWidgets,SearchableSectionWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SearchableSectionWidget.cs,SearchableSectionWidget,The method has 10 parameters. Parameters: sectionTitle' sectionContent' theme' headingPointSize' expandingContent' expanded' serializationKey' defaultExpansion' setContentVAnchor' emptyText
Long Parameter List,MatterHackers.MatterControl.CustomWidgets,SectionWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SectionWidget.cs,SectionWidget,The method has 10 parameters. Parameters: sectionTitle' sectionContent' theme' rightAlignedContent' headingPointSize' expandingContent' expanded' serializationKey' defaultExpansion' setContentVAnchor
Long Parameter List,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,SettingsRow,The method has 6 parameters. Parameters: title' helpText' theme' icon' enforceGutter' fullRowSelect
Long Parameter List,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Create,The method has 5 parameters. Parameters: diameterBottom' diameterTop' height' sides' alignment
Long Parameter List,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,Create,The method has 7 parameters. Parameters: calibrationMaterialIndex' baseHeight' changingHeight' offset' nozzleWidth' wipeTowerSize' layers
Long Parameter List,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Create,The method has 5 parameters. Parameters: calibrationMaterialIndex' changeHeight' offset' nozzleWidth' wipeTowerSize
Long Parameter List,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,AddSupportColumn,The method has 5 parameters. Parameters: holder' gridX' gridY' bottomZ' topZ
Long Parameter List,MatterHackers.MatterControl.Library,DynamicContainerLink,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\DynamicContainerLink.cs,DynamicContainerLink,The method has 5 parameters. Parameters: nameResolver' microIcon' thumbnail' creator' visibilityResolver
Long Parameter List,MatterHackers.MatterControl.Library,LibraryConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryConfig.cs,LoadItemThumbnail,The method has 7 parameters. Parameters: thumbnailListener' buildThumbnail' libraryItem' libraryContainer' thumbWidth' thumbHeight' theme
Long Parameter List,MatterHackers.MatterControl.Library,InsertionGroupObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\InsertionGroupObject3D.cs,InsertionGroupObject3D,The method has 6 parameters. Parameters: items' view3DWidget' scene' newItemOffset' layoutParts' trackSourceFiles
Long Parameter List,MatterHackers.Plugins.EditorTools,CurveControlPoint,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,CurveControlPoint,The method has 6 parameters. Parameters: context' interactionControl' vertexStorage' point' flagsandCommand' index
Long Parameter List,MatterHackers.Plugins.EditorTools,Curve4AnchorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,Curve4AnchorWidget,The method has 6 parameters. Parameters: context' interactionControl' vertexStorage' point' flagsandCommand' index
Long Parameter List,MatterHackers.Plugins.EditorTools,VertexPointWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,VertexPointWidget,The method has 6 parameters. Parameters: context' interactionControl' vertexStorage' point' flagsandCommand' index
Long Parameter List,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawSnappingMarks,The method has 7 parameters. Parameters: drawEventArgs' mouseAngle' alphaValue' rotationCenterTransform' distanceFromCenter' numSnapPoints' markToSnapTo
Long Parameter List,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawTickMarks,The method has 6 parameters. Parameters: drawEventArgs' alphaValue' rotationCenterTransform' innerRadius' outerRadius' numTicks
Long Parameter List,MatterHackers.Plugins.EditorTools,Mouse3DInfo,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,Mouse3DInfo,The method has 5 parameters. Parameters: downPosition' selectedObjectTransform' selectedObjectRotationCenter' controlCenter' rotationAxis
Long Parameter List,MatterHackers.MatterControl.Plugins.Lithophane,Lithophane,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Lithophane.cs,Generate,The method has 6 parameters. Parameters: resizedImage' maxZ' nozzleWidth' pixelsPerMM' invert' reporter
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow.View3D,BooleanProcessing,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\BooleanProcessing.cs,DoBooleanOperation,The method has 13 parameters. Parameters: va' vaCount' fa' faCount' vb' vbCount' fb' fbCount' opperation' pVc' vcCount' pVf' vfCount
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow.View3D,BooleanProcessing,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\BooleanProcessing.cs,Do,The method has 10 parameters. Parameters: inMeshA' matrixA' inMeshB' matrixB' operation' reporter' amountPerOperation' percentCompleted' progressStatus' cancellationToken
Long Parameter List,MatterHackers.MatterControl.DesignTools.Operations,RotateObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\RotateObject3D.cs,RotateObject3D,The method has 5 parameters. Parameters: item' xRadians' yRadians' zRadians' name
Long Parameter List,MatterHackers.MatterControl.DesignTools.Operations,Align2D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Align2D.cs,Align2D,The method has 7 parameters. Parameters: objectToAlign' boundingFacesToAlign' objectToAlignTo' boundingFacesToAlignTo' offsetX' offsetY' name
Long Parameter List,MatterHackers.MatterControl.DesignTools.Operations,Align2D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Align2D.cs,Align2D,The method has 5 parameters. Parameters: objectToAlign' boundingFacesToAlign' positionToAlignToX' positionToAlignToY' name
Long Parameter List,MatterHackers.MatterControl.DesignTools.Operations,Align2D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Align2D.cs,Align2D,The method has 6 parameters. Parameters: objectToAlign' boundingFacesToAlign' positionToAlignTo' offsetX' offsetY' name
Long Parameter List,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,AlignObject3D,The method has 7 parameters. Parameters: objectToAlign' boundingFacesToAlign' objectToAlignTo' boundingFacesToAlignTo' offsetX' offsetY' offsetZ
Long Parameter List,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,AlignObject3D,The method has 5 parameters. Parameters: objectToAlign' boundingFacesToAlign' positionToAlignToX' positionToAlignToY' positionToAlignToZ
Long Parameter List,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,AlignObject3D,The method has 6 parameters. Parameters: objectToAlign' boundingFacesToAlign' positionToAlignTo' offsetX' offsetY' offsetZ
Long Parameter List,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,AlignAxis,The method has 5 parameters. Parameters: axis' align' alignTo' offset' item
Long Parameter List,MatterHackers.MatterControl.DesignTools.Operations,Object3DExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Object3DExtensions.cs,Translate,The method has 5 parameters. Parameters: objectToTranslate' x' y' z' name
Long Parameter List,MatterHackers.MatterControl.DesignTools.Operations,Object3DExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Object3DExtensions.cs,Scale,The method has 5 parameters. Parameters: objectToTranslate' x' y' z' name
Long Parameter List,MatterHackers.MatterControl.DesignTools.Operations,SetCenterObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SetCenterObject3D.cs,SetCenterObject3D,The method has 5 parameters. Parameters: item' offset' onX' onY' onZ
Long Parameter List,MatterHackers.MatterControl.EeProm,MarlinEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinWindow.cs,Create3FieldSet,The method has 7 parameters. Parameters: label' field1Label' field1' field2Label' field2' field3Label' field3
Long Parameter List,MatterHackers.MatterControl.EeProm,MarlinEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinWindow.cs,Create4FieldSet,The method has 9 parameters. Parameters: label' field1Label' field1' field2Label' field2' field3Label' field3' field4Label' field4
Long Parameter List,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The method has 6 parameters. Parameters: listViewItem' thumbWidth' thumbHeight' printTask' showTimestamp' theme
Long Parameter List,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The method has 6 parameters. Parameters: libraryView' menuActions' libraryContext' mainViewWidget' theme' allowPrint
Long Parameter List,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,PrintLibraryWidget,The method has 5 parameters. Parameters: mainViewWidget' workspace' theme' libraryBackground' popupMenuButton
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,Popover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Popover.cs,Popover,The method has 5 parameters. Parameters: arrowDirection' padding' notchSize' arrowOffset' autoBorderColor
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,PopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,CreateBoolMenuItem,The method has 5 parameters. Parameters: name' getter' setter' useRadioStyle' siblingRadioButtonList
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,PopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,CreateBoolMenuItem,The method has 6 parameters. Parameters: name' icon' getter' setter' useRadioStyle' siblingRadioButtonList
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,PopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,CreateBoolMenuItem,The method has 6 parameters. Parameters: guiWidget' name' getter' setter' useRadioStyle' siblingRadioButtonList
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,ResizableSectionWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ResizableSectionWidget.cs,ResizableSectionWidget,The method has 11 parameters. Parameters: sectionTitle' initialHeight' sectionContent' theme' rightAlignedContent' headingPointSize' expandingContent' expanded' serializationKey' defaultExpansion' setContentVAnchor
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,RoundedRectShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RoundedRectShape.cs,RoundedRectShape,The method has 5 parameters. Parameters: rect' topLeftRadius' topRightRadius' bottomRightRadius' bottomLeftRadius
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,RoundedRectShape,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RoundedRectShape.cs,BuildShape,The method has 5 parameters. Parameters: rect' topLeftRadius' topRightRadius' bottomRightRadius' bottomLeftRadius
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,IDrawableItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\IDrawableItem.cs,Draw,The method has 6 parameters. Parameters: sender' item' isSelected' e' itemMaxtrix' world
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,InspectedItemDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\InspectedItemDrawable.cs,Draw,The method has 6 parameters. Parameters: sender' item' isSelected' e' itemMaxtrix' world
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,ItemTraceDataDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\ItemTraceDataDrawable.cs,Draw,The method has 6 parameters. Parameters: sender' item' isSelected' e' itemMaxtrix' world
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,NormalsDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\NormalsDrawable.cs,Draw,The method has 6 parameters. Parameters: sender' item' isSelected' e' itemMaxtrix' world
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,SelectedItemDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\SelectedItemDrawable.cs,Draw,The method has 6 parameters. Parameters: sender' item' isSelected' e' itemMaxtrix' world
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,SliceSettingsPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceSettingsPopover.cs,SliceSettingsPopover,The method has 5 parameters. Parameters: arrowDirection' padding' notchSize' p2' autoBorderColor
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,SystemWindowExtension,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SystemWindowExtension.cs,ShowPopover,The method has 5 parameters. Parameters: systemWindow' anchor' popup' altBounds' secondsToClose
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,SystemWindowExtension,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SystemWindowExtension.cs,ShowPopup,The method has 5 parameters. Parameters: systemWindow' anchor' popup' altBounds' borderWidth
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,SystemWindowExtension,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SystemWindowExtension.cs,ShowRightSplitPopup,The method has 5 parameters. Parameters: systemWindow' anchor' popup' altBounds' borderWidth
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,SystemWindowExtension,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SystemWindowExtension.cs,ShowPopup,The method has 6 parameters. Parameters: systemWindow' anchor' popup' altBounds' borderWidth' layoutHelper
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,SimpleTab,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,SimpleTab,The method has 9 parameters. Parameters: tabKey' tabLabel' parentTabControl' tabContent' theme' tabImageUrl' hasClose' pointSize' iconImage
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,ToolTab,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,ToolTab,The method has 8 parameters. Parameters: tabKey' tabLabel' parentTabControl' tabContent' theme' tabImageUrl' hasClose' pointSize
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,ChromeTab,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,ChromeTab,The method has 7 parameters. Parameters: tabKey' tabLabel' parentTabControl' tabContent' theme' tabImageUrl' hasClose
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,ChromeTab,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,ChromeTab,The method has 7 parameters. Parameters: tabKey' tabLabel' parentTabControl' tabContent' theme' imageBuffer' hasClose
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,ValueTag,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ValueTag.cs,ValueTag,The method has 6 parameters. Parameters: title' value' padding' notchSize' p2' autoBorderColor
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,ValueTag,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ValueTag.cs,ValueTag,The method has 7 parameters. Parameters: title' value' padding' notchSize' p2' theme' autoBorderColor
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The method has 5 parameters. Parameters: transform' start' end' color' zBuffered
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,RenderBounds,The method has 5 parameters. Parameters: e' world' transformToWorld' bvh' depth
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,FindDescendants,The method has 5 parameters. Parameters: namesToSearchFor' foundChildren' touchingBounds' seachType' allowInvalidItems
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,WidgetAnimationExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\WidgetAnimationExtensions.cs,SlideToNewState,The method has 5 parameters. Parameters: widget' newActiveButton' parent' animationComplete' theme
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,ConnectedFaces,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,ConnectedFaces,The method has 6 parameters. Parameters: axis' offset' left' bottom' right' top
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,HitData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,HitData,The method has 6 parameters. Parameters: faceIndex0' tileIndex0' faceIndex1' tileIndex1' faceIndex2' tileIndex2
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The method has 6 parameters. Parameters: printer' sceneContext' viewControls3D' theme' printerTabBase' editorType
Long Parameter List,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The method has 5 parameters. Parameters: workspace' theme' undoBuffer' isPrinterType' showPrintButton
Long Parameter List,MatterHackers.MeshVisualizer,InteractionVolume,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Interaction\InteractionVolume.cs,DrawMeasureLine,The method has 5 parameters. Parameters: graphics2D' lineStart' lineEnd' arrows' theme
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,GetStlFileLocations,The method has 5 parameters. Parameters: mergeRules' printableItems' settings' reporter' cancellationToken
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,Slice,The method has 5 parameters. Parameters: printableItems' settings' gcodeFilePath' reporter' cancellationToken
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,PresetSelectorWidget,The method has 7 parameters. Parameters: printer' label' accentColor' layerType' extruderIndex' theme' createAsFit
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,Slicer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Slicer.cs,SliceItem,The method has 5 parameters. Parameters: object3D' gcodeFilePath' printer' progressReporter' cancellationToken
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,SliceSettingsRow,The method has 5 parameters. Parameters: printer' settingsContext' settingData' theme' fullRowSelect
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsTabView,The method has 9 parameters. Parameters: settingsContext' scopeName' printer' settingsSection' theme' isPrimarySettingsView' databaseMRUKey' justMySettingsTitle' extendPopupMenu
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateItemRow,The method has 7 parameters. Parameters: settingData' settingsContext' printer' theme' tabIndexForItem' fieldCache' errors
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,DropMenuWrappedField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\DropMenuWrappedField.cs,DropMenuWrappedField,The method has 5 parameters. Parameters: uiField' settingData' textColor' theme' printer
Long Parameter List,MatterHackers.MatterControl.SlicerConfiguration,ExtruderOffsetField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ExtruderOffsetField.cs,ExtruderOffsetField,The method has 5 parameters. Parameters: printer' settingsContext' slicerConfigName' textColor' theme
Long Parameter List,JsonPath,Interpreter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\JsonPath.cs,Walk,The method has 5 parameters. Parameters: loc' expr' value' path' callback
Long Parameter List,MatterHackers.MatterControl.VersionManagement,ContactFormRequest,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\VersionManagement\ContactFormRequest.cs,ContactFormRequest,The method has 5 parameters. Parameters: question' details' email' firstName' lastName
Long Identifier,MatterHackers.MatterControl,MHPasswordTextEditWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHPasswordTextEditWidget.cs,MHPasswordTextEditWidget,The length of the parameter messageWhenEmptyAndNotSelected is 30.
Long Identifier,MatterHackers.MatterControl,MHTextEditWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHTextEditWidget.cs,MHTextEditWidget,The length of the parameter messageWhenEmptyAndNotSelected is 30.
Long Identifier,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,,The length of the parameter mouseDownOffsetFromFirstThumbCenter is 35.
Long Identifier,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,,The length of the parameter mouseDownOffsetFromSecondThumbCenter is 36.
Long Identifier,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,,The length of the parameter mouseDownOffsetFromThumbCenter is 30.
Long Identifier,MatterHackers.MatterControl,ManualPrinterControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ManualPrinterControls.cs,,The length of the parameter tuningAdjustmentControlsContainer is 33.
Long Identifier,MatterHackers.MatterControl,UserSettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\UserSettings.cs,,The length of the parameter AfterPrintFinishedSendTextMessage is 33.
Long Identifier,MatterHackers.MatterControl,UserSettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\UserSettings.cs,,The length of the parameter GcodeViewerTransparentExtrusion is 31.
Long Identifier,MatterHackers.MatterControl,UserSettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\UserSettings.cs,,The length of the parameter PrintHistoryFilterShowCompleted is 31.
Long Identifier,MatterHackers.MatterControl,UserSettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\UserSettings.cs,,The length of the parameter PrintNotificationsIncludeImage is 30.
Long Identifier,MatterHackers.MatterControl,UserSettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\UserSettings.cs,,The length of the parameter SelectionTreeViewPanelExpanded is 30.
Long Identifier,MatterHackers.MatterControl,UserSettingsKey,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\UserSettings.cs,,The length of the parameter SliceSettingsWidget_CurrentTab is 30.
Long Identifier,MatterHackers.MatterControl,ProjectFileHandler,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\ProjectFileHandler.cs,,The length of the parameter defaultManifestPathAndFileName is 30.
Long Identifier,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,,The length of the parameter waitingForExtruderToHeatMessage is 31.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbeFeedback,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbeFeedback.cs,AutoProbeFeedback,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbeFeedback,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbeFeedback.cs,,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbePage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbePage.cs,,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,FindBedHeight,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetCoarseBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\GetCoarseBedHeight.cs,GetCoarseBedHeight,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetFineBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\GetFineBedHeight.cs,GetFineBedHeight,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GetUltraFineBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\GetUltraFineBedHeight.cs,GetUltraFineBedHeight,The length of the parameter probePositionsBeingEditedIndex is 30.
Long Identifier,MatterHackers.Plugins.EditorTools,PointWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,OnMouseMove,The length of the parameter meshViewerWidgetScreenPosition is 30.
Long Identifier,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,DragSelectedObject,The length of the parameter meshViewerWidgetScreenPosition is 30.
Long Identifier,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,FindHitObject3D,The length of the parameter meshViewerWidgetScreenPosition is 30.
Long Identifier,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,,The length of the parameter foundTriangleInSelectionBounds is 30.
Long Identifier,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,,The length of the parameter activeButtonBeforeMouseOverride is 31.
Long Identifier,MatterHackers.MatterControl.Utilities,LimitCallingFrequency,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\LimitCallFrequency.cs,LimitCallingFrequency,The length of the parameter minimumTimeBeforeRepeatSeconds is 30.
Long Identifier,MatterHackers.MatterControl.Utilities,LimitCallingFrequency,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\LimitCallFrequency.cs,,The length of the parameter minimumTimeBeforeRepeatSeconds is 30.
Long Statement,MatterHackers.MatterControl,CacheDirectory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CacheDirectory.cs,DeleteCacheData,The length of the statement  "			// If the count is less than 0 then we have never run and we need to populate the library and queue still. So don't delete anything yet. " is 136.
Long Statement,MatterHackers.MatterControl,UpdateControlData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlData.cs,CheckVersionStatus,The length of the statement  "			string updateFileName = Path.Combine(updateFileLocation' string.Format("{0}.{1}"' currentBuildToken' InstallerExtension)); " is 122.
Long Statement,MatterHackers.MatterControl,UpdateControlData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlData.cs,VersionRequest_Succeeded,The length of the statement  "			string updateFileName = Path.Combine(updateFileLocation' string.Format("{0}.{1}"' currentBuildToken' InstallerExtension)); " is 122.
Long Statement,MatterHackers.MatterControl,UpdateControlData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlData.cs,DownloadUpdateTask,The length of the statement  "					string downloadUri = $"{MatterControlApplication.MCWSBaseUri}/downloads/development/{ApplicationSettings.Instance.get(LatestVersionRequest.VersionKey.CurrentBuildToken)}"; " is 171.
Long Statement,MatterHackers.MatterControl,UpdateControlData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlData.cs,InstallUpdate,The length of the statement  "			string friendlyFileName = Path.Combine(updateFileLocation' "MatterControlSetup-{0}.{1}".FormatWith(releaseVersion' InstallerExtension)); " is 136.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,PersistUserTabs,The length of the statement  "				await this.Tasks.Execute("Saving ".Localize() + $" \"{workspace.Name}\" ..."' workspace' workspace.SceneContext.SaveChanges); " is 125.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The length of the statement  "							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)' " is 134.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The length of the statement  "							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)' " is 134.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The length of the statement  "							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)' " is 134.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The length of the statement  "							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)' " is 134.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The length of the statement  "							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)' " is 134.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The length of the statement  "			operationIconsByType.Add(typeof(ImageObject3D)' (invertIcon) => AggContext.StaticData.LoadIcon("140.png"' 16' 16' invertIcon)); " is 127.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetWorkspaceActions,The length of the statement  "						ApplicationController.Instance.Tasks.Execute("Saving".Localize()' printer' sceneContext.SaveChanges).ConfigureAwait(false); " is 123.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BlinkTab,The length of the statement  "				guiWidget.Descendants<TextWidget>().FirstOrDefault().FlashBackground(theme.PrimaryAccentColor.WithContrast(theme.TextColor' 6).ToColor()); " is 138.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Connection_ErrorReported,The length of the statement  "					string message = "Your printer is reporting a HARDWARE ERROR and has been paused. Check the error and cancel the print if required.".Localize() " is 143.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ReloadAll,The length of the statement  "				reloadingOverlay.AddChild(new TextWidget("Reloading".Localize() + "..."' textColor: Color.White' pointSize: this.Theme.DefaultFontSize * 1.5) " is 141.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ReloadAll,The length of the statement  "					StyledMessageBox.ShowMessageBox("An unexpected error occurred during reload".Localize() + ": \n\n" + ex.Message' "Reload Failed".Localize()); " is 141.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,SwitchToPurchasedLibrary,The length of the statement  "			var purchasedContainer = Library.RootLibaryContainer.ChildContainers.Where(c => c.ID == "LibraryProviderPurchasedKey").FirstOrDefault(); " is 136.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,SwitchToSharedLibrary,The length of the statement  "			var libraryContainer = Library.RootLibaryContainer.ChildContainers.Where(c => c.ID == "LibraryProviderSharedKey").FirstOrDefault(); " is 131.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ChangeCloudSyncStatus,The length of the statement  "			// TODO: Unclear why we'd reload on status change - it seems like this state should be managed entirely from ProfileManager and removed from this location " is 154.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,OpenPrinter,The length of the statement  "				&& this.MainView.TabControl.AllTabs.FirstOrDefault(t => t.TabContent is PrinterTabPage printerTabPage && printerTabPage.printer == printer) is ITab tab) " is 152.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadProductTour,The length of the statement  "						string json = await httpClient.GetStringAsync("https://matterhackers.github.io/MatterControl-Help/docs/product-tour.json"); " is 123.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,PrintPart,The length of the statement  "									"The file you are attempting to print is a GCode file.\n\nIt is recommended that you only print Gcode files known to match your printer's configuration.\n\nAre you sure you want to print this GCode file?".Localize()' " is 216.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,MonitorPrintTask,The length of the statement  "							progressStatus.Status = $"{printing} ({printer.Connection.CurrentlyPrintingLayer + 1}{layerDetails}) - {printer.Connection.PercentComplete:0}%"; " is 144.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,SliceItemLoadOutput,The length of the statement  "						var message = "The time to print this G-Code is estimated to be {0} seconds.\n\nPlease check your part for errors if this is unexpected." " is 137.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ConnectToPrinter,The length of the statement  "// TODO: Disable conditional comp on Android until 'Preprocessor directive expected' error message due to 'sudo gpasswd' statement can be resolved " is 146.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ConnectToPrinter,The length of the statement  "Make sure that your printer is turned on. Some printers will appear to be connected' even when they are turned off.".Localize()' " is 128.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ConnectToPrinter,The length of the statement  "@"In order for MatterControl to access the serial ports on Linux' you will need to give your user account the appropriate permissions. Run these commands in a terminal to add yourself to the correct group. " is 205.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ConnectToPrinter,The length of the statement  "						else if (e.Message == "The semaphore timeout period has expired." || e.Message == "A device attached to the system is not functioning.") " is 136.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ConnectToPrinter,The length of the statement  "@"The operating system has reported that your printer is malfunctioning. MatterControl cannot communicate with it. Contact your printer's manufacturer for assistance. " is 166.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ConnectToPrinter,The length of the statement  "							string message = "The chosen baud rate is not supported by your operating system. Use a different baud rate' if possible."; " is 123.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ConnectToPrinter,The length of the statement  "								message += "On Linux' MatterControl requires a serial helper library in order to use certain baud rates. It is possible that this component is missing or not installed properly. "; " is 180.
Long Statement,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ConnectToPrinter,The length of the statement  "								"MatterControl cannot connect to your printer because another program on your computer is already connected. Close any other 3D printing programs or other other programs which access serial ports and try again."' " is 212.
Long Statement,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The length of the statement  "				var printerTabPage = systemWindow.Descendants<PrinterTabPage>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault(); " is 123.
Long Statement,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The length of the statement  "				var printerTabPage = systemWindow.Descendants<PrinterTabPage>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault(); " is 123.
Long Statement,MatterHackers.MatterControl,BedConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BedConfig.cs,LoadGCodeContent,The length of the statement  "			await ApplicationController.Instance.Tasks.Execute("Loading G-Code".Localize()' Printer' (reporter' cancellationToken) => " is 121.
Long Statement,MatterHackers.MatterControl,BedConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BedConfig.cs,LoadGCode,The length of the statement  "				// TODO: After loading we reprocess the entire document just to compute filament used. If it's a feature we need' seems like it should just be normal step during load and result stored in a property " is 198.
Long Statement,MatterHackers.MatterControl,BedConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BedConfig.cs,LoadGCode,The length of the statement  "				GCodeRenderer.GCodeFileToDraw?.GetFilamentUsedMm(this.Printer.Settings.GetValue<double>(SettingsKey.filament_diameter)); " is 120.
Long Statement,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The length of the statement  "			menuItem = popupMenu.CreateMenuItem("Help".Localize()' AggContext.StaticData.LoadIcon("help_page.png"' 16' 16' menuTheme.InvertIcons)); " is 135.
Long Statement,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The length of the statement  "			menuItem = popupMenu.CreateMenuItem("Interface Tour".Localize()' AggContext.StaticData.LoadIcon("tour.png"' 16' 16' menuTheme.InvertIcons)); " is 140.
Long Statement,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The length of the statement  "				menuItem = popupMenu.CreateMenuItem("Check For Update".Localize()' AggContext.StaticData.LoadIcon("update.png"' 16' 16' menuTheme.InvertIcons)); " is 144.
Long Statement,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The length of the statement  "			menuItem = popupMenu.CreateMenuItem("Settings".Localize()' AggContext.StaticData.LoadIcon("fa-cog_16.png"' 16' 16' menuTheme.InvertIcons)); " is 139.
Long Statement,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The length of the statement  "				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://forums.matterhackers.com/category/20/mattercontrol"); " is 135.
Long Statement,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The length of the statement  "				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/topic/mattercontrol"); " is 126.
Long Statement,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The length of the statement  "				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/mattercontrol/support"); " is 128.
Long Statement,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The length of the statement  "				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/mattercontrol/support/release-notes"); " is 142.
Long Statement,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The length of the statement  "				menuItem = modifyMenu.CreateMenuItem("Report a Bug".Localize()' AggContext.StaticData.LoadIcon("feedback.png"' 16' 16' menuTheme.InvertIcons)); " is 143.
Long Statement,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The length of the statement  "				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://github.com/MatterHackers/MatterControl/issues"); " is 130.
Long Statement,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The length of the statement  "				graphics.DrawString("64"' imageBuffer.Width / 2' imageBuffer.Height / 2' 8' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: menuTheme.PrimaryAccentColor); " is 176.
Long Statement,MatterHackers.MatterControl,PrinterConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterConfig.cs,Connection_CommunicationStateChanged,The length of the statement  "									progressStatus.Status = $"Heating Bed ({printerConnection.ActualBedTemperature:0}/{printerConnection.TargetBedTemperature:0})"; " is 127.
Long Statement,MatterHackers.MatterControl,PrinterConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterConfig.cs,Connection_CommunicationStateChanged,The length of the statement  "									var currentDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(0) - printerConnection.GetActualHotendTemperature(0)); " is 130.
Long Statement,MatterHackers.MatterControl,PrinterConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterConfig.cs,Connection_CommunicationStateChanged,The length of the statement  "									progressStatus.Status = $"Heating Nozzle ({printerConnection.GetActualHotendTemperature(0):0}/{printerConnection.GetTargetHotendTemperature(0):0})"; " is 148.
Long Statement,MatterHackers.MatterControl,PrinterConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterConfig.cs,Connection_CommunicationStateChanged,The length of the statement  "									var currentDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(1) - printerConnection.GetActualHotendTemperature(1)); " is 130.
Long Statement,MatterHackers.MatterControl,PrinterConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterConfig.cs,Connection_CommunicationStateChanged,The length of the statement  "									progressStatus.Status = $"Heating Nozzle ({printerConnection.GetActualHotendTemperature(1):0}/{printerConnection.GetTargetHotendTemperature(1):0})"; " is 148.
Long Statement,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The length of the statement  "							 var sharedParent = ApplicationController.Instance.DragDropData.View3DWidget.Parents<GuiWidget>().FirstOrDefault(w => w.Name == "View3DContainerParent"); " is 152.
Long Statement,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The length of the statement  "									Details = "Your Start G-Code should not contain a G29 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery.".Localize()' " is 164.
Long Statement,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The length of the statement  "									Details = "Your Start G-Code should not contain a G30 if you are planning on using Print Recovery. Change your start G-Code or turn off Print Recovery.".Localize()' " is 164.
Long Statement,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The length of the statement  "									Details = "Your Start G-Code should not contain a G29 if you are planning on using print leveling. Change your start G-Code or turn off print leveling.".Localize()' " is 164.
Long Statement,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The length of the statement  "									Details = "Your Start G-Code should not contain a G30 if you are planning on using print leveling. Change your start G-Code or turn off print leveling.".Localize()' " is 164.
Long Statement,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The length of the statement  "								"The Z Offset for your printer' sometimes called Baby Stepping' is greater than 2mm and invalid. Clear the value and re-level the bed.".Localize()' " is 147.
Long Statement,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The length of the statement  "				if (settings.GetValue<double>(SettingsKey.first_layer_extrusion_width) > settings.GetValue<double>(SettingsKey.nozzle_diameter) * 4) " is 132.
Long Statement,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The length of the statement  "				if (settings.GetValue<double>(SettingsKey.external_perimeter_extrusion_width) > settings.GetValue<double>(SettingsKey.nozzle_diameter) * 4) " is 139.
Long Statement,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateGCodeLinesShortEnough,The length of the statement  "					var details = "Found a line that is {0} characters long.\n{1}...".Localize().FormatWith(length' trimedLine.Substring(0' 20)); " is 125.
Long Statement,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,RebuildTheme,The length of the statement  "			restoreNormal = ColorCircle(size' (AggContext.OperatingSystem == OSType.Android) ? new Color(200' 0' 0) : Color.Transparent); " is 125.
Long Statement,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,RebuildTheme,The length of the statement  "			this.GeneratingThumbnailIcon = AggContext.StaticData.LoadIcon("building_thumbnail_40x40.png"' 40' 40' this.InvertIcons); " is 120.
Long Statement,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The length of the statement  "			normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' barColor' 2 * GuiWidget.DeviceScale); " is 151.
Long Statement,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The length of the statement  "			normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' barColor' 2 * GuiWidget.DeviceScale); " is 151.
Long Statement,MatterHackers.MatterControl,ThumbnailsConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ThumbnailsConfig.cs,DeleteCache,The length of the statement  "			foreach (var sizedThumbnail in Directory.GetFiles(Path.GetDirectoryName(thumbnailPath)' Path.GetFileNameWithoutExtension(thumbnailPath) + "-*.png")) " is 148.
Long Statement,MatterHackers.MatterControl,StyledMessageBox,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\StyledMessageBoxWindow.cs,ShowMessageBox,The length of the statement  "				new MessageBoxPage(callback' message' caption' messageType' extraWidgetsToAdd' 400' 300' yesOk' noCancel' ApplicationController.Instance.Theme' useMarkdown)); " is 158.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The length of the statement  "			graphics2D.Render(firstThumbOutside' ColorF.GetTweenColor(ThumbColor.ToColorF()' ColorF.Black.ToColorF()' .2).ToColor()); " is 121.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The length of the statement  "			graphics2D.Render(secondThumbOutside' ColorF.GetTweenColor(ThumbColor.ToColorF()' ColorF.Black.ToColorF()' .2).ToColor()); " is 122.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The length of the statement  "					PositionPixelsFromFirstValue = Math.Min(mousePos.X - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2); " is 138.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The length of the statement  "					PositionPixelsFromFirstValue = Math.Min(mousePos.Y - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2); " is 138.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The length of the statement  "					PositionPixelsFromSecondValue = Math.Max(mousePos.X - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2); " is 139.
Long Statement,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The length of the statement  "					PositionPixelsFromSecondValue = Math.Max(mousePos.Y - mouseDownOffsetFromSecondThumbCenter' PositionPixelsFromFirstValue + ThumbWidth + 2); " is 139.
Long Statement,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetTrackBounds,The length of the statement  "				trackBounds = new RectangleDouble(sliderBounds.Left' (int)(yCenter - TrackHeight / 2 + .5)' sliderBounds.Right' (int)(yCenter + TrackHeight / 2 + .5)); " is 151.
Long Statement,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetTrackBounds,The length of the statement  "				trackBounds = new RectangleDouble((int)(xCenter - TrackHeight / 2 + .5)' sliderBounds.Bottom' (int)(xCenter + TrackHeight / 2 + .5)' sliderBounds.Top); " is 151.
Long Statement,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,DrawTrackAndThumb,The length of the statement  "			graphics2D.Render(thumbOutside' this.ThumbColor); // ColorF.GetTweenColor(ThumbColor.ToColorF()' ColorF.Black.ToColorF()' .2).ToColor()); " is 137.
Long Statement,MatterHackers.MatterControl,XyCalibrationSelectPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationSelectPage.cs,PrintCalibrationPart,The length of the statement  "			item.Matrix *= Matrix4X4.CreateTranslation(bedBounds.Center.X - aabb.MinXYZ.X - aabb.XSize / 2' bedBounds.Center.Y - aabb.MinXYZ.Y - aabb.YSize / 2' -aabb.MinXYZ.Z); " is 165.
Long Statement,MatterHackers.MatterControl,MeshContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\MeshContentProvider.cs,CreateItem,The length of the statement  "								loadedItem = Object3D.Load(contentStream.Stream' Path.GetExtension(streamInterface.FileName)' CancellationToken.None' null /*itemCache*/' progressReporter); " is 156.
Long Statement,MatterHackers.MatterControl,MeshContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\MeshContentProvider.cs,GetThumbnail,The length of the statement  "				// TODO: Wire up limits for thumbnail generation. If content is too big' return null allowing the thumbnail to fall back to content default " is 139.
Long Statement,MatterHackers.MatterControl,CreateDiscreteMeshes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\CreateDiscreteMeshes.cs,PointInPolygon,The length of the statement  "					&& (testPosition.X - polygon[i].X < (polygon[prevIndex].X - polygon[i].X) * (testPosition.Y - polygon[i].Y) / (polygon[prevIndex].Y - polygon[i].Y))) " is 149.
Long Statement,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The length of the statement  "							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' displayVolumeToBuild.Z); " is 149.
Long Statement,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The length of the statement  "						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' 1.8); " is 129.
Long Statement,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The length of the statement  "			Ellipse bedCircle = new Ellipse(bedplateImage.Width/2' bedplateImage.Height/2' bedplateImage.Width/2' bedplateImage.Height/2); " is 126.
Long Statement,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The length of the statement  "					graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' originPixels.Y + 4' pointSize' color: bedMarkingsColor); " is 127.
Long Statement,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The length of the statement  "					graphics2D.DrawString((yPositionCmInt * skip).ToString()' originPixels.X + 4' linePos + 4' pointSize' color: bedMarkingsColor); " is 127.
Long Statement,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,CreateColumn,The length of the statement  "				Margin = new BorderDouble(theme.DefaultContainerPadding' theme.DefaultContainerPadding' theme.DefaultContainerPadding' 4) " is 121.
Long Statement,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,GetHotkeyControlContainer,The length of the statement  "			keyboardImage = new IconButton(AggContext.StaticData.LoadIcon("hot_key_small_white.png"' 19' 12' theme.InvertIcons)' theme) " is 123.
Long Statement,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,OnDraw,The length of the statement  "				this.Title = $"Allocated = {memory:n0} : {millisecondTimer.GetAverage()}ms' d{drawCount++} Size = {this.Width}x{this.Height}' onIdle = {UiThread.CountExpired}:{UiThread.Count}' widgetsDrawn = {GuiWidget.DrawCount}"; " is 215.
Long Statement,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,OnClosing,The length of the statement  "				ApplicationSettings.Instance.set(ApplicationSettingsKey.DesktopPosition' string.Format("{0}'{1}"' DesktopPosition.x' DesktopPosition.y)); " is 137.
Long Statement,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,OnClosing,The length of the statement  "					message = "Are you sure you want to exit while a print is running from SD Card?\n\nNote: If you exit' it is recommended you wait until the print is completed before running MatterControl again.".Localize(); " is 206.
Long Statement,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,OnClosing,The length of the statement  "				// We need to show an interactive dialog to determine if the original Close request should be honored' thus cancel the current Close request " is 140.
Long Statement,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,CreateThemePanel,The length of the statement  "			var themeSection = new SectionWidget("Theme".Localize()' themeColorPanel' theme' accentButtons' expanded: true' expandingContent: false) " is 136.
Long Statement,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,AddGuides,The length of the statement  "						markdownWidget.LoadUri(new Uri(ApplicationController.Instance.HelpArticleSource' article.Path)' sourceArticle: article); " is 120.
Long Statement,MatterHackers.MatterControl,ImportSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\ImportSettingsPage.cs,DisplayFailedToImportMessage,The length of the statement  "			StyledMessageBox.ShowMessageBox("Oops! Settings file '{0}' did not contain any settings we could import.".Localize().FormatWith(Path.GetFileName(settingsFilePath))' "Unable to Import".Localize()); " is 196.
Long Statement,MatterHackers.MatterControl,StagedSetupWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\StagedSetupWindow.cs,OnClosing,The length of the statement  "				// We need to show an interactive dialog to determine if the original Close request should be honored' thus cancel the current Close request " is 140.
Long Statement,MatterHackers.MatterControl,ProjectFileHandler,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\ProjectFileHandler.cs,ExportToProjectArchive,The length of the statement  "			File.WriteAllText(defaultManifestPathAndFileName' JsonConvert.SerializeObject(this.project' Newtonsoft.Json.Formatting.Indented)); " is 130.
Long Statement,MatterHackers.MatterControl,ProjectFileHandler,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\ProjectFileHandler.cs,ImportFromProjectArchive,The length of the statement  "					string stagingFolder = Path.Combine(ApplicationDataStorage.Instance.ApplicationTempDataPath' "project-extract"' projectHashCode.ToString()); " is 140.
Long Statement,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,LoadImageInto,The length of the statement  "					halfImage.NewGraphics2D().Render(unScaledImage' 0' 0' 0' halfImage.Width / (double)unScaledImage.Width' halfImage.Height / (double)unScaledImage.Height); " is 153.
Long Statement,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,LoadImageInto,The length of the statement  "				imageToLoadInto.Allocate(imageToLoadInto.Width' (int)(unScaledImage.Height * finalScale)' imageToLoadInto.Width * (imageToLoadInto.BitDepth / 8)' imageToLoadInto.BitDepth); " is 172.
Long Statement,MatterHackers.MatterControl.ContactForm,ContactFormPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\ContactFormPage.cs,ValidateContactForm,The length of the statement  "			var emailValidationHandlers = new FormField.ValidationHandler[] { validationMethods.StringIsNotEmpty' validationMethods.StringLooksLikeEmail }; " is 143.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBed.cs,GetPopupContent,The length of the statement  "			var temperatureRow = SliceSettingsTabView.CreateItemRow(settingsData' settingsContext' printer' menuTheme' ref tabIndex' allUiFields); " is 134.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The length of the statement  "				printer.Settings.Helpers.HotendCount() == 1 ? "Hotend".Localize() : "Hotend {0}".Localize().FormatWith(hotendIndex + 1)' " is 120.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The length of the statement  "							printer.Connection.SetTargetHotendTemperature(hotendIndex' printer.Settings.Helpers.ExtruderTargetTemperature(hotendIndex)); " is 124.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The length of the statement  "			var temperatureRow = SliceSettingsTabView.CreateItemRow(settingsData' settingsContext' printer' menuTheme' ref tabIndex' allUiFields); " is 134.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The length of the statement  "				var extruderMultiplier = SliceSettingsTabView.CreateItemRow(PrinterSettings.SettingsData[SettingsKey.t1_extrusion_move_speed_multiplier]' " is 137.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The length of the statement  "				var presetsSelector = new PresetSelectorWidget(printer' "Material".Localize()' Color.Transparent' NamedSettingsLayers.Material' hotendIndex' menuTheme' true) " is 157.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The length of the statement  "				GuiWidget materialSettingsRow = new SettingsItem("Material".Localize()' presetsSelector' menuTheme' enforceGutter: false) " is 121.
Long Statement,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The length of the statement  "					container.AddChild(new TextWidget("Extruder".Localize() + " " + (extruderIndex + 1).ToString()' pointSize: menuTheme.DefaultFontSize) " is 133.
Long Statement,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,CreateThemeModeButtons,The length of the statement  "						Margin = new BorderDouble(theme.DefaultContainerPadding' 0' theme.DefaultContainerPadding' theme.DefaultContainerPadding) " is 121.
Long Statement,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,PreviewTheme,The length of the statement  "			var previewButton = previewButtonPanel.Descendants<ThemePreviewButton>().FirstOrDefault(t => t.ThemeSet.ThemesetID == AppContext.ThemeSet.ThemesetID); " is 150.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The length of the statement  "				instructions = "Please select the material you want to load into extruder {0}.".Localize().FormatWith(extruderIndex + 1); " is 121.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The length of the statement  "			yield return new SelectMaterialPage(this' title' instructions' "Select".Localize()' extruderIndex' true' showAlreadyLoadedButton) " is 129.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The length of the statement  "						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature)); " is 121.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The length of the statement  "						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature)); " is 121.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,GetPages,The length of the statement  "			// var probePositions = new List<ProbePosition>(Enumerable.Range(0' levelingPlan.ProbeCount).Select(p => new ProbePosition())); " is 127.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The length of the statement  "				instructions = "Please select the material you want to unload from extruder {0}.".Localize().FormatWith(extruderIndex + 1); " is 123.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The length of the statement  "					(extruderCount > 1 ? "Waiting for hotend {0} to heat to ".Localize().FormatWith(extruderIndex + 1) : "Waiting for the hotend to heat to ".Localize()) + targetHotendTemp + "°C.\n" " is 178.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The length of the statement  "							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString())); " is 148.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ZCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\ZCalibrationWizard.cs,GetPages,The length of the statement  "				((extruderCount == 1) ? "Waiting for the hotend to heat to ".Localize() + temps[0] + "°C.\n" : "Waiting for the hotends to heat up.".Localize()) " is 144.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,CreateZButtons,The length of the statement  "			FlowLayoutWidget zButtons = JogControls.CreateZButtons(printer' 4' out zPlusControl' out zMinusControl' new PrinterControls.XYZColors(theme)' theme' true); " is 155.
Long Statement,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,CreateZButtons,The length of the statement  "			// set these to 0 so the button does not do any movements by default (we will handle the movement on our click callback) " is 120.
Long Statement,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The length of the statement  "			graphics2D.Line(GetTrianglePoint(0' InnerRadius' colorAngle)' GetTrianglePoint(1' InnerRadius' colorAngle)' Color.Black); " is 121.
Long Statement,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The length of the statement  "			graphics2D.Line(GetTrianglePoint(1' InnerRadius' colorAngle)' GetTrianglePoint(2' InnerRadius' colorAngle)' Color.Black); " is 121.
Long Statement,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The length of the statement  "			graphics2D.Line(GetTrianglePoint(2' InnerRadius' colorAngle)' GetTrianglePoint(0' InnerRadius' colorAngle)' Color.Black); " is 121.
Long Statement,MatterHackers.MatterControl.CustomWidgets,DataViewGraph,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DataViewGraph.cs,OnDraw,The length of the statement  "					linesToDrawStorage.MoveTo(i + Width - dataHistoryArray.Count' ((dataHistoryArray.GetItem(i) - MinValue) * Height / Range)); " is 123.
Long Statement,MatterHackers.MatterControl.CustomWidgets,DataViewGraph,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DataViewGraph.cs,OnDraw,The length of the statement  "					linesToDrawStorage.LineTo(i + Width - dataHistoryArray.Count' ((dataHistoryArray.GetItem(i) - MinValue) * Height / Range)); " is 123.
Long Statement,MatterHackers.MatterControl.CustomWidgets,UnpinnedLayoutEngine,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,WidgetRelativeTo_PositionChanged,The length of the statement  "						popupWidget.LocalBounds = new RectangleDouble(bounds.Left' bounds.Bottom' bounds.Left + contentWidget.Width' bounds.Top); " is 121.
Long Statement,MatterHackers.MatterControl.CustomWidgets,UnpinnedLayoutEngine,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,WidgetRelativeTo_PositionChanged,The length of the statement  "						popupWidget.LocalBounds = new RectangleDouble(bounds.Right - contentWidget.Width' bounds.Bottom' bounds.Right' bounds.Top); " is 123.
Long Statement,MatterHackers.MatterControl.CustomWidgets,FolderBreadCrumbWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetContainer,The length of the statement  "			var upbutton = new IconButton(AggContext.StaticData.LoadIcon(Path.Combine("Library"' "upfolder_20.png")' theme.InvertIcons)' theme) " is 131.
Long Statement,MatterHackers.MatterControl.CustomWidgets,FolderBreadCrumbWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetContainer,The length of the statement  "				var containerButton = new LinkLabel((libraryContext.ActiveContainer.Name == null ? "?" : libraryContext.ActiveContainer.Name)' theme) " is 133.
Long Statement,MatterHackers.MatterControl.CustomWidgets,BedStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\BedStatusWidget.cs,UpdateTemperatures,The length of the statement  "			actualTemp.Text = $"{actualValue:0}".PadLeft(3' (char)0x2007) + "°"; // put in padding spaces to make it at least 3 characters " is 126.
Long Statement,MatterHackers.MatterControl.CustomWidgets,BedStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\BedStatusWidget.cs,UpdateTemperatures,The length of the statement  "			targetTemp.Text = $"{targetValue:0}".PadLeft(3' (char)0x2007) + "°"; // put in padding spaces to make it at least 3 characters " is 126.
Long Statement,MatterHackers.MatterControl.CustomWidgets,ExtruderStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ExtruderStatusWidget.cs,UpdateTemperatures,The length of the statement  "			actualTemp.Text = $"{actualValue:0}".PadLeft(3' (char)0x2007) + "°"; // put in padding spaces to make it at least 3 characters " is 126.
Long Statement,MatterHackers.MatterControl.CustomWidgets,ExtruderStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ExtruderStatusWidget.cs,UpdateTemperatures,The length of the statement  "			targetTemp.Text = $"{targetValue:0}".PadLeft(3' (char)0x2007) + "°"; // put in padding spaces to make it at least 3 characters " is 126.
Long Statement,MatterHackers.MatterControl.CustomWidgets,BottomResizeContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ResizeContainer\BottomResizeContainer.cs,OnDraw,The length of the statement  "			graphics2D.FillRectangle(LocalBounds.Left' LocalBounds.Bottom' LocalBounds.Right' LocalBounds.Bottom + this.SplitterHeight' this.SpliterBarColor); " is 146.
Long Statement,MatterHackers.MatterControl.CustomWidgets,VerticalResizeContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ResizeContainer\VerticalResizeContainer.cs,OnDraw,The length of the statement  "				graphics2D.FillRectangle(LocalBounds.Left' LocalBounds.Bottom' LocalBounds.Left + this.SplitterWidth' LocalBounds.Top' this.SplitterBarColor); " is 142.
Long Statement,MatterHackers.MatterControl.CustomWidgets,VerticalResizeContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ResizeContainer\VerticalResizeContainer.cs,OnDraw,The length of the statement  "				graphics2D.FillRectangle(LocalBounds.Right - this.SplitterWidth' LocalBounds.Bottom' LocalBounds.Right' LocalBounds.Top' this.SplitterBarColor); " is 144.
Long Statement,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,ScheduleRaytraceOperation,The length of the statement  "				// When dequeued for generation' ensure visible before raytracing. Off-screen widgets are dequeue and will reschedule if redrawn " is 128.
Long Statement,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,OnMouseMove,The length of the statement  "				view3DWidget.ExternalDragOver(screenSpaceMousePosition: this.TransformToScreenSpace(mouseEvent.Position)' sourceWidget: this.listViewItem.ListView); " is 148.
Long Statement,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,OnMouseUp,The length of the statement  "				var meshViewerPosition = view3DWidget.InteractionLayer.TransformToScreenSpace(view3DWidget.InteractionLayer.LocalBounds); " is 121.
Long Statement,MatterHackers.MatterControl.CustomWidgets,RoundedToggleSwitch,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RoundedToggleSwitch.cs,RoundedToggleSwitch_AfterDraw,The length of the statement  "			var position = new Vector2(this.Checked ? LocalBounds.Right - toggleRadiusPlusPadding : toggleRadiusPlusPadding' centerY); " is 122.
Long Statement,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,OnLoad,The length of the statement  "			// The top level SystemWindow - due to single window implementation details' multiple SystemWindow parents may exist - proceed to the topmost one " is 145.
Long Statement,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,OnMouseLeaveBounds,The length of the statement  "				// Allow a moment to elapse to determine if the mouse is within the bubble or has returned to this control' close otherwise " is 123.
Long Statement,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,ShowPopover,The length of the statement  "			popover.AddChild(new WrappedTextWidget(settingsRow.HelpText' pointSize: theme.DefaultFontSize - 1' textColor: AppContext.Theme.TextColor) " is 137.
Long Statement,MatterHackers.Agg.UI,SingleWindowProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SingleWindowProvider.cs,ShowSystemWindow,The length of the statement  "				titleBarRow.ActionArea.AddChild(new TextWidget(systemWindow.Title ?? ""' pointSize: theme.DefaultFontSize - 1' textColor: theme.TextColor) " is 138.
Long Statement,MatterHackers.Agg.UI,SingleWindowProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SingleWindowProvider.cs,ShowSystemWindow,The length of the statement  "				movable.Position = new VectorMath.Vector2((overlayWindow.Width - movable.Width) / 2' (overlayWindow.Height - movable.Height) / 2); " is 130.
Long Statement,MatterHackers.MatterControl.DataStorage,Datastore,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DataStorage\Datastore.cs,Initialize,The length of the statement  "			var rootLibraryCollection = Datastore.Instance.dbSQLite.Table<PrintItemCollection>().Where(v => v.Name == "_library").Take(1).FirstOrDefault(); " is 143.
Long Statement,MatterHackers.MatterControl.DataStorage.ClassicDB,ClassicSqlitePrinterProfiles,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DataStorage\Classic\ClassicSqlitePrinterProfiles.cs,ImportPrinter,The length of the statement  "			var allMacros =  Datastore.Instance.dbSQLite.Query<CustomCommands>("SELECT * FROM CustomCommands WHERE PrinterId = " + printer.Id); " is 131.
Long Statement,MatterHackers.MatterControl.DataStorage.ClassicDB,ClassicSqlitePrinterProfiles,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DataStorage\Classic\ClassicSqlitePrinterProfiles.cs,ImportPrinter,The length of the statement  "			string query = string.Format("SELECT * FROM PrinterSetting WHERE Name = 'PublishBedImage' and PrinterId = {0};"' printer.Id); " is 125.
Long Statement,MatterHackers.MatterControl.DataStorage.ClassicDB,ClassicSqlitePrinterProfiles,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DataStorage\Classic\ClassicSqlitePrinterProfiles.cs,LoadMaterialSettings,The length of the statement  "			var collections = Datastore.Instance.dbSQLite.Table<SliceSettingsCollection>().Where(v => v.PrinterId == printer.Id && v.Tag == "material"); " is 140.
Long Statement,MatterHackers.MatterControl.DataStorage.ClassicDB,ClassicSqlitePrinterProfiles,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DataStorage\Classic\ClassicSqlitePrinterProfiles.cs,LoadQualitySettings,The length of the statement  "			var collections = Datastore.Instance.dbSQLite.Table<SliceSettingsCollection>().Where(v => v.PrinterId == printer.Id && v.Tag == "quality"); " is 139.
Long Statement,MatterHackers.MatterControl.DataStorage.ClassicDB,ClassicSqlitePrinterProfiles,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DataStorage\Classic\ClassicSqlitePrinterProfiles.cs,LoadOemLayer,The length of the statement  "				collection = Datastore.Instance.dbSQLite.Table<SliceSettingsCollection>().Where(v => v.Id == activePrinterSettingsID).Take(1).FirstOrDefault(); " is 143.
Long Statement,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The length of the statement  "					letterObject = new AlignObject3D(letterObject' FaceAlign.Bottom | FaceAlign.Front' brailleLetter' FaceAlign.Top | FaceAlign.Front' 0' 0' 3.5); " is 142.
Long Statement,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The length of the statement  "					basePlate = new AlignObject3D(basePlate' FaceAlign.Bottom | FaceAlign.Back' brailleLetter' FaceAlign.Bottom | FaceAlign.Back); " is 126.
Long Statement,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The length of the statement  "					underline = new AlignObject3D(underline' FaceAlign.Back | FaceAlign.Left' basePlate' FaceAlign.Front | FaceAlign.Left' 0' .01); " is 127.
Long Statement,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The length of the statement  "						textPrinter = new TypeFacePrinter(brailleText' new StyledTypeFace(ApplicationController.GetTypeFace(NamedTypeFace.Liberation_Mono)' pointSize)); " is 144.
Long Statement,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The length of the statement  "							letterPrinter = new TypeFacePrinter(letter.ToString()' new StyledTypeFace(ApplicationController.GetTypeFace(NamedTypeFace.Liberation_Mono)' pointSize)); " is 152.
Long Statement,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The length of the statement  "						chainHook = new AlignObject3D(chainHook' FaceAlign.Left | FaceAlign.Bottom | FaceAlign.Back' basePlate' FaceAlign.Right | FaceAlign.Bottom | FaceAlign.Back' -.01); " is 163.
Long Statement,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The length of the statement  "					fins = (new TranslateObject3D(fins' 1.48' 1' -ring.ZSize() - .02)).Plus(new TranslateObject3D(fins' 1.48' -1' -ring.ZSize() - .02)); " is 132.
Long Statement,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The length of the statement  "						IObject3D clipBox = new AlignObject3D(await CubeObject3D.Create(OuterSize * 2' OuterSize * 2' unclippedFootHeight)' FaceAlign.Top' chairFoot' FaceAlign.Bottom' 0' 0' extraHeightForRotation); " is 190.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The length of the statement  "				var currentAssetPath = ImageObject == null ? AggContext.StaticData.ToAssetPath(Path.Combine("Images"' "mh-logo.png")) : ImageObject.AssetPath; " is 142.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The length of the statement  "				IObject3D logoRing = new AlignObject3D(new RingObject3D(outerDiameter' innerDiameter' 2' 60)' FaceAlign.Bottom' logoBase' FaceAlign.Top); " is 137.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The length of the statement  "					IObject3D connect = logoBase.Plus(new AlignObject3D(cube' FaceAlign.Front | FaceAlign.Bottom' logoBase' FaceAlign.Back | FaceAlign.Bottom' 0' -.5)); " is 148.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The length of the statement  "					IObject3D hook = logoBase.Plus(new AlignObject3D(new RingObject3D(10' 7' 5' 30)' FaceAlign.Front | FaceAlign.Bottom' connect' FaceAlign.Back | FaceAlign.Bottom' 0' -.5)); " is 170.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The length of the statement  "					inputShape = new VertexSourceApplyTransform(inputShape' GetCenteringTransformVisualCenter(inputShape' innerDiameter / 2)); " is 122.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The length of the statement  "					inputShape = new VertexSourceApplyTransform(inputShape' GetCenteringTransformExpandedToRadius(inputShape' innerDiameter / 2)); " is 126.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,GetCenteringTransformExpandedToRadius,The length of the statement  "			var circle = SmallestEnclosingCircle.MakeCircle(vertexSource.Vertices().Select((v) => new Vector2(v.position.X' v.position.Y))); " is 128.
Long Statement,MatterHackers.MatterControl.DesignTools,RibbonWithNameObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\RibbonWithNameObject3D.cs,Rebuild,The length of the statement  "			var letterPrinter = new TypeFacePrinter(NameToWrite.ToUpper()' new StyledTypeFace(ApplicationController.GetTypeFace(Font)' 12)); " is 128.
Long Statement,MatterHackers.MatterControl.DesignTools,RibbonWithNameObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\RibbonWithNameObject3D.cs,Rebuild,The length of the statement  "			nameMesh = new AlignObject3D(nameMesh' FaceAlign.Bottom | FaceAlign.Front' cancerRibbonStl' FaceAlign.Top | FaceAlign.Front' 0' 0' -1); " is 135.
Long Statement,MatterHackers.MatterControl.DesignTools,CurveObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CurveObject3D.cs,DrawEditor,The length of the statement  "				layer.World.RenderCylinderOutline(this.WorldMatrix()' new Vector3(rotationCenter' aabb.Center.Z)' Diameter' aabb.ZSize' 30' Color.Red); " is 135.
Long Statement,MatterHackers.MatterControl.DesignTools,CurveObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CurveObject3D.cs,Rebuild,The length of the statement  "					rotationCenter = new Vector2(aabb.MinXYZ.X + (aabb.MaxXYZ.X - aabb.MinXYZ.X) * (StartPercent / 100)' aabb.MaxXYZ.Y + radius); " is 125.
Long Statement,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The length of the statement  "			layer.World.RenderCylinderOutline(this.WorldMatrix()' center' Diameter' sourceAabb.ZSize' 100' Color.Red' Color.Transparent); " is 125.
Long Statement,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The length of the statement  "			layer.World.RenderCylinderOutline(this.WorldMatrix()' center' Diameter' sourceAabb.ZSize' (int)Math.Max(0' Math.Min(100' this.MinSidesPerRotation))' Color.Transparent' Color.Red' phase: startAngle); " is 198.
Long Statement,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The length of the statement  "					var rotationCenter = new Vector3(sourceAabb.MinXYZ.X + (sourceAabb.MaxXYZ.X - sourceAabb.MinXYZ.X) * (StartPercent / 100)' " is 122.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,UpdateHistogramDisplay,The length of the statement  "				graphics2D.FillRectangle(0' 0' RangeStart * _histogramDisplayCache.Width' _histogramDisplayCache.Height' new Color(Color.Red' 100)); " is 132.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,UpdateHistogramDisplay,The length of the statement  "				graphics2D.FillRectangle(RangeEnd * _histogramDisplayCache.Width' 0' 255' _histogramDisplayCache.Height' new Color(Color.Red' 100)); " is 132.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,UpdateHistogramDisplay,The length of the statement  "				graphics2D.Line(RangeStart * _histogramDisplayCache.Width' 0' RangeStart * _histogramDisplayCache.Width' _histogramDisplayCache.Height' new Color(Color.LightGray' 200)); " is 169.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,UpdateHistogramDisplay,The length of the statement  "				graphics2D.Line(RangeEnd * _histogramDisplayCache.Width' 0' RangeEnd * _histogramDisplayCache.Width' _histogramDisplayCache.Height' new Color(Color.LightGray' 200)); " is 165.
Long Statement,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Rebuild,The length of the statement  "						Mesh = VertexSourceToMesh.Revolve(path' Sides' MathHelper.DegreesToRadians(StartingAngle)' MathHelper.DegreesToRadians(EndingAngle)); " is 133.
Long Statement,MatterHackers.MatterControl.DesignTools,PyramidObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\PyramidObject3D.cs,Rebuild,The length of the statement  "					mesh.Transform(Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(45)) * Matrix4X4.CreateScale(Width / 2' Depth / 2' 1)); " is 124.
Long Statement,MatterHackers.MatterControl.DesignTools,TextObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TextObject3D.cs,Rebuild,The length of the statement  "								var letterPrinter = new TypeFacePrinter(letter.ToString()' new StyledTypeFace(ApplicationController.GetTypeFace(this.Font)' this.PointSize)) " is 140.
Long Statement,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,Rebuild,The length of the statement  "						Matrix = Matrix4X4.CreateTranslation(-1 / 2.0' 1 / 2.0' 1 / 2.0) * Matrix4X4.CreateScale(TabDepth' TabDepth' BaseHeight)' " is 121.
Long Statement,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The length of the statement  "			var baseWidth = (2 * spaceBetween) + ((sampleCount - 1) * spaceBetween) + (sampleCount * TabWidth) + (2 * spaceBetween); " is 120.
Long Statement,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The length of the statement  "						item.Matrix = Matrix4X4.CreateScale(TabWidth' TabDepth' ChangingHeight) * Matrix4X4.CreateTranslation(position.X' position.Y + Offset * offsetMultiple' BaseHeight + .5 * ChangingHeight + j * ChangingHeight); " is 207.
Long Statement,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The length of the statement  "						item.Matrix = Matrix4X4.CreateScale(TabWidth + spaceBetween * 2' TabDepth' ChangingHeight) * Matrix4X4.CreateTranslation(position.X' position.Y' BaseHeight + .5 * ChangingHeight + j * ChangingHeight); " is 200.
Long Statement,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Rebuild,The length of the statement  "						Matrix = Matrix4X4.CreateTranslation(-1 / 2.0' 1 / 2.0' 1 / 2.0) * Matrix4X4.CreateScale(TabDepth' TabDepth' ChangeHeight)' " is 123.
Long Statement,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The length of the statement  "			var baseWidth = (2 * spaceBetween) + ((sampleCount - 1) * spaceBetween) + (sampleCount * TabWidth) + (2 * spaceBetween); " is 120.
Long Statement,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,Create,The length of the statement  "					if (property.PropertyInfo.GetCustomAttributes(true).OfType<SectionStartAttribute>().FirstOrDefault() is SectionStartAttribute sectionStart) " is 139.
Long Statement,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,Create,The length of the statement  "				if (context.item.GetType().GetCustomAttributes(typeof(ShowUpdateButtonAttribute)' true).FirstOrDefault() is ShowUpdateButtonAttribute showUpdate) " is 145.
Long Statement,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreatePropertyEditor,The length of the statement  "			void RegisterValueChanged(UIField field' Func<string' object> valueFromString' Func<object' string> valueToString = null) " is 121.
Long Statement,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreatePropertyEditor,The length of the statement  "					field2.Vector3 = ((DirectionAxis)property.Value).Origin - property.Item.Children.First().GetAxisAlignedBoundingBox().Center; " is 124.
Long Statement,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreatePropertyEditor,The length of the statement  "				var showAsList = property.PropertyInfo.GetCustomAttributes(true).OfType<ShowAsListAttribute>().FirstOrDefault() != null; " is 120.
Long Statement,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreatePropertyEditor,The length of the statement  "				&& ApplicationController.Instance.Extensions.GetEditorsForType(property.PropertyType)?.FirstOrDefault() is IObject3DEditor iObject3DEditor) " is 139.
Long Statement,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,GetUnlockRow,The length of the statement  "			var detailsLink = new TextIconButton("Unlock".Localize()' AggContext.StaticData.LoadIcon("locked.png"' 16' 16' theme.InvertIcons)' theme) " is 137.
Long Statement,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,AddWebPageLinkIfRequired,The length of the statement  "			if (context.item.GetType().GetCustomAttributes(typeof(WebPageLinkAttribute)' true).FirstOrDefault() is WebPageLinkAttribute unlockLink) " is 135.
Long Statement,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,AddWebPageLinkIfRequired,The length of the statement  "				var detailsLink = new TextIconButton(unlockLink.Name.Localize()' AggContext.StaticData.LoadIcon("internet.png"' 16' 16' theme.InvertIcons)' theme) " is 146.
Long Statement,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,DetectRequiredSupportByTracing,The length of the statement  "							var upRay = new Ray(new Vector3(xPos' yPos' rayStartZ) + offset' Vector3.UnitZ' intersectionType: IntersectionType.FrontFace); " is 126.
Long Statement,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,DetectRequiredSupportByTracing,The length of the statement  "									upRay = new Ray(new Vector3(xPos' yPos' upHit.HitPosition.Z + .001) + offset' Vector3.UnitZ' intersectionType: IntersectionType.FrontFace); " is 139.
Long Statement,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,DetectRequiredSupportByTracing,The length of the statement  "							upRay = new Ray(new Vector3(xPos' yPos' rayStartZ) + offset' Vector3.UnitZ' intersectionType: IntersectionType.BackFace); " is 121.
Long Statement,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,DetectRequiredSupportByTracing,The length of the statement  "									upRay = new Ray(new Vector3(xPos' yPos' upHit.HitPosition.Z + .001) + offset' Vector3.UnitZ' intersectionType: IntersectionType.BackFace); " is 138.
Long Statement,MatterHackers.MatterControl.DesignTools,HitPlanes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,Sort,The length of the statement  "					if (((a.Top(maxOverHangAngle) && b.Bottom(maxOverHangAngle)) || (a.Bottom(maxOverHangAngle) && b.Top(maxOverHangAngle))) " is 120.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\ImageContentProvider.cs,CreateItem,The length of the statement  "							assetPath = AssetObject3D.AssetManager.StoreStream(streamAndLength.Stream' Path.GetExtension(streamInterface.FileName)); " is 120.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,Create,The length of the statement  "			var imageSection = new SearchableSectionWidget("Image".Localize()' new FlowLayoutWidget(FlowDirection.TopToBottom)' theme' emptyText: "Search Google".Localize()); " is 162.
Long Statement,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The length of the statement  "				graphics2D.DrawString("Error Loading Image".Localize() + "..."' 10' 185 / 2' baseline: Agg.Font.Baseline.BoundsCenter' color: Color.Red' pointSize: theme.DefaultFontSize' drawFromHintedCach: true); " is 197.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleGrade2.cs,ConvertWord,The length of the statement  "							converted = converted.Substring(0' 1) + tempMiddleCharacters.Replace(keyValue.Key' keyValue.Value) + converted.Substring(converted.Length - 1' 1); " is 146.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleGrade2.cs,compareStringIgnoringPunctuation,The length of the statement  "				punctuationStrippedString = punctuationStrippedString.TrimEnd(punctuationStrippedString[punctuationStrippedString.Length - 1]); " is 127.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleGrade2.cs,ConvertMappingStringToList,The length of the statement  "					if (keyConversionPair.Length == 2 && keyConversionPair[0] != null && keyConversionPair[0].Length > 0 && keyConversionPair[1] != null && keyConversionPair[1].Length > 0) " is 168.
Long Statement,MatterHackers.MatterControl.Library,FileSystemContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\FileSystem\FileSystemContainer.cs,Load,The length of the statement  "					var directories = Directory.GetDirectories(FullPath' "*.*"' searchDepth).Select(p => new DirectoryContainerLink(p)).ToList<ILibraryContainerLink>(); " is 148.
Long Statement,MatterHackers.MatterControl.Library,FileSystemContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\FileSystem\FileSystemContainer.cs,Remove,The length of the statement  "			// Removing content from the filesystem can have devastating effects - open a shell window allowing the customer make changes as they seem fit " is 142.
Long Statement,MatterHackers.MatterControl.Library,LibraryConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryConfig.cs,LoadItemThumbnail,The length of the statement  "			var thumbnail = await Task.Run(() => ApplicationController.Instance.Thumbnails.LoadCachedImage(libraryItem' thumbWidth' thumbHeight)); " is 134.
Long Statement,MatterHackers.MatterControl.Library,LibraryContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryContainer.cs,GetThumbnail,The length of the statement  "				return Task.FromResult(AggContext.StaticData.LoadIcon(Path.Combine("Library"' "zip_folder.png")).AlphaToPrimaryAccent().SetPreMultiply()); " is 138.
Long Statement,MatterHackers.MatterControl.Library,LibraryProviderHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryProviderHelpers.cs,ResizeImage,The length of the statement  "			var expectedSize = new Vector2((int)(targetWidth * GuiWidget.DeviceScale)' (int)(targetHeight * GuiWidget.DeviceScale)); " is 120.
Long Statement,MatterHackers.MatterControl.Library,SqliteLibraryContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\SqliteLibraryContainer.cs,Load,The length of the statement  "			var zipFiles = allFiles.Where(f => string.Equals(Path.GetExtension(f.FileLocation)' ".zip"' StringComparison.OrdinalIgnoreCase)); " is 129.
Long Statement,MatterHackers.MatterControl.Library,SqliteLibraryContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\SqliteLibraryContainer.cs,Load,The length of the statement  "					//return new MissingFileItem() // Needs to return a content specific icon with a missing overlay - needs to lack all print operations " is 133.
Long Statement,MatterHackers.MatterControl.Library,SqliteLibraryContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\SqliteLibraryContainer.cs,GetLibraryItems,The length of the statement  "			// TODO: String concatenation to build sql statements is the root of all sql injection attacks. This needs to be changed to use parameter objects as would be expected " is 166.
Long Statement,MatterHackers.MatterControl.Library,SqliteLibraryContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\SqliteLibraryContainer.cs,GetLibraryItems,The length of the statement  "				query = $"SELECT * FROM PrintItem WHERE PrintItemCollectionID = {CollectionID} AND Name LIKE '%{keyphrase}%' ORDER BY Name ASC;"; " is 129.
Long Statement,MatterHackers.MatterControl.Library,ZipMemoryContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\Zip\ZipMemoryContainer.cs,Load,The length of the statement  "			this.Items = items.Select(kvp => new ZipMemoryItem(this.Path' RelativeDirectory.Length == 0 ? kvp.Key : $"{RelativeDirectory}{pathSeparator}{kvp.Key}"' kvp.Value)).ToList<ILibraryItem>(); " is 187.
Long Statement,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawGlContent,The length of the statement  "				// We only draw the rotation arrows when the user has not selected any interaction volumes (they are not actively scaling or rotating anything). " is 144.
Long Statement,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The length of the statement  "					IVertexSource blueRing = new JoinPaths(new Arc(0' 0' outerRadius' outerRadius' startBlue' endBlue' Arc.Direction.CounterClockWise)' " is 131.
Long Statement,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The length of the statement  "					graphics2DOpenGL.RenderTransformedPath(rotationCenterTransform' blueRing' new Color(theme.PrimaryAccentColor' (int)(50 * alphaValue))' drawEventArgs.ZBuffered); " is 160.
Long Statement,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The length of the statement  "					graphics2DOpenGL.RenderTransformedPath(rotationCenterTransform' redAngle' new Color(theme.PrimaryAccentColor' (int)(70 * alphaValue))' drawEventArgs.ZBuffered); " is 160.
Long Statement,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The length of the statement  "							InteractionContext.World.Render3DLine(startPosition' mouseMoveInfo.HitPosition' theme.PrimaryAccentColor' drawEventArgs.ZBuffered); " is 131.
Long Statement,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The length of the statement  "						DrawSnappingMarks(drawEventArgs' mouseAngle' alphaValue' rotationCenterTransform' snappingMarkRadius' numSnapPoints' GetSnapIndex(selectedItem' numSnapPoints)); " is 160.
Long Statement,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawSnappingMarks,The length of the statement  "				var transformed = new VertexSourceApplyTransform(snapShape' Affine.NewTranslation(distanceFromCenter' 0) * Affine.NewRotation(startAngle)); " is 139.
Long Statement,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawSnappingMarks,The length of the statement  "				graphics2DOpenGL.RenderTransformedPath(rotationCenterTransform' transformed' new Color(color' (int)(254 * alphaValue))' drawEventArgs.ZBuffered); " is 145.
Long Statement,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawTickMarks,The length of the statement  "				InteractionContext.World.Render3DLine(startPosition' endPosition' new Color(theme.TextColor' (int)(254 * alphaValue))' drawEventArgs.ZBuffered); " is 144.
Long Statement,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetRotationTransform,The length of the statement  "			rotationCenterTransform = Matrix4X4.CreateScale(distBetweenPixelsWorldSpace) * Matrix4X4.CreateTranslation(rotationCenter); " is 123.
Long Statement,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetSnapIndex,The length of the statement  "							if (Math.Abs((mouseMoveInfo.HitPosition - center).Length - rotationTransformScale * snappingMarkRadius) < 20 * rotationTransformScale) " is 134.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,EditComplete,The length of the statement  "			Vector3 scaleAmount = GetScalingConsideringShiftKey(originalSelectedBounds' mouseDownSelectedBounds' newSize' InteractionContext.GuiSurface.ModifierKeys); " is 154.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,DrawGlContent,The length of the statement  "							InteractionContext.World.Render3DLine(clippingFrustum' startPosition' endPosition' new Color(theme.TextColor' 20)' false); " is 122.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,The length of the statement  "					Vector3 scaleAmount = GetScalingConsideringShiftKey(originalSelectedBounds' mouseDownSelectedBounds' newSize' InteractionContext.GuiSurface.ModifierKeys); " is 154.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(cornerPosition - new Vector3(xSign * distToStart * distBetweenPixelsWorldSpace' 0' 0))); " is 141.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(cornerPosition - new Vector3(xSign * (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0))); " is 156.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(yOtherSide - new Vector3(xSign * distToStart * distBetweenPixelsWorldSpace' 0' 0))); " is 137.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(yOtherSide - new Vector3(xSign * (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0))); " is 152.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(cornerPosition - new Vector3(0' ySign * distToStart * distBetweenPixelsWorldSpace' 0))); " is 141.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(cornerPosition - new Vector3(0' ySign * (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0))); " is 156.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(xOtherSide - new Vector3(0' ySign * distToStart * distBetweenPixelsWorldSpace' 0))); " is 137.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(xOtherSide - new Vector3(0' ySign * (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0))); " is 152.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,GetScalingConsideringShiftKey,The length of the statement  "				double scaleFromOriginal = Math.Max(newSize.X / mouseDownSelectedBounds.XSize' newSize.Y / mouseDownSelectedBounds.YSize); " is 122.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The length of the statement  "						DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme); " is 128.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,DrawGlContent,The length of the statement  "					Matrix4X4 scaleTransform = Matrix4X4.CreateScale((topPosition - bottomPosition).Length' distBetweenPixelsWorldSpace' distBetweenPixelsWorldSpace); " is 146.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,DrawGlContent,The length of the statement  "						InteractionContext.World.Render3DLine(clippingFrustum' bottomPosition' topPosition' new Color(theme.TextColor' 20)' false); " is 123.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,OnMouseMove,The length of the statement  "					Vector3 scaleAmount = ScaleCornerControl.GetScalingConsideringShiftKey(originalSelectedBounds' mouseDownSelectedBounds' newSize' InteractionContext.GuiSurface.ModifierKeys); " is 173.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(topPosition + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0))); " is 130.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(bottomPosition + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0))); " is 133.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The length of the statement  "						DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme); " is 128.
Long Statement,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The length of the statement  "					zValueDisplayInfo.OriginRelativeParent = heightDisplayCenter + new Vector2(10' -zValueDisplayInfo.LocalBounds.Center.Y); " is 120.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D_2.cs,SubtractAndReplace,The length of the statement  "						paintResultsItem.CopyWorldProperties(paint' SourceContainer' Object3DPropertyFlags.All & (~(Object3DPropertyFlags.Matrix | Object3DPropertyFlags.Visible))); " is 156.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D_2.cs,SubtractAndReplace,The length of the statement  "					keepResultsItem.CopyWorldProperties(keep' SourceContainer' Object3DPropertyFlags.All & (~(Object3DPropertyFlags.Matrix | Object3DPropertyFlags.Visible))); " is 154.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractObject3D.cs,Subtract,The length of the statement  "							remove.obj3D.Mesh' remove.matrix' 1' reporter' amountPerOperation' percentCompleted' progressStatus' cancellationToken); " is 120.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractObject3D_2.cs,Subtract,The length of the statement  "					resultsItem.CopyWorldProperties(keep' SourceContainer' Object3DPropertyFlags.All & (~(Object3DPropertyFlags.Matrix | Object3DPropertyFlags.Visible))); " is 150.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,RotateObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\RotateObject3D.cs,Rebuild,The length of the statement  "					Matrix = this.ApplyAtPosition(startingAabb.Center' Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(RotationXDegrees))); " is 125.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,RotateObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\RotateObject3D.cs,Rebuild,The length of the statement  "					Matrix = this.ApplyAtPosition(startingAabb.Center' Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(RotationYDegrees))); " is 125.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,RotateObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\RotateObject3D.cs,Rebuild,The length of the statement  "					Matrix = this.ApplyAtPosition(startingAabb.Center' Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(RotationZDegrees))); " is 125.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,Align2D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Align2D.cs,IsSet,The length of the statement  "					throw new Exception("You cannot have both " + faceToCheckFor.ToString() + " and " + faceToAssertNot.ToString() + " set when calling Align.  The are mutually exclusive."); " is 170.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,Rebuild,The length of the statement  "							AlignAxis(0' XAlign' GetAlignToOffset(CurrentChildrenBounds' 0' (!Advanced || XAlignTo == Align.None) ? XAlign : XAlignTo)' XOffset' child); " is 140.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,Rebuild,The length of the statement  "							AlignAxis(1' YAlign' GetAlignToOffset(CurrentChildrenBounds' 1' (!Advanced || YAlignTo == Align.None) ? YAlign : YAlignTo)' YOffset' child); " is 140.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,Rebuild,The length of the statement  "							AlignAxis(2' ZAlign' GetAlignToOffset(CurrentChildrenBounds' 2' (!Advanced || ZAlignTo == Align.None) ? ZAlign : ZAlignTo)' ZOffset' child); " is 140.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,IsSet,The length of the statement  "					throw new Exception("You cannot have both " + faceToCheckFor.ToString() + " and " + faceToAssertNot.ToString() + " set when calling Align.  The are mutually exclusive."); " is 170.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,AdjustChildSize,The length of the statement  "					ItemWithTransform.Matrix = Object3DExtensions.ApplyAtPosition(ItemWithTransform.Matrix' aabb.Center' Matrix4X4.CreateScale(scale)); " is 131.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,Object3DExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Object3DExtensions.cs,ComputeSHA1,The length of the statement  "			// ******************************************************************************************************************************* " is 130.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,Object3DExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Object3DExtensions.cs,ComputeSHA1,The length of the statement  "			// TODO: We must ensure we always compute with a stream that marks for UTF encoding with BOM' irrelevant of in-memory or on disk " is 128.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,Object3DExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Object3DExtensions.cs,ComputeSHA1,The length of the statement  "			// ******************************************************************************************************************************* " is 130.
Long Statement,MatterHackers.MatterControl.DesignTools.Operations,Object3DExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Object3DExtensions.cs,GetCenteringTransformExpandedToRadius,The length of the statement  "			var circle = SmallestEnclosingCircle.MakeCircle(vertexSource.Vertices().Select((v) => new Vector2(v.position.X' v.position.Y))); " is 128.
Long Statement,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,RebuildUi,The length of the statement  "					var valueEdit = new MHNumberEdit(currentValue' theme' pixelWidth: 80 * GuiWidget.DeviceScale' allowNegatives: true' allowDecimals: true) " is 136.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintHistoryData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryData.cs,GetHistoryItems,The length of the statement  "				query = string.Format("SELECT * FROM PrintTask WHERE PrintComplete = 1 ORDER BY PrintStart DESC LIMIT {0};"' recordCount); " is 122.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintHistoryData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryData.cs,GetHistoryForPrinter,The length of the statement  "			string query = string.Format("SELECT * FROM PrintTask WHERE PrinterID={0} ORDER BY PrintStart DESC LIMIT 1;"' printerID); " is 121.
Long Statement,MatterHackers.MatterControl.PrintHistory,HistoryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,AddItem,The length of the statement  "			var detailsView = new PrintHistoryListItem(item' this.ThumbWidth' this.ThumbHeight' historyRowItem?.PrintTask' true' theme); " is 124.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintRecovery,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintRecovery.cs,RecoveryAvailable,The length of the statement  "			PrintTask lastPrint = PrintHistoryData.Instance.GetHistoryForPrinter(printer.Settings.ID.GetHashCode()).FirstOrDefault(); " is 121.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintRecovery,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintRecovery.cs,CheckIfNeedToRecoverPrint,The length of the statement  "			string printRecoveryWarningMessage = "WARNING: In order to perform print recovery' your printer must move down to reach its home position.\nIf your print is too large' part of your printer may collide with it when moving down.\nMake sure it is safe to perform this operation before proceeding.".Localize(); " is 306.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintRecovery,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintRecovery.cs,CheckIfNeedToRecoverPrint,The length of the statement  "			PrintTask lastPrint = PrintHistoryData.Instance.GetHistoryForPrinter(printer.Settings.ID.GetHashCode()).FirstOrDefault(); " is 121.
Long Statement,MatterHackers.MatterControl.PrintHistory,PrintRecovery,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintRecovery.cs,CheckIfNeedToRecoverPrint,The length of the statement  "						"It appears your last print failed to complete.\n\nWould your like to attempt to recover from the last know position?".Localize()  " is 129.
Long Statement,MatterHackers.MatterControl.Library.Export,GCodeExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\GCodeExport.cs,Generate,The length of the statement  "								loadedItem.Matrix *= Matrix4X4.CreateTranslation(-aabb.Center.X' -aabb.Center.Y' -aabb.MinXYZ.Z) * Matrix4X4.CreateTranslation(bedCenter.X' bedCenter.Y' 0); " is 156.
Long Statement,MatterHackers.MatterControl.Plugins.X3GDriver,X3GExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\X3GExport.cs,Generate,The length of the statement  "			foreach (string connectLine in connectGCodeLines.Split(splitString.ToCharArray()' StringSplitOptions.RemoveEmptyEntries)) " is 121.
Long Statement,MatterHackers.MatterControl.PrintLibrary,AddPrinterWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\AddPrinterWidget.cs,TreeView_AfterSelect,The length of the statement  "							&& OemSettings.Instance.OemPrinters.TryGetValue($"{SelectedPrinter.Make}-{ SelectedPrinter.Model}"' out StorePrinterID storePrinterID)) " is 135.
Long Statement,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,Library_ContainerChanged,The length of the statement  "			var owningNode = libraryTreeView.SelectedNode?.Parents<ContainerTreeNode>().Where(p => p.Container == activeContainer).FirstOrDefault(); " is 136.
Long Statement,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The length of the statement  "				Icon = AggContext.StaticData.LoadIcon("fa-folder-new_16.png"' 16' 16' ApplicationController.Instance.MenuTheme.InvertIcons)' " is 124.
Long Statement,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The length of the statement  "							case FileSystemFileItem fileItem when Path.GetExtension(fileItem.FileName).IndexOf(".gco"' StringComparison.OrdinalIgnoreCase) == 0: " is 132.
Long Statement,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The length of the statement  "						var communicationState = ApplicationController.Instance.DragDropData?.View3DWidget?.Printer?.Connection.CommunicationState; " is 123.
Long Statement,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The length of the statement  "								// TODO: Consider changing this brute force approach to instead mark as dirty and allow Activate base method to reload if dirty " is 127.
Long Statement,MatterHackers.MatterControl.Library.Widgets.HardwarePage,PrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\PrinterDetails.cs,OnLoad,The length of the statement  "				if (OemSettings.Instance.OemPrinters.TryGetValue($"{printerInfo.Make}-{ printerInfo.Model}"' out StorePrinterID storePrinterID)) " is 128.
Long Statement,MatterHackers.MatterControl.Library.Widgets.HardwarePage,PrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\PrinterDetails.cs,CreateProductDataWidgets,The length of the statement  "						ApplicationController.Instance.LaunchBrowser($"https://www.matterhackers.com/store/l/{item.AddOnListingReference}/sk/{item.AddOnSkuReference}"); " is 144.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Queue\QueueData.cs,AddItem,The length of the statement  "						string memoryWarningMessage = "Are you sure you want to add this part ({0}) to the Queue?\nThe 3D part you are trying to load may be too complicated and cause performance or stability problems.\n\nConsider reducing the geometry before proceeding.".Localize().FormatWith(item.Name); " is 281.
Long Statement,MatterHackers.MatterControl.PrintQueue,QueueData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Queue\QueueData.cs,AddItem,The length of the statement  "							UserSaidToAllowAddToQueue' memoryWarningMessage' "File May Cause Problems".Localize()' StyledMessageBox.MessageType.YES_NO' "Add To Queue"' "Do Not Add"); " is 154.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The length of the statement  "						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize' " is 124.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,GCodeDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeDetails.cs,FilamentUsed,The length of the statement  "			return string.Format("{0:0.0} mm"' loadedGCode.GetFilamentUsedMm(printer.Settings.GetValue<double>(SettingsKey.filament_diameter))); " is 132.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,GCodeDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeDetails.cs,FilamentVolume,The length of the statement  "			return string.Format("{0:0.00} cm³"' loadedGCode.GetFilamentCubicMm(printer.Settings.GetValue<double>(SettingsKey.filament_diameter)) / 1000); " is 142.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ItemColorButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ItemColorButton.cs,OnLoad,The length of the statement  "			var firstBackgroundColor = this.Parents<GuiWidget>().Where(p => p.BackgroundColor.Alpha0To1 == 1).FirstOrDefault()?.BackgroundColor; " is 132.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ItemMaterialButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ItemMaterialButton.cs,OnLoad,The length of the statement  "			var firstBackgroundColor = this.Parents<GuiWidget>().Where(p => p.BackgroundColor.Alpha0To1 == 1).FirstOrDefault()?.BackgroundColor; " is 132.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,Printer_SettingChanged,The length of the statement  "				var printerTab = tabControl.AllTabs.FirstOrDefault(t => t.TabContent is PrinterTabPage printerPage && printerPage.printer.Settings.ID == printerSettings.ID) as ChromeTab; " is 170.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,Object3DTreeBuilder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Object3DTreeBuilder.cs,AddItem,The length of the statement  "			if (ApplicationController.Instance.Thumbnails.OperationIcons.TryGetValue(item.Source.GetType()' out Func<bool' ImageBuffer> iconSource)) " is 136.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,Connection_FilamentRunout,The length of the statement  "						string filamentPauseMessage = "Your 3D print has been paused.\n\nOut of filament' or jam' detected. Please load more filament or clear the jam.".Localize(); " is 156.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The length of the statement  "					var switchMessage = "Switch to new G-Code?\n\nBefore you switch' check that your are seeing the changes you expect.".Localize(); " is 128.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The length of the statement  "					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration " is 135.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,GetFormatedTime,The length of the statement  "			return (hoursPrinted <= 0) ? $"{minutesPrinted}:{secondsPrinted:00}" : $"{hoursPrinted}:{minutesPrinted:00}:{secondsPrinted:00}"; " is 129.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskRow.cs,TaskDetails_ProgressChanged,The length of the statement  "				expandButton.Text = e.Status.Contains(taskDetails.Title' StringComparison.OrdinalIgnoreCase) ? e.Status : $"{taskDetails.Title} - {e.Status}"; " is 142.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskStatusPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskStatusPanel.cs,TaskDetails_ProgressChanged,The length of the statement  "				textWidget.Text = e.Status.Contains(taskDetails.Title' StringComparison.OrdinalIgnoreCase) ? e.Status : $"{taskDetails.Title} - {e.Status}"; " is 140.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,GenerateToolLimitsTexture,The length of the statement  "			var cornerRect = new RectangleDouble(toolBounds.Right - textBounds.Width' toolBounds.Top - textBounds.Height' toolBounds.Right' toolBounds.Top); " is 144.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,SetActiveItem,The length of the statement  "					//// - Use the type of the property to find a matching editor (ideally all datatype -> editor functionality would resolve consistently) " is 135.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,SetActiveItem,The length of the statement  "							if (ApplicationController.Instance.Extensions.GetEditorsForType(object3D.GetType())?.FirstOrDefault() is IObject3DEditor editor) " is 128.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,SetActiveItem,The length of the statement  "				if (ApplicationController.Instance.Extensions.GetEditorsForType(item.GetType())?.FirstOrDefault() is IObject3DEditor editor) " is 124.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,Scene_SelectionChanged,The length of the statement  "			if (editorPanel.Children.FirstOrDefault()?.DescendantsAndSelf<SectionWidget>().FirstOrDefault() is SectionWidget firstSectionWidget) " is 132.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SystemWindowExtension,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SystemWindowExtension.cs,ShowPopover,The length of the statement  "								sliceSettingsPopover.ArrowDirection = settingsRow.ArrowDirection == ArrowDirection.Left ? ArrowDirection.Right : ArrowDirection.Left; " is 133.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ChromeTab,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,DrawTabLowerLeft,The length of the statement  "			graphics2D.Line(rect.Left' rect.YCenter' rect.Left + tabInsetDistance' rect.Bottom' AppContext.Theme.MinimalShade' 1.3); " is 120.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ValueTag,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ValueTag.cs,RebuildShape,The length of the statement  "			firstChildBounds = new RectangleDouble(bounds.Left' bounds.Bottom' bounds.Left + firstChildBounds.Right + firstChild.Margin.Width' bounds.Top); " is 143.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The length of the statement  "			Matrix4X4 rotateTransform = Matrix4X4.CreateRotation(new Quaternion(delta.GetNormal()' Vector3.UnitX + new Vector3(.0001' -.00001' .00002))); " is 141.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,DragDropLoadProgress,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DragDropLoadProgress.cs,View3DWidget_AfterDraw,The length of the statement  "				Affine accumulatedTransform = currentGraphics2DTransform * Affine.NewTranslation(cornerScreenSpace.X' cornerScreenSpace.Y); " is 123.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(bedPosition + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0))); " is 130.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,SetPosition,The length of the statement  "			lines.Add(InteractionContext.World.GetScreenPosition(bottomPosition + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0))); " is 133.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,InteractionLayer_AfterDraw,The length of the statement  "						DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme); " is 128.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0)); " is 126.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0)); " is 126.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0)); " is 126.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0)); " is 126.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0)); " is 126.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0)); " is 126.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0)); " is 126.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The length of the statement  "						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0)); " is 126.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,SetRenderTarget,The length of the statement  "			// Hook our drawing operation to the renderSource so we can draw unclipped in the source objects bounds. At the time of writing' " is 128.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,RenderBounds,The length of the statement  "				Vector3 bottomStartPosition = Vector3Ex.Transform(bvh.GetAxisAlignedBoundingBox().GetBottomCorner(i)' transformToWorld); " is 120.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,RenderBounds,The length of the statement  "				Vector3 bottomEndPosition = Vector3Ex.Transform(bvh.GetAxisAlignedBoundingBox().GetBottomCorner((i + 1) % 4)' transformToWorld); " is 128.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,RenderBounds,The length of the statement  "				Vector3 topEndPosition = Vector3Ex.Transform(bvh.GetAxisAlignedBoundingBox().GetTopCorner((i + 1) % 4)' transformToWorld); " is 122.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,FindInteractionVolumeHit,The length of the statement  "			// - Looks like the extra list is always required as CreateNewHierachy requires a List and we can only produce an IEnumerable without the list overhead " is 151.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,FindInteractionVolumeHit,The length of the statement  "			// - var uiTraceables = iaVolumes.Where(ia => ia.CollisionVolume != null).Select(ia => new Transform(ia.CollisionVolume' ia.TotalTransform)).ToList<IPrimitive>(); " is 162.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,The length of the statement  "					// TODO: Putting the drawing code in the IObject3D means almost certain bindings to MatterControl in IObject3D. If instead " is 122.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,The length of the statement  "					// we had a UI layer object that used binding to register scene drawing hooks for specific types' we could avoid the bindings " is 125.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,LevelingMeshVisualizer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\LevelingMeshVisualizer.cs,BuildMeshFromLevelingData,The length of the statement  "			// Loop over all outer points' reflecting a point onto the bed and stitching the current' reflect and next points together " is 122.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,OverflowMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\OverflowBar.cs,CreateOverflowIcon,The length of the statement  "				return AggContext.StaticData.LoadIcon(Path.Combine("ViewTransformControls"' "overflow.png")' 32' 32' theme.InvertIcons); " is 120.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,GeneratePrinterOverflowMenu,The length of the statement  "							"Resetting to default values will remove your current overrides and restore your original printer settings.\nAre you sure you want to continue?".Localize()' " is 156.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,GeneratePrinterOverflowMenu,The length of the statement  "							"Are you sure you want to delete printer '{0}'?".Localize().FormatWith(printer.Settings.GetValue(SettingsKey.printer_name))' " is 124.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,configureEePromButton_Click,The length of the statement  "							"Oops! There is no eeprom mapping for your printer's firmware.".Localize() + "\n\n" + "You may need to wait a minute for your printer to finish initializing.".Localize()' " is 170.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SliceButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\SliceButton.cs,SliceBedplate,The length of the statement  "					StyledMessageBox.ShowMessageBox("Oops! Please select a printer in order to continue slicing."' "Select Printer"' StyledMessageBox.MessageType.OK); " is 146.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,SceneActions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\SceneActions.cs,UngroupSelection,The length of the statement  "							var discreetMeshes = CreateDiscreteMeshes.SplitVolumesIntoMeshes(selectedItem.Mesh' cancellationToken' (double progress0To1' string processingState) => " is 151.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,OnMouseMove,The length of the statement  "				Quaternion activeRotationQuaternion = TrackBallController.GetRotationForMove(new Vector2(Width / 2' Height / 2)' world' Width' lastMovePosition' movePosition' false); " is 166.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,OnMouseMove,The length of the statement  "					interactionLayer.World.RotationMatrix = interactionLayer.World.RotationMatrix * Matrix4X4.CreateRotation(activeRotationQuaternion); " is 131.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,PushToPrinterAndPrint,The length of the statement  "				ApplicationController.Instance.Tasks.Execute("Saving Changes".Localize()' printer' printer.Bed.SaveChanges).ContinueWith(task => " is 128.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,CopyPlateToPrinter,The length of the statement  "				ApplicationController.Instance.MainView.TabControl.SelectedTabKey = printer.Settings.GetValue(SettingsKey.printer_name); " is 120.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,DragOver,The length of the statement  "				DragSelectedObject(selectedItem' localMousePosition: this.InteractionLayer.TransformFromScreenSpace(screenSpaceMousePosition)); " is 127.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,StartDragDrop,The length of the statement  "				// TODO: Figure out a mechanism to disable View3DWidget with dark overlay' displaying something like "Switch to xxx.gcode"' make disappear on mouseLeaveBounds and dragfinish " is 173.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,InSelectionBounds,The length of the statement  "					Vector3 bottomStartPosition = Vector3Ex.Transform(x.Bvh.GetAxisAlignedBoundingBox().GetBottomCorner(i)' x.TransformToWorld); " is 124.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,OnMouseMove,The length of the statement  "								&& (this.Printer != null || !string.Equals(System.IO.Path.GetExtension(filePath)' ".gcode"' StringComparison.OrdinalIgnoreCase)); " is 129.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,OnMouseMove,The length of the statement  "					Math.Max(Math.Min((double)DragSelectionEndPosition.X' this.InteractionLayer.LocalBounds.Right)' this.InteractionLayer.LocalBounds.Left)' " is 136.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,OnMouseMove,The length of the statement  "					Math.Max(Math.Min((double)DragSelectionEndPosition.Y' this.InteractionLayer.LocalBounds.Top)' this.InteractionLayer.LocalBounds.Bottom)); " is 137.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The length of the statement  "					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime); " is 144.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The length of the statement  "					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12)) " is 123.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The length of the statement  "								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges); " is 136.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateOpenButton,The length of the statement  "			var openButton = new IconButton(AggContext.StaticData.LoadIcon("fa-folder-open_16.png"' 16' 16' theme.InvertIcons)' theme) " is 122.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateOpenButton,The length of the statement  "				var extensionsWithoutPeriod = new HashSet<string>(ApplicationSettings.OpenDesignFileParams.Split('|').First().Split(''').Select(t => t.Trim().Trim('.'))); " is 154.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateAddButton,The length of the statement  "							bool mouseUpOnWidget = resizeContainerMousePosition.X >= 0 && resizeContainerMousePosition.X <= verticalResizeContainer.Width " is 125.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateWipeTowerButton,The length of the statement  "					scene.UndoBuffer.AddAndDo(new SetOutputType(selectedItem' allAreWipeTower ? PrintOutputTypes.Default : PrintOutputTypes.WipeTower)); " is 132.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateSupportButton,The length of the statement  "					scene.UndoBuffer.AddAndDo(new SetOutputType(selectedItem' allAreSupport ? PrintOutputTypes.Default : PrintOutputTypes.Support)); " is 128.
Long Statement,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateSaveButton,The length of the statement  "					ApplicationController.Instance.Tasks.Execute("Saving".Localize()' sceneContext.Printer' async (progress' cancellationToken) => " is 126.
Long Statement,MatterHackers.MeshVisualizer,InteractionVolume,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Interaction\InteractionVolume.cs,DrawMeasureLine,The length of the statement  "					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4)); " is 121.
Long Statement,MatterHackers.MeshVisualizer,InteractionVolume,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Interaction\InteractionVolume.cs,DrawMeasureLine,The length of the statement  "					IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4)); " is 121.
Long Statement,MatterHackers.MeshVisualizer,WorldViewExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\WorldViewExtensions.cs,RenderDirectionAxis,The length of the statement  "				var rotation = size / 4 * Vector3Ex.Transform(perpendicular' Matrix4X4.CreateRotation(axis.Normal' MathHelper.Tau * i / count)); " is 128.
Long Statement,MatterHackers.MatterControl.PrinterControls,MacroControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MacroControls.cs,Rebuild,The length of the statement  "				var noMacrosFound = new TextWidget("No macros are currently set up for this printer.".Localize()' pointSize: 10' textColor: theme.TextColor); " is 141.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The length of the statement  "			printerBaudRateHelpMessage = new TextWidget("The term 'Baud Rate' roughly means the speed at which\ndata is transmitted.  Baud rates may differ from printer to\nprinter. Refer to your printer manual for more info.\n\nTip: If you are uncertain - try 250000.".Localize()' 0' 0' 10); " is 280.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortContainer,The length of the statement  "			printerComPortHelpMessage = new TextWidget("The 'Serial Port' section lists all available serial\nports on your device. Changing which USB port the printer\nis connected to may change the associated serial port.\n\nTip: If you are uncertain' unplug/plug in your printer\nand hit refresh. The new port that appears should be\nyour printer.".Localize()' 0' 0' 10) " is 361.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The length of the statement  "			var printerMessageFour = new TextWidget(string.Format("1.) {0}."' "Connect printer (make sure it is on)".Localize())' 0' 0' 12) " is 127.
Long Statement,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The length of the statement  "			var printerMessageFive = new TextWidget(string.Format("2.) {0} '{1}'."' "Press".Localize()' "Connect".Localize())' 0' 0' 12) " is 124.
Long Statement,MatterHackers.MatterControl.Tour,StepIndicator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\CarouselIndicators.cs,OnDraw,The length of the statement  "				//graphics2D.Circle(this.LocalBounds.Center' (this.Width - 3) / 2' this.FirstWidgetUnderMouse ? parent.HighlightColor : this.Color); " is 132.
Long Statement,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,CreateBodyWidgets,The length of the statement  "			body.AddChild(new WrappedTextWidget(productTour.ActiveItem.Description' textColor: theme.TextColor' pointSize: theme.DefaultFontSize) " is 133.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,ValidateFile,The length of the statement  "			// read the last few k of the file and see if it says "filament used". We use this marker to tell if the file finished writing " is 126.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,GetStlFileLocations,The length of the statement  "					IEnumerable<IObject3D> itemsThisExtruder = Slicer.GetItemsForExtruder(meshItemsOnBuildPlate' extruderCount' extruderIndex' true); " is 129.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,Slice,The length of the statement  "								gcodeWriter.WriteLine("; {0} Version {1} Build {2} : GCode settings used"' oemName' VersionInfo.Instance.ReleaseVersion' VersionInfo.Instance.BuildVersion); " is 156.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,AddObjectsForExtruder,The length of the statement  "						itemWorldMatrix = itemWorldMatrix.ApplyAtPosition(aabbForCenter.Center.Transform(itemWorldMatrix)' Matrix4X4.CreateScale(xyScale' xyScale' 1)); " is 143.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,AddObjectsForExtruder,The length of the statement  "				string tinyObjectFileName = Path.Combine(folderToSaveStlsTo' Path.ChangeExtension("non_printing_extruder_change_mesh"' ".stl")); " is 128.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,CreateDropdown,The length of the statement  "			var listSource = (layerType == NamedSettingsLayers.Material) ? printer.Settings.MaterialLayers : printer.Settings.QualityLayers; " is 128.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,MenuItem_Selected,The length of the statement  "			// When a preset is selected store the current values of all known settings to compare against after applying the preset " is 120.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettingsExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\PrinterSettingsExtensions.cs,Save,The length of the statement  "			// TODO: Rewrite to be owned by ProfileManager and simply mark as dirty and every n period persist and clear dirty flags " is 120.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettingsExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\PrinterSettingsExtensions.cs,Save,The length of the statement  "						// Any change that results in our content arriving at the last known server content fingerprint' should clear the dirty flag " is 124.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,PrinterSettingsExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\PrinterSettingsExtensions.cs,Save,The length of the statement  "			if (ApplicationController.Instance.ActivePrinters.FirstOrDefault(p => p.Settings.ID == settings.ID) is PrinterConfig printer) " is 125.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,GetProfilesDirectoryForUser,The length of the statement  "			string userProfilesDirectory = Path.Combine(ApplicationDataStorage.ApplicationUserDataPath' "Profiles"' userAndEnvName); " is 120.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,ClosePrinter,The length of the statement  "				if (ApplicationController.Instance.ActivePrinters.FirstOrDefault(p => p.Settings.ID == printerID) is PrinterConfig printer) " is 123.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,LoadSettingsAsync,The length of the statement  "			if (ApplicationController.Instance.ActivePrinters.FirstOrDefault(p => p.Settings.ID == printerID) is PrinterConfig activePrinter) " is 129.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,WarnAboutRevert,The length of the statement  "					"The profile you are attempting to load has been corrupted. We loaded your last usable {0} {1} profile from your recent profile history instead.".Localize() " is 156.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Slicer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Slicer.cs,GetExtrudersUsed,The length of the statement  "					int supportExtruder = Math.Max(0' Math.Min(extruderCount - 1' settings.GetValue<int>(SettingsKey.support_material_extruder) - 1)); " is 130.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Slicer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Slicer.cs,GetExtrudersUsed,The length of the statement  "				IEnumerable<IObject3D> itemsThisExtruder = GetItemsForExtruder(printableItems' extruderCount' extruderIndex' checkForMeshFile); " is 127.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Slicer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Slicer.cs,SliceItem,The length of the statement  "			return printer.Settings.Slicer.Slice(printer.PrintableItems(object3D)' printer.Settings' gcodeFilePath' progressReporter' cancellationToken); " is 141.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,UpdateValidationState,The length of the statement  "			var fieldErrors = errors.OfType<SettingsValidationError>().Where(e => e.CanonicalSettingsName == this.settingData.SlicerConfigName); " is 132.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,ExtendPopover,The length of the statement  "						&& PrinterSettings.SettingsData.TryGetValue(percentReference.ReferencedSetting' out SliceSettingData referencedSettingData)) " is 124.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,ExtendPopover,The length of the statement  "			popover.AddChild(new TextWidget(settingData.SlicerConfigName + mapsTo' pointSize: theme.DefaultFontSize - 1' textColor: AppContext.Theme.TextColor) " is 147.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,UpdateStyle,The length of the statement  "				else if (isOverride && printer.Settings.SettingExistsInLayer(settingData.SlicerConfigName' NamedSettingsLayers.Quality)) " is 120.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateGroupSection,The length of the statement  "			var sectionWidget = new SectionWidget(group.Name.Localize()' groupPanel' theme' serializationKey: userSettingsKey' rightAlignedContent: uiField?.Content); " is 154.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateGroupSection,The length of the statement  "			var presetsView = (settingsContext.ViewFilter == NamedSettingsLayers.Material || settingsContext.ViewFilter == NamedSettingsLayers.Quality); " is 140.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CheckIfShouldBeShown,The length of the statement  "			if (settingsContext.ViewFilter == NamedSettingsLayers.Material || settingsContext.ViewFilter == NamedSettingsLayers.Quality) " is 124.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,ShowFilteredView,The length of the statement  "				// HACK: Include parent visibility in mix as complex fields that return wrapped SliceSettingsRows will be visible and their parent will be hidden " is 145.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,ClearFilter,The length of the statement  "				// HACK: Include parent visibility in mix as complex fields that return wrapped SliceSettingsRows will be visible and their parent will be hidden " is 145.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,ToggleboxField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\CheckboxField.cs,Initialize,The length of the statement  "			var pixelWidth = this.ControlWidth + 6; // HACK: work around agg-bug where text fields are padding*2 bigger than ControlWidth " is 125.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,ComPortField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ComPortField.cs,Initialize,The length of the statement  "			bool canChangeComPort = !printer.Connection.IsConnected && printer.Connection.CommunicationState != CommunicationStates.AttemptingToConnect; " is 140.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,ComPortField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ComPortField.cs,Initialize,The length of the statement  "			// ensuring that a single printer can be shared across different devices and we'll select the correct com port in each case " is 123.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,ComPortField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ComPortField.cs,Initialize,The length of the statement  "				canChangeComPort = !printer.Connection.IsConnected && printer.Connection.CommunicationState != CommunicationStates.AttemptingToConnect; " is 135.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,IpAddessField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\IpAddessField.cs,Initialize,The length of the statement  "			bool canChangeComPort = !printer.Connection.IsConnected && printer.Connection.CommunicationState != CommunicationStates.AttemptingToConnect; " is 140.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,IpAddessField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\IpAddessField.cs,Initialize,The length of the statement  "				canChangeComPort = !printer.Connection.IsConnected && printer.Connection.CommunicationState != CommunicationStates.AttemptingToConnect; " is 135.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,MultilineStringField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\MultilineStringField.cs,Initialize,The length of the statement  "			editWidget = new MHTextEditWidget(""' theme' pixelWidth: 320' multiLine: true' tabIndex: tabIndex' typeFace: ApplicationController.GetTypeFace(NamedTypeFace.Liberation_Mono)) " is 174.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,NumberField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\NumberField.cs,Initialize,The length of the statement  "			numberEdit = new MHNumberEdit(0' theme' pixelWidth: ControlWidth' allowDecimals: this.AllowDecimals' allowNegatives: this.AllowNegatives' tabIndex: tabIndex) " is 157.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Vector2Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector2Field.cs,Initialize,The length of the statement  "			xEditWidget = new MHNumberEdit(currentXValue' theme' singleCharLabel: 'X'' allowNegatives: true' allowDecimals: true' pixelWidth: VectorXYEditWidth' tabIndex: tabIndex) " is 168.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Vector2Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector2Field.cs,Initialize,The length of the statement  "					string.Format("{0}'{1}"' xEditWidget.ActuallNumberEdit.Value.ToString("0.###")' yEditWidget.ActuallNumberEdit.Value.ToString("0.###"))' " is 135.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Vector2Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector2Field.cs,Initialize,The length of the statement  "			yEditWidget = new MHNumberEdit(currentYValue' theme' 'Y'' allowNegatives: true' allowDecimals: true' pixelWidth: VectorXYEditWidth' tabIndex: tabIndex) " is 151.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Vector2Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector2Field.cs,Initialize,The length of the statement  "					string.Format("{0}'{1}"' xEditWidget.ActuallNumberEdit.Value.ToString("0.###")' yEditWidget.ActuallNumberEdit.Value.ToString("0.###"))' " is 135.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Vector3Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector3Field.cs,Initialize,The length of the statement  "			xEditWidget = new MHNumberEdit(currentXValue' theme' 'X'' allowNegatives: true' allowDecimals: true' pixelWidth: VectorXYZEditWidth' tabIndex: tabIndex) " is 152.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Vector3Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector3Field.cs,Initialize,The length of the statement  "			yEditWidget = new MHNumberEdit(currentYValue' theme' 'Y'' allowNegatives: true' allowDecimals: true' pixelWidth: VectorXYZEditWidth' tabIndex: tabIndex) " is 152.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Vector3Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector3Field.cs,Initialize,The length of the statement  "			zEditWidget = new MHNumberEdit(currentZValue' theme' 'Z'' allowNegatives: true' allowDecimals: true' pixelWidth: VectorXYZEditWidth' tabIndex: tabIndex) " is 152.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,Initialize,The length of the statement  "			xEditWidget = new MHNumberEdit(currentXValue' theme' labels[0] /* X */' allowNegatives: true' allowDecimals: true' pixelWidth: VectorXYZWEditWidth' tabIndex: tabIndex) " is 167.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,Initialize,The length of the statement  "			yEditWidget = new MHNumberEdit(currentYValue' theme' labels[1] /* Y */' allowNegatives: true' allowDecimals: true' pixelWidth: VectorXYZWEditWidth' tabIndex: tabIndex) " is 167.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,Initialize,The length of the statement  "			zEditWidget = new MHNumberEdit(currentZValue' theme' labels[2] /* Z */' allowNegatives: true' allowDecimals: true' pixelWidth: VectorXYZWEditWidth' tabIndex: tabIndex) " is 167.
Long Statement,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,Initialize,The length of the statement  "			wEditWidget = new MHNumberEdit(currentZValue' theme' labels[3] /* W */' allowNegatives: true' allowDecimals: true' pixelWidth: VectorXYZWEditWidth' tabIndex: tabIndex) " is 167.
Long Statement,MatterHackers.MatterControl.FieldValidation,ValidationMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\FieldValidation.cs,StringLooksLikeEmail,The length of the statement  "			if (lastAtPos < lastDotPos && lastAtPos > 0 && value.IndexOf("@@") == -1 && lastDotPos > 2 && (value.Length - lastDotPos) > 2) " is 126.
Long Statement,JsonPath,ReflectionValueSystem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\JsonPath.cs,GetMember,The length of the statement  "					Properties = item.GetType().GetProperties(PublicInstanceProperties).Where(pi => pi.GetGetMethod() != null && pi.GetSetMethod() != null).ToList() " is 144.
Long Statement,Markdig.Renderers.Agg.Inlines,AggEmphasisInlineRenderer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\Inlines\AggEmphasisInlineRenderer.cs,Write,The length of the statement  "			//		span.SetResourceReference(FrameworkContentElement.StyleProperty' obj.IsDouble ? Styles.StrikeThroughStyleKey : Styles.SubscriptStyleKey); " is 141.
Long Statement,MatterHackers.MatterControl.VersionManagement,WebRequestBase<ResponseType>,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\VersionManagement\WebRequestHandler.cs,SendRequest,The length of the statement  "			// Prevent constant exceptions on debug builds when stepping through code. In debug' let requests stay in limbo until resumed and prevent the timeout exceptions " is 160.
Long Statement,MatterHackers.MatterControl.VersionManagement,WebRequestBase<ResponseType>,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\VersionManagement\WebRequestHandler.cs,SendRequest,The length of the statement  "			System.Diagnostics.Trace.Write(string.Format("ServiceRequest: {0}\r\n  {1}\r\n"' uri' string.Join("\r\n\t"' jsonToSend.Split(''')))); " is 133.
Long Statement,MatterHackers.MatterControl.VersionManagement,WebRequestBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\VersionManagement\WebRequestHandler.cs,SendRequest,The length of the statement  "			System.Diagnostics.Trace.Write(string.Format("ServiceRequest: {0}\r\n  {1}\r\n"' uri' string.Join("\r\n\t"' jsonToSend.Split(''')))); " is 133.
Complex Conditional,MatterHackers.MatterControl,BedConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BedConfig.cs,AddToPlate,The conditional expression  "extension != ""  							&& extension != ".ZIP"  							&& extension != ".GCODE"  							&& ApplicationController.Instance.Library.IsContentFileType(loadedFileName)"  is complex.
Complex Conditional,MatterHackers.MatterControl,PrinterConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterConfig.cs,Printer_SettingChanged,The conditional expression  "stringEvent.Data == SettingsKey.bed_size  					|| stringEvent.Data == SettingsKey.print_center  					|| stringEvent.Data == SettingsKey.build_height  					|| stringEvent.Data == SettingsKey.bed_shape"  is complex.
Complex Conditional,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,InsideBuildVolume,The conditional expression  "aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2"  is complex.
Complex Conditional,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,InsideBuildVolume,The conditional expression  "aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2"  is complex.
Complex Conditional,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The conditional expression  "printer.Connection.IsConnected  				&& !PrinterSetupRequired(printer)  				&& validatePrintBed  				&& errors.Count(e => e.ErrorLevel == ValidationErrorLevel.Error) == 0  				&& !printer.PrintableItems(printer.Bed.Scene).Any()"  is complex.
Complex Conditional,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The conditional expression  "heatedBed  						&& printer.Connection.IsConnected  						&& !PrinterSetupRequired(printer)  						&& printer.Settings.Helpers.PrintLevelingData is PrintLevelingData levelingData  						&& !levelingData.IssuedLevelingTempWarning  						&& Math.Abs(bedTemperature - levelingData.BedTemperature) > 10"  is complex.
Complex Conditional,MatterHackers.MatterControl,XyCalibrationDataRecieved,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationDataRecieved.cs,XyCalibrationDataRecieved,The conditional expression  "calibrationWizard.XPick == 0  				|| calibrationWizard.XPick == 6  				|| calibrationWizard.YPick == 0  				|| calibrationWizard.YPick == 6"  is complex.
Complex Conditional,MatterHackers.MatterControl,CreateDiscreteMeshes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitVolumesIntoMeshes,The conditional expression  "meshFromCurrentVolume.Vertices.Count > 2  						&& (bounds.XSize > oneTenThousandth  						|| bounds.YSize > oneTenThousandth  						|| bounds.ZSize > oneTenThousandth)  						&& meshFromCurrentVolume.Faces.Any(f => f.GetArea(meshFromCurrentVolume) > oneTenThousandth)"  is complex.
Complex Conditional,MatterHackers.MatterControl,CreateDiscreteMeshes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\CreateDiscreteMeshes.cs,PointInPolygon,The conditional expression  "(((polygon[i].Y <= testPosition.Y) && (testPosition.Y < polygon[prevIndex].Y))  					|| ((polygon[prevIndex].Y <= testPosition.Y) && (testPosition.Y < polygon[i].Y)))  					&& (testPosition.X - polygon[i].X < (polygon[prevIndex].X - polygon[i].X) * (testPosition.Y - polygon[i].Y) / (polygon[prevIndex].Y - polygon[i].Y))"  is complex.
Complex Conditional,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls_KeyDown,The conditional expression  "(AggContext.OperatingSystem == OSType.Windows && e.KeyCode == Keys.PageUp)  				|| (AggContext.OperatingSystem == OSType.Mac && e.KeyCode == (Keys.Back | Keys.Cancel))"  is complex.
Complex Conditional,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls_KeyDown,The conditional expression  "(AggContext.OperatingSystem == OSType.Windows && e.KeyCode == Keys.PageDown)  				|| (AggContext.OperatingSystem == OSType.Mac && e.KeyCode == Keys.Clear)"  is complex.
Complex Conditional,MatterHackers.MatterControl,PrintLevelingPlane,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrintLevelingPlane.cs,ApplyLeveling,The conditional expression  "(lineBeingSent.StartsWith("G0") || lineBeingSent.StartsWith("G1"))  				&& lineBeingSent.Length > 2  				&& lineBeingSent[2] == ' '"  is complex.
Complex Conditional,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The conditional expression  "output  					&& (lineWithoutChecksum.StartsWith("G0 ") || lineWithoutChecksum.StartsWith("G1 "))  					&& !UserSettings.Instance.Fields.GetBool(UserSettingsKey.TerminalShowMovementRequests' true)"  is complex.
Complex Conditional,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The conditional expression  "!output  					&& (lineWithoutChecksum.StartsWith("T") || lineWithoutChecksum.StartsWith("ok T"))  					&& !UserSettings.Instance.Fields.GetBool(UserSettingsKey.TerminalShowTempResponse' true)"  is complex.
Complex Conditional,MatterHackers.MatterControl,TextScrollWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TextScrollWidget.cs,OnKeyDown,The conditional expression  "!keyEvent.Handled  				&& !keyEvent.Control  				&& !keyEvent.Alt  				&& !keyEvent.Shift"  is complex.
Complex Conditional,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,OnMouseMove,The conditional expression  "(extension != "" && ApplicationSettings.ValidFileExtensions.Contains(extension))  						|| extension == ".GCODE"  						|| extension == ".ZIP""  is complex.
Complex Conditional,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,SystemWindow_KeyDown,The conditional expression  "e.KeyCode == Keys.Enter  				&& this.AcceptButton != null  				&& this.AcceptButton.Visible  				&& this.AcceptButton.Enabled"  is complex.
Complex Conditional,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,ProcessTree,The conditional expression  "item.Name == guideKey  						|| (guideKey != null  							&& item.ArticleKey == guideKey  							&& ApplicationController.Instance.HelpArticlesByID.ContainsKey(guideKey))"  is complex.
Complex Conditional,MatterHackers.MatterControl,SelectablePrinterPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\Printer\OpenPrinterPage.cs,SelectablePrinterPage,The conditional expression  "e is MouseEventArgs mouseEvent  					&& mouseEvent.Button == MouseButtons.Left  						&& mouseEvent.Clicks == 2  						&& treeView?.SelectedNode is TreeNode treeNode"  is complex.
Complex Conditional,MatterHackers.MatterControl,ProjectFileHandler,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\ProjectFileHandler.cs,ImportFromProjectArchive,The conditional expression  "!string.IsNullOrWhiteSpace(zipEntry.Name) &&  							(zipEntry.Name == "manifest.json"  							|| ApplicationSettings.ValidFileExtensions.Contains(sourceExtension)  							|| sourceExtension == ".GCODE")"  is complex.
Complex Conditional,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,ShowTempChangeProgress,The conditional expression  "(bedTargetTemp == 0 || bedDoneText.Visible)  				&& (targetHotendTemps.All(i => i == 0) || hotEndDoneTexts.All(i => i.Visible))  				&& !HasBeenClosed"  is complex.
Complex Conditional,MatterHackers.MatterControl.CustomWidgets,FolderBreadCrumbWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetContainer,The conditional expression  "this.Parent != null  					&& this.Width > 0  					&& this.Children.Count > 4  					&& this.GetChildrenBoundsIncludingMargins().Width > (this.Width - 20)"  is complex.
Complex Conditional,MatterHackers.MatterControl.CustomWidgets,VerticalResizeContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ResizeContainer\VerticalResizeContainer.cs,OnMouseDown,The conditional expression  "(grabSide == GrabBarSide.Left && mouseEvent.Position.X < LocalBounds.Left + this.SplitterWidth)  				|| (grabSide == GrabBarSide.Right && mouseEvent.Position.X > LocalBounds.Right - this.SplitterWidth)"  is complex.
Complex Conditional,MatterHackers.MatterControl.CustomWidgets,VerticalResizeContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ResizeContainer\VerticalResizeContainer.cs,OnMouseMove,The conditional expression  "(grabSide == GrabBarSide.Left && mouseEvent.Position.X < LocalBounds.Left + this.SplitterWidth)  				|| (grabSide == GrabBarSide.Right && mouseEvent.Position.X > LocalBounds.Right - this.SplitterWidth)"  is complex.
Complex Conditional,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ShowRightClickMenu,The conditional expression  "this.HasMenu  				&& this.MenuActions?.Any() == true  				&& (hitRegion.Contains(mouseEvent.Position)  					|| mouseEvent.Button == MouseButtons.Right)"  is complex.
Complex Conditional,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,SetSizedThumbnail,The conditional expression  "thumbnail != null  				&& this.imageWidget != null  				&& (this.imageWidget.Image == null  				|| !thumbnail.Equals(this.imageWidget.Image' 5))"  is complex.
Complex Conditional,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,OnMouseMove,The conditional expression  "mouseDownInBounds && delta.Length > 40  				&& view3DWidget != null  				&& !(listViewItem.Model is MissingFileItem)"  is complex.
Complex Conditional,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,OnClick,The conditional expression  "this.HasMenu  				&& listViewItem?.ListView?.MenuActions?.Any() == true  				&& (hitRegion.Contains(mouseEvent.Position)  					|| mouseEvent.Button == MouseButtons.Right)"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,CurveObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CurveObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,MirrorObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\MirrorObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,PinchObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\PinchObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,Rebuild,The conditional expression  "RangeStart < 0  				|| RangeStart > 1  				|| RangeEnd < 0  				|| RangeEnd > 1  				|| RangeStart > RangeEnd - minSeparation"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,LinearExtrudeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\LinearExtrudeObject3D.cs,OnInvalidate,The conditional expression  "(eventArgs.InvalidateType.HasFlag(InvalidateType.Path)  					||  eventArgs.InvalidateType.HasFlag(InvalidateType.Children))  				&& eventArgs.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Path)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,TextObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TextObject3D.cs,OnInvalidate,The conditional expression  "(invalidateArgs.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateArgs.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateArgs.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateArgs.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,TextPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TextPathObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,SupportColumn,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,Union,The conditional expression  "this[i].start <= other[j].end + minimumSupportHeight  							&& this[i].end >= other[j].start - minimumSupportHeight  							&& (this[i].start > other[j].start || this[i].end < other[j].end)"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,SupportColumn,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,RemoveOverLaps,The conditional expression  "this[i].start <= this[j].end + minimumSupportHeight  							&& this[i].end >= this[j].start - minimumSupportHeight  							&& (this[i].start >= this[j].start || this[i].end <= this[j].end)"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,HitPlanes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,Sort,The conditional expression  "((a.Top(maxOverHangAngle) && b.Bottom(maxOverHangAngle)) || (a.Bottom(maxOverHangAngle) && b.Top(maxOverHangAngle)))  						&& a.Z < b.Z + MinimumSupportHeight / 2  						&& a.Z > b.Z - MinimumSupportHeight / 2"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools,HitPlanes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,Simplify,The conditional expression  "(Count > 0 && this[0].Top(maxOverHangAngle)  					&& this[0].Z > 0)  					|| lastRemoveWasBottom"  is complex.
Complex Conditional,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleGrade2.cs,ConvertMappingStringToList,The conditional expression  "keyConversionPair.Length == 2 && keyConversionPair[0] != null && keyConversionPair[0].Length > 0 && keyConversionPair[1] != null && keyConversionPair[1].Length > 0"  is complex.
Complex Conditional,MatterHackers.MatterControl.Library,FileSystemFileItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\FileSystem\FileSystemFileItem.cs,GetStream,The conditional expression  "File.Exists(this.Path)  				&& (ApplicationController.Instance.IsLoadableFile(this.Path)  					|| (System.IO.Path.GetExtension(this.Path) is string extension  						&& string.Equals(extension' ".zip"' StringComparison.OrdinalIgnoreCase)))"  is complex.
Complex Conditional,MatterHackers.MatterControl.Library,LibraryConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryConfig.cs,SortOnName,The conditional expression  "x != null && x.Name != null  				&& y != null && y.Name != null"  is complex.
Complex Conditional,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,OnMouseMove,The conditional expression  "(DeltaAngle(0' SnappedRotationAngle) < 0  							&& DeltaAngle(0' lastSnappedRotation) > 0  							&& Math.Abs(DeltaAngle(0' lastSnappedRotation)) < 1)  							|| (DeltaAngle(0' SnappedRotationAngle) > 0  							&& DeltaAngle(0' lastSnappedRotation) < 0  							&& Math.Abs(DeltaAngle(0' lastSnappedRotation)) < 1)"  is complex.
Complex Conditional,MatterHackers.MatterControl.Plugins.Lithophane,LithophaneObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\LithophaneObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.HasFlag(InvalidateType.Children)  				|| invalidateArgs.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateArgs.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateArgs.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow.View3D,CombineObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CombineObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow.View3D,IntersectionObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\IntersectionObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D_2.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractObject3D_2.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\FitToBoundsObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,RotateObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\RotateObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,OnInvalidate,The conditional expression  "invalidateType.InvalidateType.HasFlag(InvalidateType.Properties)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Children)"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,UpdateBoundsItem,The conditional expression  "boundsSize.X != 0 && boundsSize.Y != 0 && boundsSize.Z != 0  					&& (fitSize != boundsSize  					|| fitAabb.Center != transformAabb.Center)"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,FitToCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToCylinderObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,FitToCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToCylinderObject3D.cs,OnInvalidate,The conditional expression  "invalidateType.InvalidateType.HasFlag(InvalidateType.Properties)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Children)"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,OperationSourceContainerObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\OperationSourceObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Color)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.OutputType))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,InflatePathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Path\InflatePathObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Path))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,SmoothPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Path\SmoothPathObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Path))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,RotateObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\RotateObject3D_2.cs,OnInvalidate,The conditional expression  "(invalidateArgs.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateArgs.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateArgs.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateArgs.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,ScaleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ScaleObject3D.cs,OnInvalidate,The conditional expression  "(invalidateArgs.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateArgs.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateArgs.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateArgs.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.DesignTools.Operations,TranslateObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TranslateObject3D.cs,OnInvalidate,The conditional expression  "(invalidateType.InvalidateType.HasFlag(InvalidateType.Children)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Matrix)  				|| invalidateType.InvalidateType.HasFlag(InvalidateType.Mesh))  				&& invalidateType.Source != this  				&& !RebuildLocked"  is complex.
Complex Conditional,MatterHackers.MatterControl.PrintLibrary,HardwareTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\HardwareTabPage.cs,HardwareTabPage,The conditional expression  "e is MouseEventArgs mouseEvent  					&& s is GuiWidget clickedWidget  					&& mouseEvent.Button == MouseButtons.Left  						&& mouseEvent.Clicks == 2"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The conditional expression  "(content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all")"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,Settings_SettingChanged,The conditional expression  "settingsKey == SettingsKey.t0_inset  				|| settingsKey == SettingsKey.t1_inset  				|| settingsKey == SettingsKey.bed_size  				|| settingsKey == SettingsKey.print_center  				|| settingsKey == SettingsKey.extruder_count  				|| settingsKey == SettingsKey.bed_shape"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow,SystemWindowExtension,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SystemWindowExtension.cs,ShowPopover,The conditional expression  "(popup.AltMate.Right && altScreenPosition.X > -15)  							|| (popup.AltMate.Left && altScreenPosition.X + popup.Widget.Width < systemWindow.Width)"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow,SystemWindowExtension,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SystemWindowExtension.cs,ShowPopup,The conditional expression  "!popup.Widget.ContainsFocus  						&& !specialChildHasFocus  						&& !descendantIsHoldingOpen  						&& !PopupWidget.DebugKeepOpen"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,Settings_SettingChanged,The conditional expression  "settingsKey == SettingsKey.t0_inset  				|| settingsKey == SettingsKey.t1_inset  				|| settingsKey == SettingsKey.bed_size  				|| settingsKey == SettingsKey.print_center"  is complex.
Complex Conditional,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,OnMouseDown,The conditional expression  "mouseEvent.Button == MouseButtons.Left  					&& viewControls3D.ActiveButton == ViewControls3DButtons.PartSelect  					&& ModifierKeys == Keys.Shift  					|| (  						TrackballTumbleWidget.TransformState == TrackBallTransformType.None  						&& ModifierKeys != Keys.Control  						&& ModifierKeys != Keys.Alt)"  is complex.
Complex Conditional,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,Printer_SettingChanged,The conditional expression  "stringEvent != null  				&& (stringEvent.Data == SettingsKey.default_material_presets  					|| (layerType == NamedSettingsLayers.Material && stringEvent.Data == SettingsKey.active_material_key)  					|| (layerType == NamedSettingsLayers.Quality && stringEvent.Data == SettingsKey.active_quality_key)  					|| stringEvent.Data == SettingsKey.layer_name)"  is complex.
Complex Conditional,MatterHackers.MatterControl.FieldValidation,ValidationMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\FieldValidation.cs,StringLooksLikeEmail,The conditional expression  "lastAtPos < lastDotPos && lastAtPos > 0 && value.IndexOf("@@") == -1 && lastDotPos > 2 && (value.Length - lastDotPos) > 2"  is complex.
Complex Conditional,JsonPath,Interpreter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\JsonPath.cs,Trace,The conditional expression  "atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')'"  is complex.
Complex Conditional,JsonPath,ReflectionValueSystem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\JsonPath.cs,GetMemberValue,The conditional expression  "value is IList list  					&& TryParseInt(member) is int i  					&& i >= 0  					&& i < list.Count"  is complex.
Complex Conditional,JsonPath,BasicValueSystem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\JsonPath.cs,GetMemberValue,The conditional expression  "value is JArray array  					&& TryParseInt(member) is int j  					 && j >= 0  					  && j < array.Count"  is complex.
Virtual Method Call from Constructor,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The constructor "AboutPage" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl,MacroDetailPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroDetailPage.cs,MacroDetailPage,The constructor "MacroDetailPage" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl,MacroListPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroListPage.cs,MacroListPage,The constructor "MacroListPage" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl,ImportSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\ImportSettingsPage.cs,ImportSettingsPage,The constructor "ImportSettingsPage" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl,SelectablePrinterPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\Printer\OpenPrinterPage.cs,SelectablePrinterPage,The constructor "SelectablePrinterPage" calls a virtual method "OnContinue".
Virtual Method Call from Constructor,MatterHackers.MatterControl,SelectablePrinterPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\Printer\OpenPrinterPage.cs,SelectablePrinterPage,The constructor "SelectablePrinterPage" calls a virtual method "OnTreeNodeDoubleClicked".
Virtual Method Call from Constructor,MatterHackers.MatterControl,SelectablePrinterPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\Printer\OpenPrinterPage.cs,SelectablePrinterPage,The constructor "SelectablePrinterPage" calls a virtual method "OnTreeNodeSelected".
Virtual Method Call from Constructor,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,DoneLoadingPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,DoneLoadingPage,The constructor "DoneLoadingPage" calls a virtual method "ClosePage".
Virtual Method Call from Constructor,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,DoneUnloadingPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,DoneUnloadingPage,The constructor "DoneUnloadingPage" calls a virtual method "ClosePage".
Virtual Method Call from Constructor,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,SelectMaterialPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\SelectMaterialPage.cs,SelectMaterialPage,The constructor "SelectMaterialPage" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The constructor "CloneSettingsPage" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PrintLibrary,SearchableTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\SearchableTreePanel.cs,SearchableTreePanel,The constructor "SearchableTreePanel" calls a virtual method "PerformSearch".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PartPreviewWindow,GCodeLayerDetailsView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeLayerDetailsView.cs,GCodeLayerDetailsView,The constructor "GCodeLayerDetailsView" calls a virtual method "GetLayerHeight".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PartPreviewWindow,GCodeLayerDetailsView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeLayerDetailsView.cs,GCodeLayerDetailsView,The constructor "GCodeLayerDetailsView" calls a virtual method "GetLayerTop".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PartPreviewWindow,OverflowMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\OverflowBar.cs,OverflowMenuButton,The constructor "OverflowMenuButton" calls a virtual method "OnExtendPopupMenu".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,SetupStepBaudRate,The constructor "SetupStepBaudRate" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,SetupStepComPortManual,The constructor "SetupStepComPortManual" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The constructor "SetupStepComPortOne" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The constructor "SetupStepComPortOne" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,SetupStepComPortTwo,The constructor "SetupStepComPortTwo" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,SetupStepMakeModelName,The constructor "SetupStepMakeModelName" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,SetupStepMakeModelName,The constructor "SetupStepMakeModelName" calls a virtual method "ChangeToPage".
Virtual Method Call from Constructor,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,TourPopover,The constructor "TourPopover" calls a virtual method "RebuildShape".
Empty Catch Block,MatterHackers.MatterControl,UpdateControlData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlData.cs,DownloadUpdateTask,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,AppContext,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,AppContext,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadCacheableAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadCacheableAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,RestoreUserTabs,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,RestoreUserTabs,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,PrintPart,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,RunningTasksConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Execute,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Initialize,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ThumbnailsConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ThumbnailsConfig.cs,LoadImage,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,MeshContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\MeshContentProvider.cs,CreateItem,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,ApplicationSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettings.cs,GetRunningClientTokens,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,RetrieveImageAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,RetrieveImageAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,RetrieveImageAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,RetrieveImageSquenceAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,RetrieveImageSquenceAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,RetrieveImageSquenceAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,RetrieveImageSquenceAsync,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,RetrieveText,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ListViewItem_DoubleClick,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.DesignTools,ImageObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\ImageObject3D.cs,LoadImage,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.Library,LibraryConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryConfig.cs,LoadItemThumbnail,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PartPreviewWindow.View3D,CombineObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CombineObject3D.cs,Rebuild,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PartPreviewWindow.View3D,IntersectionObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\IntersectionObject3D.cs,Rebuild,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PartPreviewWindow.View3D,CombineObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\CombineObject3D_2.cs,Rebuild,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PartPreviewWindow.View3D,IntersectionObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\IntersectionObject3D_2.cs,Rebuild,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D.cs,Rebuild,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D_2.cs,Rebuild,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractObject3D.cs,Rebuild,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractObject3D_2.cs,Rebuild,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.Library.Export,GCodeExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\GCodeExport.cs,Generate,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,GetExpansionItems,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,EnsureBedTexture,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.PartPreviewWindow,TabPill,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,TabPill,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,Slice,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,ClosePrinter,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,RestoreFromOemProfile,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,GetFirstValidHistoryItem,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The method has an empty catch block.
Empty Catch Block,Markdig.Agg,MarkdownWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\MarkdownWidget.cs,LoadUri,The method has an empty catch block.
Empty Catch Block,MatterHackers.MatterControl.VersionManagement,WebRequestBase<ResponseType>,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\VersionManagement\WebRequestHandler.cs,SendRequest,The method has an empty catch block.
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: this.MinimumSize = new Vector2(480 * GuiWidget.DeviceScale' 520 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: this.MinimumSize = new Vector2(480 * GuiWidget.DeviceScale' 520 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: this.WindowSize = new Vector2(500 * GuiWidget.DeviceScale' 550 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: this.WindowSize = new Vector2(500 * GuiWidget.DeviceScale' 550 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: var altHeadingRow = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Absolute'  				Height = 100'  			};
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: productTitle.AddChild(new TextWidget("MatterControl".Localize()' textColor: theme.TextColor' pointSize: 20) { Margin = new BorderDouble(right: 3) });
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: productTitle.AddChild(new TextWidget("MatterControl".Localize()' textColor: theme.TextColor' pointSize: 20) { Margin = new BorderDouble(right: 3) });
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: productTitle.AddChild(new TextWidget("TM".Localize()' textColor: theme.TextColor' pointSize: 7) { VAnchor = VAnchor.Top });
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: var spinnerPanel = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute'  				Height = 100'  				Width = 100'  			};
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: var spinnerPanel = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute'  				Height = 100'  				Width = 100'  			};
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: var spinner = new LogoSpinner(spinnerPanel' 4' 0.2' 0' rotateX: 0)  			{  				/*  				MeshColor = new Color(175' 175' 175' 255)'  				AmbientColor = new float[]  				{  					accentColor.Red0To1'  					accentColor.Green0To1'  					accentColor.Blue0To1'  					0  				}*/  			};
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: var spinner = new LogoSpinner(spinnerPanel' 4' 0.2' 0' rotateX: 0)  			{  				/*  				MeshColor = new Color(175' 175' 175' 255)'  				AmbientColor = new float[]  				{  					accentColor.Red0To1'  					accentColor.Green0To1'  					accentColor.Blue0To1'  					0  				}*/  			};
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: contentRow.AddChild(  				new WrappedTextWidget(  					"MatterControl is made possible by the team at MatterHackers and other open source software".Localize() + ":"'  					pointSize: theme.DefaultFontSize'  					textColor: theme.TextColor)  				{  					HAnchor = HAnchor.Stretch'  					Margin = new BorderDouble(0' 15)  				});
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: var licensePanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(bottom: 15)  			};
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: var linkIcon = AggContext.StaticData.LoadIcon("fa-link_16.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: var linkIcon = AggContext.StaticData.LoadIcon("fa-link_16.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,AboutPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,AboutPage,The following statement contains a magic number: var scrollable = new ScrollableWidget(autoScroll: true)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch'  				Margin = new BorderDouble(bottom: 10)'  			};
Magic Number,MatterHackers.MatterControl,LazyLicenseText,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\AboutPage.cs,LazyLicenseText,The following statement contains a magic number: this.MinimumSize = new Vector2(0' 10);
Magic Number,MatterHackers.MatterControl,CacheDirectory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CacheDirectory.cs,DeleteCacheData,The following statement contains a magic number: CleanDirectory(Path.Combine(basePath' "updates")' 30' new List<string>() { ".EXE" });
Magic Number,MatterHackers.MatterControl,CacheDirectory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CacheDirectory.cs,DeleteCacheData,The following statement contains a magic number: CleanDirectory(Path.Combine(basePath' "data"' "temp"' "gcode")' 30' new List<string>() { ".GCODE"' ".INI" });
Magic Number,MatterHackers.MatterControl,CacheDirectory,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CacheDirectory.cs,DeleteCacheData,The following statement contains a magic number: CleanDirectory(Path.Combine(basePath' "data"' "gcode")' 30' new List<string>() { ".GCODE" });
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: var contentPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch'  				Padding = 8  			};
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: var currentBuildInfo = new TextWidget("Current Build".Localize() + $" : {VersionInfo.Instance.BuildVersion}")  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(left: 5' bottom: 15' top: 20)'  				TextColor = theme.TextColor  			};
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: var currentBuildInfo = new TextWidget("Current Build".Localize() + $" : {VersionInfo.Instance.BuildVersion}")  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(left: 5' bottom: 15' top: 20)'  				TextColor = theme.TextColor  			};
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: var currentBuildInfo = new TextWidget("Current Build".Localize() + $" : {VersionInfo.Instance.BuildVersion}")  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(left: 5' bottom: 15' top: 20)'  				TextColor = theme.TextColor  			};
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: var feedLabel = new TextWidget("Update Channel".Localize()' pointSize: 12)  			{  				TextColor = theme.TextColor'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(left: 5)  			};
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: var feedLabel = new TextWidget("Update Channel".Localize()' pointSize: 12)  			{  				TextColor = theme.TextColor'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(left: 5)  			};
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: var whatsThisLink = new LinkLabel("What's this?".Localize()' theme)  			{  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(left: 6)'  			};
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: var releaseOptionsDropList = new MHDropDownList("Development"' theme' maxHeight: 200)  			{  				HAnchor = HAnchor.Fit'  			};
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: additionalInfoContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				BackgroundColor = theme.MinimalShade'  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(left: 6' top: 6)'  				Visible = false  			};
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: additionalInfoContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				BackgroundColor = theme.MinimalShade'  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(left: 6' top: 6)'  				Visible = false  			};
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: additionalInfoContainer.AddChild(  				new WrappedTextWidget("Changing your update channel will change the version of MatterControl that you receive when updating".Localize() + ":")  				{  					TextColor = theme.TextColor'  					HAnchor = HAnchor.Stretch'  					Margin = new BorderDouble(bottom: 20)  				});
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: additionalInfoContainer.AddChild(  				new WrappedTextWidget("Stable: The current release version of MatterControl (recommended)".Localize())  				{  					TextColor = theme.TextColor'  					HAnchor = HAnchor.Stretch'  					Margin = new BorderDouble(bottom: 10)  				});
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: additionalInfoContainer.AddChild(  				new WrappedTextWidget("Beta: The release candidate version of MatterControl".Localize())  				{  					TextColor = theme.TextColor'  					HAnchor = HAnchor.Stretch'  					Margin = new BorderDouble(bottom: 10)  				});
Magic Number,MatterHackers.MatterControl,CheckForUpdatesPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\CheckForUpdatesPage.cs,CheckForUpdatesPage,The following statement contains a magic number: additionalInfoContainer.AddChild(  				new WrappedTextWidget("Alpha: The in development version of MatterControl".Localize())  				{  					TextColor = theme.TextColor'  					HAnchor = HAnchor.Stretch'  					Margin = new BorderDouble(bottom: 10)  				});
Magic Number,MatterHackers.MatterControl,UpdateControlData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlData.cs,DownloadProgressChanged,The following statement contains a magic number: this.DownloadPercent = (int)(e.BytesReceived * 100 / downloadSize);
Magic Number,MatterHackers.MatterControl,UpdateControlData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlData.cs,UpdateControlData,The following statement contains a magic number: var checkUpdatesDaily = new System.Timers.Timer(24 * 60 * 60 * 1000);
Magic Number,MatterHackers.MatterControl,UpdateControlData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlData.cs,UpdateControlData,The following statement contains a magic number: var checkUpdatesDaily = new System.Timers.Timer(24 * 60 * 60 * 1000);
Magic Number,MatterHackers.MatterControl,UpdateControlData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlData.cs,UpdateControlData,The following statement contains a magic number: var checkUpdatesDaily = new System.Timers.Timer(24 * 60 * 60 * 1000);
Magic Number,MatterHackers.MatterControl,UpdateControlData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlData.cs,UpdateControlData,The following statement contains a magic number: var checkUpdatesDaily = new System.Timers.Timer(24 * 60 * 60 * 1000);
Magic Number,MatterHackers.MatterControl,UpdateControlData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlData.cs,InstallUpdate,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,MatterHackers.MatterControl,UpdateControlView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\UpdateControlView.cs,UpdateControlView,The following statement contains a magic number: this.Padding = theme.ToolbarPadding.Clone(left: 8);
Magic Number,MatterHackers.MatterControl,AppContext,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,AppContext,The following statement contains a magic number: DefaultThumbView.ThumbColor = new Color(themeset.Theme.TextColor' 30);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetActionMenuForSceneItem,The following statement contains a magic number: var actions = new[]  			{  				new ActionSeparator()'  				workspaceActions["Cut"]'  				workspaceActions["Copy"]'  				workspaceActions["Paste"]'  				new ActionSeparator()'  				new NamedAction()  				{  			 		Title = "Save As".Localize()'  			 		Action = () => UiThread.RunOnIdle(() =>  					{  						DialogWindow.Show(  							new SaveAsPage(  								async (newName' destinationContainer) =>  								{  									// Save to the destination provider  									if (destinationContainer is ILibraryWritableContainer writableContainer)  									{  										// Wrap stream with ReadOnlyStream library item and add to container  										writableContainer.Add(new[]  										{  											new InMemoryLibraryItem(selectedItem)  											{  												Name = newName  											}  										});    										destinationContainer.Dispose();  									}  								}));  					})'  			 		IsEnabled = () => sceneContext.EditableScene  				}'  				new NamedAction()  				{  					ID = "Export"'  					Title = "Export".Localize()'  					Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  					Action = () =>  					{  						ApplicationController.Instance.ExportLibraryItems(  							new[] { new InMemoryLibraryItem(selectedItem) }'  							centerOnBed: false'  							printer: printer);  					}  				}'  				new ActionSeparator()'  				workspaceActions["Delete"]  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetActionMenuForSceneItem,The following statement contains a magic number: var actions = new[]  			{  				new ActionSeparator()'  				workspaceActions["Cut"]'  				workspaceActions["Copy"]'  				workspaceActions["Paste"]'  				new ActionSeparator()'  				new NamedAction()  				{  			 		Title = "Save As".Localize()'  			 		Action = () => UiThread.RunOnIdle(() =>  					{  						DialogWindow.Show(  							new SaveAsPage(  								async (newName' destinationContainer) =>  								{  									// Save to the destination provider  									if (destinationContainer is ILibraryWritableContainer writableContainer)  									{  										// Wrap stream with ReadOnlyStream library item and add to container  										writableContainer.Add(new[]  										{  											new InMemoryLibraryItem(selectedItem)  											{  												Name = newName  											}  										});    										destinationContainer.Dispose();  									}  								}));  					})'  			 		IsEnabled = () => sceneContext.EditableScene  				}'  				new NamedAction()  				{  					ID = "Export"'  					Title = "Export".Localize()'  					Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  					Action = () =>  					{  						ApplicationController.Instance.ExportLibraryItems(  							new[] { new InMemoryLibraryItem(selectedItem) }'  							centerOnBed: false'  							printer: printer);  					}  				}'  				new ActionSeparator()'  				workspaceActions["Delete"]  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,MakeGrayscale,The following statement contains a magic number: int r = buffer[destIndex + 2];
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,MakeGrayscale,The following statement contains a magic number: int c = (r * 77) + (g * 151) + (b * 28);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,MakeGrayscale,The following statement contains a magic number: int c = (r * 77) + (g * 151) + (b * 28);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,MakeGrayscale,The following statement contains a magic number: int c = (r * 77) + (g * 151) + (b * 28);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,MakeGrayscale,The following statement contains a magic number: byte gray = (byte)(c >> 8);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,MakeGrayscale,The following statement contains a magic number: buffer[destIndex + 2] = gray;
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,MakeGrayscale,The following statement contains a magic number: destIndex += 4;
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: registeredSceneOperations = new List<SceneSelectionOperation>()  			{  				new SceneSelectionOperation()  				{  					OperationType = typeof(GroupObject3D)'    					TitleResolver = () => "Group".Localize()'  					Action = (sceneContext) =>  					{  						var scene = sceneContext.Scene;  						var selectedItem = scene.SelectedItem;  						scene.SelectedItem = null;    						var newGroup = new GroupObject3D();  						// When grouping items' move them to be centered on their bounding box  						newGroup.Children.Modify((gChildren) =>  						{  							selectedItem.Clone().Children.Modify((sChildren) =>  							{  								var center = selectedItem.GetAxisAlignedBoundingBox().Center;    								foreach (var child in sChildren)  								{  									child.Translate(-center.X' -center.Y' 0);  									gChildren.Add(child);  								}    								newGroup.Translate(center.X' center.Y' 0);  							});  						});    						scene.UndoBuffer.AddAndDo(new ReplaceCommand(selectedItem.Children.ToList()' new[] { newGroup }));    						newGroup.MakeNameNonColliding();    						scene.SelectedItem = newGroup;  					}'  					IsEnabled = (sceneContext) => sceneContext.Scene is InteractiveScene scene  						&& scene.SelectedItem != null  						&& scene.SelectedItem is SelectionGroupObject3D  						&& scene.SelectedItem.Children.Count > 1'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("group.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Ungroup".Localize()'  					Action = (sceneContext) => sceneContext.Scene.UngroupSelection()'  					IsEnabled = (sceneContext) =>  					{  						var selectedItem = sceneContext.Scene.SelectedItem;  						if (selectedItem != null)  						{  							return selectedItem is GroupObject3D  								|| selectedItem.GetType() == typeof(Object3D)  								|| selectedItem.CanFlatten;  						}    						return false;  					}'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("ungroup.png"' 16' 16).SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Duplicate".Localize()'  					Action = (sceneContext) => sceneContext.DuplicateItem(5)'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("duplicate.png").SetPreMultiply()'  				}'  				new SceneSelectionOperation()  				{  					TitleResolver = () => "Remove".Localize()'  					Action = (sceneContext) => sceneContext.Scene.DeleteSelection()'  					IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  					Icon = (invertIcon) => AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  				}'  				new SceneSelectionSeparator()'  				new OperationGroup("Align")  				{  					TitleResolver = () => "Align".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Arrange All Parts".Localize()'  							Action = async (sceneContext) =>  							{  								await sceneContext.Scene.AutoArrangeChildren(new Vector3(sceneContext.BedCenter)).ConfigureAwait(false);  							}'  							IsEnabled = (sceneContext) => sceneContext.EditableScene && sceneContext.Scene.VisibleMeshes().Any()'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("arrange_all.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							TitleResolver = () => "Lay Flat".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								if (selectedItem != null)  								{  									scene.MakeLowestFaceFlat(selectedItem);  								}  							}'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("lay_flat.png"' 16' 16).SetPreMultiply()'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								var align = new AlignObject3D();  								align.AddSelectionAsChildren(scene' selectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("align_left_dark.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  					}'  				}'  				new OperationGroup("Booleans")  				{  					TitleResolver = () => "Booleans".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CombineObject3D_2)'  							TitleResolver = () => "Combine".Localize()'  							Action = (sceneContext) => new CombineObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("combine.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractObject3D_2)'  							TitleResolver = () => "Subtract".Localize()'  							Action = (sceneContext) => new SubtractObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && sceneContext.Scene.SelectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(IntersectionObject3D_2)'  							TitleResolver = () => "Intersect".Localize()'  							Action = (sceneContext) => new IntersectionObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("intersect.png")'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubtractAndReplaceObject3D_2)'  							TitleResolver = () => "Subtract & Replace".Localize()'  							Action = (sceneContext) => new SubtractAndReplaceObject3D_2().WrapSelectedItemAndSelect(sceneContext.Scene)'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("subtract_and_replace.png").SetPreMultiply()'  							IsEnabled = (sceneContext) =>  							{  								var selectedItem = sceneContext.Scene.SelectedItem;  								return selectedItem != null && selectedItem.VisibleMeshes().Count() > 1;  							}'  						}  					}  				}'  				new OperationGroup("Array")  				{  					Collapse = true'  					TitleResolver = () => "Array".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayLinearObject3D)'  							TitleResolver = () => "Linear Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayLinearObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_linear.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayRadialObject3D)'  							TitleResolver = () => "Radial Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayRadialObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_radial.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(ArrayAdvancedObject3D)'  							TitleResolver = () => "Advanced Array".Localize()'  							Action = (sceneContext) =>  							{  								var array = new ArrayAdvancedObject3D();  								array.AddSelectionAsChildren(sceneContext.Scene' sceneContext.Scene.SelectedItem);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("array_advanced.png").SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}  					}  				}'  				new OperationGroup("ModifyMesh")  				{  					Collapse = true'  					TitleResolver = () => "Mesh Modifiers".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(CurveObject3D_2)'  							TitleResolver = () => "Curve".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new CurveObject3D_2();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("curve.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(PinchObject3D_2)'  							TitleResolver = () => "Pinch".Localize()'  							Action = (sceneContext) =>  							{  								var pinch = new PinchObject3D_2();  								pinch.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("pinch.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(TwistObject3D)'  							TitleResolver = () => "Twist".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new TwistObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SubdivideFacesObject3D)'  							TitleResolver = () => "Subdivide".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SubdivideFacesObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(SplitObject3D)'  							TitleResolver = () => "Split".Localize()'  							Action = (sceneContext) =>  							{  								var curve = new SplitObject3D();  								curve.WrapSelectedItemAndSelect(sceneContext.Scene);  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("twist.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null'  						}  					}  				}'  				new OperationGroup("Other")  				{  					TitleResolver = () => "Other".Localize()'  					StickySelection = true'  					Operations = new List<SceneSelectionOperation>()  					{  						new SceneSelectionOperation()  						{  							OperationType = typeof(AlignObject3D)'  							TitleResolver = () => "Dual Extrusion Align".Localize()'  							Action = (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;    								if (selectedItem is SelectionGroupObject3D selectionGroup)  								{  									var first = selectionGroup.Children.FirstOrDefault();  									var center = first.GetCenter();  									var startMatrix = first.Matrix;  									first.Matrix = Matrix4X4.Identity;  									var offset = center - first.GetCenter();  									first.Matrix = startMatrix;    									var transformData = selectionGroup.Children.Select(c => new TransformData()  									{  										TransformedObject = c'  										UndoTransform = c.Matrix'  										RedoTransform = Matrix4X4.CreateTranslation(offset)  									}).ToList();    									scene.UndoBuffer.AddAndDo(new TransformCommand(transformData));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("dual_align.png"' 16' 16' invertIcon).SetPreMultiply()'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem is SelectionGroupObject3D'  						}'  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToBoundsObject3D_2)'  							TitleResolver = () => "Fit to Bounds".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToBoundsObject3D_2.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'    		#if DEBUG  						new SceneSelectionOperation()  						{  							OperationType = typeof(FitToCylinderObject3D)'  							TitleResolver = () => "Fit to Cylinder".Localize()'  							Action = async (sceneContext) =>  							{  								var scene = sceneContext.Scene;  								var selectedItem = scene.SelectedItem;  								using (new SelectionMaintainer(scene))  								{  									var fit = await FitToCylinderObject3D.Create(selectedItem.Clone());  									fit.MakeNameNonColliding();    									scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { selectedItem }' new[] { fit }));  								}  							}'  							Icon = (invertIcon) => AggContext.StaticData.LoadIcon("fit.png"' 16' 16' invertIcon)'  							IsEnabled = (sceneContext) => sceneContext.Scene.SelectedItem != null && !(sceneContext.Scene.SelectedItem is SelectionGroupObject3D)'  						}'  #endif  					}'  				}'  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: operationIconsByType.Add(typeof(ImageObject3D)' (invertIcon) => AggContext.StaticData.LoadIcon("140.png"' 16' 16' invertIcon));
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BuildSceneOperations,The following statement contains a magic number: operationIconsByType.Add(typeof(ImageObject3D)' (invertIcon) => AggContext.StaticData.LoadIcon("140.png"' 16' 16' invertIcon));
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetWorkspaceActions,The following statement contains a magic number: var actions = new[]  			{  				new NamedAction()  				{  					ID = "Print"'  					Title = "Print".Localize()'  					Shortcut = "Ctrl+P"'  					Action = view3DWidget.PushToPrinterAndPrint'  					IsEnabled = () => sceneContext.EditableScene  						|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  							&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  				}'  				new NamedAction()  				{  					ID = "Cut"'  					Title = "Cut".Localize()'  					Shortcut = "Ctrl+X"'  					Action = () =>  					{  						sceneContext.Scene.Cut();  					}'  					IsEnabled = () => sceneContext.Scene.SelectedItem != null  				}'  				new NamedAction()  				{  					ID = "Copy"'  					Title = "Copy".Localize()'  					Shortcut = "Ctrl+C"'  					Action = () =>  					{  						sceneContext.Scene.Copy();  					}'  					IsEnabled = () => sceneContext.Scene.SelectedItem != null  				}'  				new NamedAction()  				{  					ID = "Paste"'  					Title = "Paste".Localize()'  					Shortcut = "Ctrl+V"'  					Action = () =>  					{  						sceneContext.Paste();  					}'  					IsEnabled = () => Clipboard.Instance.ContainsImage || Clipboard.Instance.GetText() == "!--IObjectSelection--!"  				}'  				new NamedAction()  				{  					ID = "Delete"'  					Icon = AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  					Title = "Remove".Localize()'  					Action = sceneContext.Scene.DeleteSelection'  					IsEnabled = () => sceneContext.Scene.SelectedItem != null  				}'  				new NamedAction()  				{  					ID = "Export"'  					Title = "Export".Localize()'  					Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' invertIcons)'  					Action = () =>  					{  						ApplicationController.Instance.ExportLibraryItems(  							new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  							centerOnBed: false'  							printer: printer);  					}'  					IsEnabled = () => sceneContext.EditableScene  						|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  							&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  				}'  				new NamedAction()  				{  					ID = "Save"'  					Title = "Save".Localize()'  					Shortcut = "Ctrl+S"'  					Action = () =>  					{  						ApplicationController.Instance.Tasks.Execute("Saving".Localize()' printer' sceneContext.SaveChanges).ConfigureAwait(false);  					}'  					IsEnabled = () => sceneContext.EditableScene  				}'  				new NamedAction()  				{  					ID = "SaveAs"'  					Title = "Save As".Localize()'  					Action = () => UiThread.RunOnIdle(() =>  					{  						DialogWindow.Show(  							new SaveAsPage(  								async (newName' destinationContainer) =>  								{  									// Save to the destination provider  									if (destinationContainer is ILibraryWritableContainer writableContainer)  									{  										// Wrap stream with ReadOnlyStream library item and add to container  										writableContainer.Add(new[]  										{  											new InMemoryLibraryItem(sceneContext.Scene)  											{  												Name = newName  											}  										});    										destinationContainer.Dispose();  									}  								}));  					})'  					IsEnabled = () => sceneContext.EditableScene  				}'  				new NamedAction()  				{  					ID = "ArrangeAll"'  					Title = "Arrange All Parts".Localize()'  					Action = async () =>  					{  						await sceneContext.Scene.AutoArrangeChildren(view3DWidget.BedCenter).ConfigureAwait(false);  					}'  					IsEnabled = () => sceneContext.EditableScene  				}'  				new NamedAction()  				{  					ID = "ClearBed"'  					Title = "Clear Bed".Localize()'  					Action = () =>  					{  						UiThread.RunOnIdle(() =>  						{  							view3DWidget.ClearPlate();  						});  					}  				}  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetWorkspaceActions,The following statement contains a magic number: var actions = new[]  			{  				new NamedAction()  				{  					ID = "Print"'  					Title = "Print".Localize()'  					Shortcut = "Ctrl+P"'  					Action = view3DWidget.PushToPrinterAndPrint'  					IsEnabled = () => sceneContext.EditableScene  						|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  							&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  				}'  				new NamedAction()  				{  					ID = "Cut"'  					Title = "Cut".Localize()'  					Shortcut = "Ctrl+X"'  					Action = () =>  					{  						sceneContext.Scene.Cut();  					}'  					IsEnabled = () => sceneContext.Scene.SelectedItem != null  				}'  				new NamedAction()  				{  					ID = "Copy"'  					Title = "Copy".Localize()'  					Shortcut = "Ctrl+C"'  					Action = () =>  					{  						sceneContext.Scene.Copy();  					}'  					IsEnabled = () => sceneContext.Scene.SelectedItem != null  				}'  				new NamedAction()  				{  					ID = "Paste"'  					Title = "Paste".Localize()'  					Shortcut = "Ctrl+V"'  					Action = () =>  					{  						sceneContext.Paste();  					}'  					IsEnabled = () => Clipboard.Instance.ContainsImage || Clipboard.Instance.GetText() == "!--IObjectSelection--!"  				}'  				new NamedAction()  				{  					ID = "Delete"'  					Icon = AggContext.StaticData.LoadIcon("remove.png").SetPreMultiply()'  					Title = "Remove".Localize()'  					Action = sceneContext.Scene.DeleteSelection'  					IsEnabled = () => sceneContext.Scene.SelectedItem != null  				}'  				new NamedAction()  				{  					ID = "Export"'  					Title = "Export".Localize()'  					Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' invertIcons)'  					Action = () =>  					{  						ApplicationController.Instance.ExportLibraryItems(  							new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  							centerOnBed: false'  							printer: printer);  					}'  					IsEnabled = () => sceneContext.EditableScene  						|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  							&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  				}'  				new NamedAction()  				{  					ID = "Save"'  					Title = "Save".Localize()'  					Shortcut = "Ctrl+S"'  					Action = () =>  					{  						ApplicationController.Instance.Tasks.Execute("Saving".Localize()' printer' sceneContext.SaveChanges).ConfigureAwait(false);  					}'  					IsEnabled = () => sceneContext.EditableScene  				}'  				new NamedAction()  				{  					ID = "SaveAs"'  					Title = "Save As".Localize()'  					Action = () => UiThread.RunOnIdle(() =>  					{  						DialogWindow.Show(  							new SaveAsPage(  								async (newName' destinationContainer) =>  								{  									// Save to the destination provider  									if (destinationContainer is ILibraryWritableContainer writableContainer)  									{  										// Wrap stream with ReadOnlyStream library item and add to container  										writableContainer.Add(new[]  										{  											new InMemoryLibraryItem(sceneContext.Scene)  											{  												Name = newName  											}  										});    										destinationContainer.Dispose();  									}  								}));  					})'  					IsEnabled = () => sceneContext.EditableScene  				}'  				new NamedAction()  				{  					ID = "ArrangeAll"'  					Title = "Arrange All Parts".Localize()'  					Action = async () =>  					{  						await sceneContext.Scene.AutoArrangeChildren(view3DWidget.BedCenter).ConfigureAwait(false);  					}'  					IsEnabled = () => sceneContext.EditableScene  				}'  				new NamedAction()  				{  					ID = "ClearBed"'  					Title = "Clear Bed".Localize()'  					Action = () =>  					{  						UiThread.RunOnIdle(() =>  						{  							view3DWidget.ClearPlate();  						});  					}  				}  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BlinkTab,The following statement contains a magic number: guiWidget.Descendants<TextWidget>().FirstOrDefault().FlashBackground(theme.PrimaryAccentColor.WithContrast(theme.TextColor' 6).ToColor());
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetProcessingSequence,The following statement contains a magic number: int size = (int)Math.Round(80 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetProcessingSequence,The following statement contains a magic number: double radius = size / 8.0;
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetProcessingSequence,The following statement contains a magic number: var frameCount = 30.0;
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetProcessingSequence,The following statement contains a magic number: var strokeWidth = 4 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetProcessingSequence,The following statement contains a magic number: graphics.Render(new Stroke(new Arc(frame.Width / 2'  					frame.Height / 2'  					(size / 4) - (strokeWidth / 2)'  					(size / 4) - (strokeWidth / 2)'  					MathHelper.Tau / frameCount * i'  					(MathHelper.Tau / 4) + (MathHelper.Tau / frameCount * i))'  					strokeWidth)' color);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetProcessingSequence,The following statement contains a magic number: graphics.Render(new Stroke(new Arc(frame.Width / 2'  					frame.Height / 2'  					(size / 4) - (strokeWidth / 2)'  					(size / 4) - (strokeWidth / 2)'  					MathHelper.Tau / frameCount * i'  					(MathHelper.Tau / 4) + (MathHelper.Tau / frameCount * i))'  					strokeWidth)' color);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetProcessingSequence,The following statement contains a magic number: graphics.Render(new Stroke(new Arc(frame.Width / 2'  					frame.Height / 2'  					(size / 4) - (strokeWidth / 2)'  					(size / 4) - (strokeWidth / 2)'  					MathHelper.Tau / frameCount * i'  					(MathHelper.Tau / 4) + (MathHelper.Tau / frameCount * i))'  					strokeWidth)' color);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetProcessingSequence,The following statement contains a magic number: graphics.Render(new Stroke(new Arc(frame.Width / 2'  					frame.Height / 2'  					(size / 4) - (strokeWidth / 2)'  					(size / 4) - (strokeWidth / 2)'  					MathHelper.Tau / frameCount * i'  					(MathHelper.Tau / 4) + (MathHelper.Tau / frameCount * i))'  					strokeWidth)' color);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetProcessingSequence,The following statement contains a magic number: graphics.Render(new Stroke(new Arc(frame.Width / 2'  					frame.Height / 2'  					(size / 4) - (strokeWidth / 2)'  					(size / 4) - (strokeWidth / 2)'  					MathHelper.Tau / frameCount * i'  					(MathHelper.Tau / 4) + (MathHelper.Tau / frameCount * i))'  					strokeWidth)' color);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetProcessingSequence,The following statement contains a magic number: graphics.Render(new Stroke(new Arc(frame.Width / 2'  					frame.Height / 2'  					(size / 4) - (strokeWidth / 2)'  					(size / 4) - (strokeWidth / 2)'  					MathHelper.Tau / frameCount * i'  					(MathHelper.Tau / 4) + (MathHelper.Tau / frameCount * i))'  					strokeWidth)' color);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,GetProcessingSequence,The following statement contains a magic number: graphics.Render(new Stroke(new Arc(frame.Width / 2'  					frame.Height / 2'  					(size / 4) - (strokeWidth / 2)'  					(size / 4) - (strokeWidth / 2)'  					MathHelper.Tau / frameCount * i'  					(MathHelper.Tau / 4) + (MathHelper.Tau / frameCount * i))'  					strokeWidth)' color);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: ScrollBar.ScrollBarWidth = 8 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: ScrollBar.GrowThumbBy = 2;
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "Translate"'  					Title = "Translate".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(TranslateObject3D)'  					Operation = (sceneItem' scene) =>  					{  						var items = scene.GetSelectedItems();  						using (new SelectionMaintainer(scene))  						{  							var translate = new TranslateObject3D();  							translate.WrapItems(items' scene.UndoBuffer);  						}    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon(Path.Combine("ViewTransformControls"' "translate.png")' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "Translate"'  					Title = "Translate".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(TranslateObject3D)'  					Operation = (sceneItem' scene) =>  					{  						var items = scene.GetSelectedItems();  						using (new SelectionMaintainer(scene))  						{  							var translate = new TranslateObject3D();  							translate.WrapItems(items' scene.UndoBuffer);  						}    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon(Path.Combine("ViewTransformControls"' "translate.png")' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "Rotate"'  					Title = "Rotate".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(RotateObject3D_2)'  					Operation = (sceneItem' scene) =>  					{  						var items = scene.GetSelectedItems();  						using (new SelectionMaintainer(scene))  						{  							var rotate = new RotateObject3D_2();  							rotate.WrapItems(items' scene.UndoBuffer);  						}    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon(Path.Combine("ViewTransformControls"' "rotate.png")' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "Rotate"'  					Title = "Rotate".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(RotateObject3D_2)'  					Operation = (sceneItem' scene) =>  					{  						var items = scene.GetSelectedItems();  						using (new SelectionMaintainer(scene))  						{  							var rotate = new RotateObject3D_2();  							rotate.WrapItems(items' scene.UndoBuffer);  						}    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon(Path.Combine("ViewTransformControls"' "rotate.png")' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "Scale"'  					Title = "Scale".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(ScaleObject3D)'  					Operation = (sceneItem' scene) =>  					{  						var items = scene.GetSelectedItems();  						using (new SelectionMaintainer(scene))  						{  							var scale = new ScaleObject3D();  							scale.WrapItems(items' scene.UndoBuffer);  						}    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("scale_32x32.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "Scale"'  					Title = "Scale".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(ScaleObject3D)'  					Operation = (sceneItem' scene) =>  					{  						var items = scene.GetSelectedItems();  						using (new SelectionMaintainer(scene))  						{  							var scale = new ScaleObject3D();  							scale.WrapItems(items' scene.UndoBuffer);  						}    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("scale_32x32.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "ImageConverter"'  					Title = "Image Converter".Localize()'  					MappedTypes = new List<Type> { typeof(ImageObject3D) }'  					ResultType = typeof(ComponentObject3D)'  					Operation = (sceneItem' scene) =>  					{  						var imageObject = sceneItem.Clone() as ImageObject3D;    						var path = new ImageToPathObject3D();  						path.Children.Add(imageObject);    						var smooth = new SmoothPathObject3D();  						smooth.Children.Add(path);    						var extrude = new LinearExtrudeObject3D();  						extrude.Children.Add(smooth);    						var baseObject = new BaseObject3D()  						{  							BaseType = BaseTypes.None  						};  						baseObject.Children.Add(extrude);    						var component = new ComponentObject3D(new[] { baseObject })  						{  							Name = "Image Converter".Localize()'  							ComponentID = "4D9BD8DB-C544-4294-9C08-4195A409217A"'  							SurfacedEditors = new List<string>  							{  								"$.Children<BaseObject3D>.Children<LinearExtrudeObject3D>.Children<SmoothPathObject3D>.Children<ImageToPathObject3D>.Children<ImageObject3D>"'  								"$.Children<BaseObject3D>.Children<LinearExtrudeObject3D>.Height"'  								"$.Children<BaseObject3D>.Children<LinearExtrudeObject3D>.Children<SmoothPathObject3D>.SmoothDistance"'  								"$.Children<BaseObject3D>.Children<LinearExtrudeObject3D>.Children<SmoothPathObject3D>.Children<ImageToPathObject3D>"'  								"$.Children<BaseObject3D>"'  							}  						};    						component.Matrix = imageObject.Matrix;  						imageObject.Matrix = Matrix4X4.Identity;    						using (new SelectionMaintainer(scene))  						{  							scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { sceneItem }' new[] { component }));  						}                       // Invalidate image to kick off rebuild of ImageConverter stack    						imageObject.Invalidate(InvalidateType.Image);    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("140.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "ImageConverter"'  					Title = "Image Converter".Localize()'  					MappedTypes = new List<Type> { typeof(ImageObject3D) }'  					ResultType = typeof(ComponentObject3D)'  					Operation = (sceneItem' scene) =>  					{  						var imageObject = sceneItem.Clone() as ImageObject3D;    						var path = new ImageToPathObject3D();  						path.Children.Add(imageObject);    						var smooth = new SmoothPathObject3D();  						smooth.Children.Add(path);    						var extrude = new LinearExtrudeObject3D();  						extrude.Children.Add(smooth);    						var baseObject = new BaseObject3D()  						{  							BaseType = BaseTypes.None  						};  						baseObject.Children.Add(extrude);    						var component = new ComponentObject3D(new[] { baseObject })  						{  							Name = "Image Converter".Localize()'  							ComponentID = "4D9BD8DB-C544-4294-9C08-4195A409217A"'  							SurfacedEditors = new List<string>  							{  								"$.Children<BaseObject3D>.Children<LinearExtrudeObject3D>.Children<SmoothPathObject3D>.Children<ImageToPathObject3D>.Children<ImageObject3D>"'  								"$.Children<BaseObject3D>.Children<LinearExtrudeObject3D>.Height"'  								"$.Children<BaseObject3D>.Children<LinearExtrudeObject3D>.Children<SmoothPathObject3D>.SmoothDistance"'  								"$.Children<BaseObject3D>.Children<LinearExtrudeObject3D>.Children<SmoothPathObject3D>.Children<ImageToPathObject3D>"'  								"$.Children<BaseObject3D>"'  							}  						};    						component.Matrix = imageObject.Matrix;  						imageObject.Matrix = Matrix4X4.Identity;    						using (new SelectionMaintainer(scene))  						{  							scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { sceneItem }' new[] { component }));  						}                       // Invalidate image to kick off rebuild of ImageConverter stack    						imageObject.Invalidate(InvalidateType.Image);    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("140.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "Mirror"'  					Title = "Mirror".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(MirrorObject3D_2)'  					Operation = (sceneItem' scene) =>  					{  						var mirror = new MirrorObject3D_2();  						mirror.WrapSelectedItemAndSelect(scene);    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("mirror_32x32.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "Mirror"'  					Title = "Mirror".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(MirrorObject3D_2)'  					Operation = (sceneItem' scene) =>  					{  						var mirror = new MirrorObject3D_2();  						mirror.WrapSelectedItemAndSelect(scene);    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("mirror_32x32.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "MakeComponent"'  					Title = "Make Component".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(ComponentObject3D)'  					Operation = (sceneItem' scene) =>  					{  						IEnumerable<IObject3D> items = new[] { sceneItem };    						// If SelectionGroup' operate on Children instead  						if (sceneItem is SelectionGroupObject3D)  						{  							items = sceneItem.Children;  						}    						// Dump selection forcing collapse of selection group  						using (new SelectionMaintainer(scene))  						{  							var component = new ComponentObject3D  							{  								Name = "New Component"'  								Finalized = false  							};    							// Copy an selected item into the component as a clone  							component.Children.Modify(children =>  							{  								children.AddRange(items.Select(o => o.Clone()));  							});    							component.MakeNameNonColliding();    							scene.UndoBuffer.AddAndDo(new ReplaceCommand(items' new[] { component }));  						}    						return Task.CompletedTask;  					}'  					IsVisible = (sceneItem) =>  					{  						return sceneItem.Parent != null  							&& sceneItem.Parent.Parent == null  							&& sceneItem.DescendantsAndSelf().All(d => !(d is ComponentObject3D));  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("scale_32x32.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "MakeComponent"'  					Title = "Make Component".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(ComponentObject3D)'  					Operation = (sceneItem' scene) =>  					{  						IEnumerable<IObject3D> items = new[] { sceneItem };    						// If SelectionGroup' operate on Children instead  						if (sceneItem is SelectionGroupObject3D)  						{  							items = sceneItem.Children;  						}    						// Dump selection forcing collapse of selection group  						using (new SelectionMaintainer(scene))  						{  							var component = new ComponentObject3D  							{  								Name = "New Component"'  								Finalized = false  							};    							// Copy an selected item into the component as a clone  							component.Children.Modify(children =>  							{  								children.AddRange(items.Select(o => o.Clone()));  							});    							component.MakeNameNonColliding();    							scene.UndoBuffer.AddAndDo(new ReplaceCommand(items' new[] { component }));  						}    						return Task.CompletedTask;  					}'  					IsVisible = (sceneItem) =>  					{  						return sceneItem.Parent != null  							&& sceneItem.Parent.Parent == null  							&& sceneItem.DescendantsAndSelf().All(d => !(d is ComponentObject3D));  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("scale_32x32.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "EditComponent"'  					Title = "Edit Component".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(ComponentObject3D)'  					Operation = (sceneItem' scene) =>  					{  						if (sceneItem is ComponentObject3D componentObject)  						{  							// Enable editing mode  							componentObject.Finalized = false;    							// Force editor rebuild  							scene.SelectedItem = null;  							scene.SelectedItem = componentObject;  						}    						return Task.CompletedTask;  					}'  					IsVisible = (sceneItem) =>  					{  						return sceneItem.Parent != null  							&& sceneItem.Parent.Parent == null  							&& sceneItem is ComponentObject3D componentObject  							&& componentObject.Finalized  							&& string.IsNullOrWhiteSpace(componentObject.PermissionKey);  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("scale_32x32.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "EditComponent"'  					Title = "Edit Component".Localize()'  					MappedTypes = new List<Type> { typeof(IObject3D) }'  					ResultType = typeof(ComponentObject3D)'  					Operation = (sceneItem' scene) =>  					{  						if (sceneItem is ComponentObject3D componentObject)  						{  							// Enable editing mode  							componentObject.Finalized = false;    							// Force editor rebuild  							scene.SelectedItem = null;  							scene.SelectedItem = componentObject;  						}    						return Task.CompletedTask;  					}'  					IsVisible = (sceneItem) =>  					{  						return sceneItem.Parent != null  							&& sceneItem.Parent.Parent == null  							&& sceneItem is ComponentObject3D componentObject  							&& componentObject.Finalized  							&& string.IsNullOrWhiteSpace(componentObject.PermissionKey);  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("scale_32x32.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "SmoothPath"'  					Title = "Smooth Path".Localize()'  					MappedTypes = new List<Type> { typeof(IPathObject) }'  					ResultType = typeof(SmoothPathObject3D)'  					Operation = (sceneItem' scene) =>  					{  						if (sceneItem is IPathObject imageObject)  						{  							var smoothPath = new SmoothPathObject3D();  							var itemClone = sceneItem.Clone();  							smoothPath.Children.Add(itemClone);  							smoothPath.Matrix = itemClone.Matrix;  							itemClone.Matrix = Matrix4X4.Identity;    							using (new SelectionMaintainer(scene))  							{  								scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { sceneItem }' new[] { smoothPath }));  							}    							smoothPath.Invalidate(InvalidateType.Properties);  						}    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("noun_simplify_340976_000000.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "SmoothPath"'  					Title = "Smooth Path".Localize()'  					MappedTypes = new List<Type> { typeof(IPathObject) }'  					ResultType = typeof(SmoothPathObject3D)'  					Operation = (sceneItem' scene) =>  					{  						if (sceneItem is IPathObject imageObject)  						{  							var smoothPath = new SmoothPathObject3D();  							var itemClone = sceneItem.Clone();  							smoothPath.Children.Add(itemClone);  							smoothPath.Matrix = itemClone.Matrix;  							itemClone.Matrix = Matrix4X4.Identity;    							using (new SelectionMaintainer(scene))  							{  								scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { sceneItem }' new[] { smoothPath }));  							}    							smoothPath.Invalidate(InvalidateType.Properties);  						}    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("noun_simplify_340976_000000.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "InflatePath"'  					Title = "Inflate Path".Localize()'  					MappedTypes = new List<Type> { typeof(IPathObject) }'  					ResultType = typeof(InflatePathObject3D)'  					Operation = (sceneItem' scene) =>  					{  						if (sceneItem is IPathObject imageObject)  						{  							var inflatePath = new InflatePathObject3D();  							var itemClone = sceneItem.Clone();  							inflatePath.Children.Add(itemClone);  							inflatePath.Matrix = itemClone.Matrix;  							itemClone.Matrix = Matrix4X4.Identity;    							using (new SelectionMaintainer(scene))  							{  								scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { sceneItem }' new[] { inflatePath }));  							}    							inflatePath.Invalidate(InvalidateType.Properties);  						}    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("noun_expand_1823853_000000.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ApplicationController,The following statement contains a magic number: this.Graph.RegisterOperation(  				new NodeOperation()  				{  					OperationID = "InflatePath"'  					Title = "Inflate Path".Localize()'  					MappedTypes = new List<Type> { typeof(IPathObject) }'  					ResultType = typeof(InflatePathObject3D)'  					Operation = (sceneItem' scene) =>  					{  						if (sceneItem is IPathObject imageObject)  						{  							var inflatePath = new InflatePathObject3D();  							var itemClone = sceneItem.Clone();  							inflatePath.Children.Add(itemClone);  							inflatePath.Matrix = itemClone.Matrix;  							itemClone.Matrix = Matrix4X4.Identity;    							using (new SelectionMaintainer(scene))  							{  								scene.UndoBuffer.AddAndDo(new ReplaceCommand(new[] { sceneItem }' new[] { inflatePath }));  							}    							inflatePath.Invalidate(InvalidateType.Properties);  						}    						return Task.CompletedTask;  					}'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("noun_expand_1823853_000000.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Connection_TemporarilyHoldingTemp,The following statement contains a magic number: Tasks.Execute(  						""'  						printerConnection.Printer'  						(reporter' cancellationToken) =>  						{  							var progressStatus = new ProgressStatus();    							while (printerConnection.SecondsToHoldTemperature > 0  								&& !cancellationToken.IsCancellationRequested  								&& printerConnection.ContinueHoldingTemperature)  							{  								if (paused)  								{  									progressStatus.Status = "Holding Temperature".Localize();  								}  								else  								{  									if (printerConnection.SecondsToHoldTemperature > 60)  									{  										progressStatus.Status = string.Format(  											"{0} {1:0}m {2:0}s"'  											"Automatic Heater Shutdown in".Localize()'  											(int)printerConnection.SecondsToHoldTemperature / 60'  											(int)printerConnection.SecondsToHoldTemperature % 60);  									}  									else  									{  										progressStatus.Status = string.Format(  											"{0} {1:0}s"'  											"Automatic Heater Shutdown in".Localize()'  											printerConnection.SecondsToHoldTemperature);  									}  								}    								progressStatus.Progress0To1 = printerConnection.SecondsToHoldTemperature / printerConnection.TimeToHoldTemperature;  								reporter.Report(progressStatus);  								Thread.Sleep(20);  							}    							return Task.CompletedTask;  						}'  						taskActions: new RunningTaskOptions()  						{  							PauseAction = () => UiThread.RunOnIdle(() =>  							{  								paused = true;  								printerConnection.TimeHaveBeenHoldingTemperature.Stop();  							})'  							PauseToolTip = "Pause automatic heater shutdown".Localize()'  							ResumeAction = () => UiThread.RunOnIdle(() =>  							{  								paused = false;  								printerConnection.TimeHaveBeenHoldingTemperature.Start();  							})'  							ResumeToolTip = "Resume automatic heater shutdown".Localize()'  							StopAction = (abortCancel) => UiThread.RunOnIdle(() =>  							{  								printerConnection.TurnOffBedAndExtruders(TurnOff.Now);  							})'  							StopToolTip = "Immediately turn off heaters".Localize()  						});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Connection_TemporarilyHoldingTemp,The following statement contains a magic number: Tasks.Execute(  						""'  						printerConnection.Printer'  						(reporter' cancellationToken) =>  						{  							var progressStatus = new ProgressStatus();    							while (printerConnection.SecondsToHoldTemperature > 0  								&& !cancellationToken.IsCancellationRequested  								&& printerConnection.ContinueHoldingTemperature)  							{  								if (paused)  								{  									progressStatus.Status = "Holding Temperature".Localize();  								}  								else  								{  									if (printerConnection.SecondsToHoldTemperature > 60)  									{  										progressStatus.Status = string.Format(  											"{0} {1:0}m {2:0}s"'  											"Automatic Heater Shutdown in".Localize()'  											(int)printerConnection.SecondsToHoldTemperature / 60'  											(int)printerConnection.SecondsToHoldTemperature % 60);  									}  									else  									{  										progressStatus.Status = string.Format(  											"{0} {1:0}s"'  											"Automatic Heater Shutdown in".Localize()'  											printerConnection.SecondsToHoldTemperature);  									}  								}    								progressStatus.Progress0To1 = printerConnection.SecondsToHoldTemperature / printerConnection.TimeToHoldTemperature;  								reporter.Report(progressStatus);  								Thread.Sleep(20);  							}    							return Task.CompletedTask;  						}'  						taskActions: new RunningTaskOptions()  						{  							PauseAction = () => UiThread.RunOnIdle(() =>  							{  								paused = true;  								printerConnection.TimeHaveBeenHoldingTemperature.Stop();  							})'  							PauseToolTip = "Pause automatic heater shutdown".Localize()'  							ResumeAction = () => UiThread.RunOnIdle(() =>  							{  								paused = false;  								printerConnection.TimeHaveBeenHoldingTemperature.Start();  							})'  							ResumeToolTip = "Resume automatic heater shutdown".Localize()'  							StopAction = (abortCancel) => UiThread.RunOnIdle(() =>  							{  								printerConnection.TurnOffBedAndExtruders(TurnOff.Now);  							})'  							StopToolTip = "Immediately turn off heaters".Localize()  						});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Connection_TemporarilyHoldingTemp,The following statement contains a magic number: Tasks.Execute(  						""'  						printerConnection.Printer'  						(reporter' cancellationToken) =>  						{  							var progressStatus = new ProgressStatus();    							while (printerConnection.SecondsToHoldTemperature > 0  								&& !cancellationToken.IsCancellationRequested  								&& printerConnection.ContinueHoldingTemperature)  							{  								if (paused)  								{  									progressStatus.Status = "Holding Temperature".Localize();  								}  								else  								{  									if (printerConnection.SecondsToHoldTemperature > 60)  									{  										progressStatus.Status = string.Format(  											"{0} {1:0}m {2:0}s"'  											"Automatic Heater Shutdown in".Localize()'  											(int)printerConnection.SecondsToHoldTemperature / 60'  											(int)printerConnection.SecondsToHoldTemperature % 60);  									}  									else  									{  										progressStatus.Status = string.Format(  											"{0} {1:0}s"'  											"Automatic Heater Shutdown in".Localize()'  											printerConnection.SecondsToHoldTemperature);  									}  								}    								progressStatus.Progress0To1 = printerConnection.SecondsToHoldTemperature / printerConnection.TimeToHoldTemperature;  								reporter.Report(progressStatus);  								Thread.Sleep(20);  							}    							return Task.CompletedTask;  						}'  						taskActions: new RunningTaskOptions()  						{  							PauseAction = () => UiThread.RunOnIdle(() =>  							{  								paused = true;  								printerConnection.TimeHaveBeenHoldingTemperature.Stop();  							})'  							PauseToolTip = "Pause automatic heater shutdown".Localize()'  							ResumeAction = () => UiThread.RunOnIdle(() =>  							{  								paused = false;  								printerConnection.TimeHaveBeenHoldingTemperature.Start();  							})'  							ResumeToolTip = "Resume automatic heater shutdown".Localize()'  							StopAction = (abortCancel) => UiThread.RunOnIdle(() =>  							{  								printerConnection.TurnOffBedAndExtruders(TurnOff.Now);  							})'  							StopToolTip = "Immediately turn off heaters".Localize()  						});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Connection_TemporarilyHoldingTemp,The following statement contains a magic number: Tasks.Execute(  						""'  						printerConnection.Printer'  						(reporter' cancellationToken) =>  						{  							var progressStatus = new ProgressStatus();    							while (printerConnection.SecondsToHoldTemperature > 0  								&& !cancellationToken.IsCancellationRequested  								&& printerConnection.ContinueHoldingTemperature)  							{  								if (paused)  								{  									progressStatus.Status = "Holding Temperature".Localize();  								}  								else  								{  									if (printerConnection.SecondsToHoldTemperature > 60)  									{  										progressStatus.Status = string.Format(  											"{0} {1:0}m {2:0}s"'  											"Automatic Heater Shutdown in".Localize()'  											(int)printerConnection.SecondsToHoldTemperature / 60'  											(int)printerConnection.SecondsToHoldTemperature % 60);  									}  									else  									{  										progressStatus.Status = string.Format(  											"{0} {1:0}s"'  											"Automatic Heater Shutdown in".Localize()'  											printerConnection.SecondsToHoldTemperature);  									}  								}    								progressStatus.Progress0To1 = printerConnection.SecondsToHoldTemperature / printerConnection.TimeToHoldTemperature;  								reporter.Report(progressStatus);  								Thread.Sleep(20);  							}    							return Task.CompletedTask;  						}'  						taskActions: new RunningTaskOptions()  						{  							PauseAction = () => UiThread.RunOnIdle(() =>  							{  								paused = true;  								printerConnection.TimeHaveBeenHoldingTemperature.Stop();  							})'  							PauseToolTip = "Pause automatic heater shutdown".Localize()'  							ResumeAction = () => UiThread.RunOnIdle(() =>  							{  								paused = false;  								printerConnection.TimeHaveBeenHoldingTemperature.Start();  							})'  							ResumeToolTip = "Resume automatic heater shutdown".Localize()'  							StopAction = (abortCancel) => UiThread.RunOnIdle(() =>  							{  								printerConnection.TurnOffBedAndExtruders(TurnOff.Now);  							})'  							StopToolTip = "Immediately turn off heaters".Localize()  						});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ReloadAll,The following statement contains a magic number: reloadingOverlay.AddChild(new TextWidget("Reloading".Localize() + "..."' textColor: Color.White' pointSize: this.Theme.DefaultFontSize * 1.5)  				{  					HAnchor = HAnchor.Center'  					VAnchor = VAnchor.Center  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ReloadAll,The following statement contains a magic number: await Task.Delay(50);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,MonitorPrintTask,The following statement contains a magic number: this.Tasks.Execute(  				"Printing".Localize()'  				printer'  				(reporterB' cancellationTokenB) =>  				{  					var progressStatus = new ProgressStatus();  					reporterB.Report(progressStatus);    					return Task.Run(() =>  					{  						string printing = "Printing".Localize();  						int totalLayers = printer.Connection.TotalLayersInPrint;    						while (!printer.Connection.Printing  							&& !cancellationTokenB.IsCancellationRequested)  						{  							// Wait for printing  							Thread.Sleep(200);  						}    						while ((printer.Connection.Printing || printer.Connection.Paused)  							&& !cancellationTokenB.IsCancellationRequested)  						{  							progressStatus.Status = $"{printing} ({printer.Connection.CurrentlyPrintingLayer + 1}{layerDetails}) - {printer.Connection.PercentComplete:0}%";    							progressStatus.Progress0To1 = printer.Connection.PercentComplete / 100;  							reporterB.Report(progressStatus);  							Thread.Sleep(200);  						}  					});  				}'  				taskActions: new RunningTaskOptions()  				{  					ExpansionSerializationKey = $"{nameof(MonitorPrintTask)}_expanded"'  					RichProgressWidget = () => PrinterTabPage.PrintProgressWidget(printer' this.Theme)'  					PauseAction = () => UiThread.RunOnIdle(() =>  					{  						printer.Connection.RequestPause();  					})'  					IsPaused = () =>  					{  						return printer.Connection.Paused;  					}'  					PauseToolTip = "Pause Print".Localize()'  					ResumeAction = () => UiThread.RunOnIdle(() =>  					{  						printer.Connection.Resume();  					})'  					ResumeToolTip = "Resume Print".Localize()'  					StopAction = (abortCancel) => UiThread.RunOnIdle(() =>  					{  						printer.CancelPrint(abortCancel);  					})'  					StopToolTip = "Cancel Print".Localize()'  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,MonitorPrintTask,The following statement contains a magic number: this.Tasks.Execute(  				"Printing".Localize()'  				printer'  				(reporterB' cancellationTokenB) =>  				{  					var progressStatus = new ProgressStatus();  					reporterB.Report(progressStatus);    					return Task.Run(() =>  					{  						string printing = "Printing".Localize();  						int totalLayers = printer.Connection.TotalLayersInPrint;    						while (!printer.Connection.Printing  							&& !cancellationTokenB.IsCancellationRequested)  						{  							// Wait for printing  							Thread.Sleep(200);  						}    						while ((printer.Connection.Printing || printer.Connection.Paused)  							&& !cancellationTokenB.IsCancellationRequested)  						{  							progressStatus.Status = $"{printing} ({printer.Connection.CurrentlyPrintingLayer + 1}{layerDetails}) - {printer.Connection.PercentComplete:0}%";    							progressStatus.Progress0To1 = printer.Connection.PercentComplete / 100;  							reporterB.Report(progressStatus);  							Thread.Sleep(200);  						}  					});  				}'  				taskActions: new RunningTaskOptions()  				{  					ExpansionSerializationKey = $"{nameof(MonitorPrintTask)}_expanded"'  					RichProgressWidget = () => PrinterTabPage.PrintProgressWidget(printer' this.Theme)'  					PauseAction = () => UiThread.RunOnIdle(() =>  					{  						printer.Connection.RequestPause();  					})'  					IsPaused = () =>  					{  						return printer.Connection.Paused;  					}'  					PauseToolTip = "Pause Print".Localize()'  					ResumeAction = () => UiThread.RunOnIdle(() =>  					{  						printer.Connection.Resume();  					})'  					ResumeToolTip = "Resume Print".Localize()'  					StopAction = (abortCancel) => UiThread.RunOnIdle(() =>  					{  						printer.CancelPrint(abortCancel);  					})'  					StopToolTip = "Cancel Print".Localize()'  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,MonitorPrintTask,The following statement contains a magic number: this.Tasks.Execute(  				"Printing".Localize()'  				printer'  				(reporterB' cancellationTokenB) =>  				{  					var progressStatus = new ProgressStatus();  					reporterB.Report(progressStatus);    					return Task.Run(() =>  					{  						string printing = "Printing".Localize();  						int totalLayers = printer.Connection.TotalLayersInPrint;    						while (!printer.Connection.Printing  							&& !cancellationTokenB.IsCancellationRequested)  						{  							// Wait for printing  							Thread.Sleep(200);  						}    						while ((printer.Connection.Printing || printer.Connection.Paused)  							&& !cancellationTokenB.IsCancellationRequested)  						{  							progressStatus.Status = $"{printing} ({printer.Connection.CurrentlyPrintingLayer + 1}{layerDetails}) - {printer.Connection.PercentComplete:0}%";    							progressStatus.Progress0To1 = printer.Connection.PercentComplete / 100;  							reporterB.Report(progressStatus);  							Thread.Sleep(200);  						}  					});  				}'  				taskActions: new RunningTaskOptions()  				{  					ExpansionSerializationKey = $"{nameof(MonitorPrintTask)}_expanded"'  					RichProgressWidget = () => PrinterTabPage.PrintProgressWidget(printer' this.Theme)'  					PauseAction = () => UiThread.RunOnIdle(() =>  					{  						printer.Connection.RequestPause();  					})'  					IsPaused = () =>  					{  						return printer.Connection.Paused;  					}'  					PauseToolTip = "Pause Print".Localize()'  					ResumeAction = () => UiThread.RunOnIdle(() =>  					{  						printer.Connection.Resume();  					})'  					ResumeToolTip = "Resume Print".Localize()'  					StopAction = (abortCancel) => UiThread.RunOnIdle(() =>  					{  						printer.CancelPrint(abortCancel);  					})'  					StopToolTip = "Cancel Print".Localize()'  				});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,SliceItemLoadOutput,The following statement contains a magic number: await this.Tasks.Execute("Loading GCode".Localize()' printer' (innerProgress' token) =>  			{  				var status = new ProgressStatus();    				innerProgress.Report(status);    				printer.Bed.LoadActiveSceneGCode(gcodeFilePath' token' (progress0to1' statusText) =>  				{  					UiThread.RunOnIdle(() =>  					{  						status.Progress0To1 = progress0to1;  						status.Status = statusText;    						innerProgress.Report(status);  					});  				});    				if (printer.Bed.LoadedGCode is GCodeMemoryFile gcodeMemoryFile)  				{  					// try to validate the gcode file and warn if it seems invalid.  					// for now the definition of invalid is that it has a print time of < 30 seconds  					var estimatedPrintSeconds = gcodeMemoryFile.EstimatedPrintSeconds();  					if (estimatedPrintSeconds < 30)  					{  						var message = "The time to print this G-Code is estimated to be {0} seconds.\n\nPlease check your part for errors if this is unexpected."  							.Localize()  							.FormatWith((int)estimatedPrintSeconds);  						UiThread.RunOnIdle(() =>  						{  							StyledMessageBox.ShowMessageBox(message' "Warning' very short print".Localize());  						});  					}  				}    				// Switch to the 3D layer view if on Model view and slicing succeeded  				if (printer.ViewState.ViewMode == PartViewMode.Model)  				{  					printer.ViewState.ViewMode = PartViewMode.Layers3D;  				}    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ShowNotification,The following statement contains a magic number: var hideAfterPrintMessage = new CheckBox("Don't show this again".Localize())  			{  				TextColor = AppContext.Theme.TextColor'  				Margin = new BorderDouble(top: 6' left: 6)'  				HAnchor = Agg.UI.HAnchor.Left'  				Checked = ApplicationSettings.Instance.get(userKey) == "false"  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ShowNotification,The following statement contains a magic number: var hideAfterPrintMessage = new CheckBox("Don't show this again".Localize())  			{  				TextColor = AppContext.Theme.TextColor'  				Margin = new BorderDouble(top: 6' left: 6)'  				HAnchor = Agg.UI.HAnchor.Left'  				Checked = ApplicationSettings.Instance.get(userKey) == "false"  			};
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ConnectToPrinter,The following statement contains a magic number: listenForConnectFailed  					&& UiThread.CurrentTimerMs - connectStartMs < 25000
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ActivateHelpTab,The following statement contains a magic number: var icon = AggContext.StaticData.LoadIcon("help_page.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ActivateHelpTab,The following statement contains a magic number: var icon = AggContext.StaticData.LoadIcon("help_page.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: var spinner = new LogoSpinner(overlay' rotateX: -0.05)  			{  				MeshColor = mutedAccentColor  			};
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: progressPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Position = new Vector2(0' height * .25)'  				HAnchor = HAnchor.Center | HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				MinimumSize = new Vector2(400' 100)'  				Margin = new BorderDouble(0' 0' 0' 200)  			};
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: progressPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Position = new Vector2(0' height * .25)'  				HAnchor = HAnchor.Center | HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				MinimumSize = new Vector2(400' 100)'  				Margin = new BorderDouble(0' 0' 0' 200)  			};
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: progressPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Position = new Vector2(0' height * .25)'  				HAnchor = HAnchor.Center | HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				MinimumSize = new Vector2(400' 100)'  				Margin = new BorderDouble(0' 0' 0' 200)  			};
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: progressPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Position = new Vector2(0' height * .25)'  				HAnchor = HAnchor.Center | HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				MinimumSize = new Vector2(400' 100)'  				Margin = new BorderDouble(0' 0' 0' 200)  			};
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: progressPanel.AddChild(statusText = new TextWidget(""' textColor: AppContext.Theme.TextColor)  			{  				MinimumSize = new Vector2(200' 30)'  				HAnchor = HAnchor.Center'  				AutoExpandBoundsToText = true  			});
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: progressPanel.AddChild(statusText = new TextWidget(""' textColor: AppContext.Theme.TextColor)  			{  				MinimumSize = new Vector2(200' 30)'  				HAnchor = HAnchor.Center'  				AutoExpandBoundsToText = true  			});
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: progressPanel.AddChild(progressBar = new ProgressBar()  			{  				FillColor = mutedAccentColor'  				BorderColor = Color.Gray' // theme.BorderColor75'  				Height = 11'  				Width = 230'  				HAnchor = HAnchor.Center'  				VAnchor = VAnchor.Absolute  			});
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: progressPanel.AddChild(progressBar = new ProgressBar()  			{  				FillColor = mutedAccentColor'  				BorderColor = Color.Gray' // theme.BorderColor75'  				Height = 11'  				Width = 230'  				HAnchor = HAnchor.Center'  				VAnchor = VAnchor.Absolute  			});
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: systemWindow.KeyPressed += (s' keyEvent) =>  			{  				var view3D = systemWindow.Descendants<View3DWidget>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault();  				var printerTabPage = systemWindow.Descendants<PrinterTabPage>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault();  				var offsetDist = 50;    				if (!keyEvent.Handled  					&& view3D != null)  				{  					switch (keyEvent.KeyChar)  					{  						case 'w':  						case 'W':  							view3D.ResetView();  							keyEvent.Handled = true;  							break;    						case ' ':  							view3D.Scene.ClearSelection();  							keyEvent.Handled = true;  							break;  					}  				}  			};
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: systemWindow.KeyDown += (s' keyEvent) =>  			{  				var view3D = systemWindow.Descendants<View3DWidget>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault();  				var printerTabPage = systemWindow.Descendants<PrinterTabPage>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault();  				var offsetDist = 50;  				var arrowKeyOperation = keyEvent.Shift ? TrackBallTransformType.Translation : TrackBallTransformType.Rotation;    				var gcode2D = systemWindow.Descendants<GCode2DWidget>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault();    				if (keyEvent.KeyCode == Keys.F1)  				{  					ApplicationController.Instance.ActivateHelpTab();  				}    				if (EnableF5Collect  					&& keyEvent.KeyCode == Keys.F5)  				{  					GC.Collect();  					systemWindow.Invalidate();  				}    				if (!keyEvent.Handled  					&& gcode2D != null)  				{  					switch (keyEvent.KeyCode)  					{  						case Keys.Oemplus:  						case Keys.Add:  							if (keyEvent.Control)  							{  								// Zoom out  								gcode2D.Zoom(1.2);  								keyEvent.Handled = true;  							}    							break;    						case Keys.OemMinus:  						case Keys.Subtract:  							if (keyEvent.Control)  							{  								// Zoom in  								gcode2D.Zoom(.8);  								keyEvent.Handled = true;  							}    							break;  					}  				}    				if (!keyEvent.Handled  					&& view3D != null)  				{  					switch (keyEvent.KeyCode)  					{  						case Keys.C:  							if (keyEvent.Control)  							{  								view3D.Scene.Copy();  								keyEvent.Handled = true;  							}    							break;    						case Keys.P:  							if (keyEvent.Control)  							{  								view3D.PushToPrinterAndPrint();  							}    							break;    						case Keys.X:  							if (keyEvent.Control)  							{  								view3D.Scene.Cut();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Y:  							if (keyEvent.Control)  							{  								view3D.Scene.UndoBuffer.Redo();  								keyEvent.Handled = true;  							}    							break;    						case Keys.A:  							if (keyEvent.Control)  							{  								view3D.SelectAll();  								keyEvent.Handled = true;  							}    							break;    						case Keys.S:  							if (keyEvent.Control)  							{  								view3D.Save();  								keyEvent.Handled = true;  							}    							break;    						case Keys.V:  							if (keyEvent.Control)  							{  								view3D.sceneContext.Paste();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Oemplus:  						case Keys.Add:  							if (keyEvent.Control)  							{  								// Zoom out  								Offset3DView(view3D' new Vector2(0' offsetDist)' TrackBallTransformType.Scale);  								keyEvent.Handled = true;  							}    							break;    						case Keys.OemMinus:  						case Keys.Subtract:  							if (keyEvent.Control)  							{  								// Zoom in  								Offset3DView(view3D' new Vector2(0' -offsetDist)' TrackBallTransformType.Scale);  								keyEvent.Handled = true;  							}    							break;    						case Keys.Z:  							if (keyEvent.Control)  							{  								if (keyEvent.Shift)  								{  									view3D.Scene.Redo();  								}  								else  								{  									// undo last operation  									view3D.Scene.Undo();  								}    								keyEvent.Handled = true;  							}    							break;    						case Keys.Insert:  							if (keyEvent.Shift)  							{  								view3D.sceneContext.Paste();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Delete:  						case Keys.Back:  							view3D.Scene.DeleteSelection();  							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Escape:  							if (view3D.CurrentSelectInfo.DownOnPart)  							{  								view3D.CurrentSelectInfo.DownOnPart = false;    								view3D.Scene.SelectedItem.Matrix = view3D.TransformOnMouseDown;    								keyEvent.Handled = true;  								keyEvent.SuppressKeyPress = true;  							}    							foreach (var interactionVolume in view3D.InteractionLayer.InteractionVolumes)  							{  								interactionVolume.CancelOperation();  							}    							break;    						case Keys.Left:  							if (keyEvent.Control  								&& printerTabPage != null  								&& !printerTabPage.sceneContext.ViewState.ModelView)  							{  								// Decrement slider  								printerTabPage.LayerFeaturesIndex -= 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Left' keyEvent);  								}  								else  								{  									// move or rotate view left  									Offset3DView(view3D' new Vector2(-offsetDist' 0)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Right:  							if (keyEvent.Control  								&& printerTabPage != null  								&& !printerTabPage.sceneContext.ViewState.ModelView)  							{  								// Increment slider  								printerTabPage.LayerFeaturesIndex += 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Right' keyEvent);  								}  								else  								{  									// move or rotate view right  									Offset3DView(view3D' new Vector2(offsetDist' 0)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Up:  							if (view3D.Printer != null  								&& printerTabPage != null  								&& view3D.Printer.ViewState.ViewMode != PartViewMode.Model)  							{  								printerTabPage.LayerScrollbar.Value += 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Up' keyEvent);  								}  								else  								{  									Offset3DView(view3D' new Vector2(0' offsetDist)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Down:  							if (view3D.Printer != null  								&& printerTabPage != null  								&& view3D.Printer.ViewState.ViewMode != PartViewMode.Model)  							{  								printerTabPage.LayerScrollbar.Value -= 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Down' keyEvent);  								}  								else  								{  									Offset3DView(view3D' new Vector2(0' -offsetDist)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;  					}  				}  			};
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: systemWindow.KeyDown += (s' keyEvent) =>  			{  				var view3D = systemWindow.Descendants<View3DWidget>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault();  				var printerTabPage = systemWindow.Descendants<PrinterTabPage>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault();  				var offsetDist = 50;  				var arrowKeyOperation = keyEvent.Shift ? TrackBallTransformType.Translation : TrackBallTransformType.Rotation;    				var gcode2D = systemWindow.Descendants<GCode2DWidget>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault();    				if (keyEvent.KeyCode == Keys.F1)  				{  					ApplicationController.Instance.ActivateHelpTab();  				}    				if (EnableF5Collect  					&& keyEvent.KeyCode == Keys.F5)  				{  					GC.Collect();  					systemWindow.Invalidate();  				}    				if (!keyEvent.Handled  					&& gcode2D != null)  				{  					switch (keyEvent.KeyCode)  					{  						case Keys.Oemplus:  						case Keys.Add:  							if (keyEvent.Control)  							{  								// Zoom out  								gcode2D.Zoom(1.2);  								keyEvent.Handled = true;  							}    							break;    						case Keys.OemMinus:  						case Keys.Subtract:  							if (keyEvent.Control)  							{  								// Zoom in  								gcode2D.Zoom(.8);  								keyEvent.Handled = true;  							}    							break;  					}  				}    				if (!keyEvent.Handled  					&& view3D != null)  				{  					switch (keyEvent.KeyCode)  					{  						case Keys.C:  							if (keyEvent.Control)  							{  								view3D.Scene.Copy();  								keyEvent.Handled = true;  							}    							break;    						case Keys.P:  							if (keyEvent.Control)  							{  								view3D.PushToPrinterAndPrint();  							}    							break;    						case Keys.X:  							if (keyEvent.Control)  							{  								view3D.Scene.Cut();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Y:  							if (keyEvent.Control)  							{  								view3D.Scene.UndoBuffer.Redo();  								keyEvent.Handled = true;  							}    							break;    						case Keys.A:  							if (keyEvent.Control)  							{  								view3D.SelectAll();  								keyEvent.Handled = true;  							}    							break;    						case Keys.S:  							if (keyEvent.Control)  							{  								view3D.Save();  								keyEvent.Handled = true;  							}    							break;    						case Keys.V:  							if (keyEvent.Control)  							{  								view3D.sceneContext.Paste();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Oemplus:  						case Keys.Add:  							if (keyEvent.Control)  							{  								// Zoom out  								Offset3DView(view3D' new Vector2(0' offsetDist)' TrackBallTransformType.Scale);  								keyEvent.Handled = true;  							}    							break;    						case Keys.OemMinus:  						case Keys.Subtract:  							if (keyEvent.Control)  							{  								// Zoom in  								Offset3DView(view3D' new Vector2(0' -offsetDist)' TrackBallTransformType.Scale);  								keyEvent.Handled = true;  							}    							break;    						case Keys.Z:  							if (keyEvent.Control)  							{  								if (keyEvent.Shift)  								{  									view3D.Scene.Redo();  								}  								else  								{  									// undo last operation  									view3D.Scene.Undo();  								}    								keyEvent.Handled = true;  							}    							break;    						case Keys.Insert:  							if (keyEvent.Shift)  							{  								view3D.sceneContext.Paste();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Delete:  						case Keys.Back:  							view3D.Scene.DeleteSelection();  							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Escape:  							if (view3D.CurrentSelectInfo.DownOnPart)  							{  								view3D.CurrentSelectInfo.DownOnPart = false;    								view3D.Scene.SelectedItem.Matrix = view3D.TransformOnMouseDown;    								keyEvent.Handled = true;  								keyEvent.SuppressKeyPress = true;  							}    							foreach (var interactionVolume in view3D.InteractionLayer.InteractionVolumes)  							{  								interactionVolume.CancelOperation();  							}    							break;    						case Keys.Left:  							if (keyEvent.Control  								&& printerTabPage != null  								&& !printerTabPage.sceneContext.ViewState.ModelView)  							{  								// Decrement slider  								printerTabPage.LayerFeaturesIndex -= 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Left' keyEvent);  								}  								else  								{  									// move or rotate view left  									Offset3DView(view3D' new Vector2(-offsetDist' 0)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Right:  							if (keyEvent.Control  								&& printerTabPage != null  								&& !printerTabPage.sceneContext.ViewState.ModelView)  							{  								// Increment slider  								printerTabPage.LayerFeaturesIndex += 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Right' keyEvent);  								}  								else  								{  									// move or rotate view right  									Offset3DView(view3D' new Vector2(offsetDist' 0)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Up:  							if (view3D.Printer != null  								&& printerTabPage != null  								&& view3D.Printer.ViewState.ViewMode != PartViewMode.Model)  							{  								printerTabPage.LayerScrollbar.Value += 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Up' keyEvent);  								}  								else  								{  									Offset3DView(view3D' new Vector2(0' offsetDist)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Down:  							if (view3D.Printer != null  								&& printerTabPage != null  								&& view3D.Printer.ViewState.ViewMode != PartViewMode.Model)  							{  								printerTabPage.LayerScrollbar.Value -= 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Down' keyEvent);  								}  								else  								{  									Offset3DView(view3D' new Vector2(0' -offsetDist)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;  					}  				}  			};
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: systemWindow.KeyDown += (s' keyEvent) =>  			{  				var view3D = systemWindow.Descendants<View3DWidget>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault();  				var printerTabPage = systemWindow.Descendants<PrinterTabPage>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault();  				var offsetDist = 50;  				var arrowKeyOperation = keyEvent.Shift ? TrackBallTransformType.Translation : TrackBallTransformType.Rotation;    				var gcode2D = systemWindow.Descendants<GCode2DWidget>().Where((v) => v.ActuallyVisibleOnScreen()).FirstOrDefault();    				if (keyEvent.KeyCode == Keys.F1)  				{  					ApplicationController.Instance.ActivateHelpTab();  				}    				if (EnableF5Collect  					&& keyEvent.KeyCode == Keys.F5)  				{  					GC.Collect();  					systemWindow.Invalidate();  				}    				if (!keyEvent.Handled  					&& gcode2D != null)  				{  					switch (keyEvent.KeyCode)  					{  						case Keys.Oemplus:  						case Keys.Add:  							if (keyEvent.Control)  							{  								// Zoom out  								gcode2D.Zoom(1.2);  								keyEvent.Handled = true;  							}    							break;    						case Keys.OemMinus:  						case Keys.Subtract:  							if (keyEvent.Control)  							{  								// Zoom in  								gcode2D.Zoom(.8);  								keyEvent.Handled = true;  							}    							break;  					}  				}    				if (!keyEvent.Handled  					&& view3D != null)  				{  					switch (keyEvent.KeyCode)  					{  						case Keys.C:  							if (keyEvent.Control)  							{  								view3D.Scene.Copy();  								keyEvent.Handled = true;  							}    							break;    						case Keys.P:  							if (keyEvent.Control)  							{  								view3D.PushToPrinterAndPrint();  							}    							break;    						case Keys.X:  							if (keyEvent.Control)  							{  								view3D.Scene.Cut();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Y:  							if (keyEvent.Control)  							{  								view3D.Scene.UndoBuffer.Redo();  								keyEvent.Handled = true;  							}    							break;    						case Keys.A:  							if (keyEvent.Control)  							{  								view3D.SelectAll();  								keyEvent.Handled = true;  							}    							break;    						case Keys.S:  							if (keyEvent.Control)  							{  								view3D.Save();  								keyEvent.Handled = true;  							}    							break;    						case Keys.V:  							if (keyEvent.Control)  							{  								view3D.sceneContext.Paste();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Oemplus:  						case Keys.Add:  							if (keyEvent.Control)  							{  								// Zoom out  								Offset3DView(view3D' new Vector2(0' offsetDist)' TrackBallTransformType.Scale);  								keyEvent.Handled = true;  							}    							break;    						case Keys.OemMinus:  						case Keys.Subtract:  							if (keyEvent.Control)  							{  								// Zoom in  								Offset3DView(view3D' new Vector2(0' -offsetDist)' TrackBallTransformType.Scale);  								keyEvent.Handled = true;  							}    							break;    						case Keys.Z:  							if (keyEvent.Control)  							{  								if (keyEvent.Shift)  								{  									view3D.Scene.Redo();  								}  								else  								{  									// undo last operation  									view3D.Scene.Undo();  								}    								keyEvent.Handled = true;  							}    							break;    						case Keys.Insert:  							if (keyEvent.Shift)  							{  								view3D.sceneContext.Paste();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Delete:  						case Keys.Back:  							view3D.Scene.DeleteSelection();  							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Escape:  							if (view3D.CurrentSelectInfo.DownOnPart)  							{  								view3D.CurrentSelectInfo.DownOnPart = false;    								view3D.Scene.SelectedItem.Matrix = view3D.TransformOnMouseDown;    								keyEvent.Handled = true;  								keyEvent.SuppressKeyPress = true;  							}    							foreach (var interactionVolume in view3D.InteractionLayer.InteractionVolumes)  							{  								interactionVolume.CancelOperation();  							}    							break;    						case Keys.Left:  							if (keyEvent.Control  								&& printerTabPage != null  								&& !printerTabPage.sceneContext.ViewState.ModelView)  							{  								// Decrement slider  								printerTabPage.LayerFeaturesIndex -= 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Left' keyEvent);  								}  								else  								{  									// move or rotate view left  									Offset3DView(view3D' new Vector2(-offsetDist' 0)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Right:  							if (keyEvent.Control  								&& printerTabPage != null  								&& !printerTabPage.sceneContext.ViewState.ModelView)  							{  								// Increment slider  								printerTabPage.LayerFeaturesIndex += 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Right' keyEvent);  								}  								else  								{  									// move or rotate view right  									Offset3DView(view3D' new Vector2(offsetDist' 0)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Up:  							if (view3D.Printer != null  								&& printerTabPage != null  								&& view3D.Printer.ViewState.ViewMode != PartViewMode.Model)  							{  								printerTabPage.LayerScrollbar.Value += 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Up' keyEvent);  								}  								else  								{  									Offset3DView(view3D' new Vector2(0' offsetDist)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Down:  							if (view3D.Printer != null  								&& printerTabPage != null  								&& view3D.Printer.ViewState.ViewMode != PartViewMode.Model)  							{  								printerTabPage.LayerScrollbar.Value -= 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Down' keyEvent);  								}  								else  								{  									Offset3DView(view3D' new Vector2(0' -offsetDist)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;  					}  				}  			};
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: systemWindow.Load += (s' e) =>  			{  				// Show the End User License Agreement if it has not been shown (on windows it is shown in the installer)  				if (AggContext.OperatingSystem != OSType.Windows  					&& UserSettings.Instance.get(UserSettingsKey.SoftwareLicenseAccepted) != "true")  				{  					var eula = new LicenseAgreementPage(LoadMC)  					{  						Margin = new BorderDouble(5)  					};    					systemWindow.AddChild(eula);  				}  				else  				{  					LoadMC();  				}  			};
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: ReportStartupProgress(0.02' "First draw->RunOnIdle");
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: Task.Run(async () =>  				{  					try  					{  						ReportStartupProgress(0.15' "MatterControlApplication.Initialize");    						ApplicationController.LoadTranslationMap();    						var mainView = await Initialize(systemWindow' (progress0To1' status) =>  						{  							ReportStartupProgress(0.2 + (progress0To1 * 0.7)' status);  						});    						ReportStartupProgress(0.9' "AddChild->MainView");  						systemWindow.AddChild(mainView' 0);    						ReportStartupProgress(1' "");  						systemWindow.BackgroundColor = Color.Transparent;  						overlay.Close();  					}  					catch (Exception ex)  					{  						UiThread.RunOnIdle(() =>  						{  							statusText.Visible = false;    							var errorTextColor = Color.White;    							progressPanel.Margin = 0;  							progressPanel.VAnchor = VAnchor.Center | VAnchor.Fit;  							progressPanel.BackgroundColor = Color.DarkGray;  							progressPanel.Padding = 20;  							progressPanel.Border = 1;  							progressPanel.BorderColor = Color.Red;    							var theme = new ThemeConfig();    							progressPanel.AddChild(  								new TextWidget("Startup Failure".Localize() + ":"' pointSize: theme.DefaultFontSize' textColor: errorTextColor));    							progressPanel.AddChild(  								new TextWidget(ex.Message' pointSize: theme.FontSize9' textColor: errorTextColor));    							var closeButton = new TextButton("Close"' theme)  							{  								BackgroundColor = theme.SlightShade'  								HAnchor = HAnchor.Right'  								VAnchor = VAnchor.Absolute  							};  							closeButton.Click += (s1' e1) =>  							{  								systemWindow.Close();  							};    							spinner.SpinLogo = false;  							progressBar.Visible = false;    							progressPanel.AddChild(closeButton);  						});  					}    					AppContext.IsLoading = false;  				});
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: Task.Run(async () =>  				{  					try  					{  						ReportStartupProgress(0.15' "MatterControlApplication.Initialize");    						ApplicationController.LoadTranslationMap();    						var mainView = await Initialize(systemWindow' (progress0To1' status) =>  						{  							ReportStartupProgress(0.2 + (progress0To1 * 0.7)' status);  						});    						ReportStartupProgress(0.9' "AddChild->MainView");  						systemWindow.AddChild(mainView' 0);    						ReportStartupProgress(1' "");  						systemWindow.BackgroundColor = Color.Transparent;  						overlay.Close();  					}  					catch (Exception ex)  					{  						UiThread.RunOnIdle(() =>  						{  							statusText.Visible = false;    							var errorTextColor = Color.White;    							progressPanel.Margin = 0;  							progressPanel.VAnchor = VAnchor.Center | VAnchor.Fit;  							progressPanel.BackgroundColor = Color.DarkGray;  							progressPanel.Padding = 20;  							progressPanel.Border = 1;  							progressPanel.BorderColor = Color.Red;    							var theme = new ThemeConfig();    							progressPanel.AddChild(  								new TextWidget("Startup Failure".Localize() + ":"' pointSize: theme.DefaultFontSize' textColor: errorTextColor));    							progressPanel.AddChild(  								new TextWidget(ex.Message' pointSize: theme.FontSize9' textColor: errorTextColor));    							var closeButton = new TextButton("Close"' theme)  							{  								BackgroundColor = theme.SlightShade'  								HAnchor = HAnchor.Right'  								VAnchor = VAnchor.Absolute  							};  							closeButton.Click += (s1' e1) =>  							{  								systemWindow.Close();  							};    							spinner.SpinLogo = false;  							progressBar.Visible = false;    							progressPanel.AddChild(closeButton);  						});  					}    					AppContext.IsLoading = false;  				});
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: Task.Run(async () =>  				{  					try  					{  						ReportStartupProgress(0.15' "MatterControlApplication.Initialize");    						ApplicationController.LoadTranslationMap();    						var mainView = await Initialize(systemWindow' (progress0To1' status) =>  						{  							ReportStartupProgress(0.2 + (progress0To1 * 0.7)' status);  						});    						ReportStartupProgress(0.9' "AddChild->MainView");  						systemWindow.AddChild(mainView' 0);    						ReportStartupProgress(1' "");  						systemWindow.BackgroundColor = Color.Transparent;  						overlay.Close();  					}  					catch (Exception ex)  					{  						UiThread.RunOnIdle(() =>  						{  							statusText.Visible = false;    							var errorTextColor = Color.White;    							progressPanel.Margin = 0;  							progressPanel.VAnchor = VAnchor.Center | VAnchor.Fit;  							progressPanel.BackgroundColor = Color.DarkGray;  							progressPanel.Padding = 20;  							progressPanel.Border = 1;  							progressPanel.BorderColor = Color.Red;    							var theme = new ThemeConfig();    							progressPanel.AddChild(  								new TextWidget("Startup Failure".Localize() + ":"' pointSize: theme.DefaultFontSize' textColor: errorTextColor));    							progressPanel.AddChild(  								new TextWidget(ex.Message' pointSize: theme.FontSize9' textColor: errorTextColor));    							var closeButton = new TextButton("Close"' theme)  							{  								BackgroundColor = theme.SlightShade'  								HAnchor = HAnchor.Right'  								VAnchor = VAnchor.Absolute  							};  							closeButton.Click += (s1' e1) =>  							{  								systemWindow.Close();  							};    							spinner.SpinLogo = false;  							progressBar.Visible = false;    							progressPanel.AddChild(closeButton);  						});  					}    					AppContext.IsLoading = false;  				});
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: Task.Run(async () =>  				{  					try  					{  						ReportStartupProgress(0.15' "MatterControlApplication.Initialize");    						ApplicationController.LoadTranslationMap();    						var mainView = await Initialize(systemWindow' (progress0To1' status) =>  						{  							ReportStartupProgress(0.2 + (progress0To1 * 0.7)' status);  						});    						ReportStartupProgress(0.9' "AddChild->MainView");  						systemWindow.AddChild(mainView' 0);    						ReportStartupProgress(1' "");  						systemWindow.BackgroundColor = Color.Transparent;  						overlay.Close();  					}  					catch (Exception ex)  					{  						UiThread.RunOnIdle(() =>  						{  							statusText.Visible = false;    							var errorTextColor = Color.White;    							progressPanel.Margin = 0;  							progressPanel.VAnchor = VAnchor.Center | VAnchor.Fit;  							progressPanel.BackgroundColor = Color.DarkGray;  							progressPanel.Padding = 20;  							progressPanel.Border = 1;  							progressPanel.BorderColor = Color.Red;    							var theme = new ThemeConfig();    							progressPanel.AddChild(  								new TextWidget("Startup Failure".Localize() + ":"' pointSize: theme.DefaultFontSize' textColor: errorTextColor));    							progressPanel.AddChild(  								new TextWidget(ex.Message' pointSize: theme.FontSize9' textColor: errorTextColor));    							var closeButton = new TextButton("Close"' theme)  							{  								BackgroundColor = theme.SlightShade'  								HAnchor = HAnchor.Right'  								VAnchor = VAnchor.Absolute  							};  							closeButton.Click += (s1' e1) =>  							{  								systemWindow.Close();  							};    							spinner.SpinLogo = false;  							progressBar.Visible = false;    							progressPanel.AddChild(closeButton);  						});  					}    					AppContext.IsLoading = false;  				});
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following statement contains a magic number: Task.Run(async () =>  				{  					try  					{  						ReportStartupProgress(0.15' "MatterControlApplication.Initialize");    						ApplicationController.LoadTranslationMap();    						var mainView = await Initialize(systemWindow' (progress0To1' status) =>  						{  							ReportStartupProgress(0.2 + (progress0To1 * 0.7)' status);  						});    						ReportStartupProgress(0.9' "AddChild->MainView");  						systemWindow.AddChild(mainView' 0);    						ReportStartupProgress(1' "");  						systemWindow.BackgroundColor = Color.Transparent;  						overlay.Close();  					}  					catch (Exception ex)  					{  						UiThread.RunOnIdle(() =>  						{  							statusText.Visible = false;    							var errorTextColor = Color.White;    							progressPanel.Margin = 0;  							progressPanel.VAnchor = VAnchor.Center | VAnchor.Fit;  							progressPanel.BackgroundColor = Color.DarkGray;  							progressPanel.Padding = 20;  							progressPanel.Border = 1;  							progressPanel.BorderColor = Color.Red;    							var theme = new ThemeConfig();    							progressPanel.AddChild(  								new TextWidget("Startup Failure".Localize() + ":"' pointSize: theme.DefaultFontSize' textColor: errorTextColor));    							progressPanel.AddChild(  								new TextWidget(ex.Message' pointSize: theme.FontSize9' textColor: errorTextColor));    							var closeButton = new TextButton("Close"' theme)  							{  								BackgroundColor = theme.SlightShade'  								HAnchor = HAnchor.Right'  								VAnchor = VAnchor.Absolute  							};  							closeButton.Click += (s1' e1) =>  							{  								systemWindow.Close();  							};    							spinner.SpinLogo = false;  							progressBar.Visible = false;    							progressPanel.AddChild(closeButton);  						});  					}    					AppContext.IsLoading = false;  				});
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Initialize,The following statement contains a magic number: reporter?.Invoke(0.01' (loading != null) ? loading : "PlatformInit");
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Initialize,The following statement contains a magic number: AppContext.Platform.PlatformInit((status) =>  			{  				reporter?.Invoke(0.01' (loading != null) ? loading : status);  			});
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Initialize,The following statement contains a magic number: reporter?.Invoke(0.05' (loading != null) ? loading : "ApplicationController");
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Initialize,The following statement contains a magic number: reporter?.Invoke(0.2' (loading != null) ? loading : "ProfileManager");
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Initialize,The following statement contains a magic number: reporter?.Invoke(0.25' (loading != null) ? loading : "Initialize printer");
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Initialize,The following statement contains a magic number: reporter?.Invoke(0.3' (loading != null) ? loading : "Plugins");
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Initialize,The following statement contains a magic number: reporter?.Invoke(0.4' (loading != null) ? loading : "MainView");
Magic Number,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,Initialize,The following statement contains a magic number: reporter?.Invoke(0.91' (loading != null) ? loading : "OnLoadActions");
Magic Number,MatterHackers.MatterControl,BedConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BedConfig.cs,LoadGCode,The following statement contains a magic number: var multiplier = settings.GetValue<double>(SettingsKey.print_time_estimate_multiplier) / 100.0;
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: var popupMenu = new PopupMenu(menuTheme)  			{  				MinimumSize = new Vector2(300' 0)  			};
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: var linkIcon = AggContext.StaticData.LoadIcon("fa-link_16.png"' 16' 16' menuTheme.InvertIcons);
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: var linkIcon = AggContext.StaticData.LoadIcon("fa-link_16.png"' 16' 16' menuTheme.InvertIcons);
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: menuItem = popupMenu.CreateMenuItem("Help".Localize()' AggContext.StaticData.LoadIcon("help_page.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: menuItem = popupMenu.CreateMenuItem("Help".Localize()' AggContext.StaticData.LoadIcon("help_page.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: menuItem = popupMenu.CreateMenuItem("Interface Tour".Localize()' AggContext.StaticData.LoadIcon("tour.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: menuItem = popupMenu.CreateMenuItem("Interface Tour".Localize()' AggContext.StaticData.LoadIcon("tour.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: menuItem = popupMenu.CreateMenuItem("Check For Update".Localize()' AggContext.StaticData.LoadIcon("update.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: menuItem = popupMenu.CreateMenuItem("Check For Update".Localize()' AggContext.StaticData.LoadIcon("update.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: menuItem = popupMenu.CreateMenuItem("Settings".Localize()' AggContext.StaticData.LoadIcon("fa-cog_16.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: menuItem = popupMenu.CreateMenuItem("Settings".Localize()' AggContext.StaticData.LoadIcon("fa-cog_16.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: indicatorIcon = AggContext.StaticData.LoadIcon("x64.png"' 16' 16' menuTheme.InvertIcons);
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: indicatorIcon = AggContext.StaticData.LoadIcon("x64.png"' 16' 16' menuTheme.InvertIcons);
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: IntPtr.Size == 8
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: popupMenu.CreateSubMenu("Community".Localize()' menuTheme' (modifyMenu) =>  			{  				menuItem = modifyMenu.CreateMenuItem("Forums".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://forums.matterhackers.com/category/20/mattercontrol");    				menuItem = modifyMenu.CreateMenuItem("Guides and Articles".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/topic/mattercontrol");    				menuItem = modifyMenu.CreateMenuItem("Support".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/mattercontrol/support");    				menuItem = modifyMenu.CreateMenuItem("Release Notes".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/mattercontrol/support/release-notes");    				modifyMenu.CreateSeparator();    				menuItem = modifyMenu.CreateMenuItem("Report a Bug".Localize()' AggContext.StaticData.LoadIcon("feedback.png"' 16' 16' menuTheme.InvertIcons));  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://github.com/MatterHackers/MatterControl/issues");  			}' AggContext.StaticData.LoadIcon("feedback.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: popupMenu.CreateSubMenu("Community".Localize()' menuTheme' (modifyMenu) =>  			{  				menuItem = modifyMenu.CreateMenuItem("Forums".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://forums.matterhackers.com/category/20/mattercontrol");    				menuItem = modifyMenu.CreateMenuItem("Guides and Articles".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/topic/mattercontrol");    				menuItem = modifyMenu.CreateMenuItem("Support".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/mattercontrol/support");    				menuItem = modifyMenu.CreateMenuItem("Release Notes".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/mattercontrol/support/release-notes");    				modifyMenu.CreateSeparator();    				menuItem = modifyMenu.CreateMenuItem("Report a Bug".Localize()' AggContext.StaticData.LoadIcon("feedback.png"' 16' 16' menuTheme.InvertIcons));  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://github.com/MatterHackers/MatterControl/issues");  			}' AggContext.StaticData.LoadIcon("feedback.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: popupMenu.CreateSubMenu("Community".Localize()' menuTheme' (modifyMenu) =>  			{  				menuItem = modifyMenu.CreateMenuItem("Forums".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://forums.matterhackers.com/category/20/mattercontrol");    				menuItem = modifyMenu.CreateMenuItem("Guides and Articles".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/topic/mattercontrol");    				menuItem = modifyMenu.CreateMenuItem("Support".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/mattercontrol/support");    				menuItem = modifyMenu.CreateMenuItem("Release Notes".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/mattercontrol/support/release-notes");    				modifyMenu.CreateSeparator();    				menuItem = modifyMenu.CreateMenuItem("Report a Bug".Localize()' AggContext.StaticData.LoadIcon("feedback.png"' 16' 16' menuTheme.InvertIcons));  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://github.com/MatterHackers/MatterControl/issues");  			}' AggContext.StaticData.LoadIcon("feedback.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: popupMenu.CreateSubMenu("Community".Localize()' menuTheme' (modifyMenu) =>  			{  				menuItem = modifyMenu.CreateMenuItem("Forums".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://forums.matterhackers.com/category/20/mattercontrol");    				menuItem = modifyMenu.CreateMenuItem("Guides and Articles".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/topic/mattercontrol");    				menuItem = modifyMenu.CreateMenuItem("Support".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/mattercontrol/support");    				menuItem = modifyMenu.CreateMenuItem("Release Notes".Localize()' linkIcon);  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://www.matterhackers.com/mattercontrol/support/release-notes");    				modifyMenu.CreateSeparator();    				menuItem = modifyMenu.CreateMenuItem("Report a Bug".Localize()' AggContext.StaticData.LoadIcon("feedback.png"' 16' 16' menuTheme.InvertIcons));  				menuItem.Click += (s' e) => ApplicationController.Instance.LaunchBrowser("https://github.com/MatterHackers/MatterControl/issues");  			}' AggContext.StaticData.LoadIcon("feedback.png"' 16' 16' menuTheme.InvertIcons));
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: var imageBuffer = new ImageBuffer(18' 18);
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: var imageBuffer = new ImageBuffer(18' 18);
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: graphics.DrawString("64"' imageBuffer.Width / 2' imageBuffer.Height / 2' 8' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: menuTheme.PrimaryAccentColor);
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: graphics.DrawString("64"' imageBuffer.Width / 2' imageBuffer.Height / 2' 8' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: menuTheme.PrimaryAccentColor);
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: graphics.DrawString("64"' imageBuffer.Width / 2' imageBuffer.Height / 2' 8' Agg.Font.Justification.Center' Agg.Font.Baseline.BoundsCenter' color: menuTheme.PrimaryAccentColor);
Magic Number,MatterHackers.MatterControl,BrandMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\BrandMenuButton.cs,CreatePopupMenu,The following statement contains a magic number: IntPtr.Size == 8
Magic Number,MatterHackers.MatterControl,LogoSpinner,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\LogoSpinner.cs,LogoSpinner,The following statement contains a magic number: Animation spinAnimation = new Animation()  			{  				DrawTarget = widget'  				FramesPerSecond = 20  			};
Magic Number,MatterHackers.MatterControl,PrinterConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterConfig.cs,Connection_CommunicationStateChanged,The following statement contains a magic number: switch (printerConnection.DetailedPrintingState)  				{  					case DetailedPrintingState.HeatingBed:  						ApplicationController.Instance.Tasks.Execute(  							"Heating Bed".Localize()'  							this'  							(reporter' cancellationToken) =>  							{  								waitingForHeat = HeatingStatus.Bed;    								var progressStatus = new ProgressStatus();  								heatStart = printerConnection.ActualBedTemperature;  								heatDistance = Math.Abs(printerConnection.TargetBedTemperature - heatStart);    								while (heatDistance > 0   									&& waitingForHeat == HeatingStatus.Bed)  								{  									var remainingDistance = Math.Abs(printerConnection.TargetBedTemperature - printerConnection.ActualBedTemperature);  									progressStatus.Status = $"Heating Bed ({printerConnection.ActualBedTemperature:0}/{printerConnection.TargetBedTemperature:0})";  									progressStatus.Progress0To1 = (heatDistance - remainingDistance) / heatDistance;  									reporter.Report(progressStatus);  									Thread.Sleep(10);  								}    								return Task.CompletedTask;  							}'  							new RunningTaskOptions()  							{  								ReadOnlyReporting = true  							});  						break;    					case DetailedPrintingState.HeatingT0:  						ApplicationController.Instance.Tasks.Execute(  							"Heating Nozzle".Localize() + " 1"'  							this'  							(reporter' cancellationToken) =>  							{  								waitingForHeat = HeatingStatus.T0;    								var progressStatus = new ProgressStatus();    								heatStart = printerConnection.GetActualHotendTemperature(0);  								heatDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(0) - heatStart);    								while (heatDistance > 0   									&& waitingForHeat == HeatingStatus.T0)  								{  									var currentDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(0) - printerConnection.GetActualHotendTemperature(0));  									progressStatus.Progress0To1 = (heatDistance - currentDistance) / heatDistance;  									progressStatus.Status = $"Heating Nozzle ({printerConnection.GetActualHotendTemperature(0):0}/{printerConnection.GetTargetHotendTemperature(0):0})";  									reporter.Report(progressStatus);  									Thread.Sleep(1000);  								}    								return Task.CompletedTask;  							}'  							new RunningTaskOptions()  							{  								ReadOnlyReporting = true  							});  						break;    					case DetailedPrintingState.HeatingT1:  						ApplicationController.Instance.Tasks.Execute(  							"Heating Nozzle".Localize() + " 2"'  							this'  							(reporter' cancellationToken) =>  							{  								waitingForHeat = HeatingStatus.T1;    								var progressStatus = new ProgressStatus();    								heatStart = printerConnection.GetActualHotendTemperature(1);  								heatDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(1) - heatStart);    								while (heatDistance > 0  									&& waitingForHeat == HeatingStatus.T1)  								{  									var currentDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(1) - printerConnection.GetActualHotendTemperature(1));  									progressStatus.Progress0To1 = (heatDistance - currentDistance) / heatDistance;  									progressStatus.Status = $"Heating Nozzle ({printerConnection.GetActualHotendTemperature(1):0}/{printerConnection.GetTargetHotendTemperature(1):0})";  									reporter.Report(progressStatus);  									Thread.Sleep(1000);  								}    								return Task.CompletedTask;  							}'  							new RunningTaskOptions()  							{  								ReadOnlyReporting = true  							});  						break;    					case DetailedPrintingState.HomingAxis:  					case DetailedPrintingState.Printing:  					default:  						// clear any existing waiting states  						waitingForHeat = HeatingStatus.None;  						break;  				}
Magic Number,MatterHackers.MatterControl,PrinterConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterConfig.cs,Connection_CommunicationStateChanged,The following statement contains a magic number: switch (printerConnection.DetailedPrintingState)  				{  					case DetailedPrintingState.HeatingBed:  						ApplicationController.Instance.Tasks.Execute(  							"Heating Bed".Localize()'  							this'  							(reporter' cancellationToken) =>  							{  								waitingForHeat = HeatingStatus.Bed;    								var progressStatus = new ProgressStatus();  								heatStart = printerConnection.ActualBedTemperature;  								heatDistance = Math.Abs(printerConnection.TargetBedTemperature - heatStart);    								while (heatDistance > 0   									&& waitingForHeat == HeatingStatus.Bed)  								{  									var remainingDistance = Math.Abs(printerConnection.TargetBedTemperature - printerConnection.ActualBedTemperature);  									progressStatus.Status = $"Heating Bed ({printerConnection.ActualBedTemperature:0}/{printerConnection.TargetBedTemperature:0})";  									progressStatus.Progress0To1 = (heatDistance - remainingDistance) / heatDistance;  									reporter.Report(progressStatus);  									Thread.Sleep(10);  								}    								return Task.CompletedTask;  							}'  							new RunningTaskOptions()  							{  								ReadOnlyReporting = true  							});  						break;    					case DetailedPrintingState.HeatingT0:  						ApplicationController.Instance.Tasks.Execute(  							"Heating Nozzle".Localize() + " 1"'  							this'  							(reporter' cancellationToken) =>  							{  								waitingForHeat = HeatingStatus.T0;    								var progressStatus = new ProgressStatus();    								heatStart = printerConnection.GetActualHotendTemperature(0);  								heatDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(0) - heatStart);    								while (heatDistance > 0   									&& waitingForHeat == HeatingStatus.T0)  								{  									var currentDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(0) - printerConnection.GetActualHotendTemperature(0));  									progressStatus.Progress0To1 = (heatDistance - currentDistance) / heatDistance;  									progressStatus.Status = $"Heating Nozzle ({printerConnection.GetActualHotendTemperature(0):0}/{printerConnection.GetTargetHotendTemperature(0):0})";  									reporter.Report(progressStatus);  									Thread.Sleep(1000);  								}    								return Task.CompletedTask;  							}'  							new RunningTaskOptions()  							{  								ReadOnlyReporting = true  							});  						break;    					case DetailedPrintingState.HeatingT1:  						ApplicationController.Instance.Tasks.Execute(  							"Heating Nozzle".Localize() + " 2"'  							this'  							(reporter' cancellationToken) =>  							{  								waitingForHeat = HeatingStatus.T1;    								var progressStatus = new ProgressStatus();    								heatStart = printerConnection.GetActualHotendTemperature(1);  								heatDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(1) - heatStart);    								while (heatDistance > 0  									&& waitingForHeat == HeatingStatus.T1)  								{  									var currentDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(1) - printerConnection.GetActualHotendTemperature(1));  									progressStatus.Progress0To1 = (heatDistance - currentDistance) / heatDistance;  									progressStatus.Status = $"Heating Nozzle ({printerConnection.GetActualHotendTemperature(1):0}/{printerConnection.GetTargetHotendTemperature(1):0})";  									reporter.Report(progressStatus);  									Thread.Sleep(1000);  								}    								return Task.CompletedTask;  							}'  							new RunningTaskOptions()  							{  								ReadOnlyReporting = true  							});  						break;    					case DetailedPrintingState.HomingAxis:  					case DetailedPrintingState.Printing:  					default:  						// clear any existing waiting states  						waitingForHeat = HeatingStatus.None;  						break;  				}
Magic Number,MatterHackers.MatterControl,PrinterConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterConfig.cs,Connection_CommunicationStateChanged,The following statement contains a magic number: switch (printerConnection.DetailedPrintingState)  				{  					case DetailedPrintingState.HeatingBed:  						ApplicationController.Instance.Tasks.Execute(  							"Heating Bed".Localize()'  							this'  							(reporter' cancellationToken) =>  							{  								waitingForHeat = HeatingStatus.Bed;    								var progressStatus = new ProgressStatus();  								heatStart = printerConnection.ActualBedTemperature;  								heatDistance = Math.Abs(printerConnection.TargetBedTemperature - heatStart);    								while (heatDistance > 0   									&& waitingForHeat == HeatingStatus.Bed)  								{  									var remainingDistance = Math.Abs(printerConnection.TargetBedTemperature - printerConnection.ActualBedTemperature);  									progressStatus.Status = $"Heating Bed ({printerConnection.ActualBedTemperature:0}/{printerConnection.TargetBedTemperature:0})";  									progressStatus.Progress0To1 = (heatDistance - remainingDistance) / heatDistance;  									reporter.Report(progressStatus);  									Thread.Sleep(10);  								}    								return Task.CompletedTask;  							}'  							new RunningTaskOptions()  							{  								ReadOnlyReporting = true  							});  						break;    					case DetailedPrintingState.HeatingT0:  						ApplicationController.Instance.Tasks.Execute(  							"Heating Nozzle".Localize() + " 1"'  							this'  							(reporter' cancellationToken) =>  							{  								waitingForHeat = HeatingStatus.T0;    								var progressStatus = new ProgressStatus();    								heatStart = printerConnection.GetActualHotendTemperature(0);  								heatDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(0) - heatStart);    								while (heatDistance > 0   									&& waitingForHeat == HeatingStatus.T0)  								{  									var currentDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(0) - printerConnection.GetActualHotendTemperature(0));  									progressStatus.Progress0To1 = (heatDistance - currentDistance) / heatDistance;  									progressStatus.Status = $"Heating Nozzle ({printerConnection.GetActualHotendTemperature(0):0}/{printerConnection.GetTargetHotendTemperature(0):0})";  									reporter.Report(progressStatus);  									Thread.Sleep(1000);  								}    								return Task.CompletedTask;  							}'  							new RunningTaskOptions()  							{  								ReadOnlyReporting = true  							});  						break;    					case DetailedPrintingState.HeatingT1:  						ApplicationController.Instance.Tasks.Execute(  							"Heating Nozzle".Localize() + " 2"'  							this'  							(reporter' cancellationToken) =>  							{  								waitingForHeat = HeatingStatus.T1;    								var progressStatus = new ProgressStatus();    								heatStart = printerConnection.GetActualHotendTemperature(1);  								heatDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(1) - heatStart);    								while (heatDistance > 0  									&& waitingForHeat == HeatingStatus.T1)  								{  									var currentDistance = Math.Abs(printerConnection.GetTargetHotendTemperature(1) - printerConnection.GetActualHotendTemperature(1));  									progressStatus.Progress0To1 = (heatDistance - currentDistance) / heatDistance;  									progressStatus.Status = $"Heating Nozzle ({printerConnection.GetActualHotendTemperature(1):0}/{printerConnection.GetTargetHotendTemperature(1):0})";  									reporter.Report(progressStatus);  									Thread.Sleep(1000);  								}    								return Task.CompletedTask;  							}'  							new RunningTaskOptions()  							{  								ReadOnlyReporting = true  							});  						break;    					case DetailedPrintingState.HomingAxis:  					case DetailedPrintingState.Printing:  					default:  						// clear any existing waiting states  						waitingForHeat = HeatingStatus.None;  						break;  				}
Magic Number,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,InsideBuildVolume,The following statement contains a magic number: switch (bed.BedShape)  			{  				case BedShape.Rectangular:  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						return false;  					}  					break;    				case BedShape.Circular:  					// This could be much better if it checked the actual vertex data of the mesh against the cylinder  					// first check if any of it is outside the bed rect  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						// TODO: then check if all of it is outside the bed circle  						return false;  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,InsideBuildVolume,The following statement contains a magic number: switch (bed.BedShape)  			{  				case BedShape.Rectangular:  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						return false;  					}  					break;    				case BedShape.Circular:  					// This could be much better if it checked the actual vertex data of the mesh against the cylinder  					// first check if any of it is outside the bed rect  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						// TODO: then check if all of it is outside the bed circle  						return false;  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,InsideBuildVolume,The following statement contains a magic number: switch (bed.BedShape)  			{  				case BedShape.Rectangular:  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						return false;  					}  					break;    				case BedShape.Circular:  					// This could be much better if it checked the actual vertex data of the mesh against the cylinder  					// first check if any of it is outside the bed rect  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						// TODO: then check if all of it is outside the bed circle  						return false;  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,InsideBuildVolume,The following statement contains a magic number: switch (bed.BedShape)  			{  				case BedShape.Rectangular:  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						return false;  					}  					break;    				case BedShape.Circular:  					// This could be much better if it checked the actual vertex data of the mesh against the cylinder  					// first check if any of it is outside the bed rect  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						// TODO: then check if all of it is outside the bed circle  						return false;  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,InsideBuildVolume,The following statement contains a magic number: switch (bed.BedShape)  			{  				case BedShape.Rectangular:  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						return false;  					}  					break;    				case BedShape.Circular:  					// This could be much better if it checked the actual vertex data of the mesh against the cylinder  					// first check if any of it is outside the bed rect  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						// TODO: then check if all of it is outside the bed circle  						return false;  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,InsideBuildVolume,The following statement contains a magic number: switch (bed.BedShape)  			{  				case BedShape.Rectangular:  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						return false;  					}  					break;    				case BedShape.Circular:  					// This could be much better if it checked the actual vertex data of the mesh against the cylinder  					// first check if any of it is outside the bed rect  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						// TODO: then check if all of it is outside the bed circle  						return false;  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,InsideBuildVolume,The following statement contains a magic number: switch (bed.BedShape)  			{  				case BedShape.Rectangular:  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						return false;  					}  					break;    				case BedShape.Circular:  					// This could be much better if it checked the actual vertex data of the mesh against the cylinder  					// first check if any of it is outside the bed rect  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						// TODO: then check if all of it is outside the bed circle  						return false;  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,InsideBuildVolume,The following statement contains a magic number: switch (bed.BedShape)  			{  				case BedShape.Rectangular:  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						return false;  					}  					break;    				case BedShape.Circular:  					// This could be much better if it checked the actual vertex data of the mesh against the cylinder  					// first check if any of it is outside the bed rect  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						// TODO: then check if all of it is outside the bed circle  						return false;  					}  					break;  			}
Magic Number,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,CancelPrint,The following statement contains a magic number: printer.Connection.SecondsPrinted > 120
Magic Number,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The following statement contains a magic number: var supportGenerator = new SupportGenerator(printer.Bed.Scene' .05);
Magic Number,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The following statement contains a magic number: heatedBed  						&& printer.Connection.IsConnected  						&& !PrinterSetupRequired(printer)  						&& printer.Settings.Helpers.PrintLevelingData is PrintLevelingData levelingData  						&& !levelingData.IssuedLevelingTempWarning  						&& Math.Abs(bedTemperature - levelingData.BedTemperature) > 10
Magic Number,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The following statement contains a magic number: Math.Abs(settings.GetValue<double>(SettingsKey.baby_step_z_offset)) > 2
Magic Number,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The following statement contains a magic number: settings.GetValue<double>(SettingsKey.first_layer_extrusion_width) > settings.GetValue<double>(SettingsKey.nozzle_diameter) * 4
Magic Number,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The following statement contains a magic number: settings.GetValue<double>(SettingsKey.external_perimeter_extrusion_width) > settings.GetValue<double>(SettingsKey.nozzle_diameter) * 4
Magic Number,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The following statement contains a magic number: settings.GetValue<double>(SettingsKey.min_fan_speed) > 100
Magic Number,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateSettings,The following statement contains a magic number: settings.GetValue<double>(SettingsKey.max_fan_speed) > 100
Magic Number,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateGCodeLinesShortEnough,The following statement contains a magic number: var details = "Found a line that is {0} characters long.\n{1}...".Localize().FormatWith(length' trimedLine.Substring(0' 20));
Magic Number,MatterHackers.MatterControl,SettingsValidation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\SettingsValidation.cs,ValidateGCodeLinesShortEnough,The following statement contains a magic number: length > 100
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ApplyPrimaryActionStyle,The following statement contains a magic number: guiWidget.BackgroundColor = new Color(this.AccentMimimalOverlay' 50);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateHeading,The following statement contains a magic number: return new TextWidget(text' pointSize: this.H1PointSize' textColor: this.TextColor' bold: true)  			{  				Margin = new BorderDouble(0' 5)  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateSearchButton,The following statement contains a magic number: return new IconButton(AggContext.StaticData.LoadIcon("icon_search_24x24.png"' 16' 16' this.InvertIcons)' this)  			{  				ToolTipText = "Search".Localize()'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateSearchButton,The following statement contains a magic number: return new IconButton(AggContext.StaticData.LoadIcon("icon_search_24x24.png"' 16' 16' this.InvertIcons)' this)  			{  				ToolTipText = "Search".Localize()'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ThemeConfig,The following statement contains a magic number: this.SeparatorMargin = (this.ButtonSpacing * 2).Clone(left: this.ButtonSpacing.Right);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,SetDefaults,The following statement contains a magic number: this.DisabledColor = new Color(this.LightTextColor' 50);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,SetDefaults,The following statement contains a magic number: this.SplashAccentColor = new Color(this.PrimaryAccentColor' 185).OverlayOn(Color.White).ToColor();
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,RebuildTheme,The following statement contains a magic number: int size = (int)(16 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,RebuildTheme,The following statement contains a magic number: restoreNormal = ColorCircle(size' (AggContext.OperatingSystem == OSType.Android) ? new Color(200' 0' 0) : Color.Transparent);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,RebuildTheme,The following statement contains a magic number: restorePressed = ColorCircle(size' new Color(255' 0' 0));
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,RebuildTheme,The following statement contains a magic number: this.GeneratingThumbnailIcon = AggContext.StaticData.LoadIcon("building_thumbnail_40x40.png"' 40' 40' this.InvertIcons);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,RebuildTheme,The following statement contains a magic number: this.GeneratingThumbnailIcon = AggContext.StaticData.LoadIcon("building_thumbnail_40x40.png"' 40' 40' this.InvertIcons);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,RebuildTheme,The following statement contains a magic number: DefaultThumbView.ThumbColor = new Color(this.TextColor' 30);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateMoveButton,The following statement contains a magic number: return new JogControls.MoveButton(label' printer' axis' movementFeedRate' this)  			{  				BackgroundColor = this.MinimalShade'  				Border = 1'  				BorderColor = this.BorderColor40'  				VAnchor = VAnchor.Absolute'  				HAnchor = HAnchor.Absolute'  				Margin = 0'  				Padding = 0'  				Height = (levelingButtons ? 45 : 40) * GuiWidget.DeviceScale'  				Width = (levelingButtons ? 90 : 40) * GuiWidget.DeviceScale'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateMoveButton,The following statement contains a magic number: return new JogControls.MoveButton(label' printer' axis' movementFeedRate' this)  			{  				BackgroundColor = this.MinimalShade'  				Border = 1'  				BorderColor = this.BorderColor40'  				VAnchor = VAnchor.Absolute'  				HAnchor = HAnchor.Absolute'  				Margin = 0'  				Padding = 0'  				Height = (levelingButtons ? 45 : 40) * GuiWidget.DeviceScale'  				Width = (levelingButtons ? 90 : 40) * GuiWidget.DeviceScale'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateMoveButton,The following statement contains a magic number: return new JogControls.MoveButton(label' printer' axis' movementFeedRate' this)  			{  				BackgroundColor = this.MinimalShade'  				Border = 1'  				BorderColor = this.BorderColor40'  				VAnchor = VAnchor.Absolute'  				HAnchor = HAnchor.Absolute'  				Margin = 0'  				Padding = 0'  				Height = (levelingButtons ? 45 : 40) * GuiWidget.DeviceScale'  				Width = (levelingButtons ? 90 : 40) * GuiWidget.DeviceScale'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateMoveButton,The following statement contains a magic number: return new JogControls.MoveButton(label' printer' axis' movementFeedRate' this)  			{  				BackgroundColor = this.MinimalShade'  				Border = 1'  				BorderColor = this.BorderColor40'  				VAnchor = VAnchor.Absolute'  				HAnchor = HAnchor.Absolute'  				Margin = 0'  				Padding = 0'  				Height = (levelingButtons ? 45 : 40) * GuiWidget.DeviceScale'  				Width = (levelingButtons ? 90 : 40) * GuiWidget.DeviceScale'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateExtrudeButton,The following statement contains a magic number: return new JogControls.ExtrudeButton(printer' label' movementFeedRate' extruderNumber' this)  			{  				BackgroundColor = this.MinimalShade'  				Border = 1'  				BorderColor = this.BorderColor40'  				VAnchor = VAnchor.Absolute'  				HAnchor = HAnchor.Absolute'  				Margin = 0'  				Padding = 0'  				Height = (levelingButtons ? 45 : 40) * GuiWidget.DeviceScale'  				Width = (levelingButtons ? 90 : 40) * GuiWidget.DeviceScale'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateExtrudeButton,The following statement contains a magic number: return new JogControls.ExtrudeButton(printer' label' movementFeedRate' extruderNumber' this)  			{  				BackgroundColor = this.MinimalShade'  				Border = 1'  				BorderColor = this.BorderColor40'  				VAnchor = VAnchor.Absolute'  				HAnchor = HAnchor.Absolute'  				Margin = 0'  				Padding = 0'  				Height = (levelingButtons ? 45 : 40) * GuiWidget.DeviceScale'  				Width = (levelingButtons ? 90 : 40) * GuiWidget.DeviceScale'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateExtrudeButton,The following statement contains a magic number: return new JogControls.ExtrudeButton(printer' label' movementFeedRate' extruderNumber' this)  			{  				BackgroundColor = this.MinimalShade'  				Border = 1'  				BorderColor = this.BorderColor40'  				VAnchor = VAnchor.Absolute'  				HAnchor = HAnchor.Absolute'  				Margin = 0'  				Padding = 0'  				Height = (levelingButtons ? 45 : 40) * GuiWidget.DeviceScale'  				Width = (levelingButtons ? 90 : 40) * GuiWidget.DeviceScale'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateExtrudeButton,The following statement contains a magic number: return new JogControls.ExtrudeButton(printer' label' movementFeedRate' extruderNumber' this)  			{  				BackgroundColor = this.MinimalShade'  				Border = 1'  				BorderColor = this.BorderColor40'  				VAnchor = VAnchor.Absolute'  				HAnchor = HAnchor.Absolute'  				Margin = 0'  				Padding = 0'  				Height = (levelingButtons ? 45 : 40) * GuiWidget.DeviceScale'  				Width = (levelingButtons ? 90 : 40) * GuiWidget.DeviceScale'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateMicroRadioButton,The following statement contains a magic number: var radioButton = new RadioTextButton(text' this' this.FontSize8)  			{  				SiblingRadioButtonList = siblingRadioButtonList'  				Padding = new BorderDouble(5' 0)'  				SelectedBackgroundColor = this.SlightShade'  				UnselectedBackgroundColor = this.SlightShade'  				HoverColor = this.AccentMimimalOverlay'  				Margin = new BorderDouble(right: 1)'  				HAnchor = HAnchor.Absolute'  				Height = this.MicroButtonHeight'  				Width = this.MicroButtonWidth  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateLightDialogButton,The following statement contains a magic number: return CreateDialogButton(text' new Color(Color.White' 15)' new Color(Color.White' 25));
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateLightDialogButton,The following statement contains a magic number: return CreateDialogButton(text' new Color(Color.White' 15)' new Color(Color.White' 25));
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateDialogButton,The following statement contains a magic number: return CreateDialogButton(text' this.SlightShade' this.SlightShade.WithAlpha(75));
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateDialogButton,The following statement contains a magic number: return new TextButton(text' this)  			{  				BackgroundColor = backgroundColor'  				HoverColor = hoverColor'  				MinimumSize = new Vector2(75' 0)'  				Margin = this.ButtonSpacing  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: var center = new Vector2(size / 2.0' size / 2.0);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: var center = new Vector2(size / 2.0' size / 2.0);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Circle(center' size / 2.0' color);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' barColor' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' barColor' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' barColor' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' barColor' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' -size / 4.0)' center + new Vector2(size / 4.0' size / 4.0)' barColor' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' barColor' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' barColor' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' barColor' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' barColor' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ColorCircle,The following statement contains a magic number: normalGraphics.Line(center + new Vector2(-size / 4.0' size / 4.0)' center + new Vector2(size / 4.0' -size / 4.0)' barColor' 2 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateSmallResetButton,The following statement contains a magic number: return new HoverImageWidget(restoreNormal' restoreHover)  			{  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(0' 0' 5' 0)  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateSolidSlider,The following statement contains a magic number: double scrollBarWidth = 10;
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateSolidSlider,The following statement contains a magic number: wordOptionContainer.AddChild(new TextWidget(header' textColor: this.TextColor)  			{  				Margin = new BorderDouble(10' 3' 3' 5)'  				HAnchor = HAnchor.Left  			});
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateSolidSlider,The following statement contains a magic number: wordOptionContainer.AddChild(new TextWidget(header' textColor: this.TextColor)  			{  				Margin = new BorderDouble(10' 3' 3' 5)'  				HAnchor = HAnchor.Left  			});
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateSolidSlider,The following statement contains a magic number: wordOptionContainer.AddChild(new TextWidget(header' textColor: this.TextColor)  			{  				Margin = new BorderDouble(10' 3' 3' 5)'  				HAnchor = HAnchor.Left  			});
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateSolidSlider,The following statement contains a magic number: wordOptionContainer.AddChild(new TextWidget(header' textColor: this.TextColor)  			{  				Margin = new BorderDouble(10' 3' 3' 5)'  				HAnchor = HAnchor.Left  			});
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateSolidSlider,The following statement contains a magic number: var namedSlider = new SolidSlider(new Vector2()' scrollBarWidth' theme' 0' 1)  			{  				TotalWidthInPixels = defaultScrollBarWidth'  				Minimum = min'  				Maximum = max'  				Margin = new BorderDouble(12' 4)'  				HAnchor = HAnchor.Stretch'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,CreateSolidSlider,The following statement contains a magic number: var namedSlider = new SolidSlider(new Vector2()' scrollBarWidth' theme' 0' 1)  			{  				TotalWidthInPixels = defaultScrollBarWidth'  				Minimum = min'  				Maximum = max'  				Margin = new BorderDouble(12' 4)'  				HAnchor = HAnchor.Stretch'  			};
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ApplySliderStyle,The following statement contains a magic number: solidSlider.View.TrackRadius = 4;
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ApplySliderStyle,The following statement contains a magic number: solidSlider.View.TrackRadius = 4;
Magic Number,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ApplyBoxStyle,The following statement contains a magic number: sectionWidget.BorderRadius = 5;
Magic Number,MatterHackers.MatterControl,ThemeSet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeSet.cs,SetAccentColor,The following statement contains a magic number: this.Theme.AccentMimimalOverlay = accentColor.WithAlpha(90);
Magic Number,MatterHackers.MatterControl,ThemeSet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeSet.cs,SetAccentColor,The following statement contains a magic number: this.MenuTheme.AccentMimimalOverlay = accentColor.WithAlpha(90);
Magic Number,MatterHackers.MatterControl,ThumbnailsConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ThumbnailsConfig.cs,LoadCachedImage,The following statement contains a magic number: var cachedAt100x100 = LoadImage(this.CachePath(cacheId' 100' 100));
Magic Number,MatterHackers.MatterControl,ThumbnailsConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ThumbnailsConfig.cs,LoadCachedImage,The following statement contains a magic number: var cachedAt100x100 = LoadImage(this.CachePath(cacheId' 100' 100));
Magic Number,MatterHackers.MatterControl,ThumbnailsConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ThumbnailsConfig.cs,LoadCachedImage,The following statement contains a magic number: width < 100  				&& height < 100
Magic Number,MatterHackers.MatterControl,ThumbnailsConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ThumbnailsConfig.cs,LoadCachedImage,The following statement contains a magic number: width < 100  				&& height < 100
Magic Number,MatterHackers.MatterControl,ThumbnailsConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ThumbnailsConfig.cs,LoadCachedImage,The following statement contains a magic number: var staticDataFilename = Path.Combine("Images"' "Thumbnails"' CacheFilename(libraryItem' 256' 256));
Magic Number,MatterHackers.MatterControl,ThumbnailsConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ThumbnailsConfig.cs,LoadCachedImage,The following statement contains a magic number: var staticDataFilename = Path.Combine("Images"' "Thumbnails"' CacheFilename(libraryItem' 256' 256));
Magic Number,MatterHackers.MatterControl,ThumbnailsConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ThumbnailsConfig.cs,ThumbGeneration,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MatterHackers.MatterControl,WizardPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WizardPage.cs,CreateTextField,The following statement contains a magic number: return new WrappedTextWidget(text' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  			{  				Margin = new BorderDouble(left: 10' top: 10)'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl,WizardPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WizardPage.cs,CreateTextField,The following statement contains a magic number: return new WrappedTextWidget(text' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  			{  				Margin = new BorderDouble(left: 10' top: 10)'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl,AttentionGetter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\AttentionGetter.cs,GetFadeInOutPulseRatio,The following statement contains a magic number: ratio = ratio * 2 / pulseTime;
Magic Number,MatterHackers.MatterControl,MHNumberEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHNumberEdit.cs,MHNumberEdit,The following statement contains a magic number: this.Padding = 3;
Magic Number,MatterHackers.MatterControl,MHNumberEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHNumberEdit.cs,MHNumberEdit,The following statement contains a magic number: singleCharEditColor = theme.PrimaryAccentColor.WithContrast(theme.EditFieldColors.Focused.BackgroundColor' 3).ToColor();
Magic Number,MatterHackers.MatterControl,MHNumberEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHNumberEdit.cs,MHNumberEdit,The following statement contains a magic number: labelWidget = new TextWidget(singleCharLabel.ToString()' pointSize: theme.DefaultFontSize - 2' textColor: theme.PrimaryAccentColor)  					{  						Margin = new BorderDouble(left: 2)'  						HAnchor = HAnchor.Left'  						VAnchor = VAnchor.Center'  						Selectable = false  					};
Magic Number,MatterHackers.MatterControl,MHNumberEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHNumberEdit.cs,MHNumberEdit,The following statement contains a magic number: labelWidget = new TextWidget(singleCharLabel.ToString()' pointSize: theme.DefaultFontSize - 2' textColor: theme.PrimaryAccentColor)  					{  						Margin = new BorderDouble(left: 2)'  						HAnchor = HAnchor.Left'  						VAnchor = VAnchor.Center'  						Selectable = false  					};
Magic Number,MatterHackers.MatterControl,MHNumberEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHNumberEdit.cs,MHNumberEdit,The following statement contains a magic number: ActuallNumberEdit.Margin = ActuallNumberEdit.Margin.Clone(left: labelWidth + 2);
Magic Number,MatterHackers.MatterControl,MHNumberEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHNumberEdit.cs,MHNumberEdit,The following statement contains a magic number: this.ActuallNumberEdit.InternalNumberEdit.MaxDecimalsPlaces = 5;
Magic Number,MatterHackers.MatterControl,MHTextEditWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\MHTextEditWidget.cs,MHTextEditWidget,The following statement contains a magic number: this.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,StyledMessageBox,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\StyledMessageBoxWindow.cs,ShowMessageBox,The following statement contains a magic number: DialogWindow.Show(  				new MessageBoxPage(callback' message' caption' messageType' extraWidgetsToAdd' 400' 300' yesOk' noCancel' ApplicationController.Instance.Theme' useMarkdown));
Magic Number,MatterHackers.MatterControl,StyledMessageBox,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\StyledMessageBoxWindow.cs,ShowMessageBox,The following statement contains a magic number: DialogWindow.Show(  				new MessageBoxPage(callback' message' caption' messageType' extraWidgetsToAdd' 400' 300' yesOk' noCancel' ApplicationController.Instance.Theme' useMarkdown));
Magic Number,MatterHackers.MatterControl,MessageBoxPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ControlElements\StyledMessageBoxWindow.cs,AdjustTextWrap,The following statement contains a magic number: var wrapper = new EnglishTextWrapping(12 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: tabBaseColor = new Color(theme.SlightShade.ToColorF()' theme.SlightShade.Alpha0To1 * 1.2);
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: double barWidth = 30;
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: double barHeight = 300;
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: double left = LocalBounds.Left + 15;
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: double bottom = LocalBounds.Bottom + 15;
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: var f = new Vector2(right + (barWidth * .7)' bottom + (barWidth / 2));
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: var f = new Vector2(right + (barWidth * .7)' bottom + (barWidth / 2));
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: var m = new Vector2(b.X + (barWidth / 2)' b.Y + (barWidth * .6));
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: var m = new Vector2(b.X + (barWidth / 2)' b.Y + (barWidth * .6));
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: int highlightStroke = 2;
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: int highlightOffset = 8;
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: int highlightWidth = 16;
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: double midY = y1 + (y2 - y1) / 2;
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: xLabel.Position = new Vector2(x2 + highlightOffset * 2' midY - xLabel.Height / 2);
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: xLabel.Position = new Vector2(x2 + highlightOffset * 2' midY - xLabel.Height / 2);
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: y1 = d.Y + 50;
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: double midX = x1 + (x2 - x1) / 2;
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: yLabel.Position = new Vector2(midX - yLabel.Width / 2' y2 + (highlightOffset * 2));
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: yLabel.Position = new Vector2(midX - yLabel.Width / 2' y2 + (highlightOffset * 2));
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: int padCount = 7;
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: int padding = (int)(cellSize * .3);
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: this.AddChild(new CalibrationPad(titles[i]' theme' pointSize: theme.DefaultFontSize - 1)  				{  					Position = new Vector2(left' bottom + 3 + barWidth + (cellSize * i))'  					Height = padSize'  					Width = barWidth'  					Index = i'  					IsActive = i == 3'  					Axis = PrinterAxis.X  				});
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: this.AddChild(new CalibrationPad(titles[i]' theme' pointSize: theme.DefaultFontSize - 1)  				{  					Position = new Vector2(left' bottom + 3 + barWidth + (cellSize * i))'  					Height = padSize'  					Width = barWidth'  					Index = i'  					IsActive = i == 3'  					Axis = PrinterAxis.X  				});
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: this.AddChild(new CalibrationPad(titles[i]' theme' pointSize: theme.DefaultFontSize - 1)  				{  					Position = new Vector2(left + 3 + barWidth + (cellSize * i)' bottom)'  					Height = barWidth'  					Width = padSize'  					Index = i'  					IsActive = i == 3'  					Axis = PrinterAxis.Y  				});
Magic Number,MatterHackers.MatterControl,CalibrationTabWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationTabWidget,The following statement contains a magic number: this.AddChild(new CalibrationPad(titles[i]' theme' pointSize: theme.DefaultFontSize - 1)  				{  					Position = new Vector2(left + 3 + barWidth + (cellSize * i)' bottom)'  					Height = barWidth'  					Width = padSize'  					Index = i'  					IsActive = i == 3'  					Axis = PrinterAxis.Y  				});
Magic Number,MatterHackers.MatterControl,CalibrationPad,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationPad,The following statement contains a magic number: inactiveIcon = new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl,CalibrationPad,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationPad,The following statement contains a magic number: inactiveIcon = new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl,CalibrationPad,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationPad,The following statement contains a magic number: this.BackgroundColor = theme.PrimaryAccentColor.WithAlpha(35);
Magic Number,MatterHackers.MatterControl,CalibrationPad,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\CalibrationTabWidget.cs,CalibrationPad,The following statement contains a magic number: this.BorderColor = theme.PrimaryAccentColor.WithAlpha(80);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlideView,The following statement contains a magic number: TrackHeight = 10;
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlideView,The following statement contains a magic number: TrackColor = new Color(220' 220' 220);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlideView,The following statement contains a magic number: TrackColor = new Color(220' 220' 220);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlideView,The following statement contains a magic number: TrackColor = new Color(220' 220' 220);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetTrackBounds,The following statement contains a magic number: trackBounds = new RectangleDouble(0' -TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels' TrackHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetTrackBounds,The following statement contains a magic number: trackBounds = new RectangleDouble(0' -TrackHeight / 2' sliderAttachedTo.TotalWidthInPixels' TrackHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: ValuePrintPosition = new Vector2(sliderAttachedTo.TotalWidthInPixels / 2' -TrackHeight - 12);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: ValuePrintPosition = new Vector2(sliderAttachedTo.TotalWidthInPixels / 2' -TrackHeight - 12);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: graphics2D.Render(firstThumbOutside' ColorF.GetTweenColor(ThumbColor.ToColorF()' ColorF.Black.ToColorF()' .2).ToColor());
Magic Number,MatterHackers.MatterControl,DoubleSolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoDrawAfterChildren,The following statement contains a magic number: graphics2D.Render(secondThumbOutside' ColorF.GetTweenColor(ThumbColor.ToColorF()' ColorF.Black.ToColorF()' .2).ToColor());
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,DoubleSolidSlider,The following statement contains a magic number: ThumbHeight = widthInPixels * 1.4;
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetSecondThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromSecondValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromSecondValue' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetFirstThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(-ThumbWidth / 2 + PositionPixelsFromFirstValue' -ThumbHeight / 2'  					ThumbWidth / 2 + PositionPixelsFromFirstValue' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetPositionPixelsFromFirstValue,The following statement contains a magic number: return ThumbWidth / 2 + TrackWidth * GetPosition0To1FromFirstValue(value);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,DoubleSolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DoubleSolidSlider.cs,OnMouseMove,The following statement contains a magic number: PositionPixelsFromFirstValue = Math.Min(mousePos.X - mouseDownOffsetFromFirstThumbCenter' PositionPixelsFromSecondValue - ThumbWidth - 2);
Magic Number,MatterHackers.MatterControl,ExportPrintItemPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ExportPrintItemPage.cs,ExportPrintItemPage,The following statement contains a magic number: var commonMargin = new BorderDouble(4' 2);
Magic Number,MatterHackers.MatterControl,ExportPrintItemPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ExportPrintItemPage.cs,ExportPrintItemPage,The following statement contains a magic number: var commonMargin = new BorderDouble(4' 2);
Magic Number,MatterHackers.MatterControl,ExportPrintItemPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ExportPrintItemPage.cs,ExportPrintItemPage,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Disabled: {0}".Localize().FormatWith(plugin.DisabledReason)' textColor: theme.PrimaryAccentColor)  						{  							Margin = new BorderDouble(left: 80)'  							HAnchor = HAnchor.Left  						});
Magic Number,MatterHackers.MatterControl,ExportPrintItemPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ExportPrintItemPage.cs,ExportPrintItemPage,The following statement contains a magic number: showInFolderAfterSave = new CheckBox("Show file in folder after save".Localize()' theme.TextColor' 10)  				{  					HAnchor = HAnchor.Left'  					Cursor = Cursors.Hand  				};
Magic Number,MatterHackers.MatterControl,GCodeSketch,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\GCodeSketch.cs,ExtrudeAmount,The following statement contains a magic number: var areaMm2 = Math.PI * Math.Pow(filamentDiameterMm / 2' 2);
Magic Number,MatterHackers.MatterControl,GCodeSketch,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\GCodeSketch.cs,ExtrudeAmount,The following statement contains a magic number: var areaMm2 = Math.PI * Math.Pow(filamentDiameterMm / 2' 2);
Magic Number,MatterHackers.MatterControl,GCodeSketch,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\GCodeSketch.cs,ExtrudeAmount,The following statement contains a magic number: var areaMm2 = Math.PI * Math.Pow(filamentDiameterMm / 2' 2);
Magic Number,MatterHackers.MatterControl,GCodeSketch,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\GCodeSketch.cs,ExtrudeAmount,The following statement contains a magic number: var areaMm2 = Math.PI * Math.Pow(filamentDiameterMm / 2' 2);
Magic Number,MatterHackers.MatterControl,RadioImageWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\RadioImageWidget.cs,RadioImageWidget,The following statement contains a magic number: imageWidget.Margin = new BorderDouble(8' 5);
Magic Number,MatterHackers.MatterControl,RadioImageWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\RadioImageWidget.cs,RadioImageWidget,The following statement contains a magic number: imageWidget.Margin = new BorderDouble(8' 5);
Magic Number,MatterHackers.MatterControl,RadioImageWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\RadioImageWidget.cs,RadioImageWidget,The following statement contains a magic number: labelTextWidget.Margin = new BorderDouble(8' 0);
Magic Number,MatterHackers.MatterControl,RadioImageWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\RadioImageWidget.cs,RadioImageWidget,The following statement contains a magic number: radioCircle.Margin = new BorderDouble(8' 0);
Magic Number,MatterHackers.MatterControl,RadioPanelWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\RadioPanelWidget.cs,RadioPanelWidget,The following statement contains a magic number: radioCircle.Margin = new BorderDouble(4);
Magic Number,MatterHackers.MatterControl,RadioPanelWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\RadioPanelWidget.cs,RadioPanelWidget,The following statement contains a magic number: labelTextWidget.Margin = new BorderDouble(8' 0);
Magic Number,MatterHackers.MatterControl,RadioPanelWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\RadioPanelWidget.cs,RadioPanelWidget,The following statement contains a magic number: imageWidget.Margin = new BorderDouble(8' 5);
Magic Number,MatterHackers.MatterControl,RadioPanelWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\RadioPanelWidget.cs,RadioPanelWidget,The following statement contains a magic number: imageWidget.Margin = new BorderDouble(8' 5);
Magic Number,MatterHackers.MatterControl,SlideWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SlideWidget.cs,SlideIn,The following statement contains a magic number: this.Width = 0.1;
Magic Number,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,SolidSlideView,The following statement contains a magic number: TrackHeight = 10;
Magic Number,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,SolidSlideView,The following statement contains a magic number: TrackColor = new Color(220' 220' 220);
Magic Number,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,SolidSlideView,The following statement contains a magic number: TrackColor = new Color(220' 220' 220);
Magic Number,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,SolidSlideView,The following statement contains a magic number: TrackColor = new Color(220' 220' 220);
Magic Number,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetTrackBounds,The following statement contains a magic number: trackBounds = new RectangleDouble(sliderBounds.Left' (int)(yCenter - TrackHeight / 2 + .5)' sliderBounds.Right' (int)(yCenter + TrackHeight / 2 + .5));
Magic Number,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetTrackBounds,The following statement contains a magic number: trackBounds = new RectangleDouble(sliderBounds.Left' (int)(yCenter - TrackHeight / 2 + .5)' sliderBounds.Right' (int)(yCenter + TrackHeight / 2 + .5));
Magic Number,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetTrackBounds,The following statement contains a magic number: trackBounds = new RectangleDouble(sliderBounds.Left' (int)(yCenter - TrackHeight / 2 + .5)' sliderBounds.Right' (int)(yCenter + TrackHeight / 2 + .5));
Magic Number,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetTrackBounds,The following statement contains a magic number: trackBounds = new RectangleDouble(sliderBounds.Left' (int)(yCenter - TrackHeight / 2 + .5)' sliderBounds.Right' (int)(yCenter + TrackHeight / 2 + .5));
Magic Number,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,DrawTrackAndThumb,The following statement contains a magic number: ValuePrintPosition = new Vector2(sliderAttachedTo.TotalWidthInPixels / 2' -TrackHeight - 12);
Magic Number,MatterHackers.MatterControl,SolidSlideView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,DrawTrackAndThumb,The following statement contains a magic number: ValuePrintPosition = new Vector2(sliderAttachedTo.TotalWidthInPixels / 2' -TrackHeight - 12);
Magic Number,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,SolidSlider,The following statement contains a magic number: ThumbHeight = thumbWidth * 1.4;
Magic Number,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(LocalBounds.Left - ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter - ThumbHeight / 2 + .5)'  					LocalBounds.Left + ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter + ThumbHeight / 2 + .5));
Magic Number,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(LocalBounds.Left - ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter - ThumbHeight / 2 + .5)'  					LocalBounds.Left + ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter + ThumbHeight / 2 + .5));
Magic Number,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(LocalBounds.Left - ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter - ThumbHeight / 2 + .5)'  					LocalBounds.Left + ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter + ThumbHeight / 2 + .5));
Magic Number,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(LocalBounds.Left - ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter - ThumbHeight / 2 + .5)'  					LocalBounds.Left + ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter + ThumbHeight / 2 + .5));
Magic Number,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(LocalBounds.Left - ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter - ThumbHeight / 2 + .5)'  					LocalBounds.Left + ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter + ThumbHeight / 2 + .5));
Magic Number,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetThumbHitBounds,The following statement contains a magic number: return new RectangleDouble(LocalBounds.Left - ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter - ThumbHeight / 2 + .5)'  					LocalBounds.Left + ThumbWidth / 2 + PositionPixelsFromFirstValue'  					(int)(LocalBounds.YCenter + ThumbHeight / 2 + .5));
Magic Number,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetPositionPixelsFromValue,The following statement contains a magic number: return ThumbWidth / 2 + TrackWidth * GetPosition0To1FromValue(value);
Magic Number,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,SolidSlider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SolidSlider.cs,GetTrackHitBounds,The following statement contains a magic number: return new RectangleDouble(0' -ThumbHeight / 2'  					TotalWidthInPixels' ThumbHeight / 2);
Magic Number,MatterHackers.MatterControl,SvgWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SvgWidget.cs,SvgWidget,The following statement contains a magic number: int.TryParse(segments[2]' out width);
Magic Number,MatterHackers.MatterControl,SvgWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SvgWidget.cs,SvgWidget,The following statement contains a magic number: int.TryParse(segments[3]' out height);
Magic Number,MatterHackers.MatterControl,XyCalibrationCollectDataPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationCollectDataPage.cs,XyCalibrationCollectDataPage,The following statement contains a magic number: contentRow.AddChild(  				new TextWidget("Remove the calibration part from the bed and compare the sides of the pads in each axis.".Localize()' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  				{  					Margin = new BorderDouble(0' 15' 0' 0)  				});
Magic Number,MatterHackers.MatterControl,XyCalibrationCollectDataPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationCollectDataPage.cs,XyCalibrationCollectDataPage,The following statement contains a magic number: contentRow.AddChild(  				new TextWidget("Pick the pad that is the most aligned with the base' the pad that is the most balance and centered.".Localize()' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  				{  					Margin = new BorderDouble(0' 15' 0' 0)  				});
Magic Number,MatterHackers.MatterControl,XyCalibrationCollectDataPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationCollectDataPage.cs,XyCalibrationCollectDataPage,The following statement contains a magic number: calibrationRow.AddChild(  				new CalibrationTabWidget(calibrationWizard' NextButton' theme)  				{  					HAnchor = HAnchor.Center | HAnchor.Absolute'  					VAnchor = VAnchor.Center | VAnchor.Absolute'  					Width = 350'  					Height = 350  				});
Magic Number,MatterHackers.MatterControl,XyCalibrationCollectDataPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationCollectDataPage.cs,XyCalibrationCollectDataPage,The following statement contains a magic number: calibrationRow.AddChild(  				new CalibrationTabWidget(calibrationWizard' NextButton' theme)  				{  					HAnchor = HAnchor.Center | HAnchor.Absolute'  					VAnchor = VAnchor.Center | VAnchor.Absolute'  					Width = 350'  					Height = 350  				});
Magic Number,MatterHackers.MatterControl,XyCalibrationCollectDataPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationCollectDataPage.cs,OnAdvance,The following statement contains a magic number: hotendOffset.X -= calibrationWizard.Offset * 3 - calibrationWizard.Offset * calibrationWizard.XPick;
Magic Number,MatterHackers.MatterControl,XyCalibrationCollectDataPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationCollectDataPage.cs,OnAdvance,The following statement contains a magic number: hotendOffset.Y -= calibrationWizard.Offset * -3 + calibrationWizard.Offset * calibrationWizard.YPick;
Magic Number,MatterHackers.MatterControl,XyCalibrationDataRecieved,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationDataRecieved.cs,XyCalibrationDataRecieved,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Your printer has been adjusted but we should run calibrating again to improve accuracy.".Localize()' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  				{  					Margin = new Agg.BorderDouble(0' 15' 0' 0)  				});
Magic Number,MatterHackers.MatterControl,XyCalibrationDataRecieved,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationDataRecieved.cs,XyCalibrationDataRecieved,The following statement contains a magic number: calibrationWizard.XPick == 0  				|| calibrationWizard.XPick == 6  				|| calibrationWizard.YPick == 0  				|| calibrationWizard.YPick == 6
Magic Number,MatterHackers.MatterControl,XyCalibrationDataRecieved,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationDataRecieved.cs,XyCalibrationDataRecieved,The following statement contains a magic number: calibrationWizard.XPick == 0  				|| calibrationWizard.XPick == 6  				|| calibrationWizard.YPick == 0  				|| calibrationWizard.YPick == 6
Magic Number,MatterHackers.MatterControl,XyCalibrationSelectPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationSelectPage.cs,XyCalibrationSelectPage,The following statement contains a magic number: calibrationWizard.Offset = printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter) / 3.0;
Magic Number,MatterHackers.MatterControl,XyCalibrationSelectPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationSelectPage.cs,XyCalibrationSelectPage,The following statement contains a magic number: normalCalibration.CheckedStateChanged += (s' e) =>  			{  				calibrationWizard.Quality = QualityType.Normal;  				calibrationWizard.Offset = printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter) / 3.0;  			};
Magic Number,MatterHackers.MatterControl,XyCalibrationSelectPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationSelectPage.cs,XyCalibrationSelectPage,The following statement contains a magic number: fineCalibration.CheckedStateChanged += (s' e) =>  			{  				calibrationWizard.Quality = QualityType.Fine;  				calibrationWizard.Offset = printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter) / 9.0;  			};
Magic Number,MatterHackers.MatterControl,XyCalibrationSelectPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationSelectPage.cs,PrintCalibrationPart,The following statement contains a magic number: item.Matrix *= Matrix4X4.CreateTranslation(bedBounds.Center.X - aabb.MinXYZ.X - aabb.XSize / 2' bedBounds.Center.Y - aabb.MinXYZ.Y - aabb.YSize / 2' -aabb.MinXYZ.Z);
Magic Number,MatterHackers.MatterControl,XyCalibrationSelectPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationSelectPage.cs,PrintCalibrationPart,The following statement contains a magic number: item.Matrix *= Matrix4X4.CreateTranslation(bedBounds.Center.X - aabb.MinXYZ.X - aabb.XSize / 2' bedBounds.Center.Y - aabb.MinXYZ.Y - aabb.YSize / 2' -aabb.MinXYZ.Z);
Magic Number,MatterHackers.MatterControl,XyCalibrationSelectPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationSelectPage.cs,CreateCalibrationObject,The following statement contains a magic number: switch (calibrationWizard.Quality)  			{  				case QualityType.Coarse:  					return await XyCalibrationTabObject3D.Create(  						1'  						Math.Max(firstLayerHeight * 2' layerHeight * 2)'  						calibrationWizard.Offset'  						printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter)'  						printer.Settings.GetValue<double>(SettingsKey.wipe_tower_size));    				default:  					return await XyCalibrationFaceObject3D.Create(  						1'  						firstLayerHeight + layerHeight'  						layerHeight'  						calibrationWizard.Offset'  						printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter)'  						printer.Settings.GetValue<double>(SettingsKey.wipe_tower_size)'  						4);  			}
Magic Number,MatterHackers.MatterControl,XyCalibrationSelectPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationSelectPage.cs,CreateCalibrationObject,The following statement contains a magic number: switch (calibrationWizard.Quality)  			{  				case QualityType.Coarse:  					return await XyCalibrationTabObject3D.Create(  						1'  						Math.Max(firstLayerHeight * 2' layerHeight * 2)'  						calibrationWizard.Offset'  						printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter)'  						printer.Settings.GetValue<double>(SettingsKey.wipe_tower_size));    				default:  					return await XyCalibrationFaceObject3D.Create(  						1'  						firstLayerHeight + layerHeight'  						layerHeight'  						calibrationWizard.Offset'  						printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter)'  						printer.Settings.GetValue<double>(SettingsKey.wipe_tower_size)'  						4);  			}
Magic Number,MatterHackers.MatterControl,XyCalibrationSelectPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationSelectPage.cs,CreateCalibrationObject,The following statement contains a magic number: switch (calibrationWizard.Quality)  			{  				case QualityType.Coarse:  					return await XyCalibrationTabObject3D.Create(  						1'  						Math.Max(firstLayerHeight * 2' layerHeight * 2)'  						calibrationWizard.Offset'  						printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter)'  						printer.Settings.GetValue<double>(SettingsKey.wipe_tower_size));    				default:  					return await XyCalibrationFaceObject3D.Create(  						1'  						firstLayerHeight + layerHeight'  						layerHeight'  						calibrationWizard.Offset'  						printer.Settings.GetValue<double>(SettingsKey.nozzle_diameter)'  						printer.Settings.GetValue<double>(SettingsKey.wipe_tower_size)'  						4);  			}
Magic Number,MatterHackers.MatterControl,GCodeContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\GCodeContentProvider.cs,GCodeContentProvider,The following statement contains a magic number: int width = 60;
Magic Number,MatterHackers.MatterControl,GCodeContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\GCodeContentProvider.cs,GCodeContentProvider,The following statement contains a magic number: var center = new Vector2(width / 2.0' width / 2.0);
Magic Number,MatterHackers.MatterControl,GCodeContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\GCodeContentProvider.cs,GCodeContentProvider,The following statement contains a magic number: var center = new Vector2(width / 2.0' width / 2.0);
Magic Number,MatterHackers.MatterControl,GCodeContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\GCodeContentProvider.cs,GCodeContentProvider,The following statement contains a magic number: graphics2D.DrawString("GCode"' center.X' center.Y' 8 * width / 50' Justification.Center' Baseline.BoundsCenter' color: Color.White);
Magic Number,MatterHackers.MatterControl,GCodeContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\GCodeContentProvider.cs,GCodeContentProvider,The following statement contains a magic number: graphics2D.DrawString("GCode"' center.X' center.Y' 8 * width / 50' Justification.Center' Baseline.BoundsCenter' color: Color.White);
Magic Number,MatterHackers.MatterControl,GCodeContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\GCodeContentProvider.cs,GCodeContentProvider,The following statement contains a magic number: graphics2D.Render(  				new Stroke(  					new Ellipse(center' width / 2 - width / 12)'  					width / 12)'  				Color.White);
Magic Number,MatterHackers.MatterControl,GCodeContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\GCodeContentProvider.cs,GCodeContentProvider,The following statement contains a magic number: graphics2D.Render(  				new Stroke(  					new Ellipse(center' width / 2 - width / 12)'  					width / 12)'  				Color.White);
Magic Number,MatterHackers.MatterControl,GCodeContentProvider,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\ContentProviders\GCodeContentProvider.cs,GCodeContentProvider,The following statement contains a magic number: graphics2D.Render(  				new Stroke(  					new Ellipse(center' width / 2 - width / 12)'  					width / 12)'  				Color.White);
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitVolumesIntoMeshes,The following statement contains a magic number: maxProgressReport.ElapsedMilliseconds > 200
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitVolumesIntoMeshes,The following statement contains a magic number: var oneTenThousandth = totalBounds.Size.Length / 10000.0;
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\CreateDiscreteMeshes.cs,SplitVolumesIntoMeshes,The following statement contains a magic number: meshFromCurrentVolume.Vertices.Count > 2  						&& (bounds.XSize > oneTenThousandth  						|| bounds.YSize > oneTenThousandth  						|| bounds.ZSize > oneTenThousandth)  						&& meshFromCurrentVolume.Faces.Any(f => f.GetArea(meshFromCurrentVolume) > oneTenThousandth)
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\CreateDiscreteMeshes.cs,FindDistictObjectBounds,The following statement contains a magic number: min.X = Math.Min(point.X - 10' min.X);
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\CreateDiscreteMeshes.cs,FindDistictObjectBounds,The following statement contains a magic number: min.Y = Math.Min(point.Y - 10' min.Y);
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\CreateDiscreteMeshes.cs,FindDistictObjectBounds,The following statement contains a magic number: max.X = Math.Max(point.X + 10' max.X);
Magic Number,MatterHackers.MatterControl,CreateDiscreteMeshes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\CreateDiscreteMeshes.cs,FindDistictObjectBounds,The following statement contains a magic number: max.Y = Math.Max(point.Y + 10' max.Y);
Magic Number,MatterHackers.MatterControl,LibraryBrowserPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\LibraryBrowserPage.cs,LibraryBrowserPage,The following statement contains a magic number: this.WindowSize = new Vector2(480' 500);
Magic Number,MatterHackers.MatterControl,LibraryBrowserPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\LibraryBrowserPage.cs,LibraryBrowserPage,The following statement contains a magic number: this.WindowSize = new Vector2(480' 500);
Magic Number,MatterHackers.MatterControl,LibraryBrowserPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\LibraryBrowserPage.cs,LibraryBrowserPage,The following statement contains a magic number: librarySelectorWidget = new LibraryListView(libraryNavContext' new IconListView(theme' 75)' theme)  			{  				BackgroundColor = theme.MinimalShade'  				ShowItems = true'  				ContainerFilter = (container) => !container.IsReadOnly'  			};
Magic Number,MatterHackers.MatterControl,MarkdownEditPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MarkdownEditPage.cs,MarkdownEditPage,The following statement contains a magic number: var link = new LinkLabel("Markdown Help"' theme)  			{  				Margin = new BorderDouble(right: 20)'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl,MoveItemPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MoveItemPage.cs,MoveItemPage,The following statement contains a magic number: this.WindowSize = new Vector2(480' 500);
Magic Number,MatterHackers.MatterControl,MoveItemPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MoveItemPage.cs,MoveItemPage,The following statement contains a magic number: this.WindowSize = new Vector2(480' 500);
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,ArrangeOnBed,The following statement contains a magic number: object3DList[i].Matrix *= Matrix4X4.CreateTranslation(10000' 10000' 0);
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,ArrangeOnBed,The following statement contains a magic number: object3DList[i].Matrix *= Matrix4X4.CreateTranslation(10000' 10000' 0);
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,ArrangeOnBed,The following statement contains a magic number: Vector3 boundsCenter = (bounds.MaxXYZ + bounds.MinXYZ) / 2;
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,ArrangeOnBed,The following statement contains a magic number: object3DList[i].Matrix *= Matrix4X4.CreateTranslation(-boundsCenter + new Vector3(0' 0' bounds.ZSize / 2) + bedCenter);
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,PlaceOnBed,The following statement contains a magic number: Vector3 boundsCenter = (bounds.MaxXYZ + bounds.MinXYZ) / 2;
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,PlaceOnBed,The following statement contains a magic number: object3D.Matrix *= Matrix4X4.CreateTranslation(new Vector3(0' 0' -boundsCenter.Z + bounds.ZSize / 2));
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,MoveToOpenPosition,The following statement contains a magic number: itemToMoveBounds.MinXYZ -= new Vector3(2' 2' 0);
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,MoveToOpenPosition,The following statement contains a magic number: itemToMoveBounds.MinXYZ -= new Vector3(2' 2' 0);
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,MoveToOpenPosition,The following statement contains a magic number: itemToMoveBounds.MaxXYZ += new Vector3(2' 2' 0);
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,MoveToOpenPosition,The following statement contains a magic number: itemToMoveBounds.MaxXYZ += new Vector3(2' 2' 0);
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,CheckPosition,The following statement contains a magic number: double xStepAmount = 5;
Magic Number,MatterHackers.MatterControl,PlatingHelper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PlatingHelper.cs,CheckPosition,The following statement contains a magic number: double yStepAmount = 5;
Magic Number,MatterHackers.MatterControl,SaveAsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SaveAsPage.cs,SaveAsPage,The following statement contains a magic number: this.WindowSize = new Vector2(480' 500);
Magic Number,MatterHackers.MatterControl,SaveAsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SaveAsPage.cs,SaveAsPage,The following statement contains a magic number: this.WindowSize = new Vector2(480' 500);
Magic Number,MatterHackers.MatterControl,SaveAsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SaveAsPage.cs,SaveAsPage,The following statement contains a magic number: var fileNameHeader = new TextWidget("Design Name".Localize()' pointSize: 12)  				{  					TextColor = theme.TextColor'  					Margin = new BorderDouble(5)'  					HAnchor = HAnchor.Left  				};
Magic Number,MatterHackers.MatterControl,SaveAsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SaveAsPage.cs,SaveAsPage,The following statement contains a magic number: var fileNameHeader = new TextWidget("Design Name".Localize()' pointSize: 12)  				{  					TextColor = theme.TextColor'  					Margin = new BorderDouble(5)'  					HAnchor = HAnchor.Left  				};
Magic Number,MatterHackers.MatterControl,SaveAsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SaveAsPage.cs,SaveAsPage,The following statement contains a magic number: itemNameWidget = new MHTextEditWidget(""' theme' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter a Design Name Here".Localize())  				{  					HAnchor = HAnchor.Stretch'  					Margin = new BorderDouble(5)  				};
Magic Number,MatterHackers.MatterControl,SaveAsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SaveAsPage.cs,SaveAsPage,The following statement contains a magic number: itemNameWidget = new MHTextEditWidget(""' theme' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter a Design Name Here".Localize())  				{  					HAnchor = HAnchor.Stretch'  					Margin = new BorderDouble(5)  				};
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: var placeHolderImage = new ImageBuffer(5' 5);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: var placeHolderImage = new ImageBuffer(5' 5);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: graphics.Clear(Color.Gray.WithAlpha(40));
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: switch (printer.Bed.BedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.Z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						for(int i=0; i< buildVolume.Vertices.Count; i++)  						{  							buildVolume.Vertices[i] = buildVolume.Vertices[i] + new Vector3Float(0' 0' displayVolumeToBuild.Z / 2);  						}    						var bspTree = FaceBspTree.Create(buildVolume);  						buildVolume.FaceBspTree = bspTree;  					}    					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.X' displayVolumeToBuild.Y' 1.8);  					printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.Z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' displayVolumeToBuild.Z);  						}    						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' 1.8);  						printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: switch (printer.Bed.BedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.Z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						for(int i=0; i< buildVolume.Vertices.Count; i++)  						{  							buildVolume.Vertices[i] = buildVolume.Vertices[i] + new Vector3Float(0' 0' displayVolumeToBuild.Z / 2);  						}    						var bspTree = FaceBspTree.Create(buildVolume);  						buildVolume.FaceBspTree = bspTree;  					}    					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.X' displayVolumeToBuild.Y' 1.8);  					printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.Z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' displayVolumeToBuild.Z);  						}    						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' 1.8);  						printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: switch (printer.Bed.BedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.Z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						for(int i=0; i< buildVolume.Vertices.Count; i++)  						{  							buildVolume.Vertices[i] = buildVolume.Vertices[i] + new Vector3Float(0' 0' displayVolumeToBuild.Z / 2);  						}    						var bspTree = FaceBspTree.Create(buildVolume);  						buildVolume.FaceBspTree = bspTree;  					}    					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.X' displayVolumeToBuild.Y' 1.8);  					printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.Z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' displayVolumeToBuild.Z);  						}    						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' 1.8);  						printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: switch (printer.Bed.BedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.Z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						for(int i=0; i< buildVolume.Vertices.Count; i++)  						{  							buildVolume.Vertices[i] = buildVolume.Vertices[i] + new Vector3Float(0' 0' displayVolumeToBuild.Z / 2);  						}    						var bspTree = FaceBspTree.Create(buildVolume);  						buildVolume.FaceBspTree = bspTree;  					}    					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.X' displayVolumeToBuild.Y' 1.8);  					printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.Z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' displayVolumeToBuild.Z);  						}    						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' 1.8);  						printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: switch (printer.Bed.BedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.Z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						for(int i=0; i< buildVolume.Vertices.Count; i++)  						{  							buildVolume.Vertices[i] = buildVolume.Vertices[i] + new Vector3Float(0' 0' displayVolumeToBuild.Z / 2);  						}    						var bspTree = FaceBspTree.Create(buildVolume);  						buildVolume.FaceBspTree = bspTree;  					}    					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.X' displayVolumeToBuild.Y' 1.8);  					printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.Z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' displayVolumeToBuild.Z);  						}    						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' 1.8);  						printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: switch (printer.Bed.BedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.Z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						for(int i=0; i< buildVolume.Vertices.Count; i++)  						{  							buildVolume.Vertices[i] = buildVolume.Vertices[i] + new Vector3Float(0' 0' displayVolumeToBuild.Z / 2);  						}    						var bspTree = FaceBspTree.Create(buildVolume);  						buildVolume.FaceBspTree = bspTree;  					}    					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.X' displayVolumeToBuild.Y' 1.8);  					printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.Z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' displayVolumeToBuild.Z);  						}    						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' 1.8);  						printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: switch (printer.Bed.BedShape)  			{  				case BedShape.Rectangular:  					if (displayVolumeToBuild.Z > 0)  					{  						buildVolume = PlatonicSolids.CreateCube(displayVolumeToBuild);  						for(int i=0; i< buildVolume.Vertices.Count; i++)  						{  							buildVolume.Vertices[i] = buildVolume.Vertices[i] + new Vector3Float(0' 0' displayVolumeToBuild.Z / 2);  						}    						var bspTree = FaceBspTree.Create(buildVolume);  						buildVolume.FaceBspTree = bspTree;  					}    					printerBed = PlatonicSolids.CreateCube(displayVolumeToBuild.X' displayVolumeToBuild.Y' 1.8);  					printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					break;    				case BedShape.Circular:  					{  						if (displayVolumeToBuild.Z > 0)  						{  							buildVolume = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' displayVolumeToBuild.Z);  						}    						printerBed = VertexSourceToMesh.Extrude(new Ellipse(new Vector2()' displayVolumeToBuild.X / 2' displayVolumeToBuild.Y / 2)' 1.8);  						printerBed.PlaceTextureOnFaces(0' placeHolderImage);  					}  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: printerBed.Vertices[i] = printerBed.Vertices[i] - new Vector3Float(-printer.Bed.BedCenter' zTop + .02);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreatePrintBedAndVolume,The following statement contains a magic number: buildVolume.Vertices[i] = buildVolume.Vertices[i] - new Vector3Float(-printer.Bed.BedCenter' zTop + .02);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: double cmPerLine = 10;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: cmPerLine = 100;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: skip = 10;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: sizeForMarking > 1000
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: var bedplateImage = new ImageBuffer(1024' 1024);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: var bedplateImage = new ImageBuffer(1024' 1024);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: double xPositionLines = (-(printer.Bed.ViewerVolume.X / 2.0) + printer.Bed.BedCenter.X) / cmPerLine;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: double yPositionCm = (-(printer.Bed.ViewerVolume.Y / 2.0) + printer.Bed.BedCenter.Y) / cmPerLine;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: Ellipse bedCircle = new Ellipse(bedplateImage.Width/2' bedplateImage.Height/2' bedplateImage.Width/2' bedplateImage.Height/2);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: Ellipse bedCircle = new Ellipse(bedplateImage.Width/2' bedplateImage.Height/2' bedplateImage.Width/2' bedplateImage.Height/2);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: Ellipse bedCircle = new Ellipse(bedplateImage.Width/2' bedplateImage.Height/2' bedplateImage.Width/2' bedplateImage.Height/2);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: Ellipse bedCircle = new Ellipse(bedplateImage.Width/2' bedplateImage.Height/2' bedplateImage.Width/2' bedplateImage.Height/2);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: double xPositionLines = (-(printer.Bed.ViewerVolume.X / 2.0) + printer.Bed.BedCenter.X) / cmPerLine;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: int pointSize = 20;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' originPixels.Y + 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' originPixels.Y + 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: lineWidth = 2;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' originPixels.Y + 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' originPixels.Y + 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: double yPositionCm = (-(printer.Bed.ViewerVolume.Y / 2.0) + printer.Bed.BedCenter.Y) / cmPerLine;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: int pointSize = 20;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: lineWidth = 2;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((yPositionCmInt * skip).ToString()' originPixels.X + 4' linePos + 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateCircularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((yPositionCmInt * skip).ToString()' originPixels.X + 4' linePos + 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: double divisor = 10;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: divisor = 100;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: skip = 10;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: sizeForMarking > 1000
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: var bedplateImage = new ImageBuffer(1024' 1024);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: var bedplateImage = new ImageBuffer(1024' 1024);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: double xPositionCm = (-(printer.Bed.ViewerVolume.X / 2.0) + printer.Bed.BedCenter.X) / divisor;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: int pointSize = 20;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((xPositionCmInt * skip).ToString()' 4' 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lineWidth = 2;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((xPositionCmInt * skip).ToString()' linePos + 4' 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: double yPositionCm = (-(printer.Bed.ViewerVolume.Y / 2.0) + printer.Bed.BedCenter.Y) / divisor;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: int pointSize = 20;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: lineWidth = 2;
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,CreateRectangularBedGridImage,The following statement contains a magic number: graphics2D.DrawString((yPositionCmInt * skip).ToString()' 4' linePos + 4' pointSize' color: bedMarkingsColor);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,ApplyOemBedImage,The following statement contains a magic number: bedGraphics.Render(  					watermarkImage'  					new Vector2(  						(bedImage.Width - scaledWidth) / 2'  						Math.Max(0' (bedImage.Height - scaledHeight) / 2))'  					scaledWidth' scaledHeight);
Magic Number,MatterHackers.MatterControl,BedMeshGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\BedMeshGenerator.cs,ApplyOemBedImage,The following statement contains a magic number: bedGraphics.Render(  					watermarkImage'  					new Vector2(  						(bedImage.Width - scaledWidth) / 2'  						Math.Max(0' (bedImage.Height - scaledHeight) / 2))'  					scaledWidth' scaledHeight);
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,PrinterCalibrationWizard,The following statement contains a magic number: this.HomePageGenerator = () =>  			{  				var homePage = new WizardSummaryPage()  				{  					HeaderText = "Printer Setup & Calibration".Localize()  				};    				var contentRow = homePage.ContentRow;    				if (!this.ReturnedToHomePage)  				{  					contentRow.AddChild(  						new WrappedTextWidget(  							@"Select the calibration task on the left to continue".Replace("\r\n"' "\n")'  							pointSize: theme.DefaultFontSize'  							textColor: theme.TextColor));  				}    				contentRow.BackgroundColor = Color.Transparent;    				foreach (var stage in this.Stages.Where(s => s.Enabled && s.Visible))  				{  					GuiWidget rightWidget = null;  					var widget = new GuiWidget();    					if (stage is ZCalibrationWizard probeWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var offset = printer.Settings.GetValue<Vector3>(SettingsKey.probe_offset);    						column.AddChild(  							new ValueTag(  								"Z Offset".Localize()'  								offset.Z.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage is PrintLevelingWizard levelingWizard)  					{  						PrintLevelingData levelingData = printer.Settings.Helpers.PrintLevelingData;    						// Always show leveling option if printer does not have hardware leveling  						if (!printer.Settings.GetValue<bool>(SettingsKey.has_hardware_leveling))  						{  							var positions = levelingData.SampledPositions;    							var column = CreateColumn(theme);    							column.AddChild(  								new ValueTag(  									"Leveling Solution".Localize()'  									printer.Settings.GetValue(SettingsKey.print_leveling_solution)'  									new BorderDouble(12' 5' 2' 5)'  									5'  									11)  								{  									Margin = new BorderDouble(bottom: 4)'  									MinimumSize = new Vector2(125' 0)  								});    							var row = new FlowLayoutWidget()  							{  								VAnchor = VAnchor.Fit'  								HAnchor = HAnchor.Fit  							};    							// Only show Edit button if data initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  								{  									Name = "Edit Leveling Data Button"'  									ToolTipText = "Edit Leveling Data".Localize()'  								};    								editButton.Click += (s' e) =>  								{  									DialogWindow.Show(new EditLevelingSettingsPage(printer' theme));  								};    								row.AddChild(editButton);  							}    							// only show the switch if leveling can be turned off (it can't if it is required).  							if (!printer.Settings.GetValue<bool>(SettingsKey.print_leveling_required_to_print))  							{  								// put in the switch  								printLevelingSwitch = new RoundedToggleSwitch(theme)  								{  									VAnchor = VAnchor.Center'  									Margin = new BorderDouble(theme.DefaultContainerPadding' 0)'  									Checked = printer.Settings.GetValue<bool>(SettingsKey.print_leveling_enabled)'  									ToolTipText = "Enable Software Leveling".Localize()  								};  								printLevelingSwitch.CheckedStateChanged += (sender' e) =>  								{  									printer.Settings.Helpers.DoPrintLeveling(printLevelingSwitch.Checked);  								};  								printLevelingSwitch.Closed += (s' e) =>  								{  									// Unregister listeners  									printer.Settings.PrintLevelingEnabledChanged -= this.Settings_PrintLevelingEnabledChanged;  								};    								// TODO: Why is this listener conditional? If the leveling changes somehow' shouldn't we be updated the UI to reflect that?  								// Register listeners  								printer.Settings.PrintLevelingEnabledChanged += this.Settings_PrintLevelingEnabledChanged;    								row.AddChild(printLevelingSwitch);  							}    							rightWidget = row;    							// Only visualize leveling data if initialized  							if (levelingData?.SampledPositions.Count() > 0)  							{  								var probeWidget = new ProbePositionsWidget(printer' positions.Select(v => new Vector2(v)).ToList()' theme)  								{  									HAnchor = HAnchor.Absolute'  									VAnchor = VAnchor.Absolute'  									Height = 200'  									Width = 200'  									RenderLevelingData = true'  									RenderProbePath = false'  									SimplePoints = true'  								};  								column.AddChild(probeWidget);  							}    							widget = column;  						}  					}    					if (stage is XyCalibrationWizard xyWizard)  					{  						var column = CreateColumn(theme);  						column.FlowDirection = FlowDirection.LeftToRight;    						var hotendOffset = printer.Settings.Helpers.ExtruderOffset(1);    						var tool2Column = new FlowLayoutWidget(FlowDirection.TopToBottom);  						column.AddChild(tool2Column);    						tool2Column.AddChild(  							new TextWidget("Tool".Localize() + " 2"' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  							{  								Margin = new BorderDouble(bottom: 4)  							});    						tool2Column.AddChild(  							new ValueTag(  								"X Offset".Localize()'  								hotendOffset.X.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								Margin = new BorderDouble(bottom: 4)'  								MinimumSize = new Vector2(125' 0)  							});    						tool2Column.AddChild(  							new ValueTag(  								"Y Offset".Localize()'  								hotendOffset.Y.ToString("0.###")'  								new BorderDouble(12' 5' 2' 5)'  								5'  								11)  							{  								MinimumSize = new Vector2(125' 0)  							});    						widget = column;  					}    					if (stage.SetupRequired)  					{  						var column = CreateColumn(theme);  						column.AddChild(new TextWidget("Setup Required".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor));    						widget = column;  					}  					else if (stage is LoadFilamentWizard filamentWizard)  					{  						widget.Margin = new BorderDouble(left: theme.DefaultContainerPadding);  					}    					var section = new SectionWidget(stage.Title' widget' theme' rightAlignedContent: rightWidget' expandingContent: false);  					theme.ApplyBoxStyle(section);    					section.Margin = section.Margin.Clone(left: 0);  					section.ShowExpansionIcon = false;    					if (stage.SetupRequired)  					{  						section.BackgroundColor = Color.Red.WithAlpha(30);  					}    					contentRow.AddChild(section);  				}    				return homePage;  			};
Magic Number,MatterHackers.MatterControl,PrinterCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\PrinterCalibrationWizard.cs,CreateColumn,The following statement contains a magic number: return new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(theme.DefaultContainerPadding' theme.DefaultContainerPadding' theme.DefaultContainerPadding' 4)  			};
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\EditLevelingSettingsPage.cs,EditLevelingSettingsPage,The following statement contains a magic number: var column = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(right: theme.DefaultContainerPadding + 4)  			};
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\EditLevelingSettingsPage.cs,EditLevelingSettingsPage,The following statement contains a magic number: var leftRightEdit = new FlowLayoutWidget  				{  					Padding = new BorderDouble(3)'  					HAnchor = HAnchor.Stretch  				};
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\EditLevelingSettingsPage.cs,EditLevelingSettingsPage,The following statement contains a magic number: MHNumberEdit valueEdit = new MHNumberEdit(positions[linkCompatibleRow][linkCompatibleAxis]' theme' allowNegatives: true' allowDecimals: true' pixelWidth: 60' tabIndex: tab_index++)  					{  						Name = $"{axisName} Position {row}"  					};
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\EditLevelingSettingsPage.cs,EditLevelingSettingsPage,The following statement contains a magic number: valueEdit.Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\EditLevelingSettingsPage.cs,EditLevelingSettingsPage,The following statement contains a magic number: axis < 3
Magic Number,MatterHackers.MatterControl,EditLevelingSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\EditLevelingSettingsPage.cs,EditLevelingSettingsPage,The following statement contains a magic number: exportButton.Click += (s' e) => {  				UiThread.RunOnIdle(this.ExportSettings' .1);  			};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: double distanceBetweenControls = 12;
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: double buttonSeparationDistance = 10;
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: movePointZeroTwoMmButton.CheckedStateChanged += (s' e) =>  						{  							if (movePointZeroTwoMmButton.Checked)  							{  								SetXYZMoveAmount(.02);  							}  						};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: pointOneButton.CheckedStateChanged += (s' e) =>  						{  							if (pointOneButton.Checked)  							{  								SetXYZMoveAmount(.1);  							}  						};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: tenButton.CheckedStateChanged += (s' e) =>  						{  							if (tenButton.Checked)  							{  								SetXYZMoveAmount(10);  							}  						};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: oneHundredButton.CheckedStateChanged += (s' e) =>  						{  							if (oneHundredButton.Checked)  							{  								SetXYZMoveAmount(100);  							}  						};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: SetXYZMoveAmount(10);
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: moveRadioButtons.Margin = new BorderDouble(0' 3);
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: moveRadioButtons.AddChild(new TextWidget("mm"' textColor: theme.TextColor' pointSize: 8)  						{  							Margin = new BorderDouble(left: 10)'  							VAnchor = VAnchor.Center  						});
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: moveRadioButtons.AddChild(new TextWidget("mm"' textColor: theme.TextColor' pointSize: 8)  						{  							Margin = new BorderDouble(left: 10)'  							VAnchor = VAnchor.Center  						});
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: allControlsLeftToRight.AddChild(new GuiWidget(1' 1)  				{  					VAnchor = VAnchor.Stretch'  					BackgroundColor = colors.ZColor'  					Margin = new BorderDouble(distanceBetweenControls' 5)  				});
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,JogControls,The following statement contains a magic number: Margin = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: var keyFocusedContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Stretch'  				ToolTipText = "Use cursor keys for axis movements".Localize()'  				Margin = new BorderDouble(left: 10)  			};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: keyboardImage = new IconButton(AggContext.StaticData.LoadIcon("hot_key_small_white.png"' 19' 12' theme.InvertIcons)' theme)  			{  				HAnchor = HAnchor.Center'  				Margin = new BorderDouble(5)'  				Visible = !UserSettings.Instance.IsTouchScreen'  				Enabled = false'  				Selectable = false  			};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: keyboardImage = new IconButton(AggContext.StaticData.LoadIcon("hot_key_small_white.png"' 19' 12' theme.InvertIcons)' theme)  			{  				HAnchor = HAnchor.Center'  				Margin = new BorderDouble(5)'  				Visible = !UserSettings.Instance.IsTouchScreen'  				Enabled = false'  				Selectable = false  			};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: keyboardImage = new IconButton(AggContext.StaticData.LoadIcon("hot_key_small_white.png"' 19' 12' theme.InvertIcons)' theme)  			{  				HAnchor = HAnchor.Center'  				Margin = new BorderDouble(5)'  				Visible = !UserSettings.Instance.IsTouchScreen'  				Enabled = false'  				Selectable = false  			};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: keyboardFocusBorder = new GuiWidget(1' 1)  			{  				MinimumSize = new Vector2(keyboardImage.Width + 5' keyboardImage.Height + 5)'  			};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,GetHotkeyControlContainer,The following statement contains a magic number: keyboardFocusBorder = new GuiWidget(1' 1)  			{  				MinimumSize = new Vector2(keyboardImage.Width + 5' keyboardImage.Height + 5)'  			};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: BorderDouble extrusionMargin = new BorderDouble(4' 0' 4' 0);
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: BorderDouble extrusionMargin = new BorderDouble(4' 0' 4' 0);
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: TextWidget eMinusControlLabel = new TextWidget("Retract".Localize()' pointSize: 11)  				{  					TextColor = theme.TextColor'  					VAnchor = VAnchor.Center  				};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: double buttonWidth = eMinusButtons[i].Width + 6;
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: var eSpacer = new GuiWidget(1' buttonSeparationDistance)  					{  						Margin = new BorderDouble((buttonWidth / 2)' 0' ((buttonWidth) / 2)' 0)'  						BackgroundColor = colors.EColor  					};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: var eSpacer = new GuiWidget(1' buttonSeparationDistance)  					{  						Margin = new BorderDouble((buttonWidth / 2)' 0' ((buttonWidth) / 2)' 0)'  						BackgroundColor = colors.EColor  					};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: TextWidget ePlusControlLabel = new TextWidget("Extrude".Localize()' pointSize: 11);
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: eButtons.AddChild(new GuiWidget(10' 6));
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: eButtons.AddChild(new GuiWidget(10' 6));
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: var moveRadioButtons = new FlowLayoutWidget  				{  					Margin = new BorderDouble(0' 3)  				};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: tenButton.CheckedStateChanged += (s' e) =>  				{  					if (tenButton.Checked)  					{  						SetEMoveAmount(10);  					}  				};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: oneHundredButton.CheckedStateChanged += (s' e) =>  				{  					if (oneHundredButton.Checked)  					{  						SetEMoveAmount(100);  					}  				};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: setMoveDistanceControl.AddChild(  				new TextWidget("mm"' textColor: theme.TextColor' pointSize: 8)  				{  					VAnchor = VAnchor.Center'  					Margin = new BorderDouble(left: 10)  				});
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateEButtons,The following statement contains a magic number: setMoveDistanceControl.AddChild(  				new TextWidget("mm"' textColor: theme.TextColor' pointSize: 8)  				{  					VAnchor = VAnchor.Center'  					Margin = new BorderDouble(left: 10)  				});
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateZButtons,The following statement contains a magic number: var zButtons = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(0' 5)'  			};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateXYGridControl,The following statement contains a magic number: xyGrid = new GuiWidget  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Fit | VAnchor.Bottom'  				Margin = new BorderDouble(0' 5' distanceBetweenControls' 5)  			};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateXYGridControl,The following statement contains a magic number: xyGrid = new GuiWidget  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Fit | VAnchor.Bottom'  				Margin = new BorderDouble(0' 5' distanceBetweenControls' 5)  			};
Magic Number,MatterHackers.MatterControl,JogControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\JogControls.cs,CreateXYGridControl,The following statement contains a magic number: xButtons.AddChild(new GuiWidget(xMinusControl.Width + buttonSeparationDistance * 2' 1)  			{  				VAnchor = VAnchor.Center'  				BackgroundColor = colors.XColor  			});
Magic Number,MatterHackers.MatterControl,MacroDetailPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroDetailPage.cs,MacroDetailPage,The following statement contains a magic number: var elementMargin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl,MacroDetailPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroDetailPage.cs,MacroDetailPage,The following statement contains a magic number: contentRow.Padding += 3;
Magic Number,MatterHackers.MatterControl,MacroDetailPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroDetailPage.cs,MacroDetailPage,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Macro Name".Localize() + ":"' 0' 0' 12)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(0' 0' 0' 1)  			});
Magic Number,MatterHackers.MatterControl,MacroDetailPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroDetailPage.cs,MacroDetailPage,The following statement contains a magic number: contentRow.AddChild(macroNameError = new TextWidget("Give the macro a name".Localize() + "."' 0' 0' 10)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			});
Magic Number,MatterHackers.MatterControl,MacroDetailPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroDetailPage.cs,MacroDetailPage,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Macro Commands".Localize() + ":"' 0' 0' 12)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(0' 0' 0' 1)  			});
Magic Number,MatterHackers.MatterControl,MacroDetailPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroDetailPage.cs,MacroDetailPage,The following statement contains a magic number: macroCommandInput = new MHTextEditWidget(gcodeMacro.GCode' theme' pixelHeight: 120' multiLine: true' typeFace: ApplicationController.GetTypeFace(NamedTypeFace.Liberation_Mono))  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl,MacroDetailPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroDetailPage.cs,MacroDetailPage,The following statement contains a magic number: contentRow.AddChild(macroCommandError = new TextWidget("This should be in 'G-Code'".Localize() + "."' 0' 0' 10)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			});
Magic Number,MatterHackers.MatterControl,MacroDetailPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroDetailPage.cs,MacroDetailPage,The following statement contains a magic number: var container = new FlowLayoutWidget  			{  				Margin = new BorderDouble(0' 5)'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl,MacroListPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroListPage.cs,RebuildList,The following statement contains a magic number: var macroRow = new FlowLayoutWidget  					{  						Margin = new BorderDouble(3' 0' 3' 3)'  						HAnchor = HAnchor.Stretch'  						Padding = new BorderDouble(3)'  					};
Magic Number,MatterHackers.MatterControl,MacroListPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroListPage.cs,RebuildList,The following statement contains a magic number: var macroRow = new FlowLayoutWidget  					{  						Margin = new BorderDouble(3' 0' 3' 3)'  						HAnchor = HAnchor.Stretch'  						Padding = new BorderDouble(3)'  					};
Magic Number,MatterHackers.MatterControl,MacroListPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroListPage.cs,RebuildList,The following statement contains a magic number: var macroRow = new FlowLayoutWidget  					{  						Margin = new BorderDouble(3' 0' 3' 3)'  						HAnchor = HAnchor.Stretch'  						Padding = new BorderDouble(3)'  					};
Magic Number,MatterHackers.MatterControl,MacroListPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroListPage.cs,RebuildList,The following statement contains a magic number: var macroRow = new FlowLayoutWidget  					{  						Margin = new BorderDouble(3' 0' 3' 3)'  						HAnchor = HAnchor.Stretch'  						Padding = new BorderDouble(3)'  					};
Magic Number,MatterHackers.MatterControl,MacroListPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MacroListPage.cs,RebuildList,The following statement contains a magic number: var editLink = new LinkLabel("edit".Localize()' theme)  					{  						Margin = new BorderDouble(right: 5)'  						TextColor = theme.TextColor  					};
Magic Number,MatterHackers.MatterControl,ManualPrinterControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ManualPrinterControls.cs,AddPluginWidget,The following statement contains a magic number: sectionWidget.ContentPanel.Padding = new BorderDouble(10' 10' 10' 0);
Magic Number,MatterHackers.MatterControl,ManualPrinterControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ManualPrinterControls.cs,AddPluginWidget,The following statement contains a magic number: sectionWidget.ContentPanel.Padding = new BorderDouble(10' 10' 10' 0);
Magic Number,MatterHackers.MatterControl,ManualPrinterControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ManualPrinterControls.cs,AddPluginWidget,The following statement contains a magic number: sectionWidget.ContentPanel.Padding = new BorderDouble(10' 10' 10' 0);
Magic Number,MatterHackers.MatterControl,MovementSpeedsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MovementSpeedsPage.cs,MovementSpeedsPage,The following statement contains a magic number: this.WindowSize = new Vector2(500 * GuiWidget.DeviceScale' 320 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,MovementSpeedsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MovementSpeedsPage.cs,MovementSpeedsPage,The following statement contains a magic number: this.WindowSize = new Vector2(500 * GuiWidget.DeviceScale' 320 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,MovementSpeedsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MovementSpeedsPage.cs,MovementSpeedsPage,The following statement contains a magic number: var rightLabel = new TextWidget("mm/s".Localize()' textColor: theme.TextColor' pointSize: theme.FontSize10)  			{  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(right: 20)  			};
Magic Number,MatterHackers.MatterControl,MovementSpeedsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MovementSpeedsPage.cs,MovementSpeedsPage,The following statement contains a magic number: var row = new FlowLayoutWidget  				{  					Padding = 3'  					HAnchor = HAnchor.Stretch  				};
Magic Number,MatterHackers.MatterControl,MovementSpeedsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MovementSpeedsPage.cs,MovementSpeedsPage,The following statement contains a magic number: movementSpeed = movementSpeed / 60.0;
Magic Number,MatterHackers.MatterControl,MovementSpeedsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MovementSpeedsPage.cs,MovementSpeedsPage,The following statement contains a magic number: var valueEdit = new MHNumberEdit(movementSpeed' theme' minValue: 0' pixelWidth: 60' tabIndex: tab_index++' allowDecimals: true)  				{  					Margin = 3  				};
Magic Number,MatterHackers.MatterControl,MovementSpeedsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MovementSpeedsPage.cs,MovementSpeedsPage,The following statement contains a magic number: var valueEdit = new MHNumberEdit(movementSpeed' theme' minValue: 0' pixelWidth: 60' tabIndex: tab_index++' allowDecimals: true)  				{  					Margin = 3  				};
Magic Number,MatterHackers.MatterControl,MovementSpeedsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\MovementSpeedsPage.cs,MovementSpeedsPage,The following statement contains a magic number: savePresetsButton.Click += (s' e) =>  			{  				bool first = true;  				var settingString = new StringBuilder();    				for (int i = 0; i < valueEditors.Count(); i++)  				{  					if (!first)  					{  						settingString.Append("'");  					}    					first = false;    					settingString.Append(axisLabels[i]);  					settingString.Append("'");    					double movementSpeed = 0;  					double.TryParse(valueEditors[i].Text' out movementSpeed);  					movementSpeed = movementSpeed * 60; // Convert to mm/min    					settingString.Append(movementSpeed.ToString());  				}    				string speedString = settingString.ToString();  				if (!string.IsNullOrEmpty(speedString))  				{  					printer.Settings.SetValue(SettingsKey.manual_movement_speeds' speedString);  					printer.Bed.GCodeRenderer?.Clear3DGCode();  				}    				this.DialogWindow.CloseOnIdle();  			};
Magic Number,MatterHackers.MatterControl,PrintLevelingPlane,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrintLevelingPlane.cs,ApplyLeveling,The following statement contains a magic number: (lineBeingSent.StartsWith("G0") || lineBeingSent.StartsWith("G1"))  				&& lineBeingSent.Length > 2  				&& lineBeingSent[2] == ' '
Magic Number,MatterHackers.MatterControl,PrintLevelingPlane,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrintLevelingPlane.cs,ApplyLeveling,The following statement contains a magic number: (lineBeingSent.StartsWith("G0") || lineBeingSent.StartsWith("G1"))  				&& lineBeingSent.Length > 2  				&& lineBeingSent[2] == ' '
Magic Number,MatterHackers.MatterControl,TerminalLog,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalLog.cs,TerminalLog,The following statement contains a magic number: maxLinesToBuffer = 450000;
Magic Number,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: this.Padding = new BorderDouble(5' 0);
Magic Number,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: var headerRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				HAnchor = HAnchor.Left | HAnchor.Stretch'  				Padding = new BorderDouble(0' 8)  			};
Magic Number,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: autoUppercase = new CheckBox("Auto Uppercase".Localize()' textSize: theme.DefaultFontSize)  			{  				Margin = new BorderDouble(left: 25)'  				Checked = UserSettings.Instance.Fields.GetBool(UserSettingsKey.TerminalAutoUppercase' true)'  				TextColor = theme.TextColor'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: var bodyRow = new FlowLayoutWidget()  			{  				Margin = new BorderDouble(bottom: 4)'  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: textScrollWidget = new TextScrollWidget(printer' printer.TerminalLog.PrinterLines)  			{  				BackgroundColor = theme.MinimalShade'  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch'  				Margin = 0'  				Padding = new BorderDouble(3' 0)  			};
Magic Number,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: bodyRow.AddChild(new TextScrollBar(textScrollWidget' 15)  			{  				ThumbColor = theme.AccentMimimalOverlay'  				BackgroundColor = theme.SlightShade'  				Margin = 0  			});
Magic Number,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: var inputRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				BackgroundColor = this.BackgroundColor'  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(bottom: 2)  			};
Magic Number,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following statement contains a magic number: manualCommandTextEdit = new MHTextEditWidget(""' theme' typeFace: ApplicationController.GetTypeFace(NamedTypeFace.Liberation_Mono))  			{  				Margin = new BorderDouble(right: 3)'  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Bottom  			};
Magic Number,MatterHackers.MatterControl,TextScrollBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TextScrolBar.cs,TextScrollBar,The following statement contains a magic number: Margin = new BorderDouble(0' 5);
Magic Number,MatterHackers.MatterControl,TextScrollBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TextScrolBar.cs,OnDraw,The following statement contains a magic number: int thumbHeight = 10;
Magic Number,MatterHackers.MatterControl,TextScrollWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TextScrollWidget.cs,TextScrollWidget,The following statement contains a magic number: this.typeFacePrinter = new TypeFacePrinter(""' new StyledTypeFace(ApplicationController.GetTypeFace(NamedTypeFace.Liberation_Mono)' 12));
Magic Number,MatterHackers.MatterControl,TextScrollWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TextScrollWidget.cs,OnDraw,The following statement contains a magic number: typeFacePrinter.Origin = new Vector2(bounds.Left + 2' y);
Magic Number,MatterHackers.MatterControl,TextScrollWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TextScrollWidget.cs,OnMouseWheel,The following statement contains a magic number: double scrollDelta = mouseEvent.WheelDelta / (visibleLines.Count * 60.0);
Magic Number,MatterHackers.MatterControl,TextScrollWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TextScrollWidget.cs,OnMouseWheel,The following statement contains a magic number: scrollDelta *= 2;
Magic Number,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,RootSystemWindow,The following statement contains a magic number: GuiWidget.DeviceScale = 1.3;
Magic Number,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,SetStartupTraits,The following statement contains a magic number: this.Title += string.Format(" - {0}Bit"' IntPtr.Size == 4 ? 32 : 64);
Magic Number,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,SetStartupTraits,The following statement contains a magic number: this.Title += string.Format(" - {0}Bit"' IntPtr.Size == 4 ? 32 : 64);
Magic Number,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,SetStartupTraits,The following statement contains a magic number: this.Title += string.Format(" - {0}Bit"' IntPtr.Size == 4 ? 32 : 64);
Magic Number,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,SetStartupTraits,The following statement contains a magic number: int xpos = Math.Max(int.Parse(sizes[0])' -10);
Magic Number,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,SetStartupTraits,The following statement contains a magic number: int ypos = Math.Max(int.Parse(sizes[1])' -10);
Magic Number,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,GetStartupBounds,The following statement contains a magic number: minSize = new Vector2(800' 480);
Magic Number,MatterHackers.MatterControl,RootSystemWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\RootSystemWindow.cs,GetStartupBounds,The following statement contains a magic number: minSize = new Vector2(800' 480);
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: this.WindowSize = new Vector2(700 * GuiWidget.DeviceScale' 600 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: this.WindowSize = new Vector2(700 * GuiWidget.DeviceScale' 600 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var configureIcon = AggContext.StaticData.LoadIcon("fa-cog_16.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var configureIcon = AggContext.StaticData.LoadIcon("fa-cog_16.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var configureNotificationsButton = new IconButton(configureIcon' theme)  			{  				Name = "Configure Notification Settings Button"'  				ToolTipText = "Configure Notifications".Localize()'  				Margin = new BorderDouble(left: 6)'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: this.AddSettingsRow(  				new SettingsItem(  					"Notifications".Localize()'  					theme'  					new SettingsItem.ToggleSwitchConfig()  					{  						Checked = UserSettings.Instance.get(UserSettingsKey.PrintNotificationsEnabled) == "true"'  						ToggleAction = (itemChecked) =>  						{  							UserSettings.Instance.set(UserSettingsKey.PrintNotificationsEnabled' itemChecked ? "true" : "false");  						}  					}'  					configureNotificationsButton'  					AggContext.StaticData.LoadIcon("notify-24x24.png"' 16' 16' theme.InvertIcons))'  					generalPanel);
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: this.AddSettingsRow(  				new SettingsItem(  					"Notifications".Localize()'  					theme'  					new SettingsItem.ToggleSwitchConfig()  					{  						Checked = UserSettings.Instance.get(UserSettingsKey.PrintNotificationsEnabled) == "true"'  						ToggleAction = (itemChecked) =>  						{  							UserSettings.Instance.set(UserSettingsKey.PrintNotificationsEnabled' itemChecked ? "true" : "false");  						}  					}'  					configureNotificationsButton'  					AggContext.StaticData.LoadIcon("notify-24x24.png"' 16' 16' theme.InvertIcons))'  					generalPanel);
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var thumbnailsModeDropList = new MHDropDownList(""' theme' maxHeight: 200);
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: double sliderThumbWidth = 10 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: double sliderWidth = 100 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var textSizeSlider = new SolidSlider(new Vector2()' sliderThumbWidth' theme' .7' 1.4)  			{  				Name = "Text Size Slider"'  				Margin = new BorderDouble(5' 0)'  				Value = currentTextSize'  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Center'  				TotalWidthInPixels = sliderWidth'  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var textSizeSlider = new SolidSlider(new Vector2()' sliderThumbWidth' theme' .7' 1.4)  			{  				Name = "Text Size Slider"'  				Margin = new BorderDouble(5' 0)'  				Value = currentTextSize'  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Center'  				TotalWidthInPixels = sliderWidth'  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var textSizeSlider = new SolidSlider(new Vector2()' sliderThumbWidth' theme' .7' 1.4)  			{  				Name = "Text Size Slider"'  				Margin = new BorderDouble(5' 0)'  				Value = currentTextSize'  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Center'  				TotalWidthInPixels = sliderWidth'  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var textSizeApplyButton = new TextButton("Apply".Localize()' theme)  			{  				VAnchor = VAnchor.Center'  				BackgroundColor = theme.SlightShade'  				Visible = false'  				Margin = new BorderDouble(right: 6)  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var openCacheButton = new IconButton(AggContext.StaticData.LoadIcon("fa-link_16.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Open Folder".Localize()'  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var openCacheButton = new IconButton(AggContext.StaticData.LoadIcon("fa-link_16.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Open Folder".Localize()'  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var clearCacheButton = new HoverIconButton(AggContext.StaticData.LoadIcon("remove.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Clear Cache".Localize()'  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: var clearCacheButton = new HoverIconButton(AggContext.StaticData.LoadIcon("remove.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Clear Cache".Localize()'  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: section.Margin = new BorderDouble(0' 10' 0' 0);
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,ApplicationSettingsPage,The following statement contains a magic number: section.ContentPanel.Margin = new BorderDouble(2' 0);
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,CreateThemePanel,The following statement contains a magic number: var accentButtons = new ThemeColorPanel.AccentColorsWidget(AppContext.ThemeSet' 16)  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Center | VAnchor.Fit'  				Margin = new BorderDouble(right: theme.DefaultContainerPadding)  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,CreateThemePanel,The following statement contains a magic number: var themeColorPanel = new ThemeColorPanel(theme' accentButtons)  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(10' 10' 10' 2)  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,CreateThemePanel,The following statement contains a magic number: var themeColorPanel = new ThemeColorPanel(theme' accentButtons)  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(10' 10' 10' 2)  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,CreateThemePanel,The following statement contains a magic number: var themeColorPanel = new ThemeColorPanel(theme' accentButtons)  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(10' 10' 10' 2)  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,CreateThemePanel,The following statement contains a magic number: var themeColorPanel = new ThemeColorPanel(theme' accentButtons)  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(10' 10' 10' 2)  			};
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,CreateThemePanel,The following statement contains a magic number: themeSection.SetNonExpandableIcon(AggContext.StaticData.LoadIcon("theme.png"' 16' 16' theme.InvertIcons));
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,CreateThemePanel,The following statement contains a magic number: themeSection.SetNonExpandableIcon(AggContext.StaticData.LoadIcon("theme.png"' 16' 16' theme.InvertIcons));
Magic Number,MatterHackers.MatterControl,ApplicationSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\ApplicationSettingsPage.cs,AddSettingsRow,The following statement contains a magic number: widget.Padding = widget.Padding.Clone(right: 10);
Magic Number,MatterHackers.MatterControl,CopyGuestProfilesToUser,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\CopyGuestProfilesToUser.cs,CopyGuestProfilesToUser,The following statement contains a magic number: container.AddChild(new TextWidget("Printers to Copy".Localize() + ":")  				{  					TextColor = theme.TextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});
Magic Number,MatterHackers.MatterControl,CopyGuestProfilesToUser,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\CopyGuestProfilesToUser.cs,CopyGuestProfilesToUser,The following statement contains a magic number: container.AddChild(new TextWidget("Printers to Copy".Localize() + ":")  				{  					TextColor = theme.TextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});
Magic Number,MatterHackers.MatterControl,CopyGuestProfilesToUser,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\CopyGuestProfilesToUser.cs,CopyGuestProfilesToUser,The following statement contains a magic number: var checkBox = new CheckBox(printerInfo.Name)  					{  						TextColor = theme.TextColor'  						Margin = new BorderDouble(5' 0' 0' 0)'  						HAnchor = HAnchor.Left'  						Checked = true'  					};
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: cancelButton.Margin = new BorderDouble(left: 3);
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: headerRow = new OverflowBar(theme)  				{  					Name = "HeaderRow"'  					Margin = new BorderDouble(0' 3' 0' 0)'  					Padding = new BorderDouble(0' 12)'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit  				};
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: headerRow = new OverflowBar(theme)  				{  					Name = "HeaderRow"'  					Margin = new BorderDouble(0' 3' 0' 0)'  					Padding = new BorderDouble(0' 12)'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit  				};
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: headerLabel = new TextWidget("Setup Wizard".Localize()' pointSize: 24' textColor: theme.PrimaryAccentColor)  			{  				AutoExpandBoundsToText = true'  				EllipsisIfClipped = true'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: contentRow = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Padding = new BorderDouble(10)'  				BackgroundColor = theme.SectionBackgroundColor'  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: footerRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				Name = "FooterRow"'  				HAnchor = HAnchor.Fit | HAnchor.Right'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(0' 6)'  				Padding = new BorderDouble(top: 4' bottom: 2)  			};
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: footerRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				Name = "FooterRow"'  				HAnchor = HAnchor.Fit | HAnchor.Right'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(0' 6)'  				Padding = new BorderDouble(top: 4' bottom: 2)  			};
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: footerRow = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				Name = "FooterRow"'  				HAnchor = HAnchor.Fit | HAnchor.Right'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(0' 6)'  				Padding = new BorderDouble(top: 4' bottom: 2)  			};
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: headerRow.Padding = new BorderDouble(0' 3' 0' 3);
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: headerLabel.PointSize = 14;
Magic Number,MatterHackers.MatterControl,DialogPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogPage.cs,DialogPage,The following statement contains a magic number: contentRow.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl,DialogWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogWindow.cs,DialogWindow,The following statement contains a magic number: this.MinimumSize = new Vector2(200' 200);
Magic Number,MatterHackers.MatterControl,DialogWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogWindow.cs,DialogWindow,The following statement contains a magic number: this.MinimumSize = new Vector2(200' 200);
Magic Number,MatterHackers.MatterControl,DialogWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogWindow.cs,DialogWindow,The following statement contains a magic number: this.Padding = new BorderDouble(defaultPadding' defaultPadding' defaultPadding' 2);
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,HelpTreePanel,The following statement contains a magic number: horizontalSplitter.Panel1.BackgroundColor = Color.Black.WithAlpha(12);
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,HelpTreePanel,The following statement contains a magic number: toolbar.AddChild(new TextButton("MatterControl Help".Localize()' theme)  			{  				Padding = new BorderDouble(6' 0)'  				Selectable = false  			});
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,AddGuides,The following statement contains a magic number: var sequence = new ImageSequence()  			{  				FramesPerSecond = 3'  			};
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,AddGuides,The following statement contains a magic number: var markdownWidget = new MarkdownWidget(theme)  			{  				Padding = new BorderDouble(left: theme.DefaultContainerPadding / 2)  			};
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,AddContent,The following statement contains a magic number: var content = new TextWidget(text' bold: bold' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  			{  				Margin = (left ? new BorderDouble(5' 3' 10' 3) : new BorderDouble(10' 3' 5' 3))  			};
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,AddContent,The following statement contains a magic number: var content = new TextWidget(text' bold: bold' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  			{  				Margin = (left ? new BorderDouble(5' 3' 10' 3) : new BorderDouble(10' 3' 5' 3))  			};
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,AddContent,The following statement contains a magic number: var content = new TextWidget(text' bold: bold' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  			{  				Margin = (left ? new BorderDouble(5' 3' 10' 3) : new BorderDouble(10' 3' 5' 3))  			};
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,AddContent,The following statement contains a magic number: var content = new TextWidget(text' bold: bold' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  			{  				Margin = (left ? new BorderDouble(5' 3' 10' 3) : new BorderDouble(10' 3' 5' 3))  			};
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,AddContent,The following statement contains a magic number: var content = new TextWidget(text' bold: bold' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  			{  				Margin = (left ? new BorderDouble(5' 3' 10' 3) : new BorderDouble(10' 3' 5' 3))  			};
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,AddContent,The following statement contains a magic number: var content = new TextWidget(text' bold: bold' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  			{  				Margin = (left ? new BorderDouble(5' 3' 10' 3) : new BorderDouble(10' 3' 5' 3))  			};
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,AddContent,The following statement contains a magic number: var content = new TextWidget(text' bold: bold' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  			{  				Margin = (left ? new BorderDouble(5' 3' 10' 3) : new BorderDouble(10' 3' 5' 3))  			};
Magic Number,MatterHackers.MatterControl,HelpTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\HelpTreePanel.cs,AddContent,The following statement contains a magic number: var content = new TextWidget(text' bold: bold' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  			{  				Margin = (left ? new BorderDouble(5' 3' 10' 3) : new BorderDouble(10' 3' 5' 3))  			};
Magic Number,MatterHackers.MatterControl,ImportSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\ImportSettingsPage.cs,ImportSettingsPage,The following statement contains a magic number: container.AddChild(new TextWidget("Quality Presets:")  				{  					TextColor = theme.TextColor'  					Margin = new BorderDouble(0' 3)'  				});
Magic Number,MatterHackers.MatterControl,ImportSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\ImportSettingsPage.cs,ImportSettingsPage,The following statement contains a magic number: var qualityButton = new RadioButton(string.IsNullOrEmpty(qualitySetting.Name) ? "no name" : qualitySetting.Name)  					{  						TextColor = theme.TextColor'  						Margin = new BorderDouble(5' 0' 0' 0)'  						HAnchor = HAnchor.Left'  					};
Magic Number,MatterHackers.MatterControl,ImportSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\ImportSettingsPage.cs,ImportSettingsPage,The following statement contains a magic number: container.AddChild(new TextWidget("Material Presets:")  				{  					TextColor = theme.TextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});
Magic Number,MatterHackers.MatterControl,ImportSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\ImportSettingsPage.cs,ImportSettingsPage,The following statement contains a magic number: container.AddChild(new TextWidget("Material Presets:")  				{  					TextColor = theme.TextColor'  					Margin = new BorderDouble(0' 3' 0' 15)'  				});
Magic Number,MatterHackers.MatterControl,ImportSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\ImportSettingsPage.cs,ImportSettingsPage,The following statement contains a magic number: var materialButton = new RadioButton(string.IsNullOrEmpty(materialSetting.Name) ? "no name" : materialSetting.Name)  					{  						TextColor = theme.TextColor'  						Margin = new BorderDouble(5' 0)'  						HAnchor = HAnchor.Left'  					};
Magic Number,MatterHackers.MatterControl,InputBoxPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\InputBoxPage.cs,InputBoxPage,The following statement contains a magic number: this.WindowSize = new Vector2(500' 200);
Magic Number,MatterHackers.MatterControl,InputBoxPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\InputBoxPage.cs,InputBoxPage,The following statement contains a magic number: this.WindowSize = new Vector2(500' 200);
Magic Number,MatterHackers.MatterControl,InputBoxPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\InputBoxPage.cs,InputBoxPage,The following statement contains a magic number: contentRow.AddChild(new TextWidget(label' pointSize: 12)  			{  				TextColor = theme.TextColor'  				Margin = new BorderDouble(5)'  				HAnchor = HAnchor.Left  			});
Magic Number,MatterHackers.MatterControl,InputBoxPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\InputBoxPage.cs,InputBoxPage,The following statement contains a magic number: contentRow.AddChild(new TextWidget(label' pointSize: 12)  			{  				TextColor = theme.TextColor'  				Margin = new BorderDouble(5)'  				HAnchor = HAnchor.Left  			});
Magic Number,MatterHackers.MatterControl,InputBoxPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\InputBoxPage.cs,InputBoxPage,The following statement contains a magic number: textEditWidget = new MHTextEditWidget(initialValue' theme' pixelWidth: 300' messageWhenEmptyAndNotSelected: emptyText);
Magic Number,MatterHackers.MatterControl,InputBoxPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\InputBoxPage.cs,InputBoxPage,The following statement contains a magic number: textEditWidget.Margin = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl,SelectablePrinterPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\Printer\OpenPrinterPage.cs,SelectablePrinterPage,The following statement contains a magic number: treeView.NodeMouseDoubleClick += (s' e) =>  			{  				if (e is MouseEventArgs mouseEvent  					&& mouseEvent.Button == MouseButtons.Left  						&& mouseEvent.Clicks == 2  						&& treeView?.SelectedNode is TreeNode treeNode)  				{  					this.OnTreeNodeDoubleClicked(treeNode);  				}  			};
Magic Number,MatterHackers.MatterControl,SelectablePrinterPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\Printer\OpenPrinterPage.cs,SelectablePrinterPage,The following statement contains a magic number: rootPrintersNode = new TreeNode(theme)  			{  				Text = "Printers".Localize()'  				HAnchor = HAnchor.Stretch'  				AlwaysExpandable = true'  				Image = AggContext.StaticData.LoadIcon("printer.png"' 16' 16' theme.InvertIcons)  			};
Magic Number,MatterHackers.MatterControl,SelectablePrinterPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\Printer\OpenPrinterPage.cs,SelectablePrinterPage,The following statement contains a magic number: rootPrintersNode = new TreeNode(theme)  			{  				Text = "Printers".Localize()'  				HAnchor = HAnchor.Stretch'  				AlwaysExpandable = true'  				Image = AggContext.StaticData.LoadIcon("printer.png"' 16' 16' theme.InvertIcons)  			};
Magic Number,MatterHackers.MatterControl,SetupWizardWifi,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\SetupWizardWifi.cs,SetupWizardWifi,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Wifi Setup".Localize() + ":"' 0' 0' labelFontSize)  			{  				TextColor = theme.TextColor'  				Margin = new BorderDouble(bottom: 10)  			});
Magic Number,MatterHackers.MatterControl,SetupWizardWifi,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\SetupWizardWifi.cs,SetupWizardWifi,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Some features may require an internet connection.".Localize()' 0' 0' 12' textColor: theme.TextColor));
Magic Number,MatterHackers.MatterControl,SetupWizardWifi,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\SetupWizardWifi.cs,SetupWizardWifi,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Would you like to setup Wifi?".Localize()' 0' 0' 12' textColor: theme.TextColor));
Magic Number,MatterHackers.MatterControl,SetupWizardWifi,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\SetupWizardWifi.cs,SetupWizardWifi,The following statement contains a magic number: var connectButtonContainer = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(0' 6)  			};
Magic Number,MatterHackers.MatterControl,SetupWizardWifi,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\SetupWizardWifi.cs,SetupWizardWifi,The following statement contains a magic number: configureButton.Margin = new BorderDouble(0' 0' 10' 0);
Magic Number,MatterHackers.MatterControl,StagedSetupWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\StagedSetupWindow.cs,StagedSetupWindow,The following statement contains a magic number: row.AddChild(leftPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				BackgroundColor = theme.MinimalShade'  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Stretch'  				Margin = new BorderDouble(right: theme.DefaultContainerPadding)'  				Padding = theme.DefaultContainerPadding'  				Width = 250  			});
Magic Number,MatterHackers.MatterControl,WizardStageRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WizardStageRow.cs,WizardStageRow,The following statement contains a magic number: completedIcon = AggContext.StaticData.LoadIcon("fa-check_16.png"' 16' 16' theme.InvertIcons).AjustAlpha(0.3);
Magic Number,MatterHackers.MatterControl,WizardStageRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WizardStageRow.cs,WizardStageRow,The following statement contains a magic number: completedIcon = AggContext.StaticData.LoadIcon("fa-check_16.png"' 16' 16' theme.InvertIcons).AjustAlpha(0.3);
Magic Number,MatterHackers.MatterControl,WizardStageRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WizardStageRow.cs,WizardStageRow,The following statement contains a magic number: completedIcon = AggContext.StaticData.LoadIcon("fa-check_16.png"' 16' 16' theme.InvertIcons).AjustAlpha(0.3);
Magic Number,MatterHackers.MatterControl,WizardStageRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WizardStageRow.cs,WizardStageRow,The following statement contains a magic number: recommendedIcon = AggContext.StaticData.LoadIcon("SettingsGroupWarning_16x.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,WizardStageRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WizardStageRow.cs,WizardStageRow,The following statement contains a magic number: recommendedIcon = AggContext.StaticData.LoadIcon("SettingsGroupWarning_16x.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,WizardStageRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WizardStageRow.cs,WizardStageRow,The following statement contains a magic number: setupIcon = AggContext.StaticData.LoadIcon("SettingsGroupError_16x.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,WizardStageRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WizardStageRow.cs,WizardStageRow,The following statement contains a magic number: setupIcon = AggContext.StaticData.LoadIcon("SettingsGroupError_16x.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,WizardStageRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WizardStageRow.cs,WizardStageRow,The following statement contains a magic number: hoverIcon = AggContext.StaticData.LoadIcon("expand.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,WizardStageRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WizardStageRow.cs,WizardStageRow,The following statement contains a magic number: hoverIcon = AggContext.StaticData.LoadIcon("expand.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl,WizardStageRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WizardStageRow.cs,OnBoundsChanged,The following statement contains a magic number: iconYOffset = LocalBounds.YCenter - (completedIcon.Height / 2);
Magic Number,MatterHackers.MatterControl,AuthenticationData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\AuthenticationData.cs,SetOffline,The following statement contains a magic number: failedRequestCount = 6;
Magic Number,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,LoadImageInto,The following statement contains a magic number: ImageBuffer unScaledImage = new ImageBuffer(10' 10);
Magic Number,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,LoadImageInto,The following statement contains a magic number: ImageBuffer unScaledImage = new ImageBuffer(10' 10);
Magic Number,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,LoadImageInto,The following statement contains a magic number: ImageBuffer halfImage = new ImageBuffer(unScaledImage.Width / 2' unScaledImage.Height / 2' 32' scalingBlender);
Magic Number,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,LoadImageInto,The following statement contains a magic number: ImageBuffer halfImage = new ImageBuffer(unScaledImage.Width / 2' unScaledImage.Height / 2' 32' scalingBlender);
Magic Number,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,LoadImageInto,The following statement contains a magic number: ImageBuffer halfImage = new ImageBuffer(unScaledImage.Width / 2' unScaledImage.Height / 2' 32' scalingBlender);
Magic Number,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,LoadImageInto,The following statement contains a magic number: unScaledImage.Width > imageToLoadInto.Width * 2
Magic Number,MatterHackers.MatterControl,WebCache,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\WebUtilities\WebCache.cs,LoadImageInto,The following statement contains a magic number: imageToLoadInto.Allocate(imageToLoadInto.Width' (int)(unScaledImage.Height * finalScale)' imageToLoadInto.Width * (imageToLoadInto.BitDepth / 8)' imageToLoadInto.BitDepth);
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\ContactFormPage.cs,ContactFormPage,The following statement contains a magic number: submissionStatus = new TextWidget("Submitting your information...".Localize()' pointSize: 13)  			{  				AutoExpandBoundsToText = true'  				Margin = new BorderDouble(0' 5)'  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Left  			};
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\ContactFormPage.cs,ContactFormPage,The following statement contains a magic number: submissionStatus = new TextWidget("Submitting your information...".Localize()' pointSize: 13)  			{  				AutoExpandBoundsToText = true'  				Margin = new BorderDouble(0' 5)'  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Left  			};
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\ContactFormPage.cs,ContactFormPage,The following statement contains a magic number: contentRow.AddChild(detailInput = new MHTextEditWidget(""' theme' pixelHeight: 120' multiLine: true)  			{  				HAnchor = HAnchor.Stretch  			});
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\ContactFormPage.cs,CreateLabelRow,The following statement contains a magic number: labelContainer.AddChild(new TextWidget(labelText' pointSize: fontSize)  			{  				TextColor = theme.TextColor'  				VAnchor = VAnchor.Bottom'  				HAnchor = HAnchor.Left'  				Margin = new BorderDouble(bottom: 2)  			});
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\ContactFormPage.cs,CreateErrorRow,The following statement contains a magic number: return new TextWidget(""' pointSize: 11)  			{  				AutoExpandBoundsToText = true'  				Margin = new BorderDouble(0' 5)'  				TextColor = Color.Red'  				HAnchor = HAnchor.Left'  				Visible = false  			};
Magic Number,MatterHackers.MatterControl.ContactForm,ContactFormPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\AboutPage\ContactFormPage.cs,CreateErrorRow,The following statement contains a magic number: return new TextWidget(""' pointSize: 11)  			{  				AutoExpandBoundsToText = true'  				Margin = new BorderDouble(0' 5)'  				TextColor = Color.Red'  				HAnchor = HAnchor.Left'  				Visible = false  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: ImageWidget = new ImageWidget(AggContext.StaticData.LoadIcon("hotend.png"' theme.InvertIcons))  			{  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(right: 5)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: var container = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				Padding = new BorderDouble(10' 5' 0' 5)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: var container = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				Padding = new BorderDouble(10' 5' 0' 5)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: var container = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				Padding = new BorderDouble(10' 5' 0' 5)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: CurrentTempIndicator = new TextWidget(textValue' pointSize: 11)  			{  				TextColor = theme.TextColor'  				VAnchor = VAnchor.Center'  				AutoExpandBoundsToText = true  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: goalTempIndicator = new TextWidget(textValue' pointSize: 11)  			{  				TextColor = theme.TextColor'  				VAnchor = VAnchor.Center'  				AutoExpandBoundsToText = true  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: DirectionIndicator = new TextWidget(textValue' pointSize: 11)  			{  				TextColor = theme.TextColor'  				VAnchor = VAnchor.Center'  				AutoExpandBoundsToText = true'  				Margin = new BorderDouble(left: 5)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBase.cs,TemperatureWidgetBase,The following statement contains a magic number: DirectionIndicator = new TextWidget(textValue' pointSize: 11)  			{  				TextColor = theme.TextColor'  				VAnchor = VAnchor.Center'  				AutoExpandBoundsToText = true'  				Margin = new BorderDouble(left: 5)  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBase.cs,DisplayCurrentTemperature,The following statement contains a magic number: int targetTemp = (int)(targetTemperature + 0.5);
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBase.cs,DisplayCurrentTemperature,The following statement contains a magic number: int actualTemp = (int)(actualTemperature + 0.5);
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBed.cs,GetPopupContent,The following statement contains a magic number: var widget = new IgnoredPopupWidget()  			{  				Width = 300'  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Fit'  				Padding = new BorderDouble(12' 0)'  				BackgroundColor = menuTheme.BackgroundColor  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBed.cs,GetPopupContent,The following statement contains a magic number: var widget = new IgnoredPopupWidget()  			{  				Width = 300'  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Fit'  				Padding = new BorderDouble(12' 0)'  				BackgroundColor = menuTheme.BackgroundColor  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBed.cs,GetPopupContent,The following statement contains a magic number: var graph = new DataViewGraph()  			{  				DynamicallyScaleRange = false'  				MinValue = 0'  				ShowGoal = true'  				GoalColor = menuTheme.PrimaryAccentColor'  				GoalValue = printer.Settings.GetValue<double>(SettingsKey.bed_temperature)'  				MaxValue = 150' // could come from some profile value in the future  				Width = widget.Width - 20'  				Height = 35' // this works better if it is a common multiple of the Width  				Margin = new BorderDouble(0' 5' 0' 0)'  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBed.cs,GetPopupContent,The following statement contains a magic number: var graph = new DataViewGraph()  			{  				DynamicallyScaleRange = false'  				MinValue = 0'  				ShowGoal = true'  				GoalColor = menuTheme.PrimaryAccentColor'  				GoalValue = printer.Settings.GetValue<double>(SettingsKey.bed_temperature)'  				MaxValue = 150' // could come from some profile value in the future  				Width = widget.Width - 20'  				Height = 35' // this works better if it is a common multiple of the Width  				Margin = new BorderDouble(0' 5' 0' 0)'  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBed.cs,GetPopupContent,The following statement contains a magic number: var graph = new DataViewGraph()  			{  				DynamicallyScaleRange = false'  				MinValue = 0'  				ShowGoal = true'  				GoalColor = menuTheme.PrimaryAccentColor'  				GoalValue = printer.Settings.GetValue<double>(SettingsKey.bed_temperature)'  				MaxValue = 150' // could come from some profile value in the future  				Width = widget.Width - 20'  				Height = 35' // this works better if it is a common multiple of the Width  				Margin = new BorderDouble(0' 5' 0' 0)'  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetBed,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetBed.cs,GetPopupContent,The following statement contains a magic number: var graph = new DataViewGraph()  			{  				DynamicallyScaleRange = false'  				MinValue = 0'  				ShowGoal = true'  				GoalColor = menuTheme.PrimaryAccentColor'  				GoalValue = printer.Settings.GetValue<double>(SettingsKey.bed_temperature)'  				MaxValue = 150' // could come from some profile value in the future  				Width = widget.Width - 20'  				Height = 35' // this works better if it is a common multiple of the Width  				Margin = new BorderDouble(0' 5' 0' 0)'  			};
Magic Number,MatterHackers.MatterControl.ActionBar,ControlContentExtruder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,ControlContentExtruder,The following statement contains a magic number: extruderIndex < 2
Magic Number,MatterHackers.MatterControl.ActionBar,ControlContentExtruder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,ControlContentExtruder,The following statement contains a magic number: int extruderButtonTopMargin = loadUnloadButtonRow == null ? 8 : 0;
Magic Number,MatterHackers.MatterControl.ActionBar,ControlContentExtruder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,ControlContentExtruder,The following statement contains a magic number: tenButton.CheckedStateChanged += (s' e) =>  			{  				if (tenButton.Checked)  				{  					moveAmount = 10;  				}  			};
Magic Number,MatterHackers.MatterControl.ActionBar,ControlContentExtruder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,ControlContentExtruder,The following statement contains a magic number: oneHundredButton.CheckedStateChanged += (s' e) =>  			{  				if (oneHundredButton.Checked)  				{  					moveAmount = 100;  				}  			};
Magic Number,MatterHackers.MatterControl.ActionBar,ControlContentExtruder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,ControlContentExtruder,The following statement contains a magic number: switch (moveAmount)  			{  				case 1:  					oneButton.Checked = true;  					break;  				case 10:  					tenButton.Checked = true;  					break;  				case 100:  					oneHundredButton.Checked = true;  					break;  			}
Magic Number,MatterHackers.MatterControl.ActionBar,ControlContentExtruder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,ControlContentExtruder,The following statement contains a magic number: switch (moveAmount)  			{  				case 1:  					oneButton.Checked = true;  					break;  				case 10:  					tenButton.Checked = true;  					break;  				case 100:  					oneHundredButton.Checked = true;  					break;  			}
Magic Number,MatterHackers.MatterControl.ActionBar,ControlContentExtruder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,ControlContentExtruder,The following statement contains a magic number: moveButtonsContainer.AddChild(new TextWidget("mm"' textColor: theme.TextColor' pointSize: 8)  			{  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(3' 0)  			});
Magic Number,MatterHackers.MatterControl.ActionBar,ControlContentExtruder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,ControlContentExtruder,The following statement contains a magic number: moveButtonsContainer.AddChild(new TextWidget("mm"' textColor: theme.TextColor' pointSize: 8)  			{  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(3' 0)  			});
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The following statement contains a magic number: var widget = new IgnoredPopupWidget()  			{  				Width = 350'  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Fit'  				Padding = new BorderDouble(12' 0)'  				BackgroundColor = menuTheme.BackgroundColor  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The following statement contains a magic number: var widget = new IgnoredPopupWidget()  			{  				Width = 350'  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Fit'  				Padding = new BorderDouble(12' 0)'  				BackgroundColor = menuTheme.BackgroundColor  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The following statement contains a magic number: var graph = new DataViewGraph()  			{  				DynamicallyScaleRange = false'  				MinValue = 0'  				ShowGoal = true'  				GoalColor = menuTheme.PrimaryAccentColor'  				GoalValue = printer.Settings.Helpers.ExtruderTargetTemperature(hotendIndex)'  				MaxValue = 280' // could come from some profile value in the future  				Width = widget.Width - 20'  				Height = 35' // this works better if it is a common multiple of the Width  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The following statement contains a magic number: var graph = new DataViewGraph()  			{  				DynamicallyScaleRange = false'  				MinValue = 0'  				ShowGoal = true'  				GoalColor = menuTheme.PrimaryAccentColor'  				GoalValue = printer.Settings.Helpers.ExtruderTargetTemperature(hotendIndex)'  				MaxValue = 280' // could come from some profile value in the future  				Width = widget.Width - 20'  				Height = 35' // this works better if it is a common multiple of the Width  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The following statement contains a magic number: var graph = new DataViewGraph()  			{  				DynamicallyScaleRange = false'  				MinValue = 0'  				ShowGoal = true'  				GoalColor = menuTheme.PrimaryAccentColor'  				GoalValue = printer.Settings.Helpers.ExtruderTargetTemperature(hotendIndex)'  				MaxValue = 280' // could come from some profile value in the future  				Width = widget.Width - 20'  				Height = 35' // this works better if it is a common multiple of the Width  			};
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The following statement contains a magic number: shopButton.Margin = new BorderDouble(3' 3' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The following statement contains a magic number: shopButton.Margin = new BorderDouble(3' 3' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The following statement contains a magic number: shopButton.Margin = new BorderDouble(3' 3' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The following statement contains a magic number: shopButton.Margin = new BorderDouble(3' 3' 6' 3);
Magic Number,MatterHackers.MatterControl.ActionBar,TemperatureWidgetHotend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,GetPopupContent,The following statement contains a magic number: container.AddChild(new HorizontalLine()  					{  						Margin = new BorderDouble(0' 5' 0' 0)  					});
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterConnectButton.cs,PrinterConnectButton,The following statement contains a magic number: connectButton = new TextIconButton(  				"Connect".Localize()'  				AggContext.StaticData.LoadIcon("connect.png"' 14' 14' theme.InvertIcons)'  				theme)  			{  				Name = "Connect to printer button"'  				ToolTipText = "Connect to the currently selected printer".Localize()'  				MouseDownColor = theme.ToolbarButtonDown'  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterConnectButton.cs,PrinterConnectButton,The following statement contains a magic number: connectButton = new TextIconButton(  				"Connect".Localize()'  				AggContext.StaticData.LoadIcon("connect.png"' 14' 14' theme.InvertIcons)'  				theme)  			{  				Name = "Connect to printer button"'  				ToolTipText = "Connect to the currently selected printer".Localize()'  				MouseDownColor = theme.ToolbarButtonDown'  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterConnectButton.cs,PrinterConnectButton,The following statement contains a magic number: cancelConnectButton = new TextIconButton(  				"Cancel".Localize()'  				AggContext.StaticData.LoadIcon("connect.png"' 14' 14' theme.InvertIcons)'  				theme)  			{  				ToolTipText = "Stop trying to connect to the printer.".Localize()'  				BackgroundColor = theme.ToolbarButtonBackground'  				HoverColor = theme.ToolbarButtonHover'  				MouseDownColor = theme.ToolbarButtonDown'  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterConnectButton.cs,PrinterConnectButton,The following statement contains a magic number: cancelConnectButton = new TextIconButton(  				"Cancel".Localize()'  				AggContext.StaticData.LoadIcon("connect.png"' 14' 14' theme.InvertIcons)'  				theme)  			{  				ToolTipText = "Stop trying to connect to the printer.".Localize()'  				BackgroundColor = theme.ToolbarButtonBackground'  				HoverColor = theme.ToolbarButtonHover'  				MouseDownColor = theme.ToolbarButtonDown'  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterConnectButton.cs,PrinterConnectButton,The following statement contains a magic number: disconnectButton = new TextIconButton(  				"Disconnect".Localize()'  				AggContext.StaticData.LoadIcon("connect.png"' 14' 14' theme.InvertIcons)'  				theme)  			{  				Name = "Disconnect from printer button"'  				Visible = false'  				ToolTipText = "Disconnect from current printer".Localize()'  				BackgroundColor = theme.ToolbarButtonBackground'  				HoverColor = theme.ToolbarButtonHover'  				MouseDownColor = theme.ToolbarButtonDown'  			};
Magic Number,MatterHackers.MatterControl.ActionBar,PrinterConnectButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterConnectButton.cs,PrinterConnectButton,The following statement contains a magic number: disconnectButton = new TextIconButton(  				"Disconnect".Localize()'  				AggContext.StaticData.LoadIcon("connect.png"' 14' 14' theme.InvertIcons)'  				theme)  			{  				Name = "Disconnect from printer button"'  				Visible = false'  				ToolTipText = "Disconnect from current printer".Localize()'  				BackgroundColor = theme.ToolbarButtonBackground'  				HoverColor = theme.ToolbarButtonHover'  				MouseDownColor = theme.ToolbarButtonDown'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,SettingsItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\SettingsItem.cs,CreateToggleSwitch,The following statement contains a magic number: var toggleSwitch = new RoundedToggleSwitch(theme)  			{  				VAnchor = VAnchor.Center'  				Checked = toggleSwitchConfig.Checked'  				Name = toggleSwitchConfig.Name'  				Margin = new BorderDouble(left: 16)'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,CreateThemeModeButtons,The following statement contains a magic number: previewColumn.AddChild(new ThemePreviewButton(themeset' this)  					{  						HAnchor = HAnchor.Absolute'  						VAnchor = VAnchor.Absolute'  						Width = 80'  						Height = 65'  						Mode = themeName'  						Border = 1'  						BorderColor = theme.BorderColor20'  						Margin = new BorderDouble(theme.DefaultContainerPadding' 0' theme.DefaultContainerPadding' theme.DefaultContainerPadding)  					});
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,CreateThemeModeButtons,The following statement contains a magic number: previewColumn.AddChild(new ThemePreviewButton(themeset' this)  					{  						HAnchor = HAnchor.Absolute'  						VAnchor = VAnchor.Absolute'  						Width = 80'  						Height = 65'  						Mode = themeName'  						Border = 1'  						BorderColor = theme.BorderColor20'  						Margin = new BorderDouble(theme.DefaultContainerPadding' 0' theme.DefaultContainerPadding' theme.DefaultContainerPadding)  					});
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,CreateThemeModeButtons,The following statement contains a magic number: previewColumn.AddChild(new TextWidget(name' pointSize: theme.FontSize7' textColor: theme.TextColor)  					{  						HAnchor = HAnchor.Left'  						Margin = new BorderDouble(12' 2)  					});
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,CreateThemeModeButtons,The following statement contains a magic number: previewColumn.AddChild(new TextWidget(name' pointSize: theme.FontSize7' textColor: theme.TextColor)  					{  						HAnchor = HAnchor.Left'  						Margin = new BorderDouble(12' 2)  					});
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,CreateThemeModeButtons,The following statement contains a magic number: var imageBuffer = new ImageBuffer(35' 35);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,CreateThemeModeButtons,The following statement contains a magic number: var imageBuffer = new ImageBuffer(35' 35);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,CreateThemeModeButtons,The following statement contains a magic number: var arrowHeight = 35;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,CreateThemeModeButtons,The following statement contains a magic number: graphics.Render(upArrow' new Vector2(0' 35)' AppContext.Theme.PrimaryAccentColor);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,CreateThemeModeButtons,The following statement contains a magic number: graphics.Render(this.CheckMark' 4' 17);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,CreateThemeModeButtons,The following statement contains a magic number: graphics.Render(this.CheckMark' 4' 17);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemeColorPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemeColorPanel.cs,SetThemeColor,The following statement contains a magic number: themeSet.Theme.AccentMimimalOverlay = accentColor.WithAlpha(90);
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: this.Padding = 8;
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: secondaryBackground = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Stretch'  				Margin = new BorderDouble(0)'  				Width = 20'  				BackgroundColor = theme.MinimalShade'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: accentColor = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 6'  				Margin = new BorderDouble(left: 25)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: accentColor = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 6'  				Margin = new BorderDouble(left: 25)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon1 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 6)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon1 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 6)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon1 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 6)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon1 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 6)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon2 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 20)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon2 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 20)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon2 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 20)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon2 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 20)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon3 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 34)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon3 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 34)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon3 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 34)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: icon3 = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute | HAnchor.Left'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 8'  				Width = 8'  				Margin = new BorderDouble(left: 6' top: 34)'  				BackgroundColor = primaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: tertiaryBackground = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 37'  				Margin = new BorderDouble(left: 25' top: 12)'  				BackgroundColor = theme.SlightShade'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: tertiaryBackground = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 37'  				Margin = new BorderDouble(left: 25' top: 12)'  				BackgroundColor = theme.SlightShade'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage,ThemePreviewButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\ApplicationSettings\ThemePreviewButton.cs,ThemePreviewButton,The following statement contains a magic number: tertiaryBackground = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Absolute | VAnchor.Top'  				Height = 37'  				Margin = new BorderDouble(left: 25' top: 12)'  				BackgroundColor = theme.SlightShade'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var insertFilamentPage = new WizardPage(this' "Insert Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.insert_filament_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.insert_filament_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						// turn off the fan  						printer.Connection.FanSpeed0To255 = 0;  						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");    						int maxSecondsToStartLoading = 300;  						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quiet mode  									printer.Connection.MoveRelative(PrinterAxis.E' 1' 80);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 1' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								if (runningTime.ElapsedMilliseconds > maxSecondsToStartLoading * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						if (runningGCodeCommands != null)  						{  							UiThread.ClearInterval(runningGCodeCommands);  						}  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var insertFilamentPage = new WizardPage(this' "Insert Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.insert_filament_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.insert_filament_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						// turn off the fan  						printer.Connection.FanSpeed0To255 = 0;  						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");    						int maxSecondsToStartLoading = 300;  						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quiet mode  									printer.Connection.MoveRelative(PrinterAxis.E' 1' 80);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 1' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								if (runningTime.ElapsedMilliseconds > maxSecondsToStartLoading * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						if (runningGCodeCommands != null)  						{  							UiThread.ClearInterval(runningGCodeCommands);  						}  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var insertFilamentPage = new WizardPage(this' "Insert Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.insert_filament_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.insert_filament_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						// turn off the fan  						printer.Connection.FanSpeed0To255 = 0;  						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");    						int maxSecondsToStartLoading = 300;  						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quiet mode  									printer.Connection.MoveRelative(PrinterAxis.E' 1' 80);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 1' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								if (runningTime.ElapsedMilliseconds > maxSecondsToStartLoading * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						if (runningGCodeCommands != null)  						{  							UiThread.ClearInterval(runningGCodeCommands);  						}  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var insertFilamentPage = new WizardPage(this' "Insert Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.insert_filament_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.insert_filament_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						// turn off the fan  						printer.Connection.FanSpeed0To255 = 0;  						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");    						int maxSecondsToStartLoading = 300;  						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quiet mode  									printer.Connection.MoveRelative(PrinterAxis.E' 1' 80);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 1' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								if (runningTime.ElapsedMilliseconds > maxSecondsToStartLoading * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						if (runningGCodeCommands != null)  						{  							UiThread.ClearInterval(runningGCodeCommands);  						}  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var insertFilamentPage = new WizardPage(this' "Insert Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.insert_filament_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.insert_filament_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						// turn off the fan  						printer.Connection.FanSpeed0To255 = 0;  						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");    						int maxSecondsToStartLoading = 300;  						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quiet mode  									printer.Connection.MoveRelative(PrinterAxis.E' 1' 80);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 1' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								if (runningTime.ElapsedMilliseconds > maxSecondsToStartLoading * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						if (runningGCodeCommands != null)  						{  							UiThread.ClearInterval(runningGCodeCommands);  						}  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var loadingFilamentPage = new WizardPage(this' "Loading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature));    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var loadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.load_filament_length));  						var remainingLengthMm = loadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = loadLengthMm / loadingSpeedMmPerS;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									var currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE + thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Loading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var loadingFilamentPage = new WizardPage(this' "Loading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature));    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var loadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.load_filament_length));  						var remainingLengthMm = loadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = loadLengthMm / loadingSpeedMmPerS;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									var currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE + thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Loading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var loadingFilamentPage = new WizardPage(this' "Loading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature));    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var loadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.load_filament_length));  						var remainingLengthMm = loadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = loadLengthMm / loadingSpeedMmPerS;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									var currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE + thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Loading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var loadingFilamentPage = new WizardPage(this' "Loading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature));    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var loadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.load_filament_length));  						var remainingLengthMm = loadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = loadLengthMm / loadingSpeedMmPerS;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									var currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE + thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Loading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var loadingFilamentPage = new WizardPage(this' "Loading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature));    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var loadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.load_filament_length));  						var remainingLengthMm = loadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = loadLengthMm / loadingSpeedMmPerS;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									var currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE + thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Loading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var loadingFilamentPage = new WizardPage(this' "Loading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature));    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var loadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.load_filament_length));  						var remainingLengthMm = loadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = loadLengthMm / loadingSpeedMmPerS;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									var currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE + thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Loading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var loadingFilamentPage = new WizardPage(this' "Loading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature));    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var loadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.load_filament_length));  						var remainingLengthMm = loadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = loadLengthMm / loadingSpeedMmPerS;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									var currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE + thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Loading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var loadingFilamentPage = new WizardPage(this' "Loading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature));    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var loadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.load_filament_length));  						var remainingLengthMm = loadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = loadLengthMm / loadingSpeedMmPerS;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									var currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE + thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Loading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var loadingFilamentPage = new WizardPage(this' "Loading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature));    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var loadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.load_filament_length));  						var remainingLengthMm = loadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = loadLengthMm / loadingSpeedMmPerS;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									var currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE + thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Loading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var loadingFilamentPage = new WizardPage(this' "Loading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature));    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var loadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.load_filament_length));  						var remainingLengthMm = loadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = loadLengthMm / loadingSpeedMmPerS;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									var currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE + thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Loading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var loadingFilamentPage = new WizardPage(this' "Loading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature));    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var loadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.load_filament_length));  						var remainingLengthMm = loadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = loadLengthMm / loadingSpeedMmPerS;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									var currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE + thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Loading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var temps = new double[4];
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var runningCleanPage = new WizardPage(this' "Wait For Running Clean".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.running_clean_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.running_clean_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quite mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 140);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								int secondsToRun = 90;  								if (runningTime.ElapsedMilliseconds > secondsToRun * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var runningCleanPage = new WizardPage(this' "Wait For Running Clean".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.running_clean_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.running_clean_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quite mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 140);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								int secondsToRun = 90;  								if (runningTime.ElapsedMilliseconds > secondsToRun * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var runningCleanPage = new WizardPage(this' "Wait For Running Clean".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.running_clean_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.running_clean_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quite mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 140);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								int secondsToRun = 90;  								if (runningTime.ElapsedMilliseconds > secondsToRun * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var runningCleanPage = new WizardPage(this' "Wait For Running Clean".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.running_clean_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.running_clean_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quite mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 140);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								int secondsToRun = 90;  								if (runningTime.ElapsedMilliseconds > secondsToRun * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var runningCleanPage = new WizardPage(this' "Wait For Running Clean".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.running_clean_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.running_clean_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quite mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 140);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								int secondsToRun = 90;  								if (runningTime.ElapsedMilliseconds > secondsToRun * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var runningCleanPage = new WizardPage(this' "Wait For Running Clean".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.running_clean_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.running_clean_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quite mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 140);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								int secondsToRun = 90;  								if (runningTime.ElapsedMilliseconds > secondsToRun * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,LoadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,GetPages,The following statement contains a magic number: var runningCleanPage = new WizardPage(this' "Wait For Running Clean".Localize()' "")  				{  					PageLoad = (page) =>  					{  						var markdownText = printer.Settings.GetValue(SettingsKey.running_clean_markdown2);    						if (extruderIndex == 1)  						{  							markdownText = printer.Settings.GetValue(SettingsKey.running_clean_1_markdown);  						}    						var markdownWidget = new MarkdownWidget(theme);  						markdownWidget.Markdown = markdownText = markdownText.Replace("\\n"' "\n");  						page.ContentRow.AddChild(markdownWidget);    						var runningTime = Stopwatch.StartNew();  						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (false)  								{  									// Quite mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 140);  									printer.Connection.QueueLine("G4 P1"); // empty buffer - allow for cancel  								}  								else  								{  									// Pulse mode  									printer.Connection.MoveRelative(PrinterAxis.E' 2' 150);  									printer.Connection.QueueLine("G4 P10"); // empty buffer - allow for cancel  								}    								int secondsToRun = 90;  								if (runningTime.ElapsedMilliseconds > secondsToRun * 1000)  								{  									UiThread.ClearInterval(runningGCodeCommands);  								}  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,Initialize,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					LevelingPlan = new LevelWizard3Point(printerShim);  					break;    				case LevelingSystem.Probe7PointRadial:  					LevelingPlan = new LevelWizard7PointRadial(printerShim);  					break;    				case LevelingSystem.Probe13PointRadial:  					LevelingPlan = new LevelWizard13PointRadial(printerShim);  					break;    				case LevelingSystem.Probe100PointRadial:  					LevelingPlan = new LevelWizard100PointRadial(printerShim);  					break;    				case LevelingSystem.Probe3x3Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 3' 3);  					break;    				case LevelingSystem.Probe5x5Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 5' 5);  					break;    				case LevelingSystem.Probe10x10Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 10' 10);  					break;    				case LevelingSystem.ProbeCustom:  					LevelingPlan = new LevelWizardCustom(printerShim);  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,Initialize,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					LevelingPlan = new LevelWizard3Point(printerShim);  					break;    				case LevelingSystem.Probe7PointRadial:  					LevelingPlan = new LevelWizard7PointRadial(printerShim);  					break;    				case LevelingSystem.Probe13PointRadial:  					LevelingPlan = new LevelWizard13PointRadial(printerShim);  					break;    				case LevelingSystem.Probe100PointRadial:  					LevelingPlan = new LevelWizard100PointRadial(printerShim);  					break;    				case LevelingSystem.Probe3x3Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 3' 3);  					break;    				case LevelingSystem.Probe5x5Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 5' 5);  					break;    				case LevelingSystem.Probe10x10Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 10' 10);  					break;    				case LevelingSystem.ProbeCustom:  					LevelingPlan = new LevelWizardCustom(printerShim);  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,Initialize,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					LevelingPlan = new LevelWizard3Point(printerShim);  					break;    				case LevelingSystem.Probe7PointRadial:  					LevelingPlan = new LevelWizard7PointRadial(printerShim);  					break;    				case LevelingSystem.Probe13PointRadial:  					LevelingPlan = new LevelWizard13PointRadial(printerShim);  					break;    				case LevelingSystem.Probe100PointRadial:  					LevelingPlan = new LevelWizard100PointRadial(printerShim);  					break;    				case LevelingSystem.Probe3x3Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 3' 3);  					break;    				case LevelingSystem.Probe5x5Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 5' 5);  					break;    				case LevelingSystem.Probe10x10Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 10' 10);  					break;    				case LevelingSystem.ProbeCustom:  					LevelingPlan = new LevelWizardCustom(printerShim);  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,Initialize,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					LevelingPlan = new LevelWizard3Point(printerShim);  					break;    				case LevelingSystem.Probe7PointRadial:  					LevelingPlan = new LevelWizard7PointRadial(printerShim);  					break;    				case LevelingSystem.Probe13PointRadial:  					LevelingPlan = new LevelWizard13PointRadial(printerShim);  					break;    				case LevelingSystem.Probe100PointRadial:  					LevelingPlan = new LevelWizard100PointRadial(printerShim);  					break;    				case LevelingSystem.Probe3x3Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 3' 3);  					break;    				case LevelingSystem.Probe5x5Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 5' 5);  					break;    				case LevelingSystem.Probe10x10Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 10' 10);  					break;    				case LevelingSystem.ProbeCustom:  					LevelingPlan = new LevelWizardCustom(printerShim);  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,Initialize,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					LevelingPlan = new LevelWizard3Point(printerShim);  					break;    				case LevelingSystem.Probe7PointRadial:  					LevelingPlan = new LevelWizard7PointRadial(printerShim);  					break;    				case LevelingSystem.Probe13PointRadial:  					LevelingPlan = new LevelWizard13PointRadial(printerShim);  					break;    				case LevelingSystem.Probe100PointRadial:  					LevelingPlan = new LevelWizard100PointRadial(printerShim);  					break;    				case LevelingSystem.Probe3x3Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 3' 3);  					break;    				case LevelingSystem.Probe5x5Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 5' 5);  					break;    				case LevelingSystem.Probe10x10Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 10' 10);  					break;    				case LevelingSystem.ProbeCustom:  					LevelingPlan = new LevelWizardCustom(printerShim);  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,Initialize,The following statement contains a magic number: switch (levelingData.LevelingSystem)  			{  				case LevelingSystem.Probe3Points:  					LevelingPlan = new LevelWizard3Point(printerShim);  					break;    				case LevelingSystem.Probe7PointRadial:  					LevelingPlan = new LevelWizard7PointRadial(printerShim);  					break;    				case LevelingSystem.Probe13PointRadial:  					LevelingPlan = new LevelWizard13PointRadial(printerShim);  					break;    				case LevelingSystem.Probe100PointRadial:  					LevelingPlan = new LevelWizard100PointRadial(printerShim);  					break;    				case LevelingSystem.Probe3x3Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 3' 3);  					break;    				case LevelingSystem.Probe5x5Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 5' 5);  					break;    				case LevelingSystem.Probe10x10Mesh:  					LevelingPlan = new LevelWizardMesh(printerShim' 10' 10);  					break;    				case LevelingSystem.ProbeCustom:  					LevelingPlan = new LevelWizardCustom(printerShim);  					break;    				default:  					throw new NotImplementedException();  			}
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,EnsureInPrintBounds,The following statement contains a magic number: var bedBounds = new RectangleDouble(printCenter - bedSize / 2' printCenter + bedSize / 2);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,PrintLevelingWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\PrintLevelingWizard.cs,EnsureInPrintBounds,The following statement contains a magic number: var bedBounds = new RectangleDouble(printCenter - bedSize / 2' printCenter + bedSize / 2);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var temps = new double[4];
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var unloadingFilamentPage = new WizardPage(this' "Unloading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						if (extruderCount > 1)  						{  							// reset the extruder that was active  							printer.Connection.QueueLine($"T{extruderIndex}");  						}    						// reset the extrusion amount so this is easier to debug  						printer.Connection.QueueLine("G92 E0");    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						if (extruderIndex == 0)  						{  							printer.Connection.SetTargetHotendTemperature(0' printer.Settings.GetValue<double>(SettingsKey.temperature));  						}  						else  						{  							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString()));  						}    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var unloadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.unload_filament_length));  						var remainingLengthMm = unloadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = unloadLengthMm / loadingSpeedMmPerS;    						double currentE = 0;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							// wait until the printer has processed all our commands (including G92)  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE - thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Unloading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var unloadingFilamentPage = new WizardPage(this' "Unloading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						if (extruderCount > 1)  						{  							// reset the extruder that was active  							printer.Connection.QueueLine($"T{extruderIndex}");  						}    						// reset the extrusion amount so this is easier to debug  						printer.Connection.QueueLine("G92 E0");    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						if (extruderIndex == 0)  						{  							printer.Connection.SetTargetHotendTemperature(0' printer.Settings.GetValue<double>(SettingsKey.temperature));  						}  						else  						{  							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString()));  						}    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var unloadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.unload_filament_length));  						var remainingLengthMm = unloadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = unloadLengthMm / loadingSpeedMmPerS;    						double currentE = 0;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							// wait until the printer has processed all our commands (including G92)  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE - thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Unloading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var unloadingFilamentPage = new WizardPage(this' "Unloading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						if (extruderCount > 1)  						{  							// reset the extruder that was active  							printer.Connection.QueueLine($"T{extruderIndex}");  						}    						// reset the extrusion amount so this is easier to debug  						printer.Connection.QueueLine("G92 E0");    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						if (extruderIndex == 0)  						{  							printer.Connection.SetTargetHotendTemperature(0' printer.Settings.GetValue<double>(SettingsKey.temperature));  						}  						else  						{  							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString()));  						}    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var unloadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.unload_filament_length));  						var remainingLengthMm = unloadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = unloadLengthMm / loadingSpeedMmPerS;    						double currentE = 0;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							// wait until the printer has processed all our commands (including G92)  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE - thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Unloading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var unloadingFilamentPage = new WizardPage(this' "Unloading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						if (extruderCount > 1)  						{  							// reset the extruder that was active  							printer.Connection.QueueLine($"T{extruderIndex}");  						}    						// reset the extrusion amount so this is easier to debug  						printer.Connection.QueueLine("G92 E0");    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						if (extruderIndex == 0)  						{  							printer.Connection.SetTargetHotendTemperature(0' printer.Settings.GetValue<double>(SettingsKey.temperature));  						}  						else  						{  							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString()));  						}    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var unloadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.unload_filament_length));  						var remainingLengthMm = unloadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = unloadLengthMm / loadingSpeedMmPerS;    						double currentE = 0;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							// wait until the printer has processed all our commands (including G92)  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE - thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Unloading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var unloadingFilamentPage = new WizardPage(this' "Unloading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						if (extruderCount > 1)  						{  							// reset the extruder that was active  							printer.Connection.QueueLine($"T{extruderIndex}");  						}    						// reset the extrusion amount so this is easier to debug  						printer.Connection.QueueLine("G92 E0");    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						if (extruderIndex == 0)  						{  							printer.Connection.SetTargetHotendTemperature(0' printer.Settings.GetValue<double>(SettingsKey.temperature));  						}  						else  						{  							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString()));  						}    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var unloadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.unload_filament_length));  						var remainingLengthMm = unloadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = unloadLengthMm / loadingSpeedMmPerS;    						double currentE = 0;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							// wait until the printer has processed all our commands (including G92)  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE - thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Unloading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var unloadingFilamentPage = new WizardPage(this' "Unloading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						if (extruderCount > 1)  						{  							// reset the extruder that was active  							printer.Connection.QueueLine($"T{extruderIndex}");  						}    						// reset the extrusion amount so this is easier to debug  						printer.Connection.QueueLine("G92 E0");    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						if (extruderIndex == 0)  						{  							printer.Connection.SetTargetHotendTemperature(0' printer.Settings.GetValue<double>(SettingsKey.temperature));  						}  						else  						{  							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString()));  						}    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var unloadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.unload_filament_length));  						var remainingLengthMm = unloadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = unloadLengthMm / loadingSpeedMmPerS;    						double currentE = 0;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							// wait until the printer has processed all our commands (including G92)  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE - thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Unloading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var unloadingFilamentPage = new WizardPage(this' "Unloading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						if (extruderCount > 1)  						{  							// reset the extruder that was active  							printer.Connection.QueueLine($"T{extruderIndex}");  						}    						// reset the extrusion amount so this is easier to debug  						printer.Connection.QueueLine("G92 E0");    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						if (extruderIndex == 0)  						{  							printer.Connection.SetTargetHotendTemperature(0' printer.Settings.GetValue<double>(SettingsKey.temperature));  						}  						else  						{  							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString()));  						}    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var unloadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.unload_filament_length));  						var remainingLengthMm = unloadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = unloadLengthMm / loadingSpeedMmPerS;    						double currentE = 0;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							// wait until the printer has processed all our commands (including G92)  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE - thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Unloading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var unloadingFilamentPage = new WizardPage(this' "Unloading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						if (extruderCount > 1)  						{  							// reset the extruder that was active  							printer.Connection.QueueLine($"T{extruderIndex}");  						}    						// reset the extrusion amount so this is easier to debug  						printer.Connection.QueueLine("G92 E0");    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						if (extruderIndex == 0)  						{  							printer.Connection.SetTargetHotendTemperature(0' printer.Settings.GetValue<double>(SettingsKey.temperature));  						}  						else  						{  							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString()));  						}    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var unloadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.unload_filament_length));  						var remainingLengthMm = unloadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = unloadLengthMm / loadingSpeedMmPerS;    						double currentE = 0;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							// wait until the printer has processed all our commands (including G92)  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE - thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Unloading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var unloadingFilamentPage = new WizardPage(this' "Unloading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						if (extruderCount > 1)  						{  							// reset the extruder that was active  							printer.Connection.QueueLine($"T{extruderIndex}");  						}    						// reset the extrusion amount so this is easier to debug  						printer.Connection.QueueLine("G92 E0");    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						if (extruderIndex == 0)  						{  							printer.Connection.SetTargetHotendTemperature(0' printer.Settings.GetValue<double>(SettingsKey.temperature));  						}  						else  						{  							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString()));  						}    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var unloadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.unload_filament_length));  						var remainingLengthMm = unloadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = unloadLengthMm / loadingSpeedMmPerS;    						double currentE = 0;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							// wait until the printer has processed all our commands (including G92)  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE - thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Unloading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var unloadingFilamentPage = new WizardPage(this' "Unloading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						if (extruderCount > 1)  						{  							// reset the extruder that was active  							printer.Connection.QueueLine($"T{extruderIndex}");  						}    						// reset the extrusion amount so this is easier to debug  						printer.Connection.QueueLine("G92 E0");    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						if (extruderIndex == 0)  						{  							printer.Connection.SetTargetHotendTemperature(0' printer.Settings.GetValue<double>(SettingsKey.temperature));  						}  						else  						{  							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString()));  						}    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var unloadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.unload_filament_length));  						var remainingLengthMm = unloadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = unloadLengthMm / loadingSpeedMmPerS;    						double currentE = 0;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							// wait until the printer has processed all our commands (including G92)  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE - thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Unloading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,UnloadFilamentWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\UnloadFilamentWizard.cs,GetPages,The following statement contains a magic number: var unloadingFilamentPage = new WizardPage(this' "Unloading Filament".Localize()' "")  				{  					PageLoad = (page) =>  					{  						page.NextButton.Enabled = false;    						// add the progress bar  						var holder = new FlowLayoutWidget()  						{  							Margin = new BorderDouble(3' 0' 0' 10)'  						};  						var progressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  						{  							FillColor = theme.PrimaryAccentColor'  							BorderColor = theme.TextColor'  							BackgroundColor = Color.White'  							VAnchor = VAnchor.Center'  						};  						var progressBarText = new TextWidget(""' pointSize: 10' textColor: theme.TextColor)  						{  							AutoExpandBoundsToText = true'  							Margin = new BorderDouble(5' 0' 0' 0)'  							VAnchor = VAnchor.Center'  						};  						holder.AddChild(progressBar);  						holder.AddChild(progressBarText);  						page.ContentRow.AddChild(holder);    						if (extruderCount > 1)  						{  							// reset the extruder that was active  							printer.Connection.QueueLine($"T{extruderIndex}");  						}    						// reset the extrusion amount so this is easier to debug  						printer.Connection.QueueLine("G92 E0");    						// Allow extrusion at any temperature. S0 only works on Marlin S1 works on repetier and marlin  						printer.Connection.QueueLine("M302 S1");  						// send a dwell to empty out the current move commands  						printer.Connection.QueueLine("G4 P1");  						// put in a second one to use as a signal for the first being processed  						printer.Connection.QueueLine("G4 P1");  						// start heating up the extruder  						if (extruderIndex == 0)  						{  							printer.Connection.SetTargetHotendTemperature(0' printer.Settings.GetValue<double>(SettingsKey.temperature));  						}  						else  						{  							printer.Connection.SetTargetHotendTemperature(extruderIndex' printer.Settings.GetValue<double>(SettingsKey.temperature + extruderIndex.ToString()));  						}    						var loadingSpeedMmPerS = printer.Settings.GetValue<double>(SettingsKey.load_filament_speed);  						var unloadLengthMm = Math.Max(1' printer.Settings.GetValue<double>(SettingsKey.unload_filament_length));  						var remainingLengthMm = unloadLengthMm;  						var maxSingleExtrudeLength = 20;    						Stopwatch runningTime = null;  						var expectedTimeS = unloadLengthMm / loadingSpeedMmPerS;    						double currentE = 0;    						runningGCodeCommands = UiThread.SetInterval(() =>  						{  							// wait until the printer has processed all our commands (including G92)  							if (printer.Connection.NumQueuedCommands == 0)  							{  								if (runningTime == null)  								{  									runningTime = Stopwatch.StartNew();  								}    								if (progressBar.RatioComplete < 1  									|| remainingLengthMm >= .001)  								{  									var thisExtrude = Math.Min(remainingLengthMm' maxSingleExtrudeLength);  									currentE = printer.Connection.CurrentExtruderDestination;  									printer.Connection.QueueLine("G1 E{0:0.###} F{1}".FormatWith(currentE - thisExtrude' loadingSpeedMmPerS * 60));  									// make sure we wait for this command to finish so we can cancel the unload at any time without delay  									printer.Connection.QueueLine("G4 P1");  									remainingLengthMm -= thisExtrude;  									var elapsedSeconds = runningTime.Elapsed.TotalSeconds;  									progressBar.RatioComplete = Math.Min(1' elapsedSeconds / expectedTimeS);  									progressBarText.Text = $"Unloading Filament: {Math.Max(0' expectedTimeS - elapsedSeconds):0}";  								}  							}    							if (progressBar.RatioComplete == 1  								&& remainingLengthMm <= .001)  							{  								UiThread.ClearInterval(runningGCodeCommands);  								page.NextButton.InvokeClick();  							}  						}'  						.1);  					}'  					PageClose = () =>  					{  						UiThread.ClearInterval(runningGCodeCommands);  					}  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,XyCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\XyCalibrationWizard.cs,XyCalibrationWizard,The following statement contains a magic number: this.WindowSize = new Vector2(600 * GuiWidget.DeviceScale' 700 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,XyCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\XyCalibrationWizard.cs,XyCalibrationWizard,The following statement contains a magic number: this.WindowSize = new Vector2(600 * GuiWidget.DeviceScale' 700 * GuiWidget.DeviceScale);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ZCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\ZCalibrationWizard.cs,GetPages,The following statement contains a magic number: int hotendCount = Math.Min(2' printer.Settings.Helpers.HotendCount());
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ZCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\ZCalibrationWizard.cs,GetPages,The following statement contains a magic number: int totalSteps = 3 * hotendCount;
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ZCalibrationWizard,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\ZCalibrationWizard.cs,GetPages,The following statement contains a magic number: var temps = new double[4];
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbeFeedback,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbeFeedback.cs,AutoProbeFeedback,The following statement contains a magic number: var spacer = new GuiWidget(15' 15);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbeFeedback,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbeFeedback.cs,AutoProbeFeedback,The following statement contains a magic number: var spacer = new GuiWidget(15' 15);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbeFeedback,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbeFeedback.cs,GetZProbeHeight,The following statement contains a magic number: samples.Count > 3
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbeFeedback,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbeFeedback.cs,GetZProbeHeight,The following statement contains a magic number: probePositions[probePositionsBeingEditedIndex].Position.Z = Math.Round(samples.Average()' 2);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbePage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbePage.cs,GetZProbeHeight,The following statement contains a magic number: samples.Count > 3
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,AutoProbePage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\AutoProbePage.cs,GetZProbeHeight,The following statement contains a magic number: probePositions[probePositionsBeingEditedIndex].Position.Z = Math.Round(samples.Average()' 2);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,CalibrateProbeLastPageInstructions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\CalibrateProbeLastPageInstructions.cs,OnLoad,The following statement contains a magic number: printer.Connection.MoveRelative(PrinterAxis.X' .1' printer.Settings.Helpers.ManualMovementSpeeds().X);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,FindBedHeight,The following statement contains a magic number: GuiWidget spacer = new GuiWidget(15' 15);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,FindBedHeight,The following statement contains a magic number: GuiWidget spacer = new GuiWidget(15' 15);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,FindBedHeight,The following statement contains a magic number: zButtonsAndInfo.AddChild(new GuiWidget(15' 10));
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,FindBedHeight,The following statement contains a magic number: zButtonsAndInfo.AddChild(new GuiWidget(15' 10));
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,FindBedHeight,The following statement contains a magic number: TextWidget zPosition = new TextWidget("Z: 0.0      "' pointSize: 12' textColor: theme.TextColor)  			{  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(10' 0)'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,FindBedHeight,The following statement contains a magic number: TextWidget zPosition = new TextWidget("Z: 0.0      "' pointSize: 12' textColor: theme.TextColor)  			{  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(10' 0)'  			};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,FindBedHeight,The following statement contains a magic number: runningInterval = UiThread.SetInterval(() =>  			{  				Vector3 destinationPosition = printer.Connection.CurrentDestination;  				zPosition.Text = "Z: {0:0.00}".FormatWith(destinationPosition.Z);  			}' .3);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,CreateZButtons,The following statement contains a magic number: FlowLayoutWidget zButtons = JogControls.CreateZButtons(printer' 4' out zPlusControl' out zMinusControl' new PrinterControls.XYZColors(theme)' theme' true);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,GettingThirdPointFor2PointCalibration,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\GettingThirdPointFor2PointCalibration.cs,FinishedProbe,The following statement contains a magic number: string zProbeHeight = line.Substring(zStringPos + 2);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,HomePrinterPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\HomePrinterPage.cs,OnLoad,The following statement contains a magic number: printer.Connection.MoveAbsolute(PrinterAxis.Z' 10' printer.Settings.Helpers.ManualMovementSpeeds().Z);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,HomePrinterPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\HomePrinterPage.cs,OnLoad,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				// TODO: consider if needed. Ensures that if we miss a HomingAxis event' the user can still continue  				if (!this.HasBeenClosed)  				{  					NextButton.Enabled = true;  				}  			}' 15);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,ProbePositionsWidget,The following statement contains a magic number: opaqueAccent = theme.ResolveColor(theme.BackgroundColor' theme.AccentMimimalOverlay.WithAlpha(140));
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,ProbePositionsWidget,The following statement contains a magic number: lightText = circleText.WithAlpha(100);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,ProbePositionsWidget,The following statement contains a magic number: bedCircleColor = theme.ResolveColor(theme.BedColor' bedTextColor.WithAlpha(50));
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,ProbePositionsWidget,The following statement contains a magic number: simpleBedCircleColor = theme.ResolveColor(theme.BedColor' bedTextColor.WithAlpha(180));
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,OnDraw,The following statement contains a magic number: offset.X += (this.Width / 2) - (bedBounds.Width * scalingFactor / 2);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,OnDraw,The following statement contains a magic number: offset.X += (this.Width / 2) - (bedBounds.Width * scalingFactor / 2);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(  						new Ellipse(center' 4 * inverseScale)'  						simpleBedCircleColor);
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,RenderBed,The following statement contains a magic number: var radius = bedBounds.Width / 2;
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,RenderBed,The following statement contains a magic number: var lineCount = bedBounds.Width / 2 / 10;
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,ProbePositionsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\ProbePositionsWidget.cs,RenderBed,The following statement contains a magic number: var lineCount = bedBounds.Width / 2 / 10;
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,SelectMaterialPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\SelectMaterialPage.cs,SelectMaterialPage,The following statement contains a magic number: contentRow.AddChild(  				new PresetSelectorWidget(printer' "Material".Localize()' Color.Transparent' NamedSettingsLayers.Material' extruderIndex' theme)  				{  					BackgroundColor = Color.Transparent'  					Margin = new BorderDouble(0' 0' 0' 15)  				});
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: var hotEndProgressHolder = new FlowLayoutWidget()  					{  						Margin = new BorderDouble(0' 5)  					};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: contentRow.AddChild(new TextWidget(labelText' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  					{  						AutoExpandBoundsToText = true'  						Margin = new BorderDouble(5' 0' 5' 5)'  					});
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: contentRow.AddChild(new TextWidget(labelText' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  					{  						AutoExpandBoundsToText = true'  						Margin = new BorderDouble(5' 0' 5' 5)'  					});
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: contentRow.AddChild(new TextWidget(labelText' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  					{  						AutoExpandBoundsToText = true'  						Margin = new BorderDouble(5' 0' 5' 5)'  					});
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: var hotEndProgressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  					{  						FillColor = theme.PrimaryAccentColor'  						BorderColor = theme.TextColor'  						BackgroundColor = Color.White'  						Margin = new BorderDouble(3' 0' 0' 0)'  						VAnchor = VAnchor.Center  					};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: var hotEndProgressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  					{  						FillColor = theme.PrimaryAccentColor'  						BorderColor = theme.TextColor'  						BackgroundColor = Color.White'  						Margin = new BorderDouble(3' 0' 0' 0)'  						VAnchor = VAnchor.Center  					};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: var hotEndProgressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  					{  						FillColor = theme.PrimaryAccentColor'  						BorderColor = theme.TextColor'  						BackgroundColor = Color.White'  						Margin = new BorderDouble(3' 0' 0' 0)'  						VAnchor = VAnchor.Center  					};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: var hotEndProgressBarText = new TextWidget(""' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  					{  						AutoExpandBoundsToText = true'  						Margin = new BorderDouble(5' 0' 5' 5)'  						VAnchor = VAnchor.Center  					};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: var hotEndProgressBarText = new TextWidget(""' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  					{  						AutoExpandBoundsToText = true'  						Margin = new BorderDouble(5' 0' 5' 5)'  						VAnchor = VAnchor.Center  					};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: var hotEndProgressBarText = new TextWidget(""' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  					{  						AutoExpandBoundsToText = true'  						Margin = new BorderDouble(5' 0' 5' 5)'  						VAnchor = VAnchor.Center  					};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: var bedProgressHolder = new FlowLayoutWidget()  				{  					Margin = new BorderDouble(0' 5)  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Bed Temperature:".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(5' 0' 5' 5)'  				});
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Bed Temperature:".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(5' 0' 5' 5)'  				});
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: contentRow.AddChild(new TextWidget("Bed Temperature:".Localize()' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(5' 0' 5' 5)'  				});
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: bedProgressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  				{  					FillColor = theme.PrimaryAccentColor'  					BorderColor = theme.TextColor'  					BackgroundColor = Color.White'  					Margin = new BorderDouble(3' 0' 0' 0)'  					VAnchor = VAnchor.Center  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: bedProgressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  				{  					FillColor = theme.PrimaryAccentColor'  					BorderColor = theme.TextColor'  					BackgroundColor = Color.White'  					Margin = new BorderDouble(3' 0' 0' 0)'  					VAnchor = VAnchor.Center  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: bedProgressBar = new ProgressBar((int)(150 * GuiWidget.DeviceScale)' (int)(15 * GuiWidget.DeviceScale))  				{  					FillColor = theme.PrimaryAccentColor'  					BorderColor = theme.TextColor'  					BackgroundColor = Color.White'  					Margin = new BorderDouble(3' 0' 0' 0)'  					VAnchor = VAnchor.Center  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,WaitForTempPage,The following statement contains a magic number: bedProgressBarText = new TextWidget(""' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  				{  					AutoExpandBoundsToText = true'  					Margin = new BorderDouble(5' 0' 0' 0)'  					VAnchor = VAnchor.Center  				};
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,ShowTempChangeProgress,The following statement contains a magic number: Math.Abs(targetTemp - actualTemp) < 2  						&& hotEndDoneTexts[progressBarIndex].Visible == false
Magic Number,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,WaitForTempPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\WaitForTempPage.cs,ShowTempChangeProgress,The following statement contains a magic number: Math.Abs(targetTemp - actualTemp) < 2  					&& bedDoneText.Visible == false
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: this.Width = 100;
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: this.Height = 100;
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).Transform(new Vector2(1' .5)).Equals(new Vector2(88' 50)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).Transform(new Vector2(1' .5)).Equals(new Vector2(88' 50)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).Transform(new Vector2(1' .5)).Equals(new Vector2(88' 50)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).Transform(new Vector2(1' .5)).Equals(new Vector2(88' 50)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).InverseTransform(new Vector2(88' 50)).Equals(new Vector2(1' .5)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).InverseTransform(new Vector2(88' 50)).Equals(new Vector2(1' .5)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).InverseTransform(new Vector2(88' 50)).Equals(new Vector2(1' .5)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).InverseTransform(new Vector2(88' 50)).Equals(new Vector2(1' .5)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).Transform(new Vector2(0' .5)).Equals(new Vector2(23.13' 50)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).Transform(new Vector2(0' .5)).Equals(new Vector2(23.13' 50)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).Transform(new Vector2(0' .5)).Equals(new Vector2(23.13' 50)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,RadialColorPicker,The following statement contains a magic number: !TriangleToWidgetTransform(0).Transform(new Vector2(0' .5)).Equals(new Vector2(23.13' 50)' .01)
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: var center = new Vector2(Width / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: var center = new Vector2(Width / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Ring(center' RingRadius + RingWidth / 2' 1' Color.Black);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Ring(center' RingRadius - RingWidth / 2' 1' Color.Black);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Line(GetTrianglePoint(1' InnerRadius' colorAngle)' GetTrianglePoint(2' InnerRadius' colorAngle)' Color.Black);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Line(GetTrianglePoint(2' InnerRadius' colorAngle)' GetTrianglePoint(0' InnerRadius' colorAngle)' Color.Black);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(triangleColorCenter' RingWidth / 2 - 2' new Color(SelectedColor' 255));
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(triangleColorCenter' RingWidth / 2 - 2' new Color(SelectedColor' 255));
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(triangleColorCenter' RingWidth / 2 - 2' new Color(SelectedColor' 255));
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Ring(triangleColorCenter' RingWidth / 2 - 2' 2' Color.White);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Ring(triangleColorCenter' RingWidth / 2 - 2' 2' Color.White);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Ring(triangleColorCenter' RingWidth / 2 - 2' 2' Color.White);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(ringColorCenter'  				RingWidth / 2 - 2'  				SelectedHueColor);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(ringColorCenter'  				RingWidth / 2 - 2'  				SelectedHueColor);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Ring(ringColorCenter'  				RingWidth / 2 - 2'  				2'  				Color.White);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Ring(ringColorCenter'  				RingWidth / 2 - 2'  				2'  				Color.White);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnDraw,The following statement contains a magic number: graphics2D.Ring(ringColorCenter'  				RingWidth / 2 - 2'  				2'  				Color.White);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnMouseDown,The following statement contains a magic number: var center = new Vector2(Width / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnMouseDown,The following statement contains a magic number: var center = new Vector2(Width / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnMouseDown,The following statement contains a magic number: direction.Length > RingRadius - RingWidth / 2  				&& direction.Length < RingRadius + RingWidth / 2
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnMouseDown,The following statement contains a magic number: direction.Length > RingRadius - RingWidth / 2  				&& direction.Length < RingRadius + RingWidth / 2
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnMouseMove,The following statement contains a magic number: var center = new Vector2(Width / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,OnMouseMove,The following statement contains a magic number: var center = new Vector2(Width / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,DrawColorRing,The following statement contains a magic number: var outer = radius + width / 2;
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,DrawColorRing,The following statement contains a magic number: var inner = radius - width / 2;
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,DrawColorRing,The following statement contains a magic number: var color = ColorF.FromHSL(i / 360.0' 1' .5);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,DrawColorRing,The following statement contains a magic number: var color = ColorF.FromHSL(i / 360.0' 1' .5);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,DrawColorRing,The following statement contains a magic number: i <= 360
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,DrawColorTriangle,The following statement contains a magic number: GL.Vertex2(GetTrianglePoint(2' radius' colorAngle));
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,GetAtAngle,The following statement contains a magic number: var center = new Vector2(Width / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,GetAtAngle,The following statement contains a magic number: var center = new Vector2(Width / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,GetTrianglePoint,The following statement contains a magic number: switch (index)  			{  				case 0:  					return GetAtAngle(pontingAngle' radius);    				case 1:  					return GetAtAngle(pontingAngle + MathHelper.DegreesToRadians(120)' radius);    				case 2:  					return GetAtAngle(pontingAngle + MathHelper.DegreesToRadians(240)' radius);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,GetTrianglePoint,The following statement contains a magic number: switch (index)  			{  				case 0:  					return GetAtAngle(pontingAngle' radius);    				case 1:  					return GetAtAngle(pontingAngle + MathHelper.DegreesToRadians(120)' radius);    				case 2:  					return GetAtAngle(pontingAngle + MathHelper.DegreesToRadians(240)' radius);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,GetTrianglePoint,The following statement contains a magic number: switch (index)  			{  				case 0:  					return GetAtAngle(pontingAngle' radius);    				case 1:  					return GetAtAngle(pontingAngle + MathHelper.DegreesToRadians(120)' radius);    				case 2:  					return GetAtAngle(pontingAngle + MathHelper.DegreesToRadians(240)' radius);  			}
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,TriangleToWidgetTransform,The following statement contains a magic number: var center = new Vector2(Width / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,TriangleToWidgetTransform,The following statement contains a magic number: var center = new Vector2(Width / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,TriangleToWidgetTransform,The following statement contains a magic number: var leftSize = .5;
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,TriangleToWidgetTransform,The following statement contains a magic number: var sizeToTop = Math.Sin(MathHelper.DegreesToRadians(60));
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,TriangleToWidgetTransform,The following statement contains a magic number: total *= Affine.NewScaling(1 + leftSize' sizeToTop * 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,CLampTrianglePosition,The following statement contains a magic number: trianglePosition.Y = agg_basics.Clamp(trianglePosition.Y'  				.5 - (1 - trianglePosition.X) / 2'  				.5 + (1 - trianglePosition.X) / 2'  				ref changed);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,CLampTrianglePosition,The following statement contains a magic number: trianglePosition.Y = agg_basics.Clamp(trianglePosition.Y'  				.5 - (1 - trianglePosition.X) / 2'  				.5 + (1 - trianglePosition.X) / 2'  				ref changed);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,CLampTrianglePosition,The following statement contains a magic number: trianglePosition.Y = agg_basics.Clamp(trianglePosition.Y'  				.5 - (1 - trianglePosition.X) / 2'  				.5 + (1 - trianglePosition.X) / 2'  				ref changed);
Magic Number,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,CLampTrianglePosition,The following statement contains a magic number: trianglePosition.Y = agg_basics.Clamp(trianglePosition.Y'  				.5 - (1 - trianglePosition.X) / 2'  				.5 + (1 - trianglePosition.X) / 2'  				ref changed);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DataViewGraph,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DataViewGraph.cs,DataViewGraph,The following statement contains a magic number: dataHistoryArray = new HistoryData(10);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DataViewGraph,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: int inset = (int)((i % 2) == 0 ? Height / 6 : Height / 3);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DataViewGraph,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: int inset = (int)((i % 2) == 0 ? Height / 6 : Height / 3);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DataViewGraph,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: int inset = (int)((i % 2) == 0 ? Height / 6 : Height / 3);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DataViewGraph,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DataViewGraph.cs,OnDraw,The following statement contains a magic number: graphics2D.Line(xPos' inset' xPos' Height - inset' new Color(backgroundGridColor' 120));
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingTabControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,DockingTabControl,The following statement contains a magic number: this.AddChild(new GuiWidget(10' 10));
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingTabControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,DockingTabControl,The following statement contains a magic number: this.AddChild(new GuiWidget(10' 10));
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingTabControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,CreatePinButton,The following statement contains a magic number: var pinTabButton = new IconButton(AggContext.StaticData.LoadIcon(imageFile' 16' 16' theme.InvertIcons)' theme)  			{  				Name = "Pin Settings Button"  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingTabControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,CreatePinButton,The following statement contains a magic number: var pinTabButton = new IconButton(AggContext.StaticData.LoadIcon(imageFile' 16' 16' theme.InvertIcons)' theme)  			{  				Name = "Pin Settings Button"  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingTabButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,DockingTabButton,The following statement contains a magic number: this.grayBorder = theme.GetBorderColor(theme.IsDarkTheme ? 45 : 55);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingTabButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,DockingTabButton,The following statement contains a magic number: this.grayBorder = theme.GetBorderColor(theme.IsDarkTheme ? 45 : 55);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingTabButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,DockingTabButton,The following statement contains a magic number: this.Border = new BorderDouble(right: 6);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingTabButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,DockingTabButton,The following statement contains a magic number: this.Margin = new BorderDouble(2' 8' 0' 0);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingTabButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,DockingTabButton,The following statement contains a magic number: this.Margin = new BorderDouble(2' 8' 0' 0);
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingTabButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,DockingTabButton,The following statement contains a magic number: var rotatedLabel = new VertexSourceApplyTransform(  					printer'  					Affine.NewRotation(MathHelper.DegreesToRadians(-90)));
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingTabButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,DockingTabButton,The following statement contains a magic number: this.AddChild(buttonView = new GuiWidget(bounds.Width' bounds.Height)  				{  					DoubleBuffer = true'  					Margin = new BorderDouble(3' 1)'  					Selectable = false  				});
Magic Number,MatterHackers.MatterControl.CustomWidgets,DockingWindowContent,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\DockingTabControl.cs,DockingWindowContent,The following statement contains a magic number: titleBar.AddChild(new TextWidget(title' textColor: theme.TextColor)  					{  						Margin = new BorderDouble(left: 8)'  						VAnchor = VAnchor.Center  					});
Magic Number,MatterHackers.MatterControl.CustomWidgets,HelpArticleHeader,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\HelpArticleHeader.cs,HelpArticleHeader,The following statement contains a magic number: var titleText = new TextWidget(helpArticle.Name' textColor: theme.TextColor' pointSize: pointSize > 0 ? pointSize : theme.DefaultFontSize' bold: boldFont)  			{  				VAnchor = VAnchor.Center'  				AutoExpandBoundsToText = true'  				EllipsisIfClipped = true'  				Margin = new BorderDouble(left: 5)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,HelpArticleHeader,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\HelpArticleHeader.cs,HelpArticleHeader,The following statement contains a magic number: var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = editToolTipText ?? "Edit".Localize()'  				Name = helpArticle.Name + " Edit"  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,HelpArticleHeader,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\HelpArticleHeader.cs,HelpArticleHeader,The following statement contains a magic number: var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = editToolTipText ?? "Edit".Localize()'  				Name = helpArticle.Name + " Edit"  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,HelpArticleHeader,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\HelpArticleHeader.cs,HelpArticleHeader,The following statement contains a magic number: this.ActionArea.Margin = this.ActionArea.Margin.Clone(right: editButton.Width + 5);
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineEditControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineEditControl.cs,InlineEditControl,The following statement contains a magic number: double pointSize = 12;
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineEditControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineEditControl.cs,InlineEditControl,The following statement contains a magic number: numberEdit.ActuallNumberEdit.InternalNumberEdit.MaxDecimalsPlaces = 2;
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineEditControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineEditControl.cs,InlineEditControl,The following statement contains a magic number: runningInterval = UiThread.SetInterval(HideIfApplicable' .1);
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineEditControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineEditControl.cs,HideIfApplicable,The following statement contains a magic number: !this.Editing  					&& timeSinceMouseUp.IsRunning  					&& timeSinceMouseUp.ElapsedMilliseconds > SecondsToShowNumberEdit * 1000
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineListItemEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineListItemEdit.cs,InlineListItemEdit,The following statement contains a magic number: var removeButton = new IconButton(AggContext.StaticData.LoadIcon("remove.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Delete".Localize()'  				Visible = true'  				Name = automationName + " Save"'  				Margin = new BorderDouble(left: 5)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineListItemEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineListItemEdit.cs,InlineListItemEdit,The following statement contains a magic number: var removeButton = new IconButton(AggContext.StaticData.LoadIcon("remove.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Delete".Localize()'  				Visible = true'  				Name = automationName + " Save"'  				Margin = new BorderDouble(left: 5)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineListItemEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineListItemEdit.cs,InlineListItemEdit,The following statement contains a magic number: var removeButton = new IconButton(AggContext.StaticData.LoadIcon("remove.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Delete".Localize()'  				Visible = true'  				Name = automationName + " Save"'  				Margin = new BorderDouble(left: 5)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineListItemEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineListItemEdit.cs,InlineListItemEdit,The following statement contains a magic number: this.ActionArea.Margin = this.ActionArea.Margin.Clone(right: rightPanel.Width + 5);
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineStringEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineStringEdit.cs,InlineStringEdit,The following statement contains a magic number: titleText = new TextWidget(stringValue' textColor: theme.TextColor' pointSize: theme.DefaultFontSize' bold: boldFont)  			{  				VAnchor = VAnchor.Center'  				AutoExpandBoundsToText = true'  				EllipsisIfClipped = true'  				Margin = new BorderDouble(left: 5)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineStringEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineStringEdit.cs,InlineStringEdit,The following statement contains a magic number: saveButton = new IconButton(AggContext.StaticData.LoadIcon("fa-save_16.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Save".Localize()'  				Visible = false'  				Name = automationName + " Save"'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineStringEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineStringEdit.cs,InlineStringEdit,The following statement contains a magic number: saveButton = new IconButton(AggContext.StaticData.LoadIcon("fa-save_16.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Save".Localize()'  				Visible = false'  				Name = automationName + " Save"'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineStringEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineStringEdit.cs,InlineStringEdit,The following statement contains a magic number: searchPanel = new SearchInputBox(theme)  			{  				Visible = false'  				Margin = new BorderDouble(left: 4)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineStringEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineStringEdit.cs,InlineStringEdit,The following statement contains a magic number: var icon = editable ? AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons) : new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineStringEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineStringEdit.cs,InlineStringEdit,The following statement contains a magic number: var icon = editable ? AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons) : new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineStringEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineStringEdit.cs,InlineStringEdit,The following statement contains a magic number: var icon = editable ? AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons) : new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineStringEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineStringEdit.cs,InlineStringEdit,The following statement contains a magic number: var icon = editable ? AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons) : new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl.CustomWidgets,InlineStringEdit,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\InlineStringEdit.cs,InlineStringEdit,The following statement contains a magic number: this.ActionArea.Margin = this.ActionArea.Margin.Clone(right: rightPanel.Width + 5);
Magic Number,MatterHackers.MatterControl.CustomWidgets,FolderBreadCrumbWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\LibrarySelector\FolderBreadCrumbWidget.cs,SetContainer,The following statement contains a magic number: this.Width < 250
Magic Number,MatterHackers.MatterControl.CustomWidgets,BedStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\BedStatusWidget.cs,UpdateTemperatures,The following statement contains a magic number: actualTemp.Text = $"{actualValue:0}".PadLeft(3' (char)0x2007) + "°";
Magic Number,MatterHackers.MatterControl.CustomWidgets,BedStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\BedStatusWidget.cs,UpdateTemperatures,The following statement contains a magic number: targetTemp.Text = $"{targetValue:0}".PadLeft(3' (char)0x2007) + "°";
Magic Number,MatterHackers.MatterControl.CustomWidgets,ExtruderStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ExtruderStatusWidget.cs,UpdateTemperatures,The following statement contains a magic number: actualTemp.Text = $"{actualValue:0}".PadLeft(3' (char)0x2007) + "°";
Magic Number,MatterHackers.MatterControl.CustomWidgets,ExtruderStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ExtruderStatusWidget.cs,UpdateTemperatures,The following statement contains a magic number: targetTemp.Text = $"{targetValue:0}".PadLeft(3' (char)0x2007) + "°";
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,ProgressDial,The following statement contains a magic number: primaryAccentShade = theme.PrimaryAccentColor.AdjustLightness(0.7).ToColor();
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,ProgressDial,The following statement contains a magic number: percentCompleteWidget = new TextWidget(""' pointSize: 22' textColor: theme.TextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.Center'  				HAnchor = HAnchor.Center'  				Margin = new BorderDouble(bottom: 20)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,ProgressDial,The following statement contains a magic number: percentCompleteWidget = new TextWidget(""' pointSize: 22' textColor: theme.TextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.Center'  				HAnchor = HAnchor.Center'  				Margin = new BorderDouble(bottom: 20)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,ProgressDial,The following statement contains a magic number: layerCountWidget = new TextWidget(""' pointSize: 12' textColor: theme.TextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.Center'  				HAnchor = HAnchor.Center'  				Margin = new BorderDouble(top: 32)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,ProgressDial,The following statement contains a magic number: layerCountWidget = new TextWidget(""' pointSize: 12' textColor: theme.TextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.Center'  				HAnchor = HAnchor.Center'  				Margin = new BorderDouble(top: 32)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,ProgressDial,The following statement contains a magic number: borderColor.Alpha0To1 = 0.3f;
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,OnBoundsChanged,The following statement contains a magic number: double borderRadius = this.LocalBounds.Width / 2 - 20 * DeviceScale;
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,OnBoundsChanged,The following statement contains a magic number: double borderRadius = this.LocalBounds.Width / 2 - 20 * DeviceScale;
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,OnBoundsChanged,The following statement contains a magic number: outerRingRadius = borderRadius - (outerRingStrokeWidth / 2) - 6 * DeviceScale;
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,OnBoundsChanged,The following statement contains a magic number: outerRingRadius = borderRadius - (outerRingStrokeWidth / 2) - 6 * DeviceScale;
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,OnBoundsChanged,The following statement contains a magic number: innerRingRadius = outerRingRadius - (outerRingStrokeWidth / 2) - (innerRingStrokeWidth / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,OnBoundsChanged,The following statement contains a magic number: innerRingRadius = outerRingRadius - (outerRingStrokeWidth / 2) - (innerRingStrokeWidth / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,OnDraw,The following statement contains a magic number: var ringArc = new Arc(  				Vector2.Zero'  				new Vector2(outerRingRadius' outerRingRadius)'  				MathHelper.Tau - MathHelper.DegreesToRadians(360) * LayerCompletedRatio' // percentCompletedInRadians  				0'  				Arc.Direction.CounterClockWise);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(  				arcStroke.Rotate(90' AngleType.Degrees).Translate(bounds.Center)'  				primaryAccentShade);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,OnDraw,The following statement contains a magic number: ringArc = new Arc(  				Vector2.Zero'  				new Vector2(innerRingRadius' innerRingRadius)'  				MathHelper.Tau - MathHelper.DegreesToRadians(360) * CompletedRatio' // percentCompletedInRadians  				0'  				Arc.Direction.CounterClockWise);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ProgressDial,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\ProgressDial.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(  				arcStroke.Rotate(90' AngleType.Degrees).Translate(bounds.Center)'  				primaryAccentColor);
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\TemperatureStatusWidget.cs,TemperatureStatusWidget,The following statement contains a magic number: var extruderName = new TextWidget(dispalyName' pointSize: fontSize' textColor: theme.TextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(right: 8)  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\TemperatureStatusWidget.cs,TemperatureStatusWidget,The following statement contains a magic number: progressBar = new ProgressBar(200' 6)  			{  				FillColor = theme.PrimaryAccentColor'  				Margin = new BorderDouble(right: 10)'  				BorderColor = Color.Transparent'  				BackgroundColor = new Color(theme.TextColor' 50)'  				VAnchor = VAnchor.Center'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\TemperatureStatusWidget.cs,TemperatureStatusWidget,The following statement contains a magic number: progressBar = new ProgressBar(200' 6)  			{  				FillColor = theme.PrimaryAccentColor'  				Margin = new BorderDouble(right: 10)'  				BorderColor = Color.Transparent'  				BackgroundColor = new Color(theme.TextColor' 50)'  				VAnchor = VAnchor.Center'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\TemperatureStatusWidget.cs,TemperatureStatusWidget,The following statement contains a magic number: progressBar = new ProgressBar(200' 6)  			{  				FillColor = theme.PrimaryAccentColor'  				Margin = new BorderDouble(right: 10)'  				BorderColor = Color.Transparent'  				BackgroundColor = new Color(theme.TextColor' 50)'  				VAnchor = VAnchor.Center'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\TemperatureStatusWidget.cs,TemperatureStatusWidget,The following statement contains a magic number: progressBar = new ProgressBar(200' 6)  			{  				FillColor = theme.PrimaryAccentColor'  				Margin = new BorderDouble(right: 10)'  				BorderColor = Color.Transparent'  				BackgroundColor = new Color(theme.TextColor' 50)'  				VAnchor = VAnchor.Center'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\TemperatureStatusWidget.cs,TemperatureStatusWidget,The following statement contains a magic number: actualTemp = new TextWidget(""' pointSize: fontSize' textColor: theme.TextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(right: 0)'  				Width = 60  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\TemperatureStatusWidget.cs,TemperatureStatusWidget,The following statement contains a magic number: this.AddChild(new VerticalLine()  			{  				BackgroundColor = theme.TextColor'  				Margin = new BorderDouble(8' 0)  			});
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\TemperatureStatusWidget.cs,TemperatureStatusWidget,The following statement contains a magic number: targetTemp = new TextWidget(""' pointSize: fontSize' textColor: theme.TextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(right: 8)'  				Width = 60  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TemperatureStatusWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\PrintingWindow\TemperatureStatusWidget.cs,TemperatureStatusWidget,The following statement contains a magic number: targetTemp = new TextWidget(""' pointSize: fontSize' textColor: theme.TextColor)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(right: 8)'  				Width = 60  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,RadioIconButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SimpleButton.cs,OnDraw,The following statement contains a magic number: graphics2D.Rectangle(0' 0' LocalBounds.Right' 2' theme.PrimaryAccentColor);
Magic Number,MatterHackers.MatterControl.CustomWidgets,RadioTextButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SimpleButton.cs,OnDraw,The following statement contains a magic number: graphics2D.Rectangle(LocalBounds.Left' 0' LocalBounds.Right' 2' theme.PrimaryAccentColor);
Magic Number,MatterHackers.MatterControl.CustomWidgets,TextIconButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SimpleButton.cs,TextIconButton,The following statement contains a magic number: var textContainer = new GuiWidget()  			{  				Padding = new BorderDouble(8' 4' 2' 4)'  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Center | VAnchor.Fit'  				Selectable = false  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TextIconButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SimpleButton.cs,TextIconButton,The following statement contains a magic number: var textContainer = new GuiWidget()  			{  				Padding = new BorderDouble(8' 4' 2' 4)'  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Center | VAnchor.Fit'  				Selectable = false  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TextIconButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SimpleButton.cs,TextIconButton,The following statement contains a magic number: var textContainer = new GuiWidget()  			{  				Padding = new BorderDouble(8' 4' 2' 4)'  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Center | VAnchor.Fit'  				Selectable = false  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TextIconButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SimpleButton.cs,TextIconButton,The following statement contains a magic number: var textContainer = new GuiWidget()  			{  				Padding = new BorderDouble(8' 4' 2' 4)'  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Center | VAnchor.Fit'  				Selectable = false  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeNode,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeNode,The following statement contains a magic number: this.TitleBar.MouseDown += (s' e) =>  			{  				if (TreeView != null  					&& e.Button == MouseButtons.Left  					&& e.Clicks == 2)  				{  					TreeView.SelectedNode = this;  					this.TreeView.NotifyItemDoubleClicked(this.TitleBar' e);  				}  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeNode,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeNode,The following statement contains a magic number: expandWidget = new TreeExpandWidget(theme)  			{  				Expandable = GetNodeCount(false) != 0'  				VAnchor = VAnchor.Fit | VAnchor.Center'  				Height = 16'  				Width = 16  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeNode,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeNode,The following statement contains a magic number: expandWidget = new TreeExpandWidget(theme)  			{  				Expandable = GetNodeCount(false) != 0'  				VAnchor = VAnchor.Fit | VAnchor.Center'  				Height = 16'  				Width = 16  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeNode,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeNode,The following statement contains a magic number: this.HighlightRegion = new FlowLayoutWidget()  			{  				VAnchor = VAnchor.Fit'  				HAnchor = HAnchor.Fit'  				Padding = useIcon ? new BorderDouble(2) : new BorderDouble(4' 2)'  				Selectable = false  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeNode,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeNode,The following statement contains a magic number: this.HighlightRegion = new FlowLayoutWidget()  			{  				VAnchor = VAnchor.Fit'  				HAnchor = HAnchor.Fit'  				Padding = useIcon ? new BorderDouble(2) : new BorderDouble(4' 2)'  				Selectable = false  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeNode,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeNode,The following statement contains a magic number: this.HighlightRegion = new FlowLayoutWidget()  			{  				VAnchor = VAnchor.Fit'  				HAnchor = HAnchor.Fit'  				Padding = useIcon ? new BorderDouble(2) : new BorderDouble(4' 2)'  				Selectable = false  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeNode,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeNode,The following statement contains a magic number: _image = new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeNode,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeNode,The following statement contains a magic number: _image = new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeNode,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeNode,The following statement contains a magic number: this.HighlightRegion.AddChild(imageWidget = new ImageWidget(this.Image' listenForImageChanged: false)  				{  					VAnchor = VAnchor.Center'  					Margin = new BorderDouble(right: 4)'  					Selectable = false  				});
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeNode,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeNode,The following statement contains a magic number: content = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Fit | HAnchor.Left'  				Visible = false' // content starts out not visible  				Name = "content"'  				Margin = new BorderDouble(12' 3)'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeNode,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeNode,The following statement contains a magic number: content = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Fit | HAnchor.Left'  				Visible = false' // content starts out not visible  				Name = "content"'  				Margin = new BorderDouble(12' 3)'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeExpandWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeExpandWidget,The following statement contains a magic number: placeholder = new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeExpandWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeExpandWidget,The following statement contains a magic number: placeholder = new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeExpandWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeExpandWidget,The following statement contains a magic number: this.Margin = new BorderDouble(right: 4);
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeExpandWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeExpandWidget,The following statement contains a magic number: imageButton = new IconButton(placeholder' theme)  				{  					MinimumSize = new Vector2(16' 16)'  					VAnchor = VAnchor.Center'  					Selectable = false'  					Width = 16'  					Height = 16  				};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeExpandWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeExpandWidget,The following statement contains a magic number: imageButton = new IconButton(placeholder' theme)  				{  					MinimumSize = new Vector2(16' 16)'  					VAnchor = VAnchor.Center'  					Selectable = false'  					Width = 16'  					Height = 16  				};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeExpandWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeExpandWidget,The following statement contains a magic number: imageButton = new IconButton(placeholder' theme)  				{  					MinimumSize = new Vector2(16' 16)'  					VAnchor = VAnchor.Center'  					Selectable = false'  					Width = 16'  					Height = 16  				};
Magic Number,MatterHackers.MatterControl.CustomWidgets,TreeExpandWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\TreeView\TreeNode.cs,TreeExpandWidget,The following statement contains a magic number: imageButton = new IconButton(placeholder' theme)  				{  					MinimumSize = new Vector2(16' 16)'  					VAnchor = VAnchor.Center'  					Selectable = false'  					Width = 16'  					Height = 16  				};
Magic Number,MatterHackers.MatterControl.CustomWidgets,IconListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\IconListView.cs,RecomputeFlowValues,The following statement contains a magic number: int itemWidth = scaledWidth + (iconViewPadding * 2) + (leftRightItemMargin * 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets,IconListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\IconListView.cs,RecomputeFlowValues,The following statement contains a magic number: int itemWidth = scaledWidth + (iconViewPadding * 2) + (leftRightItemMargin * 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets,IconListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\IconListView.cs,RecomputeFlowValues,The following statement contains a magic number: double leftRightMarginRaw = (remainingSpace > 0) ? spacePerColumn / 2 : 0;
Magic Number,MatterHackers.MatterControl.CustomWidgets,IconListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\IconListView.cs,AddColumnAndChild,The following statement contains a magic number: rowButtonContainer = new FlowLayoutWidget(FlowDirection.LeftToRight)  				{  					HAnchor = HAnchor.Stretch'  					Padding = 0'  					Margin = new BorderDouble(bottom: 6)  				};
Magic Number,MatterHackers.MatterControl.CustomWidgets,IconView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\IconListView.cs,AddItem,The following statement contains a magic number: var iconView = new IconViewItem(item' this.ThumbWidth' this.ThumbHeight' theme)  			{  				Margin = new BorderDouble(leftRightMargin' 6' leftRightMargin' 0)'  				HAnchor = HAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,IconViewItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\IconListView.cs,IconViewItem,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 0' 6);
Magic Number,MatterHackers.MatterControl.CustomWidgets,IconViewItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\IconListView.cs,IconViewItem,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 0' 6);
Magic Number,MatterHackers.MatterControl.CustomWidgets,IconViewItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\IconListView.cs,IconViewItem,The following statement contains a magic number: int maxWidth = scaledWidth - 4;
Magic Number,MatterHackers.MatterControl.CustomWidgets,IconViewItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\IconListView.cs,IconViewItem,The following statement contains a magic number: thumbWidth < 75
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,LibraryListView,The following statement contains a magic number: loadingBackgroundColor = new Color(theme.PrimaryAccentColor' 10);
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,LibraryListView,The following statement contains a magic number: this.ScrollArea.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ResizeCanvas,The following statement contains a magic number: var destImage = new ImageBuffer(width' height' 32' originalImage.GetRecieveBlender());
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ResizeCanvas,The following statement contains a magic number: var x = width / 2 - originalImage.Width / 2;
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ResizeCanvas,The following statement contains a magic number: var x = width / 2 - originalImage.Width / 2;
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ResizeCanvas,The following statement contains a magic number: var y = height / 2 - originalImage.Height / 2;
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ResizeCanvas,The following statement contains a magic number: var y = height / 2 - originalImage.Height / 2;
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ResizeCanvas,The following statement contains a magic number: renderGraphics.Render(originalImage' width /2 - originalImage.Width /2' height /2 - originalImage.Height /2);
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ResizeCanvas,The following statement contains a magic number: renderGraphics.Render(originalImage' width /2 - originalImage.Width /2' height /2 - originalImage.Height /2);
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ResizeCanvas,The following statement contains a magic number: renderGraphics.Render(originalImage' width /2 - originalImage.Width /2' height /2 - originalImage.Height /2);
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ResizeCanvas,The following statement contains a magic number: renderGraphics.Render(originalImage' width /2 - originalImage.Width /2' height /2 - originalImage.Height /2);
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ShowRightClickMenu,The following statement contains a magic number: var hitRegion = new RectangleDouble(  				new Vector2(bounds.Right - 32' bounds.Top)'  				new Vector2(bounds.Right' bounds.Top - 32));
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,ShowRightClickMenu,The following statement contains a magic number: var hitRegion = new RectangleDouble(  				new Vector2(bounds.Right - 32' bounds.Top)'  				new Vector2(bounds.Right' bounds.Top - 32));
Magic Number,MatterHackers.MatterControl.CustomWidgets,LibraryListView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\LibraryListView.cs,OnMouseWheel,The following statement contains a magic number: scrollAmount = (int) (this.contentView.Children.FirstOrDefault()?.Height ?? 20);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,ListViewItemBase,The following statement contains a magic number: overflowIcon = AggContext.StaticData.LoadIcon(Path.Combine("ViewTransformControls"' "overflow.png")' 32' 32' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,ListViewItemBase,The following statement contains a magic number: overflowIcon = AggContext.StaticData.LoadIcon(Path.Combine("ViewTransformControls"' "overflow.png")' 32' 32' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,SetSizedThumbnail,The following statement contains a magic number: thumbnail != null  				&& this.imageWidget != null  				&& (this.imageWidget.Image == null  				|| !thumbnail.Equals(this.imageWidget.Image' 5))
Magic Number,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(overflowIcon' new Point2D(bounds.Right - 32' bounds.Top - 32 - 3));
Magic Number,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(overflowIcon' new Point2D(bounds.Right - 32' bounds.Top - 32 - 3));
Magic Number,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(overflowIcon' new Point2D(bounds.Right - 32' bounds.Top - 32 - 3));
Magic Number,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,OnMouseMove,The following statement contains a magic number: mouseDownInBounds && delta.Length > 40  				&& view3DWidget != null  				&& !(listViewItem.Model is MissingFileItem)
Magic Number,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,OnClick,The following statement contains a magic number: var hitRegion = new RectangleDouble(  				new Vector2(bounds.Right - 32' bounds.Top)'  				new Vector2(bounds.Right' bounds.Top - 32));
Magic Number,MatterHackers.MatterControl.CustomWidgets,ListViewItemBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\ListViewItemBase.cs,OnClick,The following statement contains a magic number: var hitRegion = new RectangleDouble(  				new Vector2(bounds.Right - 32' bounds.Top)'  				new Vector2(bounds.Right' bounds.Top - 32));
Magic Number,MatterHackers.MatterControl.CustomWidgets,RowViewItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\RowListView.cs,RowViewItem,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.CustomWidgets,RowViewItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\RowListView.cs,RowViewItem,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.CustomWidgets,RowViewItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\RowListView.cs,RowViewItem,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.CustomWidgets,RowViewItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\RowListView.cs,RowViewItem,The following statement contains a magic number: row.AddChild(new TextWidget(listViewItem.Model.Name' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  			{  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(10' 0)  			});
Magic Number,MatterHackers.MatterControl.CustomWidgets,RowViewItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\RowListView.cs,UpdateHoverState,The following statement contains a magic number: await Task.Delay(500);
Magic Number,MatterHackers.MatterControl.CustomWidgets,ToggleSwitchAnimation,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RoundedToggleSwitch.cs,OnUpdate,The following statement contains a magic number: animationRatio += 1.0 / 7.0;
Magic Number,MatterHackers.MatterControl.CustomWidgets,RoundedToggleSwitch,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RoundedToggleSwitch.cs,RoundedToggleSwitch,The following statement contains a magic number: activeBarColor = new Color(theme.PrimaryAccentColor' theme.IsDarkTheme ? 100 : 70);
Magic Number,MatterHackers.MatterControl.CustomWidgets,RoundedToggleSwitch,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RoundedToggleSwitch.cs,RoundedToggleSwitch,The following statement contains a magic number: activeBarColor = new Color(theme.PrimaryAccentColor' theme.IsDarkTheme ? 100 : 70);
Magic Number,MatterHackers.MatterControl.CustomWidgets,RoundedToggleSwitch,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RoundedToggleSwitch.cs,OnMouseDown,The following statement contains a magic number: animation = new ToggleSwitchAnimation()  			{  				DrawTarget = this'  				FramesPerSecond = 30  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,RoundedToggleSwitch,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RoundedToggleSwitch.cs,RoundedToggleSwitch_AfterDraw,The following statement contains a magic number: e.Graphics2D.Circle(position'  				animation.finalRadius * Quadratic.Out(animation.animationRatio)'  				new Color(toggleColor' 50));
Magic Number,MatterHackers.MatterControl.CustomWidgets,RoundedToggleSwitch,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RoundedToggleSwitch.cs,OnBoundsChanged,The following statement contains a magic number: var halfBarHeight = barHeight / 2;
Magic Number,MatterHackers.MatterControl.CustomWidgets,SearchableSectionWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SearchableSectionWidget.cs,SearchableSectionWidget,The following statement contains a magic number: searchPanel.searchInput.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.CustomWidgets,SectionWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SectionWidget.cs,SectionWidget,The following statement contains a magic number: checkbox.CheckedStateChanged += (s' e) =>  				{  					if (expandingContent)  					{  						ContentPanel.Visible = checkbox.Checked;  						this.ExpandedChanged?.Invoke(this' checkbox.Checked);  					}  					// TODO: Remove this Height = 10 and figure out why the layout engine is not sizing these correctly without this.  					ContentPanel.Height = 10;  				};
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,SettingsRow,The following statement contains a magic number: this.AddChild(  						imageWidget = new ImageWidget(icon)  						{  							Margin = new BorderDouble(right: 6' left: 6)'  							VAnchor = VAnchor.Center  						});
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,SettingsRow,The following statement contains a magic number: this.AddChild(  						imageWidget = new ImageWidget(icon)  						{  							Margin = new BorderDouble(right: 6' left: 6)'  							VAnchor = VAnchor.Center  						});
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,CreateSettingsLabel,The following statement contains a magic number: return new TextWidget(label' textColor: textColor' pointSize: 10)  			{  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.Center'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,ShowPopover,The following statement contains a magic number: int arrowOffset = (int)(settingsRow.Height / 2);
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,ShowPopover,The following statement contains a magic number: var popover = new SliceSettingsPopover(this.ArrowDirection' new BorderDouble(15' 10)' 7' arrowOffset)  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				TagColor = theme.ResolveColor(AppContext.Theme.BackgroundColor' AppContext.Theme.AccentMimimalOverlay.WithAlpha(50))'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,ShowPopover,The following statement contains a magic number: var popover = new SliceSettingsPopover(this.ArrowDirection' new BorderDouble(15' 10)' 7' arrowOffset)  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				TagColor = theme.ResolveColor(AppContext.Theme.BackgroundColor' AppContext.Theme.AccentMimimalOverlay.WithAlpha(50))'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,ShowPopover,The following statement contains a magic number: var popover = new SliceSettingsPopover(this.ArrowDirection' new BorderDouble(15' 10)' 7' arrowOffset)  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				TagColor = theme.ResolveColor(AppContext.Theme.BackgroundColor' AppContext.Theme.AccentMimimalOverlay.WithAlpha(50))'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,ShowPopover,The following statement contains a magic number: var popover = new SliceSettingsPopover(this.ArrowDirection' new BorderDouble(15' 10)' 7' arrowOffset)  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				TagColor = theme.ResolveColor(AppContext.Theme.BackgroundColor' AppContext.Theme.AccentMimimalOverlay.WithAlpha(50))'  			};
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,ShowPopover,The following statement contains a magic number: popover.AddChild(new WrappedTextWidget(settingsRow.HelpText' pointSize: theme.DefaultFontSize - 1' textColor: AppContext.Theme.TextColor)  			{  				Width = 400 * GuiWidget.DeviceScale'  				HAnchor = HAnchor.Fit'  			});
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,ShowPopover,The following statement contains a magic number: double closeSeconds = Math.Max(1' (settingsRow.HelpText.Length / 50.0)) * 5;
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,ShowPopover,The following statement contains a magic number: double closeSeconds = Math.Max(1' (settingsRow.HelpText.Length / 50.0)) * 5;
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,ShowPopover,The following statement contains a magic number: systemWindow.ShowPopover(  				new MatePoint(settingsRow)  				{  					Mate = new MateOptions(alignLeft ? MateEdge.Left : MateEdge.Right' MateEdge.Top)'  					AltMate = new MateOptions(alignLeft ? MateEdge.Right : MateEdge.Left' MateEdge.Bottom)'  					Offset = new RectangleDouble(12' 0' 12' 0)  				}'  				new MatePoint(popover)  				{  					Mate = new MateOptions(alignLeft ? MateEdge.Right : MateEdge.Left' MateEdge.Top)'  					AltMate = new MateOptions(alignLeft ? MateEdge.Left : MateEdge.Right' MateEdge.Bottom)'  					// Offset = new RectangleDouble(12' 0' 12' 0)  				}'  				secondsToClose: closeSeconds);
Magic Number,MatterHackers.MatterControl.CustomWidgets,SettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SettingsRow.cs,ShowPopover,The following statement contains a magic number: systemWindow.ShowPopover(  				new MatePoint(settingsRow)  				{  					Mate = new MateOptions(alignLeft ? MateEdge.Left : MateEdge.Right' MateEdge.Top)'  					AltMate = new MateOptions(alignLeft ? MateEdge.Right : MateEdge.Left' MateEdge.Bottom)'  					Offset = new RectangleDouble(12' 0' 12' 0)  				}'  				new MatePoint(popover)  				{  					Mate = new MateOptions(alignLeft ? MateEdge.Right : MateEdge.Left' MateEdge.Top)'  					AltMate = new MateOptions(alignLeft ? MateEdge.Left : MateEdge.Right' MateEdge.Bottom)'  					// Offset = new RectangleDouble(12' 0' 12' 0)  				}'  				secondsToClose: closeSeconds);
Magic Number,MatterHackers.MatterControl.DataStorage,Datastore,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DataStorage\Datastore.cs,Exit,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MatterHackers.MatterControl.DesignTools,EnumRenameAttribute,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Attributes\EnumRenameAttribute.cs,EnumRenameAttribute,The following statement contains a magic number: NameMaping.Add(nameMaping[i * 2]' nameMaping[i * 2 + 1]);
Magic Number,MatterHackers.MatterControl.DesignTools,EnumRenameAttribute,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Attributes\EnumRenameAttribute.cs,EnumRenameAttribute,The following statement contains a magic number: NameMaping.Add(nameMaping[i * 2]' nameMaping[i * 2 + 1]);
Magic Number,MatterHackers.MatterControl.DesignTools,EnumRenameAttribute,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Attributes\EnumRenameAttribute.cs,EnumRenameAttribute,The following statement contains a magic number: i<nameMaping.Length/2
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: var textObject = new TextObject3D()  					{  						PointSize = 46'  						Color = Color.LightBlue'  						NameToWrite = Letter.ToString()'  						Height = BaseHeight  					};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D letterObject = new RotateObject3D_2(textObject' Vector3.UnitX' -90);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: var scaleRatio = Math.Max(letterObject.XSize() / 17' letterObject.ZSize() / 17);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: var scaleRatio = Math.Max(letterObject.XSize() / 17' letterObject.ZSize() / 17);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: letterObject = new AlignObject3D(letterObject' FaceAlign.Bottom | FaceAlign.Front' brailleLetter' FaceAlign.Top | FaceAlign.Front' 0' 0' 3.5);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: var basePath = new RoundedRect(0' 0' 22' 34' 3)  					{  						ResolutionScale = 10  					};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: var basePath = new RoundedRect(0' 0' 22' 34' 3)  					{  						ResolutionScale = 10  					};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: var basePath = new RoundedRect(0' 0' 22' 34' 3)  					{  						ResolutionScale = 10  					};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: var basePath = new RoundedRect(0' 0' 22' 34' 3)  					{  						ResolutionScale = 10  					};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D basePlate = new Object3D()  					{  						Mesh = VertexSourceToMesh.Extrude(basePath' BaseHeight)'  						Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 4)  					};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D underline = await CubeObject3D.Create(basePlate.XSize()' .2' 1);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleCardObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleCardObject3D.cs,Rebuild,The following statement contains a magic number: underline = new AlignObject3D(underline' FaceAlign.Back | FaceAlign.Left' basePlate' FaceAlign.Front | FaceAlign.Left' 0' .01);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: double pointSize = 18.5;
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: double pointsToMm = 0.352778;
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: switch (vertex.command)  								{  									case Agg.ShapePath.FlagsAndCommand.Stop:  									case Agg.ShapePath.FlagsAndCommand.EndPoly:  									case Agg.ShapePath.FlagsAndCommand.FlagClose:  									case Agg.ShapePath.FlagsAndCommand.MoveTo:  										if (vertexCount > 0)  										{  											var center = positionSum / vertexCount;  											double radius = 1.44 / 2;// (center - lastPosition).Length;  											var sphere = new HalfSphereObject3D(radius * 2' 15)  											{  												Color = Color.LightBlue  											};  											sphere.Translate(center.X' center.Y);  											letterObject.Children.Add(sphere);  										}  										vertexCount = 0;  										positionSum = Vector2.Zero;  										break;  									case Agg.ShapePath.FlagsAndCommand.Curve3:  									case Agg.ShapePath.FlagsAndCommand.Curve4:  									case Agg.ShapePath.FlagsAndCommand.LineTo:  										vertexCount++;  										lastPosition = vertex.position;  										positionSum += lastPosition;  										break;  								}
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: switch (vertex.command)  								{  									case Agg.ShapePath.FlagsAndCommand.Stop:  									case Agg.ShapePath.FlagsAndCommand.EndPoly:  									case Agg.ShapePath.FlagsAndCommand.FlagClose:  									case Agg.ShapePath.FlagsAndCommand.MoveTo:  										if (vertexCount > 0)  										{  											var center = positionSum / vertexCount;  											double radius = 1.44 / 2;// (center - lastPosition).Length;  											var sphere = new HalfSphereObject3D(radius * 2' 15)  											{  												Color = Color.LightBlue  											};  											sphere.Translate(center.X' center.Y);  											letterObject.Children.Add(sphere);  										}  										vertexCount = 0;  										positionSum = Vector2.Zero;  										break;  									case Agg.ShapePath.FlagsAndCommand.Curve3:  									case Agg.ShapePath.FlagsAndCommand.Curve4:  									case Agg.ShapePath.FlagsAndCommand.LineTo:  										vertexCount++;  										lastPosition = vertex.position;  										positionSum += lastPosition;  										break;  								}
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: switch (vertex.command)  								{  									case Agg.ShapePath.FlagsAndCommand.Stop:  									case Agg.ShapePath.FlagsAndCommand.EndPoly:  									case Agg.ShapePath.FlagsAndCommand.FlagClose:  									case Agg.ShapePath.FlagsAndCommand.MoveTo:  										if (vertexCount > 0)  										{  											var center = positionSum / vertexCount;  											double radius = 1.44 / 2;// (center - lastPosition).Length;  											var sphere = new HalfSphereObject3D(radius * 2' 15)  											{  												Color = Color.LightBlue  											};  											sphere.Translate(center.X' center.Y);  											letterObject.Children.Add(sphere);  										}  										vertexCount = 0;  										positionSum = Vector2.Zero;  										break;  									case Agg.ShapePath.FlagsAndCommand.Curve3:  									case Agg.ShapePath.FlagsAndCommand.Curve4:  									case Agg.ShapePath.FlagsAndCommand.LineTo:  										vertexCount++;  										lastPosition = vertex.position;  										positionSum += lastPosition;  										break;  								}
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: switch (vertex.command)  								{  									case Agg.ShapePath.FlagsAndCommand.Stop:  									case Agg.ShapePath.FlagsAndCommand.EndPoly:  									case Agg.ShapePath.FlagsAndCommand.FlagClose:  									case Agg.ShapePath.FlagsAndCommand.MoveTo:  										if (vertexCount > 0)  										{  											var center = positionSum / vertexCount;  											double radius = 1.44 / 2;// (center - lastPosition).Length;  											var sphere = new HalfSphereObject3D(radius * 2' 15)  											{  												Color = Color.LightBlue  											};  											sphere.Translate(center.X' center.Y);  											letterObject.Children.Add(sphere);  										}  										vertexCount = 0;  										positionSum = Vector2.Zero;  										break;  									case Agg.ShapePath.FlagsAndCommand.Curve3:  									case Agg.ShapePath.FlagsAndCommand.Curve4:  									case Agg.ShapePath.FlagsAndCommand.LineTo:  										vertexCount++;  										lastPosition = vertex.position;  										positionSum += lastPosition;  										break;  								}
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: var padding = .9 * pointSize * pointsToMm / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: var padding = .9 * pointSize * pointsToMm / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: basePlate = new AlignObject3D(basePlate' FaceAlign.Top' textObject' FaceAlign.Bottom' 0' 0' .01);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: basePlate = new AlignObject3D(basePlate' FaceAlign.Left | FaceAlign.Front'  						size.Left - padding / 2'  						size.Bottom - padding / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: basePlate = new AlignObject3D(basePlate' FaceAlign.Left | FaceAlign.Front'  						size.Left - padding / 2'  						size.Bottom - padding / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: basePlate.Matrix *= Matrix4X4.CreateRotationX(MathHelper.Tau / 4);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: double edgeWidth = 3;
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: IVertexSource leftSideObject = new RoundedRect(0' 0' height / 2' height' 0)  						{  							ResolutionScale = 10  						};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: IVertexSource leftSideObject = new RoundedRect(0' 0' height / 2' height' 0)  						{  							ResolutionScale = 10  						};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: IVertexSource cicleObject = new Ellipse(0' 0' height / 2' height / 2)  						{  							ResolutionScale = 10  						};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: IVertexSource cicleObject = new Ellipse(0' 0' height / 2' height / 2)  						{  							ResolutionScale = 10  						};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: IVertexSource cicleObject = new Ellipse(0' 0' height / 2' height / 2)  						{  							ResolutionScale = 10  						};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: cicleObject = new Align2D(cicleObject' Side2D.Left | Side2D.Bottom' leftSideObject' Side2D.Left | Side2D.Bottom' -.01);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: IVertexSource holeObject = new Ellipse(0' 0' height / 2 - edgeWidth' height / 2 - edgeWidth)  						{  							ResolutionScale = 10  						};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: IVertexSource holeObject = new Ellipse(0' 0' height / 2 - edgeWidth' height / 2 - edgeWidth)  						{  							ResolutionScale = 10  						};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: IVertexSource holeObject = new Ellipse(0' 0' height / 2 - edgeWidth' height / 2 - edgeWidth)  						{  							ResolutionScale = 10  						};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D chainHook = new Object3D()  						{  							Mesh = VertexSourceToMesh.Extrude(hookPath' BaseHeight)'  							Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 4)  						};
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: chainHook = new AlignObject3D(chainHook' FaceAlign.Left | FaceAlign.Bottom | FaceAlign.Back' basePlate' FaceAlign.Right | FaceAlign.Bottom | FaceAlign.Back' -.01);
Magic Number,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following statement contains a magic number: textObject.Matrix *= Matrix4X4.CreateRotationX(MathHelper.Tau / 4);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: AngleDegrees = 45;
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: AngleDegrees > 45
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: insideReach = 4;
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: heightFromFloorToBottomOfLeg = 4;
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: var baseBevelClamped = Math.Max(0' Math.Min(OuterSize / 2' BaseBevel));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: RoundedRect footBase = new RoundedRect(-OuterSize / 2' -OuterSize / 2' OuterSize / 2' OuterSize / 2' baseBevelClamped)  					{  						ResolutionScale = 1000  					};
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: RoundedRect footBase = new RoundedRect(-OuterSize / 2' -OuterSize / 2' OuterSize / 2' OuterSize / 2' baseBevelClamped)  					{  						ResolutionScale = 1000  					};
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: RoundedRect footBase = new RoundedRect(-OuterSize / 2' -OuterSize / 2' OuterSize / 2' OuterSize / 2' baseBevelClamped)  					{  						ResolutionScale = 1000  					};
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: RoundedRect footBase = new RoundedRect(-OuterSize / 2' -OuterSize / 2' OuterSize / 2' OuterSize / 2' baseBevelClamped)  					{  						ResolutionScale = 1000  					};
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: RoundedRect footBase = new RoundedRect(-OuterSize / 2' -OuterSize / 2' OuterSize / 2' OuterSize / 2' baseBevelClamped)  					{  						ResolutionScale = 1000  					};
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D ring = new RingObject3D(InnerSize - 2' InnerSize - 6' insideReach' 60);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D ring = new RingObject3D(InnerSize - 2' InnerSize - 6' insideReach' 60);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D ring = new RingObject3D(InnerSize - 2' InnerSize - 6' insideReach' 60);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: ring.Translate(0' 0' -insideReach / 2 - .02);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: ring.Translate(0' 0' -insideReach / 2 - .02);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: finShape.LineTo(3' 0);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: finShape.LineTo(3' ring.ZSize());
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: finShape.LineTo(0' ring.ZSize() - 3);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: fins.Rotate(Vector3.Zero' Vector3.UnitX' -MathHelper.Tau / 4);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: fins.Rotate(Vector3.Zero' Vector3.UnitZ' -MathHelper.Tau / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: fins = (new TranslateObject3D(fins' 1.48' 1' -ring.ZSize() - .02)).Plus(new TranslateObject3D(fins' 1.48' -1' -ring.ZSize() - .02));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: fins = (new TranslateObject3D(fins' 1.48' 1' -ring.ZSize() - .02)).Plus(new TranslateObject3D(fins' 1.48' -1' -ring.ZSize() - .02));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: fins = (new TranslateObject3D(fins' 1.48' 1' -ring.ZSize() - .02)).Plus(new TranslateObject3D(fins' 1.48' -1' -ring.ZSize() - .02));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: fins = (new TranslateObject3D(fins' 1.48' 1' -ring.ZSize() - .02)).Plus(new TranslateObject3D(fins' 1.48' -1' -ring.ZSize() - .02));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: fins = new TranslateObject3D(fins' InnerSize / 2 - .1);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: fins = new TranslateObject3D(fins' InnerSize / 2 - .1);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: ring = ring.Plus(new RotateObject3D(fins' 0' 0' MathHelper.DegreesToRadians(45)));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: ring = ring.Plus(new RotateObject3D(fins' 0' 0' MathHelper.DegreesToRadians(45 + 90)));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: ring = ring.Plus(new RotateObject3D(fins' 0' 0' MathHelper.DegreesToRadians(45 + 90)));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: ring = ring.Plus(new RotateObject3D(fins' 0' 0' MathHelper.DegreesToRadians(45 + 180)));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: ring = ring.Plus(new RotateObject3D(fins' 0' 0' MathHelper.DegreesToRadians(45 + 180)));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: ring = ring.Plus(new RotateObject3D(fins' 0' 0' MathHelper.DegreesToRadians(45 - 90)));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: ring = ring.Plus(new RotateObject3D(fins' 0' 0' MathHelper.DegreesToRadians(45 - 90)));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: chairFoot = chairFoot.Plus(new AlignObject3D(ring' FaceAlign.Bottom' chairFoot' FaceAlign.Top' 0' 0' -.1));
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D clipBox = new AlignObject3D(await CubeObject3D.Create(OuterSize * 2' OuterSize * 2' unclippedFootHeight)' FaceAlign.Top' chairFoot' FaceAlign.Bottom' 0' 0' extraHeightForRotation);
Magic Number,MatterHackers.MatterControl.DesignTools,ChairFootObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ChairFootObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D clipBox = new AlignObject3D(await CubeObject3D.Create(OuterSize * 2' OuterSize * 2' unclippedFootHeight)' FaceAlign.Top' chairFoot' FaceAlign.Bottom' 0' 0' extraHeightForRotation);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D logoBase = new CylinderObject3D(outerDiameter' 3' 60);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D logoBase = new CylinderObject3D(outerDiameter' 3' 60);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D logoRing = new AlignObject3D(new RingObject3D(outerDiameter' innerDiameter' 2' 60)' FaceAlign.Bottom' logoBase' FaceAlign.Top);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D logoRing = new AlignObject3D(new RingObject3D(outerDiameter' innerDiameter' 2' 60)' FaceAlign.Bottom' logoBase' FaceAlign.Top);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: var cube = await CubeObject3D.Create(4' 2' 4);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: var cube = await CubeObject3D.Create(4' 2' 4);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: var cube = await CubeObject3D.Create(4' 2' 4);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D connect = logoBase.Plus(new AlignObject3D(cube' FaceAlign.Front | FaceAlign.Bottom' logoBase' FaceAlign.Back | FaceAlign.Bottom' 0' -.5));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D hook = logoBase.Plus(new AlignObject3D(new RingObject3D(10' 7' 5' 30)' FaceAlign.Front | FaceAlign.Bottom' connect' FaceAlign.Back | FaceAlign.Bottom' 0' -.5));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D hook = logoBase.Plus(new AlignObject3D(new RingObject3D(10' 7' 5' 30)' FaceAlign.Front | FaceAlign.Bottom' connect' FaceAlign.Back | FaceAlign.Bottom' 0' -.5));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D hook = logoBase.Plus(new AlignObject3D(new RingObject3D(10' 7' 5' 30)' FaceAlign.Front | FaceAlign.Bottom' connect' FaceAlign.Back | FaceAlign.Bottom' 0' -.5));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D hook = logoBase.Plus(new AlignObject3D(new RingObject3D(10' 7' 5' 30)' FaceAlign.Front | FaceAlign.Bottom' connect' FaceAlign.Back | FaceAlign.Bottom' 0' -.5));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D hook = logoBase.Plus(new AlignObject3D(new RingObject3D(10' 7' 5' 30)' FaceAlign.Front | FaceAlign.Bottom' connect' FaceAlign.Back | FaceAlign.Bottom' 0' -.5));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: var scale = Math.Max(bounds.Width' bounds.Height) / (17 * 4);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: var scale = Math.Max(bounds.Width' bounds.Height) / (17 * 4);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: inputShape = new VertexSourceApplyTransform(inputShape' GetCenteringTransformVisualCenter(inputShape' innerDiameter / 2));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: inputShape = new VertexSourceApplyTransform(inputShape' Affine.NewScaling(ScalePercent / 100.0));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: ScalePercent != 100  					&& ScalePercent != 0
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: var disk = new Ellipse(0' 0' innerDiameter / 2 + .2' innerDiameter / 2 + .2)  					{  						ResolutionScale = 1000  					};
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: var disk = new Ellipse(0' 0' innerDiameter / 2 + .2' innerDiameter / 2 + .2)  					{  						ResolutionScale = 1000  					};
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: var disk = new Ellipse(0' 0' innerDiameter / 2 + .2' innerDiameter / 2 + .2)  					{  						ResolutionScale = 1000  					};
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: var disk = new Ellipse(0' 0' innerDiameter / 2 + .2' innerDiameter / 2 + .2)  					{  						ResolutionScale = 1000  					};
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: var disk = new Ellipse(0' 0' innerDiameter / 2 + .2' innerDiameter / 2 + .2)  					{  						ResolutionScale = 1000  					};
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,Rebuild,The following statement contains a magic number: var loadingScale = 32 / extrusionObject.XSize();
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,MaxXyDistFromCenter,The following statement contains a magic number: double maxDistSqrd = 0.000001;
Magic Number,MatterHackers.MatterControl.DesignTools,ImageCoinObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\ImageCoinObject3D.cs,MaxXyDistFromCenter,The following statement contains a magic number: double maxDistSqrd = 0.000001;
Magic Number,MatterHackers.MatterControl.DesignTools,ElbowObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\ElbowObject3D.cs,Rebuild,The following statement contains a magic number: InnerDiameter = ValidateValue(InnerDiameter' "PipeWorksInnerDiameter"' 15);
Magic Number,MatterHackers.MatterControl.DesignTools,ElbowObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\ElbowObject3D.cs,Rebuild,The following statement contains a magic number: OuterDiameter = ValidateValue(OuterDiameter' "PipeWorksOuterDiameter"' 20);
Magic Number,MatterHackers.MatterControl.DesignTools,ElbowObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\ElbowObject3D.cs,Rebuild,The following statement contains a magic number: BottomReach = ValidateValue(BottomReach' "PipeWorksBottomReach"' 30);
Magic Number,MatterHackers.MatterControl.DesignTools,ElbowObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\ElbowObject3D.cs,Rebuild,The following statement contains a magic number: FrontReach = ValidateValue(FrontReach' "PipeWorksFrontReach"' 25);
Magic Number,MatterHackers.MatterControl.DesignTools,ElbowObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\ElbowObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D bottomReach = new RotateObject3D(CreateReach(BottomReach' InnerDiameter)' -MathHelper.Tau / 4);
Magic Number,MatterHackers.MatterControl.DesignTools,ElbowObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\ElbowObject3D.cs,Rebuild,The following statement contains a magic number: var translate = new Vector3(-OuterDiameter / 2' 0' 0);
Magic Number,MatterHackers.MatterControl.DesignTools,ElbowObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\ElbowObject3D.cs,Rebuild,The following statement contains a magic number: OuterDiameter = OuterDiameter * 2;
Magic Number,MatterHackers.MatterControl.DesignTools,ElbowObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\ElbowObject3D.cs,Rebuild,The following statement contains a magic number: torus.EndingAngle = 180;
Magic Number,MatterHackers.MatterControl.DesignTools,ElbowObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\ElbowObject3D.cs,Rebuild,The following statement contains a magic number: Angle < 90
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: var finWidth = 4.0;
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: pattern.LineTo(finLength / 2' 0);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: pattern.LineTo(finLength / 2' reach - finLength / 8);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: pattern.LineTo(finLength / 2' reach - finLength / 8);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: pattern.LineTo(finLength / 2 - finLength / 8' reach);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: pattern.LineTo(finLength / 2 - finLength / 8' reach);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: pattern.LineTo(-finLength / 2 + finLength / 8' reach);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: pattern.LineTo(-finLength / 2 + finLength / 8' reach);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: pattern.LineTo(-finLength / 2' reach - finLength / 8);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: pattern.LineTo(-finLength / 2' reach - finLength / 8);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: pattern.LineTo(-finLength / 2' 0);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: fin1 = new TranslateObject3D(fin1' 0' 0' -finWidth / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: fin1 = new RotateObject3D(fin1' -MathHelper.Tau / 4);
Magic Number,MatterHackers.MatterControl.DesignTools,PipeWorksBaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\PipeWorksBaseObject3D.cs,CreateReach,The following statement contains a magic number: var fin2 = new SetCenterObject3D(new RotateObject3D(fin1' 0' 0' MathHelper.Tau / 4)' fin1.GetCenter());
Magic Number,MatterHackers.MatterControl.DesignTools,TeeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\TeeObject3D.cs,Rebuild,The following statement contains a magic number: InnerDiameter = ValidateValue(InnerDiameter' "PipeWorksInnerDiameter"' 15);
Magic Number,MatterHackers.MatterControl.DesignTools,TeeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\TeeObject3D.cs,Rebuild,The following statement contains a magic number: OuterDiameter = ValidateValue(OuterDiameter' "PipeWorksOuterDiameter"' 20);
Magic Number,MatterHackers.MatterControl.DesignTools,TeeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\TeeObject3D.cs,Rebuild,The following statement contains a magic number: BottomReach = ValidateValue(BottomReach' "PipeWorksBottomReach"' 30);
Magic Number,MatterHackers.MatterControl.DesignTools,TeeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\TeeObject3D.cs,Rebuild,The following statement contains a magic number: FrontReach = ValidateValue(FrontReach' "PipeWorksFrontReach"' 25);
Magic Number,MatterHackers.MatterControl.DesignTools,TeeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\TeeObject3D.cs,Rebuild,The following statement contains a magic number: TopReach = ValidateValue(TopReach' "PipeWorksTopReach"' 30);
Magic Number,MatterHackers.MatterControl.DesignTools,TeeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\TeeObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D bottomReach = new RotateObject3D(CreateReach(BottomReach' InnerDiameter)' -MathHelper.Tau / 4);
Magic Number,MatterHackers.MatterControl.DesignTools,TeeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\TeeObject3D.cs,Rebuild,The following statement contains a magic number: bottomReach = new AlignObject3D(bottomReach' FaceAlign.Back' topBottomConnect' FaceAlign.Front' 0' .02);
Magic Number,MatterHackers.MatterControl.DesignTools,TeeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\TeeObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D topReach = new RotateObject3D(CreateReach(TopReach' InnerDiameter)' MathHelper.Tau / 4);
Magic Number,MatterHackers.MatterControl.DesignTools,TeeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\TeeObject3D.cs,Rebuild,The following statement contains a magic number: topReach = new AlignObject3D(topReach' FaceAlign.Front' topBottomConnect' FaceAlign.Back' 0' -.02);
Magic Number,MatterHackers.MatterControl.DesignTools,TeeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\TeeObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D frontReach = new RotateObject3D(CreateReach(FrontReach' InnerDiameter)' 0' -MathHelper.Tau / 4);
Magic Number,MatterHackers.MatterControl.DesignTools,TeeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\PipeWorks\TeeObject3D.cs,Rebuild,The following statement contains a magic number: frontReach = new AlignObject3D(frontReach' FaceAlign.Left' topBottomConnect' FaceAlign.Right' -.02);
Magic Number,MatterHackers.MatterControl.DesignTools,RibbonWithNameObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\RibbonWithNameObject3D.cs,Rebuild,The following statement contains a magic number: cancerRibbonStl = new RotateObject3D(cancerRibbonStl' MathHelper.DegreesToRadians(90));
Magic Number,MatterHackers.MatterControl.DesignTools,RibbonWithNameObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\RibbonWithNameObject3D.cs,Rebuild,The following statement contains a magic number: var letterPrinter = new TypeFacePrinter(NameToWrite.ToUpper()' new StyledTypeFace(ApplicationController.GetTypeFace(Font)' 12));
Magic Number,MatterHackers.MatterControl.DesignTools,RibbonWithNameObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\RibbonWithNameObject3D.cs,Rebuild,The following statement contains a magic number: IObject3D nameMesh = new Object3D()  			{  				Mesh = VertexSourceToMesh.Extrude(letterPrinter' 5)  			};
Magic Number,MatterHackers.MatterControl.DesignTools,RibbonWithNameObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\RibbonWithNameObject3D.cs,Rebuild,The following statement contains a magic number: var textArea = new Vector2(25' 6);
Magic Number,MatterHackers.MatterControl.DesignTools,RibbonWithNameObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\RibbonWithNameObject3D.cs,Rebuild,The following statement contains a magic number: var textArea = new Vector2(25' 6);
Magic Number,MatterHackers.MatterControl.DesignTools,RibbonWithNameObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\RibbonWithNameObject3D.cs,Rebuild,The following statement contains a magic number: nameMesh = new ScaleObject3D(nameMesh' scale' scale' 2 / textBounds.ZSize);
Magic Number,MatterHackers.MatterControl.DesignTools,RibbonWithNameObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\RibbonWithNameObject3D.cs,Rebuild,The following statement contains a magic number: nameMesh = new RotateObject3D(nameMesh' 0' 0' MathHelper.DegreesToRadians(50));
Magic Number,MatterHackers.MatterControl.DesignTools,RibbonWithNameObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\RibbonWithNameObject3D.cs,Rebuild,The following statement contains a magic number: nameMesh = new TranslateObject3D(nameMesh' -37' -14' -1);
Magic Number,MatterHackers.MatterControl.DesignTools,RibbonWithNameObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\DesignApps\Parts\RibbonWithNameObject3D.cs,Rebuild,The following statement contains a magic number: nameMesh = new TranslateObject3D(nameMesh' -37' -14' -1);
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CurveObject3D.cs,DrawEditor,The following statement contains a magic number: layer.World.RenderCylinderOutline(this.WorldMatrix()' new Vector3(rotationCenter' aabb.Center.Z)' Diameter' aabb.ZSize' 30' Color.Red);
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CurveObject3D.cs,Rebuild,The following statement contains a magic number: StartPercent = Math.Min(100' Math.Max(0' StartPercent));
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CurveObject3D.cs,Rebuild,The following statement contains a magic number: StartPercent < 0  				|| StartPercent > 100
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CurveObject3D.cs,Rebuild,The following statement contains a magic number: var radius = Diameter / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CurveObject3D.cs,Rebuild,The following statement contains a magic number: rotationCenter = new Vector2(aabb.MinXYZ.X + (aabb.MaxXYZ.X - aabb.MinXYZ.X) * (StartPercent / 100)' aabb.MaxXYZ.Y + radius);
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CurveObject3D.cs,Rebuild,The following statement contains a magic number: matrix *= Matrix4X4.CreateRotationX(MathHelper.Tau / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CurveObject3D.cs,Rebuild,The following statement contains a magic number: var angleToRotate = ((worldPosition.X - rotationCenter.X) / circumference) * MathHelper.Tau - MathHelper.Tau / 4;
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The following statement contains a magic number: var distance = Diameter / 2 + sourceAabb.YSize / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The following statement contains a magic number: var distance = Diameter / 2 + sourceAabb.YSize / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The following statement contains a magic number: center.X -= sourceAabb.XSize / 2 - (StartPercent / 100.0) * sourceAabb.XSize;
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The following statement contains a magic number: center.X -= sourceAabb.XSize / 2 - (StartPercent / 100.0) * sourceAabb.XSize;
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The following statement contains a magic number: layer.World.RenderCylinderOutline(this.WorldMatrix()' center' Diameter' sourceAabb.ZSize' 100' Color.Red' Color.Transparent);
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The following statement contains a magic number: var radius = Diameter / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The following statement contains a magic number: var xxx = sourceAabb.XSize * (StartPercent / 100.0);
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The following statement contains a magic number: var startAngle = MathHelper.Tau * 3 / 4 - xxx / circumference * MathHelper.Tau;
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The following statement contains a magic number: var startAngle = MathHelper.Tau * 3 / 4 - xxx / circumference * MathHelper.Tau;
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,DrawEditor,The following statement contains a magic number: layer.World.RenderCylinderOutline(this.WorldMatrix()' center' Diameter' sourceAabb.ZSize' (int)Math.Max(0' Math.Min(100' this.MinSidesPerRotation))' Color.Transparent' Color.Red' phase: startAngle);
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: StartPercent = Math.Min(100' Math.Max(0' StartPercent));
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: StartPercent < 0 || StartPercent > 100
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: Diameter = Math.Min(100000' Math.Max(1' Diameter));
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: Diameter < 1 || Diameter > 100000
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: MinSidesPerRotation = Math.Min(360' Math.Max(3' MinSidesPerRotation));
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: MinSidesPerRotation = Math.Min(360' Math.Max(3' MinSidesPerRotation));
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: MinSidesPerRotation < 3 || MinSidesPerRotation > 360
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: MinSidesPerRotation < 3 || MinSidesPerRotation > 360
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Curve".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var radius = Diameter / 2;  					var circumference = MathHelper.Tau * radius;  					double numRotations = sourceAabb.XSize / circumference;  					double numberOfCuts = numRotations * MinSidesPerRotation;  					double cutSize = sourceAabb.XSize / numberOfCuts;  					double cutPosition = sourceAabb.MinXYZ.X + cutSize;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts; i++)  					{  						cuts.Add(cutPosition);  						cutPosition += cutSize;  					}    					var rotationCenter = new Vector3(sourceAabb.MinXYZ.X + (sourceAabb.MaxXYZ.X - sourceAabb.MinXYZ.X) * (StartPercent / 100)'  						BendCcw ? sourceAabb.MaxXYZ.Y + radius : sourceAabb.MinXYZ.Y - radius'  						sourceAabb.Center.Z);    					var curvedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the x axis  						transformedMesh.SplitOnPlanes(Vector3.UnitX' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var angleToRotate = ((position.X - rotationCenter.X) / circumference) * MathHelper.Tau - MathHelper.Tau / 4;  							var distanceFromCenter = rotationCenter.Y - position.Y;  							if (!BendCcw)  							{  								angleToRotate = -angleToRotate;  								distanceFromCenter = -distanceFromCenter;  							}    							var rotatePosition = new Vector3Float(Math.Cos(angleToRotate)' Math.Sin(angleToRotate)' 0) * distanceFromCenter;  							rotatePosition.Z = position.Z;  							transformedMesh.Vertices[i] = rotatePosition + new Vector3Float(rotationCenter.X' radius + sourceAabb.MaxXYZ.Y' 0);  						}    						// transform back into item local space  						transformedMesh.Transform(Matrix4X4.CreateTranslation(-rotationCenter) * itemMatrix.Inverted);    						status.Status = "Merge Vertices".Localize();  						reporter.Report(status);    						transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var curvedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						curvedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						curvedChild.Visible = true;  						curvedChild.Translate(new Vector3(rotationCenter));  						if (!BendCcw)  						{  							curvedChild.Translate(0' -sourceAabb.YSize - Diameter' 0);  						}    						curvedChildren.Add(curvedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(curvedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Curve".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var radius = Diameter / 2;  					var circumference = MathHelper.Tau * radius;  					double numRotations = sourceAabb.XSize / circumference;  					double numberOfCuts = numRotations * MinSidesPerRotation;  					double cutSize = sourceAabb.XSize / numberOfCuts;  					double cutPosition = sourceAabb.MinXYZ.X + cutSize;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts; i++)  					{  						cuts.Add(cutPosition);  						cutPosition += cutSize;  					}    					var rotationCenter = new Vector3(sourceAabb.MinXYZ.X + (sourceAabb.MaxXYZ.X - sourceAabb.MinXYZ.X) * (StartPercent / 100)'  						BendCcw ? sourceAabb.MaxXYZ.Y + radius : sourceAabb.MinXYZ.Y - radius'  						sourceAabb.Center.Z);    					var curvedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the x axis  						transformedMesh.SplitOnPlanes(Vector3.UnitX' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var angleToRotate = ((position.X - rotationCenter.X) / circumference) * MathHelper.Tau - MathHelper.Tau / 4;  							var distanceFromCenter = rotationCenter.Y - position.Y;  							if (!BendCcw)  							{  								angleToRotate = -angleToRotate;  								distanceFromCenter = -distanceFromCenter;  							}    							var rotatePosition = new Vector3Float(Math.Cos(angleToRotate)' Math.Sin(angleToRotate)' 0) * distanceFromCenter;  							rotatePosition.Z = position.Z;  							transformedMesh.Vertices[i] = rotatePosition + new Vector3Float(rotationCenter.X' radius + sourceAabb.MaxXYZ.Y' 0);  						}    						// transform back into item local space  						transformedMesh.Transform(Matrix4X4.CreateTranslation(-rotationCenter) * itemMatrix.Inverted);    						status.Status = "Merge Vertices".Localize();  						reporter.Report(status);    						transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var curvedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						curvedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						curvedChild.Visible = true;  						curvedChild.Translate(new Vector3(rotationCenter));  						if (!BendCcw)  						{  							curvedChild.Translate(0' -sourceAabb.YSize - Diameter' 0);  						}    						curvedChildren.Add(curvedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(curvedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Curve".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var radius = Diameter / 2;  					var circumference = MathHelper.Tau * radius;  					double numRotations = sourceAabb.XSize / circumference;  					double numberOfCuts = numRotations * MinSidesPerRotation;  					double cutSize = sourceAabb.XSize / numberOfCuts;  					double cutPosition = sourceAabb.MinXYZ.X + cutSize;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts; i++)  					{  						cuts.Add(cutPosition);  						cutPosition += cutSize;  					}    					var rotationCenter = new Vector3(sourceAabb.MinXYZ.X + (sourceAabb.MaxXYZ.X - sourceAabb.MinXYZ.X) * (StartPercent / 100)'  						BendCcw ? sourceAabb.MaxXYZ.Y + radius : sourceAabb.MinXYZ.Y - radius'  						sourceAabb.Center.Z);    					var curvedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the x axis  						transformedMesh.SplitOnPlanes(Vector3.UnitX' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var angleToRotate = ((position.X - rotationCenter.X) / circumference) * MathHelper.Tau - MathHelper.Tau / 4;  							var distanceFromCenter = rotationCenter.Y - position.Y;  							if (!BendCcw)  							{  								angleToRotate = -angleToRotate;  								distanceFromCenter = -distanceFromCenter;  							}    							var rotatePosition = new Vector3Float(Math.Cos(angleToRotate)' Math.Sin(angleToRotate)' 0) * distanceFromCenter;  							rotatePosition.Z = position.Z;  							transformedMesh.Vertices[i] = rotatePosition + new Vector3Float(rotationCenter.X' radius + sourceAabb.MaxXYZ.Y' 0);  						}    						// transform back into item local space  						transformedMesh.Transform(Matrix4X4.CreateTranslation(-rotationCenter) * itemMatrix.Inverted);    						status.Status = "Merge Vertices".Localize();  						reporter.Report(status);    						transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var curvedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						curvedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						curvedChild.Visible = true;  						curvedChild.Translate(new Vector3(rotationCenter));  						if (!BendCcw)  						{  							curvedChild.Translate(0' -sourceAabb.YSize - Diameter' 0);  						}    						curvedChildren.Add(curvedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(curvedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Curve".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var radius = Diameter / 2;  					var circumference = MathHelper.Tau * radius;  					double numRotations = sourceAabb.XSize / circumference;  					double numberOfCuts = numRotations * MinSidesPerRotation;  					double cutSize = sourceAabb.XSize / numberOfCuts;  					double cutPosition = sourceAabb.MinXYZ.X + cutSize;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts; i++)  					{  						cuts.Add(cutPosition);  						cutPosition += cutSize;  					}    					var rotationCenter = new Vector3(sourceAabb.MinXYZ.X + (sourceAabb.MaxXYZ.X - sourceAabb.MinXYZ.X) * (StartPercent / 100)'  						BendCcw ? sourceAabb.MaxXYZ.Y + radius : sourceAabb.MinXYZ.Y - radius'  						sourceAabb.Center.Z);    					var curvedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the x axis  						transformedMesh.SplitOnPlanes(Vector3.UnitX' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var angleToRotate = ((position.X - rotationCenter.X) / circumference) * MathHelper.Tau - MathHelper.Tau / 4;  							var distanceFromCenter = rotationCenter.Y - position.Y;  							if (!BendCcw)  							{  								angleToRotate = -angleToRotate;  								distanceFromCenter = -distanceFromCenter;  							}    							var rotatePosition = new Vector3Float(Math.Cos(angleToRotate)' Math.Sin(angleToRotate)' 0) * distanceFromCenter;  							rotatePosition.Z = position.Z;  							transformedMesh.Vertices[i] = rotatePosition + new Vector3Float(rotationCenter.X' radius + sourceAabb.MaxXYZ.Y' 0);  						}    						// transform back into item local space  						transformedMesh.Transform(Matrix4X4.CreateTranslation(-rotationCenter) * itemMatrix.Inverted);    						status.Status = "Merge Vertices".Localize();  						reporter.Report(status);    						transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var curvedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						curvedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						curvedChild.Visible = true;  						curvedChild.Translate(new Vector3(rotationCenter));  						if (!BendCcw)  						{  							curvedChild.Translate(0' -sourceAabb.YSize - Diameter' 0);  						}    						curvedChildren.Add(curvedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(curvedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,CurveObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\CurveObject3D_2.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Curve".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var radius = Diameter / 2;  					var circumference = MathHelper.Tau * radius;  					double numRotations = sourceAabb.XSize / circumference;  					double numberOfCuts = numRotations * MinSidesPerRotation;  					double cutSize = sourceAabb.XSize / numberOfCuts;  					double cutPosition = sourceAabb.MinXYZ.X + cutSize;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts; i++)  					{  						cuts.Add(cutPosition);  						cutPosition += cutSize;  					}    					var rotationCenter = new Vector3(sourceAabb.MinXYZ.X + (sourceAabb.MaxXYZ.X - sourceAabb.MinXYZ.X) * (StartPercent / 100)'  						BendCcw ? sourceAabb.MaxXYZ.Y + radius : sourceAabb.MinXYZ.Y - radius'  						sourceAabb.Center.Z);    					var curvedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the x axis  						transformedMesh.SplitOnPlanes(Vector3.UnitX' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var angleToRotate = ((position.X - rotationCenter.X) / circumference) * MathHelper.Tau - MathHelper.Tau / 4;  							var distanceFromCenter = rotationCenter.Y - position.Y;  							if (!BendCcw)  							{  								angleToRotate = -angleToRotate;  								distanceFromCenter = -distanceFromCenter;  							}    							var rotatePosition = new Vector3Float(Math.Cos(angleToRotate)' Math.Sin(angleToRotate)' 0) * distanceFromCenter;  							rotatePosition.Z = position.Z;  							transformedMesh.Vertices[i] = rotatePosition + new Vector3Float(rotationCenter.X' radius + sourceAabb.MaxXYZ.Y' 0);  						}    						// transform back into item local space  						transformedMesh.Transform(Matrix4X4.CreateTranslation(-rotationCenter) * itemMatrix.Inverted);    						status.Status = "Merge Vertices".Localize();  						reporter.Report(status);    						transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var curvedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						curvedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						curvedChild.Visible = true;  						curvedChild.Translate(new Vector3(rotationCenter));  						if (!BendCcw)  						{  							curvedChild.Translate(0' -sourceAabb.YSize - Diameter' 0);  						}    						curvedChildren.Add(curvedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(curvedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,UpdateHistogramDisplay,The following statement contains a magic number: graphics2D.FillRectangle(0' 0' RangeStart * _histogramDisplayCache.Width' _histogramDisplayCache.Height' new Color(Color.Red' 100));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,UpdateHistogramDisplay,The following statement contains a magic number: graphics2D.FillRectangle(RangeEnd * _histogramDisplayCache.Width' 0' 255' _histogramDisplayCache.Height' new Color(Color.Red' 100));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,UpdateHistogramDisplay,The following statement contains a magic number: graphics2D.FillRectangle(RangeEnd * _histogramDisplayCache.Width' 0' 255' _histogramDisplayCache.Height' new Color(Color.Red' 100));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,UpdateHistogramDisplay,The following statement contains a magic number: graphics2D.Line(RangeStart * _histogramDisplayCache.Width' 0' RangeStart * _histogramDisplayCache.Width' _histogramDisplayCache.Height' new Color(Color.LightGray' 200));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,UpdateHistogramDisplay,The following statement contains a magic number: graphics2D.Line(RangeEnd * _histogramDisplayCache.Width' 0' RangeEnd * _histogramDisplayCache.Width' _histogramDisplayCache.Height' new Color(Color.LightGray' 200));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,DrawPath,The following statement contains a magic number: GL.Color4(255' 0' 0' 255);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,DrawPath,The following statement contains a magic number: GL.Color4(255' 0' 0' 255);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: progressReporter?.Invoke(.1' null);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: int pixelsToIntPointsScale = 1000;
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: progressReporter?.Invoke(.15' null);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: var min = new IntPoint(-10' -10);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: var min = new IntPoint(-10' -10);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: var max = new IntPoint(10 + image.Width * pixelsToIntPointsScale' 10 + image.Height * pixelsToIntPointsScale);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: var max = new IntPoint(10 + image.Width * pixelsToIntPointsScale' 10 + image.Height * pixelsToIntPointsScale);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: progressReporter?.Invoke(.3' null);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: progressReporter?.Invoke(.55' null);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: polygonShape = Clipper.CleanPolygons(polygonShape' 100);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: progressReporter?.Invoke(.75' null);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: affine *= Affine.NewTranslation(-aabb.XSize / 2' -aabb.YSize / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GenerateMarchingSquaresAndLines,The following statement contains a magic number: affine *= Affine.NewTranslation(-aabb.XSize / 2' -aabb.YSize / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GetRGBA,The following statement contains a magic number: return new Color(buffer[offset + 2]' buffer[offset + 1]' buffer[offset + 0]' buffer[offset + 3]);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,GetRGBA,The following statement contains a magic number: return new Color(buffer[offset + 2]' buffer[offset + 1]' buffer[offset + 0]' buffer[offset + 3]);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageToPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Image\ImageToPathObject3D.cs,Rebuild,The following statement contains a magic number: var minSeparation = .01;
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,Rebuild,The following statement contains a magic number: MaxEdgeLength = Math.Max(.01' MaxEdgeLength);
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,Rebuild,The following statement contains a magic number: MaxEdgeLength < .01
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,Rebuild,The following statement contains a magic number: MaxAllowedFaces = Math.Max(100' MaxAllowedFaces);
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,Rebuild,The following statement contains a magic number: MaxAllowedFaces < 100
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,SplitRecursive,The following statement contains a magic number: var length = new float[3];
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,SplitRecursive,The following statement contains a magic number: var next = (i + 1) % 3;
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,SplitRecursive,The following statement contains a magic number: i < 3
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,SplitRecursive,The following statement contains a magic number: newFaces.Add(new Face(vertCount' vertCount + 1' vertCount + 2' normal));
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,SplitRecursive,The following statement contains a magic number: var v1 = (v0 + 1) % 3;
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,SplitRecursive,The following statement contains a magic number: var v2 = (v0 + 2) % 3;
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,SplitRecursive,The following statement contains a magic number: var v2 = (v0 + 2) % 3;
Magic Number,MatterHackers.MatterControl.DesignTools,SubdivideFacesObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\SubdivideFacesObject3D.cs,SplitRecursive,The following statement contains a magic number: var midPoint = (verts[v0] + verts[v1]) / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,DrawEditor,The following statement contains a magic number: layer.World.RenderCylinderOutline(this.WorldMatrix()' center' 1' sourceAabb.ZSize' 15' Color.Red' Color.Red' 5);
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,DrawEditor,The following statement contains a magic number: layer.World.RenderCylinderOutline(this.WorldMatrix()' center' 1' sourceAabb.ZSize' 15' Color.Red' Color.Red' 5);
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: Angle = Math.Min(100000' Math.Max(1' Angle));
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: Angle < 1 || Angle > 100000
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: MinCutsPerRotation = Math.Min(360' Math.Max(3' MinCutsPerRotation));
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: MinCutsPerRotation = Math.Min(360' Math.Max(3' MinCutsPerRotation));
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: MinCutsPerRotation < 3 || MinCutsPerRotation > 360
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: MinCutsPerRotation < 3 || MinCutsPerRotation > 360
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: EndHeightPercent = Math.Min(100' Math.Max(1' EndHeightPercent));
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: EndHeightPercent < 1 || EndHeightPercent > 100
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Twist".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var bottom = sourceAabb.MinXYZ.Z;  					var top = sourceAabb.ZSize * EndHeightPercent / 100.0;  					var size = sourceAabb.ZSize;  					if (Advanced)  					{  						bottom += sourceAabb.ZSize * StartHeightPercent / 100.0;  						size = top - bottom;  					}    					double numberOfCuts = MinCutsPerRotation * (Angle / 360.0);  					double cutSize = size / numberOfCuts;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts + 1; i++)  					{  						var ratio = i / numberOfCuts;  						if (Advanced)  						{  							var goal = ratio;  							var current = .5;  							var next = .25;  							// look for an x value that equals the goal  							for (int j = 0; j < 64; j++)  							{  								var xAtY = Easing.Specify(EasingType' EasingOption' current);  								if (xAtY < goal)  								{  									current += next;  								}  								else if (xAtY > goal)  								{  									current -= next;  								}    								next *= .5;  							}    							ratio = current;  						}    						cuts.Add(bottom - cutSize + (size * ratio));  					}    					var rotationCenter = new Vector2(sourceAabb.Center) + RotationOffset;    					var twistedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the z axis  						transformedMesh.SplitOnPlanes(Vector3.UnitZ' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var ratio = (position.Z - bottom) / size;    							if (Advanced)  							{  								if (position.Z < bottom)  								{  									ratio = 0;  								}  								else if (position.Z > top)  								{  									ratio = 1;  								}  								else  								{  									ratio = (position.Z - bottom) / size;  									ratio = Easing.Specify(EasingType' EasingOption' ratio);  								}  							}    							var angleToRotate = ratio * Angle / 360.0 * MathHelper.Tau;    							if (!TwistCw)  							{  								angleToRotate = -angleToRotate;  							}    							var positionXy = new Vector2(position) - rotationCenter;  							positionXy.Rotate(angleToRotate);  							positionXy += rotationCenter;  							transformedMesh.Vertices[i] = new Vector3Float(positionXy.X' positionXy.Y' position.Z);  						}    						// transform back into item local space  						transformedMesh.Transform(itemMatrix.Inverted);    						//transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var twistedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						twistedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						twistedChild.Visible = true;    						twistedChildren.Add(twistedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(twistedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Twist".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var bottom = sourceAabb.MinXYZ.Z;  					var top = sourceAabb.ZSize * EndHeightPercent / 100.0;  					var size = sourceAabb.ZSize;  					if (Advanced)  					{  						bottom += sourceAabb.ZSize * StartHeightPercent / 100.0;  						size = top - bottom;  					}    					double numberOfCuts = MinCutsPerRotation * (Angle / 360.0);  					double cutSize = size / numberOfCuts;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts + 1; i++)  					{  						var ratio = i / numberOfCuts;  						if (Advanced)  						{  							var goal = ratio;  							var current = .5;  							var next = .25;  							// look for an x value that equals the goal  							for (int j = 0; j < 64; j++)  							{  								var xAtY = Easing.Specify(EasingType' EasingOption' current);  								if (xAtY < goal)  								{  									current += next;  								}  								else if (xAtY > goal)  								{  									current -= next;  								}    								next *= .5;  							}    							ratio = current;  						}    						cuts.Add(bottom - cutSize + (size * ratio));  					}    					var rotationCenter = new Vector2(sourceAabb.Center) + RotationOffset;    					var twistedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the z axis  						transformedMesh.SplitOnPlanes(Vector3.UnitZ' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var ratio = (position.Z - bottom) / size;    							if (Advanced)  							{  								if (position.Z < bottom)  								{  									ratio = 0;  								}  								else if (position.Z > top)  								{  									ratio = 1;  								}  								else  								{  									ratio = (position.Z - bottom) / size;  									ratio = Easing.Specify(EasingType' EasingOption' ratio);  								}  							}    							var angleToRotate = ratio * Angle / 360.0 * MathHelper.Tau;    							if (!TwistCw)  							{  								angleToRotate = -angleToRotate;  							}    							var positionXy = new Vector2(position) - rotationCenter;  							positionXy.Rotate(angleToRotate);  							positionXy += rotationCenter;  							transformedMesh.Vertices[i] = new Vector3Float(positionXy.X' positionXy.Y' position.Z);  						}    						// transform back into item local space  						transformedMesh.Transform(itemMatrix.Inverted);    						//transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var twistedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						twistedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						twistedChild.Visible = true;    						twistedChildren.Add(twistedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(twistedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Twist".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var bottom = sourceAabb.MinXYZ.Z;  					var top = sourceAabb.ZSize * EndHeightPercent / 100.0;  					var size = sourceAabb.ZSize;  					if (Advanced)  					{  						bottom += sourceAabb.ZSize * StartHeightPercent / 100.0;  						size = top - bottom;  					}    					double numberOfCuts = MinCutsPerRotation * (Angle / 360.0);  					double cutSize = size / numberOfCuts;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts + 1; i++)  					{  						var ratio = i / numberOfCuts;  						if (Advanced)  						{  							var goal = ratio;  							var current = .5;  							var next = .25;  							// look for an x value that equals the goal  							for (int j = 0; j < 64; j++)  							{  								var xAtY = Easing.Specify(EasingType' EasingOption' current);  								if (xAtY < goal)  								{  									current += next;  								}  								else if (xAtY > goal)  								{  									current -= next;  								}    								next *= .5;  							}    							ratio = current;  						}    						cuts.Add(bottom - cutSize + (size * ratio));  					}    					var rotationCenter = new Vector2(sourceAabb.Center) + RotationOffset;    					var twistedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the z axis  						transformedMesh.SplitOnPlanes(Vector3.UnitZ' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var ratio = (position.Z - bottom) / size;    							if (Advanced)  							{  								if (position.Z < bottom)  								{  									ratio = 0;  								}  								else if (position.Z > top)  								{  									ratio = 1;  								}  								else  								{  									ratio = (position.Z - bottom) / size;  									ratio = Easing.Specify(EasingType' EasingOption' ratio);  								}  							}    							var angleToRotate = ratio * Angle / 360.0 * MathHelper.Tau;    							if (!TwistCw)  							{  								angleToRotate = -angleToRotate;  							}    							var positionXy = new Vector2(position) - rotationCenter;  							positionXy.Rotate(angleToRotate);  							positionXy += rotationCenter;  							transformedMesh.Vertices[i] = new Vector3Float(positionXy.X' positionXy.Y' position.Z);  						}    						// transform back into item local space  						transformedMesh.Transform(itemMatrix.Inverted);    						//transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var twistedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						twistedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						twistedChild.Visible = true;    						twistedChildren.Add(twistedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(twistedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Twist".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var bottom = sourceAabb.MinXYZ.Z;  					var top = sourceAabb.ZSize * EndHeightPercent / 100.0;  					var size = sourceAabb.ZSize;  					if (Advanced)  					{  						bottom += sourceAabb.ZSize * StartHeightPercent / 100.0;  						size = top - bottom;  					}    					double numberOfCuts = MinCutsPerRotation * (Angle / 360.0);  					double cutSize = size / numberOfCuts;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts + 1; i++)  					{  						var ratio = i / numberOfCuts;  						if (Advanced)  						{  							var goal = ratio;  							var current = .5;  							var next = .25;  							// look for an x value that equals the goal  							for (int j = 0; j < 64; j++)  							{  								var xAtY = Easing.Specify(EasingType' EasingOption' current);  								if (xAtY < goal)  								{  									current += next;  								}  								else if (xAtY > goal)  								{  									current -= next;  								}    								next *= .5;  							}    							ratio = current;  						}    						cuts.Add(bottom - cutSize + (size * ratio));  					}    					var rotationCenter = new Vector2(sourceAabb.Center) + RotationOffset;    					var twistedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the z axis  						transformedMesh.SplitOnPlanes(Vector3.UnitZ' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var ratio = (position.Z - bottom) / size;    							if (Advanced)  							{  								if (position.Z < bottom)  								{  									ratio = 0;  								}  								else if (position.Z > top)  								{  									ratio = 1;  								}  								else  								{  									ratio = (position.Z - bottom) / size;  									ratio = Easing.Specify(EasingType' EasingOption' ratio);  								}  							}    							var angleToRotate = ratio * Angle / 360.0 * MathHelper.Tau;    							if (!TwistCw)  							{  								angleToRotate = -angleToRotate;  							}    							var positionXy = new Vector2(position) - rotationCenter;  							positionXy.Rotate(angleToRotate);  							positionXy += rotationCenter;  							transformedMesh.Vertices[i] = new Vector3Float(positionXy.X' positionXy.Y' position.Z);  						}    						// transform back into item local space  						transformedMesh.Transform(itemMatrix.Inverted);    						//transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var twistedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						twistedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						twistedChild.Visible = true;    						twistedChildren.Add(twistedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(twistedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Twist".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var bottom = sourceAabb.MinXYZ.Z;  					var top = sourceAabb.ZSize * EndHeightPercent / 100.0;  					var size = sourceAabb.ZSize;  					if (Advanced)  					{  						bottom += sourceAabb.ZSize * StartHeightPercent / 100.0;  						size = top - bottom;  					}    					double numberOfCuts = MinCutsPerRotation * (Angle / 360.0);  					double cutSize = size / numberOfCuts;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts + 1; i++)  					{  						var ratio = i / numberOfCuts;  						if (Advanced)  						{  							var goal = ratio;  							var current = .5;  							var next = .25;  							// look for an x value that equals the goal  							for (int j = 0; j < 64; j++)  							{  								var xAtY = Easing.Specify(EasingType' EasingOption' current);  								if (xAtY < goal)  								{  									current += next;  								}  								else if (xAtY > goal)  								{  									current -= next;  								}    								next *= .5;  							}    							ratio = current;  						}    						cuts.Add(bottom - cutSize + (size * ratio));  					}    					var rotationCenter = new Vector2(sourceAabb.Center) + RotationOffset;    					var twistedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the z axis  						transformedMesh.SplitOnPlanes(Vector3.UnitZ' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var ratio = (position.Z - bottom) / size;    							if (Advanced)  							{  								if (position.Z < bottom)  								{  									ratio = 0;  								}  								else if (position.Z > top)  								{  									ratio = 1;  								}  								else  								{  									ratio = (position.Z - bottom) / size;  									ratio = Easing.Specify(EasingType' EasingOption' ratio);  								}  							}    							var angleToRotate = ratio * Angle / 360.0 * MathHelper.Tau;    							if (!TwistCw)  							{  								angleToRotate = -angleToRotate;  							}    							var positionXy = new Vector2(position) - rotationCenter;  							positionXy.Rotate(angleToRotate);  							positionXy += rotationCenter;  							transformedMesh.Vertices[i] = new Vector3Float(positionXy.X' positionXy.Y' position.Z);  						}    						// transform back into item local space  						transformedMesh.Transform(itemMatrix.Inverted);    						//transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var twistedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						twistedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						twistedChild.Visible = true;    						twistedChildren.Add(twistedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(twistedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Twist".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var bottom = sourceAabb.MinXYZ.Z;  					var top = sourceAabb.ZSize * EndHeightPercent / 100.0;  					var size = sourceAabb.ZSize;  					if (Advanced)  					{  						bottom += sourceAabb.ZSize * StartHeightPercent / 100.0;  						size = top - bottom;  					}    					double numberOfCuts = MinCutsPerRotation * (Angle / 360.0);  					double cutSize = size / numberOfCuts;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts + 1; i++)  					{  						var ratio = i / numberOfCuts;  						if (Advanced)  						{  							var goal = ratio;  							var current = .5;  							var next = .25;  							// look for an x value that equals the goal  							for (int j = 0; j < 64; j++)  							{  								var xAtY = Easing.Specify(EasingType' EasingOption' current);  								if (xAtY < goal)  								{  									current += next;  								}  								else if (xAtY > goal)  								{  									current -= next;  								}    								next *= .5;  							}    							ratio = current;  						}    						cuts.Add(bottom - cutSize + (size * ratio));  					}    					var rotationCenter = new Vector2(sourceAabb.Center) + RotationOffset;    					var twistedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the z axis  						transformedMesh.SplitOnPlanes(Vector3.UnitZ' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var ratio = (position.Z - bottom) / size;    							if (Advanced)  							{  								if (position.Z < bottom)  								{  									ratio = 0;  								}  								else if (position.Z > top)  								{  									ratio = 1;  								}  								else  								{  									ratio = (position.Z - bottom) / size;  									ratio = Easing.Specify(EasingType' EasingOption' ratio);  								}  							}    							var angleToRotate = ratio * Angle / 360.0 * MathHelper.Tau;    							if (!TwistCw)  							{  								angleToRotate = -angleToRotate;  							}    							var positionXy = new Vector2(position) - rotationCenter;  							positionXy.Rotate(angleToRotate);  							positionXy += rotationCenter;  							transformedMesh.Vertices[i] = new Vector3Float(positionXy.X' positionXy.Y' position.Z);  						}    						// transform back into item local space  						transformedMesh.Transform(itemMatrix.Inverted);    						//transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var twistedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						twistedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						twistedChild.Visible = true;    						twistedChildren.Add(twistedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(twistedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Twist".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var bottom = sourceAabb.MinXYZ.Z;  					var top = sourceAabb.ZSize * EndHeightPercent / 100.0;  					var size = sourceAabb.ZSize;  					if (Advanced)  					{  						bottom += sourceAabb.ZSize * StartHeightPercent / 100.0;  						size = top - bottom;  					}    					double numberOfCuts = MinCutsPerRotation * (Angle / 360.0);  					double cutSize = size / numberOfCuts;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts + 1; i++)  					{  						var ratio = i / numberOfCuts;  						if (Advanced)  						{  							var goal = ratio;  							var current = .5;  							var next = .25;  							// look for an x value that equals the goal  							for (int j = 0; j < 64; j++)  							{  								var xAtY = Easing.Specify(EasingType' EasingOption' current);  								if (xAtY < goal)  								{  									current += next;  								}  								else if (xAtY > goal)  								{  									current -= next;  								}    								next *= .5;  							}    							ratio = current;  						}    						cuts.Add(bottom - cutSize + (size * ratio));  					}    					var rotationCenter = new Vector2(sourceAabb.Center) + RotationOffset;    					var twistedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the z axis  						transformedMesh.SplitOnPlanes(Vector3.UnitZ' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var ratio = (position.Z - bottom) / size;    							if (Advanced)  							{  								if (position.Z < bottom)  								{  									ratio = 0;  								}  								else if (position.Z > top)  								{  									ratio = 1;  								}  								else  								{  									ratio = (position.Z - bottom) / size;  									ratio = Easing.Specify(EasingType' EasingOption' ratio);  								}  							}    							var angleToRotate = ratio * Angle / 360.0 * MathHelper.Tau;    							if (!TwistCw)  							{  								angleToRotate = -angleToRotate;  							}    							var positionXy = new Vector2(position) - rotationCenter;  							positionXy.Rotate(angleToRotate);  							positionXy += rotationCenter;  							transformedMesh.Vertices[i] = new Vector3Float(positionXy.X' positionXy.Y' position.Z);  						}    						// transform back into item local space  						transformedMesh.Transform(itemMatrix.Inverted);    						//transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var twistedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						twistedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						twistedChild.Visible = true;    						twistedChildren.Add(twistedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(twistedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Twist".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var bottom = sourceAabb.MinXYZ.Z;  					var top = sourceAabb.ZSize * EndHeightPercent / 100.0;  					var size = sourceAabb.ZSize;  					if (Advanced)  					{  						bottom += sourceAabb.ZSize * StartHeightPercent / 100.0;  						size = top - bottom;  					}    					double numberOfCuts = MinCutsPerRotation * (Angle / 360.0);  					double cutSize = size / numberOfCuts;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts + 1; i++)  					{  						var ratio = i / numberOfCuts;  						if (Advanced)  						{  							var goal = ratio;  							var current = .5;  							var next = .25;  							// look for an x value that equals the goal  							for (int j = 0; j < 64; j++)  							{  								var xAtY = Easing.Specify(EasingType' EasingOption' current);  								if (xAtY < goal)  								{  									current += next;  								}  								else if (xAtY > goal)  								{  									current -= next;  								}    								next *= .5;  							}    							ratio = current;  						}    						cuts.Add(bottom - cutSize + (size * ratio));  					}    					var rotationCenter = new Vector2(sourceAabb.Center) + RotationOffset;    					var twistedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the z axis  						transformedMesh.SplitOnPlanes(Vector3.UnitZ' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var ratio = (position.Z - bottom) / size;    							if (Advanced)  							{  								if (position.Z < bottom)  								{  									ratio = 0;  								}  								else if (position.Z > top)  								{  									ratio = 1;  								}  								else  								{  									ratio = (position.Z - bottom) / size;  									ratio = Easing.Specify(EasingType' EasingOption' ratio);  								}  							}    							var angleToRotate = ratio * Angle / 360.0 * MathHelper.Tau;    							if (!TwistCw)  							{  								angleToRotate = -angleToRotate;  							}    							var positionXy = new Vector2(position) - rotationCenter;  							positionXy.Rotate(angleToRotate);  							positionXy += rotationCenter;  							transformedMesh.Vertices[i] = new Vector3Float(positionXy.X' positionXy.Y' position.Z);  						}    						// transform back into item local space  						transformedMesh.Transform(itemMatrix.Inverted);    						//transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var twistedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						twistedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						twistedChild.Visible = true;    						twistedChildren.Add(twistedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(twistedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,TwistObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\TwistObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Twist".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					var sourceAabb = this.SourceContainer.GetAxisAlignedBoundingBox();    					var bottom = sourceAabb.MinXYZ.Z;  					var top = sourceAabb.ZSize * EndHeightPercent / 100.0;  					var size = sourceAabb.ZSize;  					if (Advanced)  					{  						bottom += sourceAabb.ZSize * StartHeightPercent / 100.0;  						size = top - bottom;  					}    					double numberOfCuts = MinCutsPerRotation * (Angle / 360.0);  					double cutSize = size / numberOfCuts;  					var cuts = new List<double>();  					for (int i = 0; i < numberOfCuts + 1; i++)  					{  						var ratio = i / numberOfCuts;  						if (Advanced)  						{  							var goal = ratio;  							var current = .5;  							var next = .25;  							// look for an x value that equals the goal  							for (int j = 0; j < 64; j++)  							{  								var xAtY = Easing.Specify(EasingType' EasingOption' current);  								if (xAtY < goal)  								{  									current += next;  								}  								else if (xAtY > goal)  								{  									current -= next;  								}    								next *= .5;  							}    							ratio = current;  						}    						cuts.Add(bottom - cutSize + (size * ratio));  					}    					var rotationCenter = new Vector2(sourceAabb.Center) + RotationOffset;    					var twistedChildren = new List<IObject3D>();    					var status = new ProgressStatus();    					foreach (var sourceItem in SourceContainer.VisibleMeshes())  					{  						var originalMesh = sourceItem.Mesh;  						status.Status = "Copy Mesh".Localize();  						reporter.Report(status);  						var transformedMesh = originalMesh.Copy(CancellationToken.None);  						var itemMatrix = sourceItem.WorldMatrix(SourceContainer);    						// transform into this space  						transformedMesh.Transform(itemMatrix);    						status.Status = "Split Mesh".Localize();  						reporter.Report(status);    						// split the mesh along the z axis  						transformedMesh.SplitOnPlanes(Vector3.UnitZ' cuts' cutSize / 8);    						for (int i = 0; i < transformedMesh.Vertices.Count; i++)  						{  							var position = transformedMesh.Vertices[i];    							var ratio = (position.Z - bottom) / size;    							if (Advanced)  							{  								if (position.Z < bottom)  								{  									ratio = 0;  								}  								else if (position.Z > top)  								{  									ratio = 1;  								}  								else  								{  									ratio = (position.Z - bottom) / size;  									ratio = Easing.Specify(EasingType' EasingOption' ratio);  								}  							}    							var angleToRotate = ratio * Angle / 360.0 * MathHelper.Tau;    							if (!TwistCw)  							{  								angleToRotate = -angleToRotate;  							}    							var positionXy = new Vector2(position) - rotationCenter;  							positionXy.Rotate(angleToRotate);  							positionXy += rotationCenter;  							transformedMesh.Vertices[i] = new Vector3Float(positionXy.X' positionXy.Y' position.Z);  						}    						// transform back into item local space  						transformedMesh.Transform(itemMatrix.Inverted);    						//transformedMesh.MergeVertices(.1);  						transformedMesh.CalculateNormals();    						var twistedChild = new Object3D()  						{  							Mesh = transformedMesh  						};  						twistedChild.CopyWorldProperties(sourceItem' SourceContainer' Object3DPropertyFlags.All);  						twistedChild.Visible = true;    						twistedChildren.Add(twistedChild);  					}    					RemoveAllButSource();  					this.SourceContainer.Visible = false;    					this.Children.Modify((list) =>  					{  						list.AddRange(twistedChildren);  					});    					rebuildLocks.Dispose();    					if (valuesChanged)  					{  						Invalidate(InvalidateType.DisplayValues);  					}    					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,GetBoundingPolygon,The following statement contains a magic number: min.X = Math.Min(point.X - 10' min.X);
Magic Number,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,GetBoundingPolygon,The following statement contains a magic number: min.Y = Math.Min(point.Y - 10' min.Y);
Magic Number,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,GetBoundingPolygon,The following statement contains a magic number: max.X = Math.Max(point.X + 10' max.X);
Magic Number,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,GetBoundingPolygon,The following statement contains a magic number: max.Y = Math.Max(point.Y + 10' max.Y);
Magic Number,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,GetBoundingCircle,The following statement contains a magic number: IntPoint center = (max - min) / 2 + min;
Magic Number,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,GetBoundingCircle,The following statement contains a magic number: int numPoints = 100;
Magic Number,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,GetBoundingCircle,The following statement contains a magic number: double angle = i / 100.0 * Math.PI * 2.0;
Magic Number,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,GetBoundingCircle,The following statement contains a magic number: double angle = i / 100.0 * Math.PI * 2.0;
Magic Number,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,GenerateBase,The following statement contains a magic number: basePolygons = ClipperLib.Clipper.CleanPolygons(basePolygons' 10);
Magic Number,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,GenerateBase,The following statement contains a magic number: polygonShape != null  				&& polygonShape.Select(p => p.Count).Sum() > 3
Magic Number,MatterHackers.MatterControl.DesignTools,ConeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\ConeObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 360' ref changed);
Magic Number,MatterHackers.MatterControl.DesignTools,ConeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\ConeObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 360' ref changed);
Magic Number,MatterHackers.MatterControl.DesignTools,ConeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\ConeObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(Diameter / 2' 0);
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Create,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.X:  					item.Matrix = Matrix4X4.CreateRotationY(MathHelper.Tau / 4);  					break;  				case Alignment.Y:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 4);  					break;  				case Alignment.Z:  					// This is the natural case (how it was modeled)  					break;  				case Alignment.negX:  					item.Matrix = Matrix4X4.CreateRotationY(-MathHelper.Tau / 4);  					break;  				case Alignment.negY:  					item.Matrix = Matrix4X4.CreateRotationX(-MathHelper.Tau / 4);  					break;  				case Alignment.negZ:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 2);  					break;  			}
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Create,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.X:  					item.Matrix = Matrix4X4.CreateRotationY(MathHelper.Tau / 4);  					break;  				case Alignment.Y:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 4);  					break;  				case Alignment.Z:  					// This is the natural case (how it was modeled)  					break;  				case Alignment.negX:  					item.Matrix = Matrix4X4.CreateRotationY(-MathHelper.Tau / 4);  					break;  				case Alignment.negY:  					item.Matrix = Matrix4X4.CreateRotationX(-MathHelper.Tau / 4);  					break;  				case Alignment.negZ:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 2);  					break;  			}
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Create,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.X:  					item.Matrix = Matrix4X4.CreateRotationY(MathHelper.Tau / 4);  					break;  				case Alignment.Y:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 4);  					break;  				case Alignment.Z:  					// This is the natural case (how it was modeled)  					break;  				case Alignment.negX:  					item.Matrix = Matrix4X4.CreateRotationY(-MathHelper.Tau / 4);  					break;  				case Alignment.negY:  					item.Matrix = Matrix4X4.CreateRotationX(-MathHelper.Tau / 4);  					break;  				case Alignment.negZ:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 2);  					break;  			}
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Create,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.X:  					item.Matrix = Matrix4X4.CreateRotationY(MathHelper.Tau / 4);  					break;  				case Alignment.Y:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 4);  					break;  				case Alignment.Z:  					// This is the natural case (how it was modeled)  					break;  				case Alignment.negX:  					item.Matrix = Matrix4X4.CreateRotationY(-MathHelper.Tau / 4);  					break;  				case Alignment.negY:  					item.Matrix = Matrix4X4.CreateRotationX(-MathHelper.Tau / 4);  					break;  				case Alignment.negZ:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 2);  					break;  			}
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Create,The following statement contains a magic number: switch (alignment)  			{  				case Alignment.X:  					item.Matrix = Matrix4X4.CreateRotationY(MathHelper.Tau / 4);  					break;  				case Alignment.Y:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 4);  					break;  				case Alignment.Z:  					// This is the natural case (how it was modeled)  					break;  				case Alignment.negX:  					item.Matrix = Matrix4X4.CreateRotationY(-MathHelper.Tau / 4);  					break;  				case Alignment.negY:  					item.Matrix = Matrix4X4.CreateRotationX(-MathHelper.Tau / 4);  					break;  				case Alignment.negZ:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 2);  					break;  			}
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Rebuild,The following statement contains a magic number: Height = Math.Max(Height' .001);
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Rebuild,The following statement contains a magic number: Diameter = Math.Max(Diameter' .1);
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Rebuild,The following statement contains a magic number: path.MoveTo(0' -Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(Diameter / 2' -Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(Diameter / 2' -Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(Diameter / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(Diameter / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(0' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfCylinderObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 180' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfCylinderObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 180' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfCylinderObject3D.cs,Rebuild,The following statement contains a magic number: path.MoveTo(Width / 2' 0);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfCylinderObject3D.cs,Rebuild,The following statement contains a magic number: var angle = MathHelper.Tau * i / 2 / (Sides - 1);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfCylinderObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(Math.Cos(angle) * Width / 2' Math.Sin(angle) * Width / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfCylinderObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(Math.Cos(angle) * Width / 2' Math.Sin(angle) * Width / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfCylinderObject3D.cs,Rebuild,The following statement contains a magic number: mesh.Transform(Matrix4X4.CreateRotationX(MathHelper.Tau / 4));
Magic Number,MatterHackers.MatterControl.DesignTools,HalfSphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfSphereObject3D.cs,Rebuild,The following statement contains a magic number: LatitudeSides = agg_basics.Clamp(LatitudeSides' 3' 180' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfSphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfSphereObject3D.cs,Rebuild,The following statement contains a magic number: LatitudeSides = agg_basics.Clamp(LatitudeSides' 3' 180' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfSphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfSphereObject3D.cs,Rebuild,The following statement contains a magic number: LongitudeSides = agg_basics.Clamp(LongitudeSides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfSphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfSphereObject3D.cs,Rebuild,The following statement contains a magic number: LongitudeSides = agg_basics.Clamp(LongitudeSides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfSphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfSphereObject3D.cs,Rebuild,The following statement contains a magic number: var radius = Diameter / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,HalfSphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfSphereObject3D.cs,Rebuild,The following statement contains a magic number: var angleDelta = MathHelper.Tau / 4 / LatitudeSides;
Magic Number,MatterHackers.MatterControl.DesignTools,HalfWedgeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfWedgeObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(Width / 2' Height);
Magic Number,MatterHackers.MatterControl.DesignTools,HalfWedgeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\HalfWedgeObject3D.cs,Rebuild,The following statement contains a magic number: mesh.Transform(Matrix4X4.CreateRotationX(MathHelper.Tau / 4));
Magic Number,MatterHackers.MatterControl.DesignTools,ImageObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\ImageObject3D.cs,LoadImage,The following statement contains a magic number: resetEvent.WaitOne(30 * 1000);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\ImageObject3D.cs,LoadImage,The following statement contains a magic number: resetEvent.WaitOne(30 * 1000);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\ImageObject3D.cs,InitMesh,The following statement contains a magic number: Mesh textureMesh = PlatonicSolids.CreateCube(width' height' 0.2);
Magic Number,MatterHackers.MatterControl.DesignTools,PyramidObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\PyramidObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(Math.Sqrt(2)' 0);
Magic Number,MatterHackers.MatterControl.DesignTools,PyramidObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\PyramidObject3D.cs,Rebuild,The following statement contains a magic number: var mesh = VertexSourceToMesh.Revolve(path' 4);
Magic Number,MatterHackers.MatterControl.DesignTools,PyramidObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\PyramidObject3D.cs,Rebuild,The following statement contains a magic number: mesh.Transform(Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(45)) * Matrix4X4.CreateScale(Width / 2' Depth / 2' 1));
Magic Number,MatterHackers.MatterControl.DesignTools,PyramidObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\PyramidObject3D.cs,Rebuild,The following statement contains a magic number: mesh.Transform(Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(45)) * Matrix4X4.CreateScale(Width / 2' Depth / 2' 1));
Magic Number,MatterHackers.MatterControl.DesignTools,PyramidObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\PyramidObject3D.cs,Rebuild,The following statement contains a magic number: mesh.Transform(Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(45)) * Matrix4X4.CreateScale(Width / 2' Depth / 2' 1));
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: InnerDiameter = agg_basics.Clamp(InnerDiameter' 0' OuterDiameter - .1' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: endingAngle = 360;
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: var innerDiameter = Math.Min(OuterDiameter - .1' InnerDiameter);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: path.MoveTo(OuterDiameter / 2' -Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: path.MoveTo(OuterDiameter / 2' -Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(OuterDiameter / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(OuterDiameter / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(innerDiameter / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(innerDiameter / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(innerDiameter / 2' -Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(innerDiameter / 2' -Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(OuterDiameter / 2' -Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,RingObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\RingObject3D.cs,Rebuild,The following statement contains a magic number: path.LineTo(OuterDiameter / 2' -Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,SphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\SphereObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,SphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\SphereObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,SphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\SphereObject3D.cs,Rebuild,The following statement contains a magic number: LatitudeSides = agg_basics.Clamp(LatitudeSides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,SphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\SphereObject3D.cs,Rebuild,The following statement contains a magic number: LatitudeSides = agg_basics.Clamp(LatitudeSides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,SphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\SphereObject3D.cs,Rebuild,The following statement contains a magic number: endingAngle = 360;
Magic Number,MatterHackers.MatterControl.DesignTools,SphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\SphereObject3D.cs,Rebuild,The following statement contains a magic number: var angleDelta = MathHelper.Tau / 2 / latitudeSides;
Magic Number,MatterHackers.MatterControl.DesignTools,SphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\SphereObject3D.cs,Rebuild,The following statement contains a magic number: var angle = -MathHelper.Tau / 4;
Magic Number,MatterHackers.MatterControl.DesignTools,SphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\SphereObject3D.cs,Rebuild,The following statement contains a magic number: var radius = Diameter / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,SphereObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\SphereObject3D.cs,Rebuild,The following statement contains a magic number: var steps = Math.Max(1' (int)(Sides * MathHelper.Tau / Math.Abs(MathHelper.GetDeltaAngle(startAngle' endAngle)) + .5));
Magic Number,MatterHackers.MatterControl.DesignTools,TextObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TextObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Generating Text Meshes".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					using (new CenterAndHeightMaintainer(this))  					{  						this.Children.Modify(list =>  						{  							list.Clear();    							var offest = 0.0;  							double pointsToMm = 0.352778;    							foreach (var letter in this.NameToWrite.ToCharArray())  							{  								var letterPrinter = new TypeFacePrinter(letter.ToString()' new StyledTypeFace(ApplicationController.GetTypeFace(this.Font)' this.PointSize))  								{  									ResolutionScale = 10  								};  								var scaledLetterPrinter = new VertexSourceApplyTransform(letterPrinter' Affine.NewScaling(pointsToMm));    								list.Add(new Object3D()  								{  									Mesh = VertexSourceToMesh.Extrude(scaledLetterPrinter' this.Height)'  									Matrix = Matrix4X4.CreateTranslation(offest' 0' 0)'  									Name = letter.ToString()  								});    								offest += letterPrinter.GetSize(letter.ToString()).X * pointsToMm;  							}  						});  					}    					rebuildLock.Dispose();  					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));  					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,TextObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TextObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Generating Text Meshes".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					using (new CenterAndHeightMaintainer(this))  					{  						this.Children.Modify(list =>  						{  							list.Clear();    							var offest = 0.0;  							double pointsToMm = 0.352778;    							foreach (var letter in this.NameToWrite.ToCharArray())  							{  								var letterPrinter = new TypeFacePrinter(letter.ToString()' new StyledTypeFace(ApplicationController.GetTypeFace(this.Font)' this.PointSize))  								{  									ResolutionScale = 10  								};  								var scaledLetterPrinter = new VertexSourceApplyTransform(letterPrinter' Affine.NewScaling(pointsToMm));    								list.Add(new Object3D()  								{  									Mesh = VertexSourceToMesh.Extrude(scaledLetterPrinter' this.Height)'  									Matrix = Matrix4X4.CreateTranslation(offest' 0' 0)'  									Name = letter.ToString()  								});    								offest += letterPrinter.GetSize(letter.ToString()).X * pointsToMm;  							}  						});  					}    					rebuildLock.Dispose();  					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));  					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools,TextPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TextPathObject3D.cs,Rebuild,The following statement contains a magic number: double pointsToMm = 0.352778;
Magic Number,MatterHackers.MatterControl.DesignTools,TextPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TextPathObject3D.cs,Rebuild,The following statement contains a magic number: var printer = new TypeFacePrinter(Text' new StyledTypeFace(ApplicationController.GetTypeFace(Font)' PointSize))  				{  					ResolutionScale = 10  				};
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: InnerDiameter = agg_basics.Clamp(InnerDiameter' 0' OuterDiameter - .1' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: Sides = agg_basics.Clamp(Sides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: RingSides = agg_basics.Clamp(RingSides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: RingSides = agg_basics.Clamp(RingSides' 3' 360' ref valuesChanged);
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: ringSides = Math.Max(3' (int)(Sides / 2));
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: ringSides = Math.Max(3' (int)(Sides / 2));
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: endingAngle = 360;
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: var innerDiameter = Math.Min(OuterDiameter - .1' InnerDiameter);
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: var poleRadius = (OuterDiameter / 2 - innerDiameter / 2) / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: var poleRadius = (OuterDiameter / 2 - innerDiameter / 2) / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: var poleRadius = (OuterDiameter / 2 - innerDiameter / 2) / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,TorusObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TorusObject3D.cs,Rebuild,The following statement contains a magic number: var toroidRadius = innerDiameter / 2 + poleRadius;
Magic Number,MatterHackers.MatterControl.DesignTools,WedgeObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\WedgeObject3D.cs,Rebuild,The following statement contains a magic number: Mesh.Transform(Matrix4X4.CreateRotationX(MathHelper.Tau / 4));
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,Rebuild,The following statement contains a magic number: tabScale = 3;
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,Rebuild,The following statement contains a magic number: TabWidth > 10
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube()'  						Matrix = Matrix4X4.CreateTranslation(-1 / 2.0' 1 / 2.0' 1 / 2.0) * Matrix4X4.CreateScale(TabDepth' TabDepth' BaseHeight)'  						Color = Color.LightBlue  					});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube()'  						Matrix = Matrix4X4.CreateTranslation(-1 / 2.0' 1 / 2.0' 1 / 2.0) * Matrix4X4.CreateScale(TabDepth' TabDepth' BaseHeight)'  						Color = Color.LightBlue  					});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube()'  						Matrix = Matrix4X4.CreateTranslation(-1 / 2.0' 1 / 2.0' 1 / 2.0) * Matrix4X4.CreateScale(TabDepth' TabDepth' BaseHeight)'  						Color = Color.LightBlue  					});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  						{  							Mesh = PlatonicSolids.CreateCube()'  							Matrix = Matrix4X4.CreateTranslation(1 / 2.0' 1 / 2.0' 1 / 2.0)  								* Matrix4X4.CreateScale(WipeTowerSize' WipeTowerSize' BaseHeight + Layers * ChangingHeight)  								* Matrix4X4.CreateTranslation(TabDepth * 1' TabDepth * 2' 0)'  							OutputType = PrintOutputTypes.WipeTower  						});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  						{  							Mesh = PlatonicSolids.CreateCube()'  							Matrix = Matrix4X4.CreateTranslation(1 / 2.0' 1 / 2.0' 1 / 2.0)  								* Matrix4X4.CreateScale(WipeTowerSize' WipeTowerSize' BaseHeight + Layers * ChangingHeight)  								* Matrix4X4.CreateTranslation(TabDepth * 1' TabDepth * 2' 0)'  							OutputType = PrintOutputTypes.WipeTower  						});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  						{  							Mesh = PlatonicSolids.CreateCube()'  							Matrix = Matrix4X4.CreateTranslation(1 / 2.0' 1 / 2.0' 1 / 2.0)  								* Matrix4X4.CreateScale(WipeTowerSize' WipeTowerSize' BaseHeight + Layers * ChangingHeight)  								* Matrix4X4.CreateTranslation(TabDepth * 1' TabDepth * 2' 0)'  							OutputType = PrintOutputTypes.WipeTower  						});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  						{  							Mesh = PlatonicSolids.CreateCube()'  							Matrix = Matrix4X4.CreateTranslation(1 / 2.0' 1 / 2.0' 1 / 2.0)  								* Matrix4X4.CreateScale(WipeTowerSize' WipeTowerSize' BaseHeight + Layers * ChangingHeight)  								* Matrix4X4.CreateTranslation(TabDepth * 1' TabDepth * 2' 0)'  							OutputType = PrintOutputTypes.WipeTower  						});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: var sampleCount = 7;
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: var baseWidth = (2 * spaceBetween) + ((sampleCount - 1) * spaceBetween) + (sampleCount * TabWidth) + (2 * spaceBetween);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: var baseWidth = (2 * spaceBetween) + ((sampleCount - 1) * spaceBetween) + (sampleCount * TabWidth) + (2 * spaceBetween);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: var origin = new Vector2(baseWidth' TabDepth / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: var delta = new Vector2(0' -TabDepth / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: var count = 15;
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: delta.Rotate(MathHelper.Tau / 2 / count);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: var position = new Vector2(TabWidth / 2 + 2 * spaceBetween' TabDepth / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: var position = new Vector2(TabWidth / 2 + 2 * spaceBetween' TabDepth / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: var position = new Vector2(TabWidth / 2 + 2 * spaceBetween' TabDepth / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: var offsetMultiple = i - 3;
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: var calibrationMaterial = (j % 2 == 0);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: item.Matrix = Matrix4X4.CreateScale(TabWidth' TabDepth' ChangingHeight) * Matrix4X4.CreateTranslation(position.X' position.Y + Offset * offsetMultiple' BaseHeight + .5 * ChangingHeight + j * ChangingHeight);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationFaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationFaceObject3D.cs,GetTab,The following statement contains a magic number: content.Matrix = Matrix4X4.CreateRotationZ(MathHelper.Tau / 4) * Matrix4X4.CreateTranslation(0' TabDepth' 0);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Rebuild,The following statement contains a magic number: tabScale = 3;
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Rebuild,The following statement contains a magic number: TabWidth > 10
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube()'  						Matrix = Matrix4X4.CreateTranslation(-1 / 2.0' 1 / 2.0' 1 / 2.0) * Matrix4X4.CreateScale(TabDepth' TabDepth' ChangeHeight)'  						Color = Color.LightBlue  					});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube()'  						Matrix = Matrix4X4.CreateTranslation(-1 / 2.0' 1 / 2.0' 1 / 2.0) * Matrix4X4.CreateScale(TabDepth' TabDepth' ChangeHeight)'  						Color = Color.LightBlue  					});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube()'  						Matrix = Matrix4X4.CreateTranslation(-1 / 2.0' 1 / 2.0' 1 / 2.0) * Matrix4X4.CreateScale(TabDepth' TabDepth' ChangeHeight)'  						Color = Color.LightBlue  					});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  						{  							Mesh = PlatonicSolids.CreateCube()'  							Matrix = Matrix4X4.CreateTranslation(1 / 2.0' 1 / 2.0' 1 / 2.0)  								* Matrix4X4.CreateScale(WipeTowerSize' WipeTowerSize' ChangeHeight * 2)  								* Matrix4X4.CreateTranslation(TabDepth * 1' TabDepth * 2' 0)'  							OutputType = PrintOutputTypes.WipeTower  						});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  						{  							Mesh = PlatonicSolids.CreateCube()'  							Matrix = Matrix4X4.CreateTranslation(1 / 2.0' 1 / 2.0' 1 / 2.0)  								* Matrix4X4.CreateScale(WipeTowerSize' WipeTowerSize' ChangeHeight * 2)  								* Matrix4X4.CreateTranslation(TabDepth * 1' TabDepth * 2' 0)'  							OutputType = PrintOutputTypes.WipeTower  						});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  						{  							Mesh = PlatonicSolids.CreateCube()'  							Matrix = Matrix4X4.CreateTranslation(1 / 2.0' 1 / 2.0' 1 / 2.0)  								* Matrix4X4.CreateScale(WipeTowerSize' WipeTowerSize' ChangeHeight * 2)  								* Matrix4X4.CreateTranslation(TabDepth * 1' TabDepth * 2' 0)'  							OutputType = PrintOutputTypes.WipeTower  						});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  						{  							Mesh = PlatonicSolids.CreateCube()'  							Matrix = Matrix4X4.CreateTranslation(1 / 2.0' 1 / 2.0' 1 / 2.0)  								* Matrix4X4.CreateScale(WipeTowerSize' WipeTowerSize' ChangeHeight * 2)  								* Matrix4X4.CreateTranslation(TabDepth * 1' TabDepth * 2' 0)'  							OutputType = PrintOutputTypes.WipeTower  						});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Add(new Object3D()  						{  							Mesh = PlatonicSolids.CreateCube()'  							Matrix = Matrix4X4.CreateTranslation(1 / 2.0' 1 / 2.0' 1 / 2.0)  								* Matrix4X4.CreateScale(WipeTowerSize' WipeTowerSize' ChangeHeight * 2)  								* Matrix4X4.CreateTranslation(TabDepth * 1' TabDepth * 2' 0)'  							OutputType = PrintOutputTypes.WipeTower  						});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: var sampleCount = 7;
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: var baseWidth = (2 * spaceBetween) + ((sampleCount - 1) * spaceBetween) + (sampleCount * TabWidth) + (2 * spaceBetween);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: var baseWidth = (2 * spaceBetween) + ((sampleCount - 1) * spaceBetween) + (sampleCount * TabWidth) + (2 * spaceBetween);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: var origin = new Vector2(baseWidth' TabDepth / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: var delta = new Vector2(0' -TabDepth / 2);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: var count = 15;
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: delta.Rotate(MathHelper.Tau / 2 / count);
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: var position = new Vector2(TabWidth / 2 + 2 * spaceBetween' TabDepth / 2 - Offset * ((sampleCount - 1) / 2));
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: var position = new Vector2(TabWidth / 2 + 2 * spaceBetween' TabDepth / 2 - Offset * ((sampleCount - 1) / 2));
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: var position = new Vector2(TabWidth / 2 + 2 * spaceBetween' TabDepth / 2 - Offset * ((sampleCount - 1) / 2));
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: var position = new Vector2(TabWidth / 2 + 2 * spaceBetween' TabDepth / 2 - Offset * ((sampleCount - 1) / 2));
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: content.Children.Add(new Object3D()  				{  					Mesh = cube'  					Color = Color.Yellow'  					Matrix = Matrix4X4.CreateScale(TabWidth' TabDepth' ChangeHeight)  						// translate by 1.5 as it is a centered cube (.5) plus the base (1) = 1.5  						* Matrix4X4.CreateTranslation(position.X' position.Y' ChangeHeight * 1.5)'  					MaterialIndex = CalibrationMaterialIndex  				});
Magic Number,MatterHackers.MatterControl.DesignTools,XyCalibrationTabObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\XyCalibrationTabObject3D.cs,GetTab,The following statement contains a magic number: content.Matrix = Matrix4X4.CreateRotationZ(MathHelper.Tau / 4) * Matrix4X4.CreateTranslation(0' TabDepth' 0);
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,Create,The following statement contains a magic number: var updateButton = new TextButton("Update".Localize()' theme)  					{  						Margin = 5'  						BackgroundColor = theme.MinimalShade'  						HAnchor = HAnchor.Right'  						VAnchor = VAnchor.Absolute  					};
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreateSettingsColumn,The following statement contains a magic number: var column = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(9' 5' 5' 5)' // Use hard-coded 9 pixel left margin to match SettingsRow  				ToolTipText = toolTipText  			};
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreateSettingsColumn,The following statement contains a magic number: var column = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(9' 5' 5' 5)' // Use hard-coded 9 pixel left margin to match SettingsRow  				ToolTipText = toolTipText  			};
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreateSettingsColumn,The following statement contains a magic number: var column = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(9' 5' 5' 5)' // Use hard-coded 9 pixel left margin to match SettingsRow  				ToolTipText = toolTipText  			};
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreateSettingsColumn,The following statement contains a magic number: var column = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(9' 5' 5' 5)' // Use hard-coded 9 pixel left margin to match SettingsRow  				ToolTipText = toolTipText  			};
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreateSourceChildSelector,The following statement contains a magic number: sourceChildren.Count == 2
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,CreateSelector,The following statement contains a magic number: children.Count == 2
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,GetUnlockRow,The following statement contains a magic number: var detailsLink = new TextIconButton("Unlock".Localize()' AggContext.StaticData.LoadIcon("locked.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Margin = 5'  				ToolTipText = "Visit MatterHackers.com to Purchase".Localize()  			};
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,GetUnlockRow,The following statement contains a magic number: var detailsLink = new TextIconButton("Unlock".Localize()' AggContext.StaticData.LoadIcon("locked.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Margin = 5'  				ToolTipText = "Visit MatterHackers.com to Purchase".Localize()  			};
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,GetUnlockRow,The following statement contains a magic number: var detailsLink = new TextIconButton("Unlock".Localize()' AggContext.StaticData.LoadIcon("locked.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Margin = 5'  				ToolTipText = "Visit MatterHackers.com to Purchase".Localize()  			};
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,AddWebPageLinkIfRequired,The following statement contains a magic number: var detailsLink = new TextIconButton(unlockLink.Name.Localize()' AggContext.StaticData.LoadIcon("internet.png"' 16' 16' theme.InvertIcons)' theme)  				{  					BackgroundColor = theme.MinimalShade'  					ToolTipText = unlockLink.Url'  				};
Magic Number,MatterHackers.MatterControl.DesignTools,PublicPropertyEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\PublicPropertyEditor.cs,AddWebPageLinkIfRequired,The following statement contains a magic number: var detailsLink = new TextIconButton(unlockLink.Name.Localize()' AggContext.StaticData.LoadIcon("internet.png"' 16' 16' theme.InvertIcons)' theme)  				{  					BackgroundColor = theme.MinimalShade'  					ToolTipText = unlockLink.Url'  				};
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,RequiresSupport,The following statement contains a magic number: item.Mesh.Vertices[vertex].Transform(matrix).Z > .01
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,AddSupportColumn,The following statement contains a magic number: topZ - bottomZ < .01
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,AddSupportColumn,The following statement contains a magic number: var reduceAmount = ColumnReduceAmount * .99;
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,AddSupportColumn,The following statement contains a magic number: var support = new GeneratedSupportObject3D()  			{  				Mesh = PlatonicSolids.CreateCube(1' 1' 1)'  				Matrix = Matrix4X4.CreateScale(PillarSize - reduceAmount' PillarSize - reduceAmount' topZ - bottomZ)  					* Matrix4X4.CreateTranslation(gridX' gridY' bottomZ + (topZ - bottomZ) / 2)'  			};
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,AddSupportColumns,The following statement contains a magic number: var halfPillar = PillarSize / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,AddSupportColumns,The following statement contains a magic number: AddSupportColumn(supportColumnsToAdd' xPos' yPos' 0' supportColumnData[0].end + .01);
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,AddSupportFaces,The following statement contains a magic number: supportFaces.Add(vc' vc + 1' vc + 2' face0Normal);
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,DetectRequiredSupportByTracing,The following statement contains a magic number: var offset = new Vector3(.000013' .00027' 0);
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,DetectRequiredSupportByTracing,The following statement contains a magic number: var offset = new Vector3(.000013' .00027' 0);
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,DetectRequiredSupportByTracing,The following statement contains a magic number: var halfPillar = PillarSize / 2;
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,DetectRequiredSupportByTracing,The following statement contains a magic number: upRay = new Ray(new Vector3(xPos' yPos' upHit.HitPosition.Z + .001) + offset' Vector3.UnitZ' intersectionType: IntersectionType.FrontFace);
Magic Number,MatterHackers.MatterControl.DesignTools,SupportGenerator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,DetectRequiredSupportByTracing,The following statement contains a magic number: upRay = new Ray(new Vector3(xPos' yPos' upHit.HitPosition.Z + .001) + offset' Vector3.UnitZ' intersectionType: IntersectionType.BackFace);
Magic Number,MatterHackers.MatterControl.DesignTools,HitPlane,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,ToString,The following statement contains a magic number: return $"Z={Z:0.###} {(Bottom(45) ? "Bottom" : "Top")}";
Magic Number,MatterHackers.MatterControl.DesignTools,SupportColumn,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,SupportColumn,The following statement contains a magic number: i += 2;
Magic Number,MatterHackers.MatterControl.DesignTools,SupportColumn,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,SupportColumn,The following statement contains a magic number: i < hitPlanes.Count / 2 * 2
Magic Number,MatterHackers.MatterControl.DesignTools,SupportColumn,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,SupportColumn,The following statement contains a magic number: i < hitPlanes.Count / 2 * 2
Magic Number,MatterHackers.MatterControl.DesignTools,HitPlanes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,Sort,The following statement contains a magic number: this.Sort((a' b) =>  				{  					// one is a top and the other is a bottom' sort by tops first  					if (((a.Top(maxOverHangAngle) && b.Bottom(maxOverHangAngle)) || (a.Bottom(maxOverHangAngle) && b.Top(maxOverHangAngle)))  						&& a.Z < b.Z + MinimumSupportHeight / 2  						&& a.Z > b.Z - MinimumSupportHeight / 2)  					{  						return a.Top(MinimumSupportHeight) ? 1 : -1;  					}    					return a.Z.CompareTo(b.Z);  				});
Magic Number,MatterHackers.MatterControl.DesignTools,HitPlanes,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\SupportGenerator.cs,Sort,The following statement contains a magic number: this.Sort((a' b) =>  				{  					// one is a top and the other is a bottom' sort by tops first  					if (((a.Top(maxOverHangAngle) && b.Bottom(maxOverHangAngle)) || (a.Bottom(maxOverHangAngle) && b.Top(maxOverHangAngle)))  						&& a.Z < b.Z + MinimumSupportHeight / 2  						&& a.Z > b.Z - MinimumSupportHeight / 2)  					{  						return a.Top(MinimumSupportHeight) ? 1 : -1;  					}    					return a.Z.CompareTo(b.Z);  				});
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,Create,The following statement contains a magic number: imageSection.ContentPanel.AddChild(thumbnailWidget = new ImageWidget(thumbnailImage)  			{  				Margin = new BorderDouble(bottom: 5)'  				HAnchor = HAnchor.Center  			});
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The following statement contains a magic number: image = new ImageBuffer(185' 185).SetPreMultiply();
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The following statement contains a magic number: image = new ImageBuffer(185' 185).SetPreMultiply();
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The following statement contains a magic number: graphics2D.FillRectangle(0' 0' 185' 185' theme.MinimalShade);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The following statement contains a magic number: graphics2D.FillRectangle(0' 0' 185' 185' theme.MinimalShade);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The following statement contains a magic number: graphics2D.Rectangle(0' 0' 185' 185' theme.SlightShade);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The following statement contains a magic number: graphics2D.Rectangle(0' 0' 185' 185' theme.SlightShade);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The following statement contains a magic number: graphics2D.DrawString("Error Loading Image".Localize() + "..."' 10' 185 / 2' baseline: Agg.Font.Baseline.BoundsCenter' color: Color.Red' pointSize: theme.DefaultFontSize' drawFromHintedCach: true);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The following statement contains a magic number: graphics2D.DrawString("Error Loading Image".Localize() + "..."' 10' 185 / 2' baseline: Agg.Font.Baseline.BoundsCenter' color: Color.Red' pointSize: theme.DefaultFontSize' drawFromHintedCach: true);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The following statement contains a magic number: graphics2D.DrawString("Error Loading Image".Localize() + "..."' 10' 185 / 2' baseline: Agg.Font.Baseline.BoundsCenter' color: Color.Red' pointSize: theme.DefaultFontSize' drawFromHintedCach: true);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The following statement contains a magic number: return (image.Height <= 185) ? image : ScaleThumbnailImage(185' image);
Magic Number,MatterHackers.MatterControl.DesignTools,ImageEditor,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\ImageEditor.cs,SetImage,The following statement contains a magic number: return (image.Height <= 185) ? image : ScaleThumbnailImage(185' image);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleGrade2.cs,ConvertWord,The following statement contains a magic number: string tempMiddleCharacters = converted.Substring(1' converted.Length - 2);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleGrade2.cs,ConvertWord,The following statement contains a magic number: converted.Length > 2
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleGrade2.cs,ConvertMappingStringToList,The following statement contains a magic number: keyConversionPair.Length == 2 && keyConversionPair[0] != null && keyConversionPair[0].Length > 0 && keyConversionPair[1] != null && keyConversionPair[1].Length > 0
Magic Number,MatterHackers.MatterControl.Library,OpenSCADBuilder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\OpenSCAD\OpenSCADBuilder.cs,LoadVariablesFromAsset,The following statement contains a magic number: dictionary[field.Key] = match.Groups[2].Value;
Magic Number,MatterHackers.MatterControl.Library,OpenSCADBuilder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\OpenSCAD\OpenSCADBuilder.cs,Create,The following statement contains a magic number: var mainContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Absolute'  				Width = 225  			};
Magic Number,MatterHackers.MatterControl.Library,OpenSCADBuilder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\OpenSCAD\OpenSCADBuilder.cs,BuildGeneratorUI,The following statement contains a magic number: var editor = new MHNumberEdit(val' theme' pixelWidth: 50 * GuiWidget.DeviceScale' allowDecimals: true' increment: .05)  						{  							SelectAllOnFocus = true'  							VAnchor = VAnchor.Center  						};
Magic Number,MatterHackers.MatterControl.Library,OpenSCADBuilder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\OpenSCAD\OpenSCADBuilder.cs,BuildGeneratorUI,The following statement contains a magic number: var editor = new MHNumberEdit(val' theme' pixelWidth: 50 * GuiWidget.DeviceScale' allowDecimals: true' increment: .05)  						{  							SelectAllOnFocus = true'  							VAnchor = VAnchor.Center  						};
Magic Number,MatterHackers.MatterControl.Library,OpenSCADBuilder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\OpenSCAD\OpenSCADBuilder.cs,CreateSettingsRow,The following statement contains a magic number: var rowContainer = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(5)  			};
Magic Number,MatterHackers.MatterControl.Library,OpenSCADBuilder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\OpenSCAD\OpenSCADBuilder.cs,CreateSettingsRow,The following statement contains a magic number: var label = new TextWidget(labelText + ":"' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  			{  				Margin = new BorderDouble(0' 0' 3' 0)'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.Library,DynamicContainerLink,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\DynamicContainerLink.cs,GetThumbnail,The following statement contains a magic number: width < 24 && height < 24
Magic Number,MatterHackers.MatterControl.Library,DynamicContainerLink,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\DynamicContainerLink.cs,GetThumbnail,The following statement contains a magic number: width < 24 && height < 24
Magic Number,MatterHackers.MatterControl.Library,FileSystemContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\FileSystem\FileSystemContainer.cs,DirectoryContentsChanged,The following statement contains a magic number: waitingForRefresh = UiThread.SetInterval(WaitToRefresh' .5);
Magic Number,MatterHackers.MatterControl.Library,FileSystemContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\FileSystem\FileSystemContainer.cs,WaitToRefresh,The following statement contains a magic number: UiThread.CurrentTimerMs > lastTimeContentsChanged + 500  				&& waitingForRefresh != null
Magic Number,MatterHackers.MatterControl.Library,ColorRange,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\GeneratorItem.cs,ColorRange,The following statement contains a magic number: TotalColors = 12;
Magic Number,MatterHackers.MatterControl.Library,LibraryConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryConfig.cs,LoadItemThumbnail,The following statement contains a magic number: thumbHeight < 24 && thumbWidth < 24
Magic Number,MatterHackers.MatterControl.Library,LibraryConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryConfig.cs,LoadItemThumbnail,The following statement contains a magic number: thumbHeight < 24 && thumbWidth < 24
Magic Number,MatterHackers.MatterControl.Library,LibraryProviderHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryProviderHelpers.cs,RenderCentered,The following statement contains a magic number: graphics2D.Render(  				imageBuffer'  				width == targetWidth ? 0 : targetWidth / 2 - width / 2'  				height == targetHeight? 0 : targetHeight / 2 - height / 2'  				width'  				height);
Magic Number,MatterHackers.MatterControl.Library,LibraryProviderHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryProviderHelpers.cs,RenderCentered,The following statement contains a magic number: graphics2D.Render(  				imageBuffer'  				width == targetWidth ? 0 : targetWidth / 2 - width / 2'  				height == targetHeight? 0 : targetHeight / 2 - height / 2'  				width'  				height);
Magic Number,MatterHackers.MatterControl.Library,LibraryProviderHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryProviderHelpers.cs,RenderCentered,The following statement contains a magic number: graphics2D.Render(  				imageBuffer'  				width == targetWidth ? 0 : targetWidth / 2 - width / 2'  				height == targetHeight? 0 : targetHeight / 2 - height / 2'  				width'  				height);
Magic Number,MatterHackers.MatterControl.Library,LibraryProviderHelpers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\LibraryProviderHelpers.cs,RenderCentered,The following statement contains a magic number: graphics2D.Render(  				imageBuffer'  				width == targetWidth ? 0 : targetWidth / 2 - width / 2'  				height == targetHeight? 0 : targetHeight / 2 - height / 2'  				width'  				height);
Magic Number,MatterHackers.MatterControl.Library,LibraryCollectionContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\LibraryCollectionContainer.cs,LibraryCollectionContainer,The following statement contains a magic number: this.ChildContainers.Add(  				new DynamicContainerLink(  					() => "Experimental".Localize()'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder_20x20.png"))'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder.png"))'  					() => new DynamicContainer()  					{  						Items = new List<ILibraryItem>()  						{  							new GeneratorItem(  								() => "Calibration Tab".Localize()'  								async () => await XyCalibrationTabObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Calibration Face".Localize()'  								async () => await XyCalibrationFaceObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Text2".Localize()'  								async () => await TextPathObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Path".Localize()'  								() =>  								{  									var storage = new VertexStorage();  									storage.MoveTo(5' 5);  									storage.LineTo(10' 5);  									storage.LineTo(7.5' 10);  									storage.ClosePolygon();    									var path = new PathObject3D()  									{  										VertexSource = storage  									};    									return Task.FromResult<IObject3D>(path);  								})  								{ DateCreated = new System.DateTime(index++) }'  						}  					}));
Magic Number,MatterHackers.MatterControl.Library,LibraryCollectionContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\LibraryCollectionContainer.cs,LibraryCollectionContainer,The following statement contains a magic number: this.ChildContainers.Add(  				new DynamicContainerLink(  					() => "Experimental".Localize()'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder_20x20.png"))'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder.png"))'  					() => new DynamicContainer()  					{  						Items = new List<ILibraryItem>()  						{  							new GeneratorItem(  								() => "Calibration Tab".Localize()'  								async () => await XyCalibrationTabObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Calibration Face".Localize()'  								async () => await XyCalibrationFaceObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Text2".Localize()'  								async () => await TextPathObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Path".Localize()'  								() =>  								{  									var storage = new VertexStorage();  									storage.MoveTo(5' 5);  									storage.LineTo(10' 5);  									storage.LineTo(7.5' 10);  									storage.ClosePolygon();    									var path = new PathObject3D()  									{  										VertexSource = storage  									};    									return Task.FromResult<IObject3D>(path);  								})  								{ DateCreated = new System.DateTime(index++) }'  						}  					}));
Magic Number,MatterHackers.MatterControl.Library,LibraryCollectionContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\LibraryCollectionContainer.cs,LibraryCollectionContainer,The following statement contains a magic number: this.ChildContainers.Add(  				new DynamicContainerLink(  					() => "Experimental".Localize()'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder_20x20.png"))'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder.png"))'  					() => new DynamicContainer()  					{  						Items = new List<ILibraryItem>()  						{  							new GeneratorItem(  								() => "Calibration Tab".Localize()'  								async () => await XyCalibrationTabObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Calibration Face".Localize()'  								async () => await XyCalibrationFaceObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Text2".Localize()'  								async () => await TextPathObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Path".Localize()'  								() =>  								{  									var storage = new VertexStorage();  									storage.MoveTo(5' 5);  									storage.LineTo(10' 5);  									storage.LineTo(7.5' 10);  									storage.ClosePolygon();    									var path = new PathObject3D()  									{  										VertexSource = storage  									};    									return Task.FromResult<IObject3D>(path);  								})  								{ DateCreated = new System.DateTime(index++) }'  						}  					}));
Magic Number,MatterHackers.MatterControl.Library,LibraryCollectionContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\LibraryCollectionContainer.cs,LibraryCollectionContainer,The following statement contains a magic number: this.ChildContainers.Add(  				new DynamicContainerLink(  					() => "Experimental".Localize()'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder_20x20.png"))'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder.png"))'  					() => new DynamicContainer()  					{  						Items = new List<ILibraryItem>()  						{  							new GeneratorItem(  								() => "Calibration Tab".Localize()'  								async () => await XyCalibrationTabObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Calibration Face".Localize()'  								async () => await XyCalibrationFaceObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Text2".Localize()'  								async () => await TextPathObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Path".Localize()'  								() =>  								{  									var storage = new VertexStorage();  									storage.MoveTo(5' 5);  									storage.LineTo(10' 5);  									storage.LineTo(7.5' 10);  									storage.ClosePolygon();    									var path = new PathObject3D()  									{  										VertexSource = storage  									};    									return Task.FromResult<IObject3D>(path);  								})  								{ DateCreated = new System.DateTime(index++) }'  						}  					}));
Magic Number,MatterHackers.MatterControl.Library,LibraryCollectionContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\LibraryCollectionContainer.cs,LibraryCollectionContainer,The following statement contains a magic number: this.ChildContainers.Add(  				new DynamicContainerLink(  					() => "Experimental".Localize()'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder_20x20.png"))'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder.png"))'  					() => new DynamicContainer()  					{  						Items = new List<ILibraryItem>()  						{  							new GeneratorItem(  								() => "Calibration Tab".Localize()'  								async () => await XyCalibrationTabObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Calibration Face".Localize()'  								async () => await XyCalibrationFaceObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Text2".Localize()'  								async () => await TextPathObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Path".Localize()'  								() =>  								{  									var storage = new VertexStorage();  									storage.MoveTo(5' 5);  									storage.LineTo(10' 5);  									storage.LineTo(7.5' 10);  									storage.ClosePolygon();    									var path = new PathObject3D()  									{  										VertexSource = storage  									};    									return Task.FromResult<IObject3D>(path);  								})  								{ DateCreated = new System.DateTime(index++) }'  						}  					}));
Magic Number,MatterHackers.MatterControl.Library,LibraryCollectionContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\LibraryCollectionContainer.cs,LibraryCollectionContainer,The following statement contains a magic number: this.ChildContainers.Add(  				new DynamicContainerLink(  					() => "Experimental".Localize()'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder_20x20.png"))'  					AggContext.StaticData.LoadIcon(Path.Combine("Library"' "folder.png"))'  					() => new DynamicContainer()  					{  						Items = new List<ILibraryItem>()  						{  							new GeneratorItem(  								() => "Calibration Tab".Localize()'  								async () => await XyCalibrationTabObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Calibration Face".Localize()'  								async () => await XyCalibrationFaceObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Text2".Localize()'  								async () => await TextPathObject3D.Create())  							{ DateCreated = new System.DateTime(index++) }'  							new GeneratorItem(  								() => "Path".Localize()'  								() =>  								{  									var storage = new VertexStorage();  									storage.MoveTo(5' 5);  									storage.LineTo(10' 5);  									storage.LineTo(7.5' 10);  									storage.ClosePolygon();    									var path = new PathObject3D()  									{  										VertexSource = storage  									};    									return Task.FromResult<IObject3D>(path);  								})  								{ DateCreated = new System.DateTime(index++) }'  						}  					}));
Magic Number,MatterHackers.MatterControl.Library,HistoryContainerBase,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\PlatingHistoryContainer.cs,Load,The following statement contains a magic number: Items = recentFiles.Where(f => f.Length > 215).Select(f => new FileSystemFileItem(f.FullName)).ToList<ILibraryItem>();
Magic Number,MatterHackers.MatterControl.Library,PrintHistoryContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\PrintHistoryContainer.cs,Load,The following statement contains a magic number: Items = PrintHistoryData.Instance.GetHistoryItems(25).Select(f => new PrintHistoryItem(f)).ToList<ILibraryItem>();
Magic Number,MatterHackers.MatterControl.Library,SDCardContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\SDCard\SDCardContainer.cs,Load,The following statement contains a magic number: autoResetEvent.WaitOne(40 * 1000);
Magic Number,MatterHackers.MatterControl.Library,SDCardContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\SDCard\SDCardContainer.cs,Load,The following statement contains a magic number: autoResetEvent.WaitOne(40 * 1000);
Magic Number,MatterHackers.MatterControl.Library,SDCardContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\SDCard\SDCardContainer.cs,GetThumbnail,The following statement contains a magic number: return Task.FromResult(  				AggContext.StaticData.LoadIcon(  					Path.Combine((width > 50 || height > 50) ? "icon_sd_card_115x115.png" : "icon_sd_card_50x50.png")'  					ApplicationController.Instance.Theme.InvertIcons));
Magic Number,MatterHackers.MatterControl.Library,SDCardContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\SDCard\SDCardContainer.cs,GetThumbnail,The following statement contains a magic number: return Task.FromResult(  				AggContext.StaticData.LoadIcon(  					Path.Combine((width > 50 || height > 50) ? "icon_sd_card_115x115.png" : "icon_sd_card_50x50.png")'  					ApplicationController.Instance.Theme.InvertIcons));
Magic Number,MatterHackers.MatterControl.Library,InsertionGroupObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\InsertionGroupObject3D.cs,InsertionGroupObject3D,The following statement contains a magic number: placeHolderMesh = PlatonicSolids.CreateCube(20' 20' 20);
Magic Number,MatterHackers.MatterControl.Library,InsertionGroupObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\InsertionGroupObject3D.cs,InsertionGroupObject3D,The following statement contains a magic number: placeHolderMesh = PlatonicSolids.CreateCube(20' 20' 20);
Magic Number,MatterHackers.MatterControl.Library,InsertionGroupObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\InsertionGroupObject3D.cs,InsertionGroupObject3D,The following statement contains a magic number: placeHolderMesh = PlatonicSolids.CreateCube(20' 20' 20);
Magic Number,MatterHackers.MatterControl.Library,InsertionGroupObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\InsertionGroupObject3D.cs,InsertionGroupObject3D,The following statement contains a magic number: placeHolderMesh.Translate(new Vector3(0' 0' 10));
Magic Number,MatterHackers.MatterControl.Library,InsertionGroupObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\InsertionGroupObject3D.cs,InsertionGroupObject3D,The following statement contains a magic number: this.LoadingItemsTask = Task.Run(async () =>  			{  				var offset = Matrix4X4.Identity;    				// Add the placeholder 'Loading...' object  				var placeholderItem = new Object3D()  				{  					Mesh = placeHolderMesh'  					Matrix = Matrix4X4.Identity'  					Parent = this  				};    				this.Children.Add(placeholderItem);    				// Filter to content file types only  				foreach (var item in items.Where(item => item.IsContentFileType()).ToList())  				{  					// Acquire  					var progressControl = new DragDropLoadProgress(view3DWidget' null' ApplicationController.Instance.Theme);    					// Position at accumulating offset  					placeholderItem.Matrix *= Matrix4X4.CreateTranslation(newItemOffset.X' (double)newItemOffset.Y' 0);  					placeholderItem.Visible = true;  					progressControl.TrackingObject = placeholderItem;    					var loadedItem = await item.CreateContent(progressControl.ProgressReporter);  					if (loadedItem != null)  					{  						var aabb = loadedItem.GetAxisAlignedBoundingBox();    						// lets move the cube to the center of the loaded thing  						placeholderItem.Matrix *= Matrix4X4.CreateTranslation(-10 + aabb.XSize / 2' 0' 0);    						placeholderItem.Visible = false;    						// Copy scale/rotation/translation from the source and Center  						loadedItem.Matrix = loadedItem.Matrix * Matrix4X4.CreateTranslation((double)-aabb.Center.X' (double)-aabb.Center.Y' (double)-aabb.MinXYZ.Z) * placeholderItem.Matrix;    						// check if the item has 0 height (it is probably an image)  						if (loadedItem.ZSize() == 0)  						{  							// raise it up a bit so it is not z fighting with the bed  							loadedItem.Matrix *= Matrix4X4.CreateTranslation(0' 0' .1);  						}    						loadedItem.Color = loadedItem.Color;    						// Set mesh path if tracking requested  						if (trackSourceFiles  							&& item is FileSystemFileItem fileItem  							&& item.IsMeshFileType())  						{  							loadedItem.MeshPath = fileItem.Path;  						}    						this.Children.Add(loadedItem);    						loadedItem.MakeNameNonColliding();    						// Adjust next item position  						newItemOffset.X = loadedItem.GetAxisAlignedBoundingBox().XSize / 2 + 10;  					}    					// the 1.3 is so the progress bar will collapse after going past 1  					progressControl.ProgressReporter(1.3' "");  				}    				this.Children.Remove(placeholderItem);  				this.Collapse();    				this.Invalidate(InvalidateType.Children);  			});
Magic Number,MatterHackers.MatterControl.Library,InsertionGroupObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\InsertionGroupObject3D.cs,InsertionGroupObject3D,The following statement contains a magic number: this.LoadingItemsTask = Task.Run(async () =>  			{  				var offset = Matrix4X4.Identity;    				// Add the placeholder 'Loading...' object  				var placeholderItem = new Object3D()  				{  					Mesh = placeHolderMesh'  					Matrix = Matrix4X4.Identity'  					Parent = this  				};    				this.Children.Add(placeholderItem);    				// Filter to content file types only  				foreach (var item in items.Where(item => item.IsContentFileType()).ToList())  				{  					// Acquire  					var progressControl = new DragDropLoadProgress(view3DWidget' null' ApplicationController.Instance.Theme);    					// Position at accumulating offset  					placeholderItem.Matrix *= Matrix4X4.CreateTranslation(newItemOffset.X' (double)newItemOffset.Y' 0);  					placeholderItem.Visible = true;  					progressControl.TrackingObject = placeholderItem;    					var loadedItem = await item.CreateContent(progressControl.ProgressReporter);  					if (loadedItem != null)  					{  						var aabb = loadedItem.GetAxisAlignedBoundingBox();    						// lets move the cube to the center of the loaded thing  						placeholderItem.Matrix *= Matrix4X4.CreateTranslation(-10 + aabb.XSize / 2' 0' 0);    						placeholderItem.Visible = false;    						// Copy scale/rotation/translation from the source and Center  						loadedItem.Matrix = loadedItem.Matrix * Matrix4X4.CreateTranslation((double)-aabb.Center.X' (double)-aabb.Center.Y' (double)-aabb.MinXYZ.Z) * placeholderItem.Matrix;    						// check if the item has 0 height (it is probably an image)  						if (loadedItem.ZSize() == 0)  						{  							// raise it up a bit so it is not z fighting with the bed  							loadedItem.Matrix *= Matrix4X4.CreateTranslation(0' 0' .1);  						}    						loadedItem.Color = loadedItem.Color;    						// Set mesh path if tracking requested  						if (trackSourceFiles  							&& item is FileSystemFileItem fileItem  							&& item.IsMeshFileType())  						{  							loadedItem.MeshPath = fileItem.Path;  						}    						this.Children.Add(loadedItem);    						loadedItem.MakeNameNonColliding();    						// Adjust next item position  						newItemOffset.X = loadedItem.GetAxisAlignedBoundingBox().XSize / 2 + 10;  					}    					// the 1.3 is so the progress bar will collapse after going past 1  					progressControl.ProgressReporter(1.3' "");  				}    				this.Children.Remove(placeholderItem);  				this.Collapse();    				this.Invalidate(InvalidateType.Children);  			});
Magic Number,MatterHackers.MatterControl.Library,InsertionGroupObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\InsertionGroupObject3D.cs,InsertionGroupObject3D,The following statement contains a magic number: this.LoadingItemsTask = Task.Run(async () =>  			{  				var offset = Matrix4X4.Identity;    				// Add the placeholder 'Loading...' object  				var placeholderItem = new Object3D()  				{  					Mesh = placeHolderMesh'  					Matrix = Matrix4X4.Identity'  					Parent = this  				};    				this.Children.Add(placeholderItem);    				// Filter to content file types only  				foreach (var item in items.Where(item => item.IsContentFileType()).ToList())  				{  					// Acquire  					var progressControl = new DragDropLoadProgress(view3DWidget' null' ApplicationController.Instance.Theme);    					// Position at accumulating offset  					placeholderItem.Matrix *= Matrix4X4.CreateTranslation(newItemOffset.X' (double)newItemOffset.Y' 0);  					placeholderItem.Visible = true;  					progressControl.TrackingObject = placeholderItem;    					var loadedItem = await item.CreateContent(progressControl.ProgressReporter);  					if (loadedItem != null)  					{  						var aabb = loadedItem.GetAxisAlignedBoundingBox();    						// lets move the cube to the center of the loaded thing  						placeholderItem.Matrix *= Matrix4X4.CreateTranslation(-10 + aabb.XSize / 2' 0' 0);    						placeholderItem.Visible = false;    						// Copy scale/rotation/translation from the source and Center  						loadedItem.Matrix = loadedItem.Matrix * Matrix4X4.CreateTranslation((double)-aabb.Center.X' (double)-aabb.Center.Y' (double)-aabb.MinXYZ.Z) * placeholderItem.Matrix;    						// check if the item has 0 height (it is probably an image)  						if (loadedItem.ZSize() == 0)  						{  							// raise it up a bit so it is not z fighting with the bed  							loadedItem.Matrix *= Matrix4X4.CreateTranslation(0' 0' .1);  						}    						loadedItem.Color = loadedItem.Color;    						// Set mesh path if tracking requested  						if (trackSourceFiles  							&& item is FileSystemFileItem fileItem  							&& item.IsMeshFileType())  						{  							loadedItem.MeshPath = fileItem.Path;  						}    						this.Children.Add(loadedItem);    						loadedItem.MakeNameNonColliding();    						// Adjust next item position  						newItemOffset.X = loadedItem.GetAxisAlignedBoundingBox().XSize / 2 + 10;  					}    					// the 1.3 is so the progress bar will collapse after going past 1  					progressControl.ProgressReporter(1.3' "");  				}    				this.Children.Remove(placeholderItem);  				this.Collapse();    				this.Invalidate(InvalidateType.Children);  			});
Magic Number,MatterHackers.MatterControl.Library,InsertionGroupObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\InsertionGroupObject3D.cs,InsertionGroupObject3D,The following statement contains a magic number: this.LoadingItemsTask = Task.Run(async () =>  			{  				var offset = Matrix4X4.Identity;    				// Add the placeholder 'Loading...' object  				var placeholderItem = new Object3D()  				{  					Mesh = placeHolderMesh'  					Matrix = Matrix4X4.Identity'  					Parent = this  				};    				this.Children.Add(placeholderItem);    				// Filter to content file types only  				foreach (var item in items.Where(item => item.IsContentFileType()).ToList())  				{  					// Acquire  					var progressControl = new DragDropLoadProgress(view3DWidget' null' ApplicationController.Instance.Theme);    					// Position at accumulating offset  					placeholderItem.Matrix *= Matrix4X4.CreateTranslation(newItemOffset.X' (double)newItemOffset.Y' 0);  					placeholderItem.Visible = true;  					progressControl.TrackingObject = placeholderItem;    					var loadedItem = await item.CreateContent(progressControl.ProgressReporter);  					if (loadedItem != null)  					{  						var aabb = loadedItem.GetAxisAlignedBoundingBox();    						// lets move the cube to the center of the loaded thing  						placeholderItem.Matrix *= Matrix4X4.CreateTranslation(-10 + aabb.XSize / 2' 0' 0);    						placeholderItem.Visible = false;    						// Copy scale/rotation/translation from the source and Center  						loadedItem.Matrix = loadedItem.Matrix * Matrix4X4.CreateTranslation((double)-aabb.Center.X' (double)-aabb.Center.Y' (double)-aabb.MinXYZ.Z) * placeholderItem.Matrix;    						// check if the item has 0 height (it is probably an image)  						if (loadedItem.ZSize() == 0)  						{  							// raise it up a bit so it is not z fighting with the bed  							loadedItem.Matrix *= Matrix4X4.CreateTranslation(0' 0' .1);  						}    						loadedItem.Color = loadedItem.Color;    						// Set mesh path if tracking requested  						if (trackSourceFiles  							&& item is FileSystemFileItem fileItem  							&& item.IsMeshFileType())  						{  							loadedItem.MeshPath = fileItem.Path;  						}    						this.Children.Add(loadedItem);    						loadedItem.MakeNameNonColliding();    						// Adjust next item position  						newItemOffset.X = loadedItem.GetAxisAlignedBoundingBox().XSize / 2 + 10;  					}    					// the 1.3 is so the progress bar will collapse after going past 1  					progressControl.ProgressReporter(1.3' "");  				}    				this.Children.Remove(placeholderItem);  				this.Collapse();    				this.Invalidate(InvalidateType.Children);  			});
Magic Number,MatterHackers.MatterControl.Library,InsertionGroupObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\InsertionGroupObject3D.cs,InsertionGroupObject3D,The following statement contains a magic number: this.LoadingItemsTask = Task.Run(async () =>  			{  				var offset = Matrix4X4.Identity;    				// Add the placeholder 'Loading...' object  				var placeholderItem = new Object3D()  				{  					Mesh = placeHolderMesh'  					Matrix = Matrix4X4.Identity'  					Parent = this  				};    				this.Children.Add(placeholderItem);    				// Filter to content file types only  				foreach (var item in items.Where(item => item.IsContentFileType()).ToList())  				{  					// Acquire  					var progressControl = new DragDropLoadProgress(view3DWidget' null' ApplicationController.Instance.Theme);    					// Position at accumulating offset  					placeholderItem.Matrix *= Matrix4X4.CreateTranslation(newItemOffset.X' (double)newItemOffset.Y' 0);  					placeholderItem.Visible = true;  					progressControl.TrackingObject = placeholderItem;    					var loadedItem = await item.CreateContent(progressControl.ProgressReporter);  					if (loadedItem != null)  					{  						var aabb = loadedItem.GetAxisAlignedBoundingBox();    						// lets move the cube to the center of the loaded thing  						placeholderItem.Matrix *= Matrix4X4.CreateTranslation(-10 + aabb.XSize / 2' 0' 0);    						placeholderItem.Visible = false;    						// Copy scale/rotation/translation from the source and Center  						loadedItem.Matrix = loadedItem.Matrix * Matrix4X4.CreateTranslation((double)-aabb.Center.X' (double)-aabb.Center.Y' (double)-aabb.MinXYZ.Z) * placeholderItem.Matrix;    						// check if the item has 0 height (it is probably an image)  						if (loadedItem.ZSize() == 0)  						{  							// raise it up a bit so it is not z fighting with the bed  							loadedItem.Matrix *= Matrix4X4.CreateTranslation(0' 0' .1);  						}    						loadedItem.Color = loadedItem.Color;    						// Set mesh path if tracking requested  						if (trackSourceFiles  							&& item is FileSystemFileItem fileItem  							&& item.IsMeshFileType())  						{  							loadedItem.MeshPath = fileItem.Path;  						}    						this.Children.Add(loadedItem);    						loadedItem.MakeNameNonColliding();    						// Adjust next item position  						newItemOffset.X = loadedItem.GetAxisAlignedBoundingBox().XSize / 2 + 10;  					}    					// the 1.3 is so the progress bar will collapse after going past 1  					progressControl.ProgressReporter(1.3' "");  				}    				this.Children.Remove(placeholderItem);  				this.Collapse();    				this.Invalidate(InvalidateType.Children);  			});
Magic Number,MatterHackers.MatterControl.Library,InsertionGroupObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\InsertionGroupObject3D.cs,InsertionGroupObject3D,The following statement contains a magic number: this.LoadingItemsTask = Task.Run(async () =>  			{  				var offset = Matrix4X4.Identity;    				// Add the placeholder 'Loading...' object  				var placeholderItem = new Object3D()  				{  					Mesh = placeHolderMesh'  					Matrix = Matrix4X4.Identity'  					Parent = this  				};    				this.Children.Add(placeholderItem);    				// Filter to content file types only  				foreach (var item in items.Where(item => item.IsContentFileType()).ToList())  				{  					// Acquire  					var progressControl = new DragDropLoadProgress(view3DWidget' null' ApplicationController.Instance.Theme);    					// Position at accumulating offset  					placeholderItem.Matrix *= Matrix4X4.CreateTranslation(newItemOffset.X' (double)newItemOffset.Y' 0);  					placeholderItem.Visible = true;  					progressControl.TrackingObject = placeholderItem;    					var loadedItem = await item.CreateContent(progressControl.ProgressReporter);  					if (loadedItem != null)  					{  						var aabb = loadedItem.GetAxisAlignedBoundingBox();    						// lets move the cube to the center of the loaded thing  						placeholderItem.Matrix *= Matrix4X4.CreateTranslation(-10 + aabb.XSize / 2' 0' 0);    						placeholderItem.Visible = false;    						// Copy scale/rotation/translation from the source and Center  						loadedItem.Matrix = loadedItem.Matrix * Matrix4X4.CreateTranslation((double)-aabb.Center.X' (double)-aabb.Center.Y' (double)-aabb.MinXYZ.Z) * placeholderItem.Matrix;    						// check if the item has 0 height (it is probably an image)  						if (loadedItem.ZSize() == 0)  						{  							// raise it up a bit so it is not z fighting with the bed  							loadedItem.Matrix *= Matrix4X4.CreateTranslation(0' 0' .1);  						}    						loadedItem.Color = loadedItem.Color;    						// Set mesh path if tracking requested  						if (trackSourceFiles  							&& item is FileSystemFileItem fileItem  							&& item.IsMeshFileType())  						{  							loadedItem.MeshPath = fileItem.Path;  						}    						this.Children.Add(loadedItem);    						loadedItem.MakeNameNonColliding();    						// Adjust next item position  						newItemOffset.X = loadedItem.GetAxisAlignedBoundingBox().XSize / 2 + 10;  					}    					// the 1.3 is so the progress bar will collapse after going past 1  					progressControl.ProgressReporter(1.3' "");  				}    				this.Children.Remove(placeholderItem);  				this.Collapse();    				this.Invalidate(InvalidateType.Children);  			});
Magic Number,MatterHackers.Plugins.EditorTools,PathControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,DrawGlContent,The following statement contains a magic number: world.RenderPath(  					new Stroke(flattened' pixelWidth * .02)'  					theme.PrimaryAccentColor'  					false);
Magic Number,MatterHackers.Plugins.EditorTools,PathControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,SetPosition,The following statement contains a magic number: flattened = new FlattenCurves(vertexStorage)  					{  						ResolutionScale = 6  					};
Magic Number,MatterHackers.Plugins.EditorTools,PathControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,SetPosition,The following statement contains a magic number: command = vertexStorage.vertex(i + 2' out x' out y);
Magic Number,MatterHackers.Plugins.EditorTools,PathControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,SetPosition,The following statement contains a magic number: var curveWidget = new Curve4AnchorWidget(context' this' vertexStorage' new Vector3(x' y' 0)' command' i + 2)  								{  									ControlPoint = controlPoint2'  								};
Magic Number,MatterHackers.Plugins.EditorTools,PathControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,SetPosition,The following statement contains a magic number: i += 2;
Magic Number,MatterHackers.Plugins.EditorTools,PointWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,PointWidget,The following statement contains a magic number: this.Width = 8;
Magic Number,MatterHackers.Plugins.EditorTools,PointWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,PointWidget,The following statement contains a magic number: this.Height = 8;
Magic Number,MatterHackers.Plugins.EditorTools,PointWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,Parent_AfterDraw,The following statement contains a magic number: e.Graphics2D.Circle(position' 9' Color.Blue.WithAlpha(80));
Magic Number,MatterHackers.Plugins.EditorTools,PointWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,Parent_AfterDraw,The following statement contains a magic number: e.Graphics2D.Circle(position' 9' Color.Blue.WithAlpha(80));
Magic Number,MatterHackers.Plugins.EditorTools,PointWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,UpdatePosition,The following statement contains a magic number: this.Position = world.GetScreenPosition(Point) - new Vector2(this.LocalBounds.Width / 2' this.LocalBounds.Height / 2);
Magic Number,MatterHackers.Plugins.EditorTools,PointWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\PathControl.cs,UpdatePosition,The following statement contains a magic number: this.Position = world.GetScreenPosition(Point) - new Vector2(this.LocalBounds.Width / 2' this.LocalBounds.Height / 2);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,RotateCornerControl,The following statement contains a magic number: rotationImageWhite = new ImageBuffer(64' 64' 32' new BlenderBGRA());
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,RotateCornerControl,The following statement contains a magic number: rotationImageWhite = new ImageBuffer(64' 64' 32' new BlenderBGRA());
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,RotateCornerControl,The following statement contains a magic number: rotationImageWhite = new ImageBuffer(64' 64' 32' new BlenderBGRA());
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,RotateCornerControl,The following statement contains a magic number: var arrows2 = new VertexSourceApplyTransform(Arrows' Affine.NewTranslation(-bounds.Center)  				* Affine.NewScaling(rotationImageWhite.Width / bounds.Width' rotationImageWhite.Height / bounds.Height)  				* Affine.NewTranslation(rotationImageWhite.Width / 2' rotationImageWhite.Height / 2));
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,RotateCornerControl,The following statement contains a magic number: var arrows2 = new VertexSourceApplyTransform(Arrows' Affine.NewTranslation(-bounds.Center)  				* Affine.NewScaling(rotationImageWhite.Width / bounds.Width' rotationImageWhite.Height / bounds.Height)  				* Affine.NewTranslation(rotationImageWhite.Width / 2' rotationImageWhite.Height / 2));
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,RotateCornerControl,The following statement contains a magic number: var clearImage = new ImageBuffer(2' 2' 32' new BlenderBGRA());
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,RotateCornerControl,The following statement contains a magic number: var clearImage = new ImageBuffer(2' 2' 32' new BlenderBGRA());
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,RotateCornerControl,The following statement contains a magic number: var clearImage = new ImageBuffer(2' 2' 32' new BlenderBGRA());
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawGlContent,The following statement contains a magic number: GLHelper.Render(rotationHandle' new Color(color' 254)' TotalTransform' RenderTypes.Shaded);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetCornerPosition,The following statement contains a magic number: int zCornerIndex = 2;
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetCornerPosition,The following statement contains a magic number: Vector3 testCornerPosition = currentSelectedBounds.GetBottomCorner((cornerIndex + 1) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetCornerPosition,The following statement contains a magic number: xCornerIndex = (cornerIndex + 1) % 4;
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetCornerPosition,The following statement contains a magic number: yCornerIndex = (cornerIndex + 3) % 4;
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetCornerPosition,The following statement contains a magic number: yCornerIndex = (cornerIndex + 3) % 4;
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetCornerPosition,The following statement contains a magic number: cornerIndex < 4
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetCornerPosition,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					cornerIndexOut = xCornerIndex;  					return bestXCornerPosition;    				case 1:  					cornerIndexOut = yCornerIndex;  					return bestYCornerPosition;    				case 2:  					cornerIndexOut = zCornerIndex;  					return bestZCornerPosition;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,OnMouseMove,The following statement contains a magic number: SnappedRotationAngle = ((int)((rawDeltaRotationAngle / snapRadians) + .5)) * snapRadians;
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,SetPosition,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 1:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 2:  					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,SetPosition,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 1:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 2:  					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,SetPosition,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 1:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 2:  					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,SetPosition,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 1:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 2:  					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,SetPosition,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 1:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 2:  					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,SetPosition,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 1:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 2:  					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,SetPosition,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 1:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 2:  					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,SetPosition,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 1:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 2:  					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,SetPosition,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 1:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 2:  					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,SetPosition,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 1:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 2:  					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The following statement contains a magic number: alphaValue = .3;
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The following statement contains a magic number: currentSelectedBounds.XSize > 100000
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The following statement contains a magic number: double innerRadius = radius + ringWidth / 2;
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The following statement contains a magic number: double snappingMarkRadius = outerRadius + 20;
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The following statement contains a magic number: graphics2DOpenGL.RenderTransformedPath(rotationCenterTransform' blueRing' new Color(theme.PrimaryAccentColor' (int)(50 * alphaValue))' drawEventArgs.ZBuffered);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The following statement contains a magic number: DrawTickMarks(drawEventArgs' alphaValue' rotationCenterTransform' innerRadius' outerRadius' 60);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawRotationCompass,The following statement contains a magic number: graphics2DOpenGL.RenderTransformedPath(rotationCenterTransform' redAngle' new Color(theme.PrimaryAccentColor' (int)(70 * alphaValue))' drawEventArgs.ZBuffered);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawSnappingMarks,The following statement contains a magic number: snapShape.MoveTo(-10' 0);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawSnappingMarks,The following statement contains a magic number: snapShape.LineTo(5' 7);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawSnappingMarks,The following statement contains a magic number: snapShape.LineTo(5' 7);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawSnappingMarks,The following statement contains a magic number: snapShape.LineTo(5' -7);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawSnappingMarks,The following statement contains a magic number: snapShape.LineTo(5' -7);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawSnappingMarks,The following statement contains a magic number: graphics2DOpenGL.RenderTransformedPath(rotationCenterTransform' transformed' new Color(color' (int)(254 * alphaValue))' drawEventArgs.ZBuffered);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,DrawTickMarks,The following statement contains a magic number: InteractionContext.World.Render3DLine(startPosition' endPosition' new Color(theme.TextColor' (int)(254 * alphaValue))' drawEventArgs.ZBuffered);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetControlCenter,The following statement contains a magic number: var delta = new Vector3(xSign * (selectCubeSize.X / 2 + arrowsOffset) * distBetweenPixelsWorldSpace'  				ySign * (selectCubeSize.Y / 2 + arrowsOffset) * distBetweenPixelsWorldSpace'  				-selectCubeSize.Z / 2 * distBetweenPixelsWorldSpace);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetControlCenter,The following statement contains a magic number: var delta = new Vector3(xSign * (selectCubeSize.X / 2 + arrowsOffset) * distBetweenPixelsWorldSpace'  				ySign * (selectCubeSize.Y / 2 + arrowsOffset) * distBetweenPixelsWorldSpace'  				-selectCubeSize.Z / 2 * distBetweenPixelsWorldSpace);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetControlCenter,The following statement contains a magic number: var delta = new Vector3(xSign * (selectCubeSize.X / 2 + arrowsOffset) * distBetweenPixelsWorldSpace'  				ySign * (selectCubeSize.Y / 2 + arrowsOffset) * distBetweenPixelsWorldSpace'  				-selectCubeSize.Z / 2 * distBetweenPixelsWorldSpace);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetDeltaToOtherSideXy,The following statement contains a magic number: Vector3 cornerPositionCcw = currentSelectedBounds.GetBottomCorner((cornerIndex + 1) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetDeltaToOtherSideXy,The following statement contains a magic number: Vector3 cornerPositionCw = currentSelectedBounds.GetBottomCorner((cornerIndex + 3) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetDeltaToOtherSideXy,The following statement contains a magic number: Vector3 cornerPositionCw = currentSelectedBounds.GetBottomCorner((cornerIndex + 3) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetRotationTransform,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(0' -MathHelper.Tau / 4' 0))  							* Matrix4X4.CreateRotation(new Vector3(-MathHelper.Tau / 4' 0' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 1:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(MathHelper.Tau / 4' 0' 0))  							* Matrix4X4.CreateRotation(new Vector3(0' MathHelper.Tau / 4' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 2:  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetRotationTransform,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(0' -MathHelper.Tau / 4' 0))  							* Matrix4X4.CreateRotation(new Vector3(-MathHelper.Tau / 4' 0' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 1:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(MathHelper.Tau / 4' 0' 0))  							* Matrix4X4.CreateRotation(new Vector3(0' MathHelper.Tau / 4' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 2:  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetRotationTransform,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(0' -MathHelper.Tau / 4' 0))  							* Matrix4X4.CreateRotation(new Vector3(-MathHelper.Tau / 4' 0' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 1:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(MathHelper.Tau / 4' 0' 0))  							* Matrix4X4.CreateRotation(new Vector3(0' MathHelper.Tau / 4' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 2:  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetRotationTransform,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(0' -MathHelper.Tau / 4' 0))  							* Matrix4X4.CreateRotation(new Vector3(-MathHelper.Tau / 4' 0' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 1:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(MathHelper.Tau / 4' 0' 0))  							* Matrix4X4.CreateRotation(new Vector3(0' MathHelper.Tau / 4' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 2:  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetRotationTransform,The following statement contains a magic number: switch (RotationAxis)  			{  				case 0:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(0' -MathHelper.Tau / 4' 0))  							* Matrix4X4.CreateRotation(new Vector3(-MathHelper.Tau / 4' 0' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 1:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(MathHelper.Tau / 4' 0' 0))  							* Matrix4X4.CreateRotation(new Vector3(0' MathHelper.Tau / 4' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 2:  					break;  			}
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetSnapIndex,The following statement contains a magic number: double angleAroundPoint = MathHelper.DegreesToRadians(5);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetSnapIndex,The following statement contains a magic number: double innerRadius = radius + ringWidth / 2;
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetSnapIndex,The following statement contains a magic number: double snappingMarkRadius = outerRadius + 20;
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetSnapIndex,The following statement contains a magic number: Math.Abs((mouseMoveInfo.HitPosition - center).Length - rotationTransformScale * snappingMarkRadius) < 20 * rotationTransformScale
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector3 anglePosition = Vector3Ex.Transform(unitPosition * (radius + 100)' rotationCenterTransform);
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: displayAngle -= 360;
Magic Number,MatterHackers.Plugins.EditorTools,RotateCornerPlugins,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateInteractionPlugins.cs,Create,The following statement contains a magic number: return new[]   			{  				new RotateCornerControl(context' 0)'  				new RotateCornerControl(context' 1)'  				new RotateCornerControl(context' 2)  			};
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,EditComplete,The following statement contains a magic number: Vector3 cornerPositionCcw = GetCornerPosition(selectedItem' (quadrantIndex + 1) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,EditComplete,The following statement contains a magic number: Vector3 lockedCorner = GetCornerPosition(selectedItem' (quadrantIndex + 2) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,EditComplete,The following statement contains a magic number: Vector3 lockedCorner = GetCornerPosition(selectedItem' (quadrantIndex + 2) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,EditComplete,The following statement contains a magic number: Vector3 cornerPositionCw = GetCornerPosition(selectedItem' (quadrantIndex + 3) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,EditComplete,The following statement contains a magic number: Vector3 cornerPositionCw = GetCornerPosition(selectedItem' (quadrantIndex + 3) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,EditComplete,The following statement contains a magic number: Vector3 newLockedCorner = GetCornerPosition(selectedItem' (quadrantIndex + 2) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,EditComplete,The following statement contains a magic number: Vector3 newLockedCorner = GetCornerPosition(selectedItem' (quadrantIndex + 2) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,DrawGlContent,The following statement contains a magic number: Vector3 endPosition = GetCornerPosition(selectedItem' (quadrantIndex + 1) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,The following statement contains a magic number: newPosition.X = ((int)((newPosition.X / snapGridDistance) + .5)) * snapGridDistance;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,The following statement contains a magic number: newPosition.Y = ((int)((newPosition.Y / snapGridDistance) + .5)) * snapGridDistance;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,The following statement contains a magic number: Vector3 cornerPositionCcw = GetCornerPosition(selectedItem' (quadrantIndex + 1) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,The following statement contains a magic number: Vector3 lockedCorner = GetCornerPosition(selectedItem' (quadrantIndex + 2) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,The following statement contains a magic number: Vector3 lockedCorner = GetCornerPosition(selectedItem' (quadrantIndex + 2) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,The following statement contains a magic number: Vector3 cornerPositionCw = GetCornerPosition(selectedItem' (quadrantIndex + 3) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,The following statement contains a magic number: Vector3 cornerPositionCw = GetCornerPosition(selectedItem' (quadrantIndex + 3) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,The following statement contains a magic number: quadrantIndex == 0 || quadrantIndex == 3
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,The following statement contains a magic number: Vector3 newLockedCorner = GetCornerPosition(selectedItem' (quadrantIndex + 2) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,OnMouseMove,The following statement contains a magic number: Vector3 newLockedCorner = GetCornerPosition(selectedItem' (quadrantIndex + 2) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The following statement contains a magic number: Vector3 cornerPositionCcw = GetCornerPosition(selectedItem' (quadrantIndex + 1) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The following statement contains a magic number: Vector3 cornerPositionCw = GetCornerPosition(selectedItem' (quadrantIndex + 3) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The following statement contains a magic number: Vector3 cornerPositionCw = GetCornerPosition(selectedItem' (quadrantIndex + 3) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The following statement contains a magic number: boxCenter.X -= xSign * selectCubeSize / 2 * distBetweenPixelsWorldSpace;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The following statement contains a magic number: boxCenter.Y -= ySign * selectCubeSize / 2 * distBetweenPixelsWorldSpace;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,SetPosition,The following statement contains a magic number: boxCenter.Z += selectCubeSize / 2 * distBetweenPixelsWorldSpace;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,GetScalingConsideringShiftKey,The following statement contains a magic number: var minimumSize = .1;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,GetDeltaToOtherSideXy,The following statement contains a magic number: Vector3 cornerPositionCcw = GetCornerPosition(selectedItem' (quadrantIndex + 1) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,GetDeltaToOtherSideXy,The following statement contains a magic number: Vector3 cornerPositionCw = GetCornerPosition(selectedItem' (quadrantIndex + 3) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,GetDeltaToOtherSideXy,The following statement contains a magic number: Vector3 cornerPositionCw = GetCornerPosition(selectedItem' (quadrantIndex + 3) % 4);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: int j = 4;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 widthDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 widthDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 widthDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 widthDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 widthDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 heightDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 heightDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 heightDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 heightDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleCornerControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 heightDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornersPlugin,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleInteractionPlugins.cs,Create,The following statement contains a magic number: return new List<InteractionVolume>  			{  				new ScaleTopControl(context)'  				new ScaleCornerControl(context' 0)'  				new ScaleCornerControl(context' 1)'  				new ScaleCornerControl(context' 2)'  				new ScaleCornerControl(context' 3)  			};
Magic Number,MatterHackers.Plugins.EditorTools,ScaleCornersPlugin,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleInteractionPlugins.cs,Create,The following statement contains a magic number: return new List<InteractionVolume>  			{  				new ScaleTopControl(context)'  				new ScaleCornerControl(context' 0)'  				new ScaleCornerControl(context' 1)'  				new ScaleCornerControl(context' 2)'  				new ScaleCornerControl(context' 3)  			};
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,DrawGlContent,The following statement contains a magic number: Vector3 centerPosition = (topPosition + bottomPosition) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,OnMouseMove,The following statement contains a magic number: newPosition.Z = ((int)((newPosition.Z / snapGridDistance) + .5)) * snapGridDistance;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,SetPosition,The following statement contains a magic number: boxCenter.Z += selectCubeSize / 2 * distBetweenPixelsWorldSpace;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,SetPosition,The following statement contains a magic number: lines.Add(new Vector2(lines[2].X + lineLength' lines[2].Y));
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,SetPosition,The following statement contains a magic number: lines.Add(new Vector2(lines[2].X + lineLength' lines[2].Y));
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 heightDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 heightDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 heightDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 heightDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: Vector2 heightDisplayCenter = (((lines[j] + lines[j + 1]) / 2) + ((lines[j + 2] + lines[j + 3]) / 2)) / 2;
Magic Number,MatterHackers.Plugins.EditorTools,ScaleTopControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\ScaleControls\ScaleTopControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: zValueDisplayInfo.OriginRelativeParent = heightDisplayCenter + new Vector2(10' -zValueDisplayInfo.LocalBounds.Center.Y);
Magic Number,MatterHackers.MatterControl.Plugins.Lithophane,LithophanePlugin,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\LithophanePlugin.cs,Initialize,The following statement contains a magic number: ApplicationController.Instance.Graph.RegisterOperation(  				new Library.NodeOperation()  				{  					OperationID = "Lithophane".Localize()'  					Title = "Lithophane".Localize()'  					MappedTypes = new List<Type> { typeof(ImageObject3D) }'  					ResultType = typeof(LithophaneObject3D)'  					Operation = (sceneItem' scene) =>  					{  						if (sceneItem is IObject3D imageObject)  						{  							WrapWith(sceneItem' new LithophaneObject3D()' scene);  						}    						return Task.CompletedTask;  					}'  					IsEnabled = (sceneItem) => true'  					IsVisible = (sceneItem) => true'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("lithophane.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl.Plugins.Lithophane,LithophanePlugin,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\LithophanePlugin.cs,Initialize,The following statement contains a magic number: ApplicationController.Instance.Graph.RegisterOperation(  				new Library.NodeOperation()  				{  					OperationID = "Lithophane".Localize()'  					Title = "Lithophane".Localize()'  					MappedTypes = new List<Type> { typeof(ImageObject3D) }'  					ResultType = typeof(LithophaneObject3D)'  					Operation = (sceneItem' scene) =>  					{  						if (sceneItem is IObject3D imageObject)  						{  							WrapWith(sceneItem' new LithophaneObject3D()' scene);  						}    						return Task.CompletedTask;  					}'  					IsEnabled = (sceneItem) => true'  					IsVisible = (sceneItem) => true'  					IconCollector = (invertIcon) => AggContext.StaticData.LoadIcon("lithophane.png"' 16' 16' invertIcon)  				});
Magic Number,MatterHackers.MatterControl.Plugins.Lithophane,Lithophane,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Lithophane.cs,Generate,The following statement contains a magic number: var zScale = zRange / 255;
Magic Number,MatterHackers.MatterControl.Plugins.Lithophane,Lithophane,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Lithophane.cs,Generate,The following statement contains a magic number: var pixels = pixelData.Where((x' i) => i % 4 == 0)    				// Interpolate the pixel color to zheight  				.Select(b => baseThickness + (invert ? 255 - b : b) * zScale)    				// Project to Vector3 for each pixel at the computed x/y/z  				.Select((z' i) => new Vector3(  						i % width * rescale'  						(i - i % width) / width * rescale * -1'  						z))  				// Project to PixelInfo' creating a mirrored Vector3 at z0' paired together and added to the mesh  				.Select(vec =>  				{  					var pixelInfo = new PixelInfo()  					{  						Top = vec'  						Bottom = new Vector3(vec.X' vec.Y' 0)  					};    					mesh.Vertices.Add(pixelInfo.Top);  					mesh.Vertices.Add(pixelInfo.Bottom);    					return pixelInfo;  				}).ToArray();
Magic Number,MatterHackers.MatterControl.Plugins.Lithophane,Lithophane,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Lithophane.cs,Generate,The following statement contains a magic number: var pixels = pixelData.Where((x' i) => i % 4 == 0)    				// Interpolate the pixel color to zheight  				.Select(b => baseThickness + (invert ? 255 - b : b) * zScale)    				// Project to Vector3 for each pixel at the computed x/y/z  				.Select((z' i) => new Vector3(  						i % width * rescale'  						(i - i % width) / width * rescale * -1'  						z))  				// Project to PixelInfo' creating a mirrored Vector3 at z0' paired together and added to the mesh  				.Select(vec =>  				{  					var pixelInfo = new PixelInfo()  					{  						Top = vec'  						Bottom = new Vector3(vec.X' vec.Y' 0)  					};    					mesh.Vertices.Add(pixelInfo.Top);  					mesh.Vertices.Add(pixelInfo.Bottom);    					return pixelInfo;  				}).ToArray();
Magic Number,MatterHackers.MatterControl.Plugins.Lithophane,Lithophane,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Lithophane.cs,Generate,The following statement contains a magic number: var notificationInterval = 100;
Magic Number,MatterHackers.MatterControl.Plugins.Lithophane,LithophaneObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\LithophaneObject3D.cs,Rebuild,The following statement contains a magic number: ApplicationController.Instance.Tasks.Execute("Generating Lithophane".Localize()' null' (reporter' cancellationToken) =>  			{  				var generatedMesh = Lithophane.Generate(  					new Lithophane.ImageBufferImageData(activeImage' this.Width)'  					this.Height'  					0.4'  					this.PixelsPerMM'  					this.Invert'  					reporter);    				this.Mesh = generatedMesh;    				// Remove old offset  				this.Matrix *= Matrix4X4.CreateTranslation(this.ImageOffset);    				// Set and store new offset  				var imageBounds = generatedMesh.GetAxisAlignedBoundingBox();  				this.ImageOffset = imageBounds.Center + new Vector3(0' 0' -imageBounds.Center.Z);    				// Apply offset  				this.Matrix *= Matrix4X4.CreateTranslation(-this.ImageOffset);    				Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));    				return Task.CompletedTask;  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,CombineObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\CombineObject3D.cs,Combine,The following statement contains a magic number: participants.Count() < 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,IntersectionObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\IntersectionObject3D.cs,Intersect,The following statement contains a magic number: var result = BooleanProcessing.Do(remove.Mesh' remove.WorldMatrix()'  							first.Mesh' first.WorldMatrix()'  							2' reporter' amountPerOperation' percentCompleted' progressStatus' cancellationToken);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,BooleanProcessing,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\BooleanProcessing.cs,Do,The following statement contains a magic number: externalAssemblyExists  				&& IntPtr.Size == 8
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,BooleanProcessing,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\BooleanProcessing.cs,Do,The following statement contains a magic number: switch (operation)  			{  				case 0:  					return PolygonMesh.Csg.CsgOperations.Union(meshA'  						meshB'  						(status' progress0To1) =>  						{  							// Abort if flagged  							cancellationToken.ThrowIfCancellationRequested();    							progressStatus.Status = status;  							progressStatus.Progress0To1 = percentCompleted + (amountPerOperation * progress0To1);  							reporter?.Report(progressStatus);  						}'  						cancellationToken);    				case 1:  					return PolygonMesh.Csg.CsgOperations.Subtract(meshA'  						meshB'  						(status' progress0To1) =>  						{  							// Abort if flagged  							cancellationToken.ThrowIfCancellationRequested();    							progressStatus.Status = status;  							progressStatus.Progress0To1 = percentCompleted + (amountPerOperation * progress0To1);  							reporter?.Report(progressStatus);  						}'  						cancellationToken);    				case 2:  					return PolygonMesh.Csg.CsgOperations.Intersect(meshA'  						meshB'  						(status' progress0To1) =>  						{  							// Abort if flagged  							cancellationToken.ThrowIfCancellationRequested();    							progressStatus.Status = status;  							progressStatus.Progress0To1 = percentCompleted + (amountPerOperation * progress0To1);  							reporter.Report(progressStatus);  						}'  						cancellationToken);  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,CombineObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\CombineObject3D_2.cs,Combine,The following statement contains a magic number: participants.Count() < 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,IntersectionObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\IntersectionObject3D_2.cs,Intersect,The following statement contains a magic number: participants.Count() < 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,IntersectionObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\IntersectionObject3D_2.cs,Intersect,The following statement contains a magic number: resultsMesh = BooleanProcessing.Do(item.Mesh' itemWorldMatrix'  						resultsMesh' firstWorldMatrix'  						2'  						reporter' amountPerOperation' percentCompleted' progressStatus' cancellationToken);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D.cs,SubtractAndReplace,The following statement contains a magic number: var intersect = BooleanProcessing.Do(keep.obj3D.Mesh' keep.matrix'  							paint.obj3D.Mesh' paint.matrix' 2' reporter' amountPerOperation' percentCompleted' progressStatus' cancellationToken);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D.cs,SubtractAndReplace,The following statement contains a magic number: paint.obj3D.Color = paint.obj3D.WorldColor().WithContrast(keepObjects.First().WorldColor()' 2).ToColor();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D_2.cs,DrawEditor,The following statement contains a magic number: transparentMeshes.Add(new Object3DView(item' new Color(item.WorldColor(this.SourceContainer)' 80)));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D_2.cs,SubtractAndReplace,The following statement contains a magic number: parentOfPaintTargets.Children.Count() < 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractAndReplaceObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractAndReplaceObject3D_2.cs,SubtractAndReplace,The following statement contains a magic number: Mesh paintMesh = BooleanProcessing.Do(keepResultsMesh'  							keepWorldMatrix'  							// paint data  							paint.Mesh'  							paint.WorldMatrix(SourceContainer)'  							// operation type  							2'  							// reporting data  							reporter'  							amountPerOperation'  							percentCompleted'  							progressStatus'  							cancellationToken);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractObject3D_2.cs,DrawEditor,The following statement contains a magic number: transparentMeshes.Add(new Object3DView(item' new Color(item.WorldColor(this.SourceContainer)' 80)));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.View3D,SubtractObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\SubtractObject3D_2.cs,Subtract,The following statement contains a magic number: parentOfSubtractTargets.Children.Count() < 2
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\FitToBoundsObject3D.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: var half = size / 2;
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\FitToBoundsObject3D.cs,DrawEditor,The following statement contains a magic number: var minXyz = center - new Vector3(Width / 2' Depth / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\FitToBoundsObject3D.cs,DrawEditor,The following statement contains a magic number: var minXyz = center - new Vector3(Width / 2' Depth / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\FitToBoundsObject3D.cs,DrawEditor,The following statement contains a magic number: var minXyz = center - new Vector3(Width / 2' Depth / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\FitToBoundsObject3D.cs,DrawEditor,The following statement contains a magic number: var maxXyz = center + new Vector3(Width / 2' Depth / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\FitToBoundsObject3D.cs,DrawEditor,The following statement contains a magic number: var maxXyz = center + new Vector3(Width / 2' Depth / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\FitToBoundsObject3D.cs,DrawEditor,The following statement contains a magic number: var maxXyz = center + new Vector3(Width / 2' Depth / 2' Height / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\FitToBoundsObject3D.cs,DrawEditor,The following statement contains a magic number: var right = Vector3Ex.Transform(center + new Vector3(Width / 2' 0' 0)' worldMatrix);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Modify(list =>  				{  					if (list.Count == 0)  					{  						return;  					}    					int anchorIndex = AnchorObjectIndex;  					var anchorBounds = CurrentChildrenBounds[anchorIndex];    					int i = 0;  					// first align the anchor object back to its starting position  					foreach (var child in list)  					{  						// only process the anchor object  						if (i != anchorIndex)  						{  							i++;  							continue;  						}    						if (XAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								// make sure it is where it started  								AlignAxis(0' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.X' 0' child);  							}  						}    						if (YAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								AlignAxis(1' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Y' 0' child);  							}  						}    						if (ZAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								AlignAxis(2' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Z' 0' child);  							}  						}    						i++;  					}    					// then align all the objects to it  					i = 0;  					foreach (var child in list)  					{  						// skip the anchor object  						if (i == anchorIndex)  						{  							i++;  							continue;  						}    						if (XAlign == Align.None)  						{  							AlignAxis(0' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.X' 0' child);  						}  						else  						{  							AlignAxis(0' XAlign' GetAlignToOffset(CurrentChildrenBounds' 0' (!Advanced || XAlignTo == Align.None) ? XAlign : XAlignTo)' XOffset' child);  						}    						if (YAlign == Align.None)  						{  							AlignAxis(1' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Y' 0' child);  						}  						else  						{  							AlignAxis(1' YAlign' GetAlignToOffset(CurrentChildrenBounds' 1' (!Advanced || YAlignTo == Align.None) ? YAlign : YAlignTo)' YOffset' child);  						}    						if (ZAlign == Align.None)  						{  							AlignAxis(2' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Z' 0' child);  						}  						else  						{  							AlignAxis(2' ZAlign' GetAlignToOffset(CurrentChildrenBounds' 2' (!Advanced || ZAlignTo == Align.None) ? ZAlign : ZAlignTo)' ZOffset' child);  						}    						i++;  					}  				});
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Modify(list =>  				{  					if (list.Count == 0)  					{  						return;  					}    					int anchorIndex = AnchorObjectIndex;  					var anchorBounds = CurrentChildrenBounds[anchorIndex];    					int i = 0;  					// first align the anchor object back to its starting position  					foreach (var child in list)  					{  						// only process the anchor object  						if (i != anchorIndex)  						{  							i++;  							continue;  						}    						if (XAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								// make sure it is where it started  								AlignAxis(0' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.X' 0' child);  							}  						}    						if (YAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								AlignAxis(1' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Y' 0' child);  							}  						}    						if (ZAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								AlignAxis(2' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Z' 0' child);  							}  						}    						i++;  					}    					// then align all the objects to it  					i = 0;  					foreach (var child in list)  					{  						// skip the anchor object  						if (i == anchorIndex)  						{  							i++;  							continue;  						}    						if (XAlign == Align.None)  						{  							AlignAxis(0' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.X' 0' child);  						}  						else  						{  							AlignAxis(0' XAlign' GetAlignToOffset(CurrentChildrenBounds' 0' (!Advanced || XAlignTo == Align.None) ? XAlign : XAlignTo)' XOffset' child);  						}    						if (YAlign == Align.None)  						{  							AlignAxis(1' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Y' 0' child);  						}  						else  						{  							AlignAxis(1' YAlign' GetAlignToOffset(CurrentChildrenBounds' 1' (!Advanced || YAlignTo == Align.None) ? YAlign : YAlignTo)' YOffset' child);  						}    						if (ZAlign == Align.None)  						{  							AlignAxis(2' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Z' 0' child);  						}  						else  						{  							AlignAxis(2' ZAlign' GetAlignToOffset(CurrentChildrenBounds' 2' (!Advanced || ZAlignTo == Align.None) ? ZAlign : ZAlignTo)' ZOffset' child);  						}    						i++;  					}  				});
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Modify(list =>  				{  					if (list.Count == 0)  					{  						return;  					}    					int anchorIndex = AnchorObjectIndex;  					var anchorBounds = CurrentChildrenBounds[anchorIndex];    					int i = 0;  					// first align the anchor object back to its starting position  					foreach (var child in list)  					{  						// only process the anchor object  						if (i != anchorIndex)  						{  							i++;  							continue;  						}    						if (XAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								// make sure it is where it started  								AlignAxis(0' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.X' 0' child);  							}  						}    						if (YAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								AlignAxis(1' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Y' 0' child);  							}  						}    						if (ZAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								AlignAxis(2' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Z' 0' child);  							}  						}    						i++;  					}    					// then align all the objects to it  					i = 0;  					foreach (var child in list)  					{  						// skip the anchor object  						if (i == anchorIndex)  						{  							i++;  							continue;  						}    						if (XAlign == Align.None)  						{  							AlignAxis(0' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.X' 0' child);  						}  						else  						{  							AlignAxis(0' XAlign' GetAlignToOffset(CurrentChildrenBounds' 0' (!Advanced || XAlignTo == Align.None) ? XAlign : XAlignTo)' XOffset' child);  						}    						if (YAlign == Align.None)  						{  							AlignAxis(1' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Y' 0' child);  						}  						else  						{  							AlignAxis(1' YAlign' GetAlignToOffset(CurrentChildrenBounds' 1' (!Advanced || YAlignTo == Align.None) ? YAlign : YAlignTo)' YOffset' child);  						}    						if (ZAlign == Align.None)  						{  							AlignAxis(2' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Z' 0' child);  						}  						else  						{  							AlignAxis(2' ZAlign' GetAlignToOffset(CurrentChildrenBounds' 2' (!Advanced || ZAlignTo == Align.None) ? ZAlign : ZAlignTo)' ZOffset' child);  						}    						i++;  					}  				});
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,Rebuild,The following statement contains a magic number: this.Children.Modify(list =>  				{  					if (list.Count == 0)  					{  						return;  					}    					int anchorIndex = AnchorObjectIndex;  					var anchorBounds = CurrentChildrenBounds[anchorIndex];    					int i = 0;  					// first align the anchor object back to its starting position  					foreach (var child in list)  					{  						// only process the anchor object  						if (i != anchorIndex)  						{  							i++;  							continue;  						}    						if (XAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								// make sure it is where it started  								AlignAxis(0' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.X' 0' child);  							}  						}    						if (YAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								AlignAxis(1' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Y' 0' child);  							}  						}    						if (ZAlign == Align.None)  						{  							if (i < OriginalChildrenBounds.Count)  							{  								AlignAxis(2' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Z' 0' child);  							}  						}    						i++;  					}    					// then align all the objects to it  					i = 0;  					foreach (var child in list)  					{  						// skip the anchor object  						if (i == anchorIndex)  						{  							i++;  							continue;  						}    						if (XAlign == Align.None)  						{  							AlignAxis(0' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.X' 0' child);  						}  						else  						{  							AlignAxis(0' XAlign' GetAlignToOffset(CurrentChildrenBounds' 0' (!Advanced || XAlignTo == Align.None) ? XAlign : XAlignTo)' XOffset' child);  						}    						if (YAlign == Align.None)  						{  							AlignAxis(1' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Y' 0' child);  						}  						else  						{  							AlignAxis(1' YAlign' GetAlignToOffset(CurrentChildrenBounds' 1' (!Advanced || YAlignTo == Align.None) ? YAlign : YAlignTo)' YOffset' child);  						}    						if (ZAlign == Align.None)  						{  							AlignAxis(2' Align.Min' (double)OriginalChildrenBounds[i].MinXYZ.Z' 0' child);  						}  						else  						{  							AlignAxis(2' ZAlign' GetAlignToOffset(CurrentChildrenBounds' 2' (!Advanced || ZAlignTo == Align.None) ? ZAlign : ZAlignTo)' ZOffset' child);  						}    						i++;  					}  				});
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,ArrayRadialObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ArrayRadialObject3D.cs,Rebuild,The following statement contains a magic number: Axis.Origin = this.GetAxisAlignedBoundingBox().Center - new Vector3(-30' 0' 0);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,ArrayRadialObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ArrayRadialObject3D.cs,Rebuild,The following statement contains a magic number: await ApplicationController.Instance.Tasks.Execute(  				"Radial Array".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					this.DebugDepth("Rebuild");  					var aabb = this.GetAxisAlignedBoundingBox();    					// make sure our length is in the right axis  					for (int i = 0; i < 3; i++)  					{  						if (Axis.Normal[i] != 0 && Axis.Origin[i] == 0)  						{  							var newOrigin = Vector3.Zero;  							newOrigin[i] = Math.Max(aabb.Center[0] - Axis.Origin[0]'  								Math.Max(aabb.Center[1] - Axis.Origin[1]'  								aabb.Center[2] - Axis.Origin[2]));  						}  					}    					var sourceContainer = SourceContainer;  					this.Children.Modify(list =>  					{  						list.Clear();  						// add back in the sourceContainer  						list.Add(sourceContainer);  						// get the source item  						var sourceItem = sourceContainer.Children.First();    						var offset = Vector3.Zero;  						for (int i = 0; i < Math.Max(Count' 1); i++)  						{  							var next = sourceItem.Clone();    							var normal = Axis.Normal.GetNormal();  							var angleRadians = MathHelper.DegreesToRadians(Angle) / Count * i;  							next.Rotate(Axis.Origin' normal' angleRadians);    							if (!RotatePart)  							{  								var nextAabb = next.GetAxisAlignedBoundingBox();  								next.Rotate(nextAabb.Center' normal' -angleRadians);  							}    							list.Add(next);  						}  					});  					SourceContainer.Visible = false;  					rebuildLock.Dispose();  					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));  					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,ArrayRadialObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ArrayRadialObject3D.cs,Rebuild,The following statement contains a magic number: await ApplicationController.Instance.Tasks.Execute(  				"Radial Array".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					this.DebugDepth("Rebuild");  					var aabb = this.GetAxisAlignedBoundingBox();    					// make sure our length is in the right axis  					for (int i = 0; i < 3; i++)  					{  						if (Axis.Normal[i] != 0 && Axis.Origin[i] == 0)  						{  							var newOrigin = Vector3.Zero;  							newOrigin[i] = Math.Max(aabb.Center[0] - Axis.Origin[0]'  								Math.Max(aabb.Center[1] - Axis.Origin[1]'  								aabb.Center[2] - Axis.Origin[2]));  						}  					}    					var sourceContainer = SourceContainer;  					this.Children.Modify(list =>  					{  						list.Clear();  						// add back in the sourceContainer  						list.Add(sourceContainer);  						// get the source item  						var sourceItem = sourceContainer.Children.First();    						var offset = Vector3.Zero;  						for (int i = 0; i < Math.Max(Count' 1); i++)  						{  							var next = sourceItem.Clone();    							var normal = Axis.Normal.GetNormal();  							var angleRadians = MathHelper.DegreesToRadians(Angle) / Count * i;  							next.Rotate(Axis.Origin' normal' angleRadians);    							if (!RotatePart)  							{  								var nextAabb = next.GetAxisAlignedBoundingBox();  								next.Rotate(nextAabb.Center' normal' -angleRadians);  							}    							list.Add(next);  						}  					});  					SourceContainer.Visible = false;  					rebuildLock.Dispose();  					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));  					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,ArrayRadialObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ArrayRadialObject3D.cs,Rebuild,The following statement contains a magic number: await ApplicationController.Instance.Tasks.Execute(  				"Radial Array".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					this.DebugDepth("Rebuild");  					var aabb = this.GetAxisAlignedBoundingBox();    					// make sure our length is in the right axis  					for (int i = 0; i < 3; i++)  					{  						if (Axis.Normal[i] != 0 && Axis.Origin[i] == 0)  						{  							var newOrigin = Vector3.Zero;  							newOrigin[i] = Math.Max(aabb.Center[0] - Axis.Origin[0]'  								Math.Max(aabb.Center[1] - Axis.Origin[1]'  								aabb.Center[2] - Axis.Origin[2]));  						}  					}    					var sourceContainer = SourceContainer;  					this.Children.Modify(list =>  					{  						list.Clear();  						// add back in the sourceContainer  						list.Add(sourceContainer);  						// get the source item  						var sourceItem = sourceContainer.Children.First();    						var offset = Vector3.Zero;  						for (int i = 0; i < Math.Max(Count' 1); i++)  						{  							var next = sourceItem.Clone();    							var normal = Axis.Normal.GetNormal();  							var angleRadians = MathHelper.DegreesToRadians(Angle) / Count * i;  							next.Rotate(Axis.Origin' normal' angleRadians);    							if (!RotatePart)  							{  								var nextAabb = next.GetAxisAlignedBoundingBox();  								next.Rotate(nextAabb.Center' normal' -angleRadians);  							}    							list.Add(next);  						}  					});  					SourceContainer.Visible = false;  					rebuildLock.Dispose();  					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Children));  					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,ArrayRadialObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ArrayRadialObject3D.cs,DrawEditor,The following statement contains a magic number: layer.World.RenderDirectionAxis(Axis' this.WorldMatrix()' 30);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,Create,The following statement contains a magic number: var fitBounds = new Object3D()  				{  					Visible = false'  					Color = new Color(Color.Red' 100)'  					Mesh = PlatonicSolids.CreateCube()  				};
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,DrawEditor,The following statement contains a magic number: var minXyz = center - new Vector3(SizeX / 2' SizeY / 2' SizeZ / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,DrawEditor,The following statement contains a magic number: var minXyz = center - new Vector3(SizeX / 2' SizeY / 2' SizeZ / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,DrawEditor,The following statement contains a magic number: var minXyz = center - new Vector3(SizeX / 2' SizeY / 2' SizeZ / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,DrawEditor,The following statement contains a magic number: var maxXyz = center + new Vector3(SizeX / 2' SizeY / 2' SizeZ / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,DrawEditor,The following statement contains a magic number: var maxXyz = center + new Vector3(SizeX / 2' SizeY / 2' SizeZ / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,DrawEditor,The following statement contains a magic number: var maxXyz = center + new Vector3(SizeX / 2' SizeY / 2' SizeZ / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: Children.Count == 2
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,UpdateBoundsItem,The following statement contains a magic number: Children.Count == 2
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToCylinderObject3D.cs,Create,The following statement contains a magic number: var fitBounds = new Object3D()  				{  					Visible = false'  					Color = new Color(Color.Red' 100)'  					Mesh = PlatonicSolids.CreateCube()  				};
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToCylinderObject3D.cs,DrawEditor,The following statement contains a magic number: layer.World.RenderCylinderOutline(Matrix4X4.Identity' aabb.Center' Diameter' aabb.ZSize' 90' Color.Red);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToCylinderObject3D.cs,GetAxisAlignedBoundingBox,The following statement contains a magic number: Children.Count == 2
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToCylinderObject3D.cs,MaxXyDistFromCenter,The following statement contains a magic number: double maxDistSqrd = 0.000001;
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToCylinderObject3D.cs,MaxXyDistFromCenter,The following statement contains a magic number: double maxDistSqrd = 0.000001;
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToCylinderObject3D.cs,AdjustChildSize,The following statement contains a magic number: centering = GetCenteringTransformVisualCenter(UntransformedChildren' Diameter / 2);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,FitToCylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToCylinderObject3D.cs,UpdateBoundsItem,The following statement contains a magic number: Children.Count == 2
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,Object3DExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Object3DExtensions.cs,MaxXyDistFromCenter,The following statement contains a magic number: double maxDistSqrd = 0.000001;
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,Object3DExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Object3DExtensions.cs,Offset,The following statement contains a magic number: offseter.Execute(ref solution' distance * 1000);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,SmoothPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Path\SmoothPathObject3D.cs,Rebuild,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Smooth Path".Localize()'  				null'  				(reporter' cancellationToken) =>  				{  					DoSmoothing((long)(SmoothDistance * 1000)' Iterations);    					rebuildLock.Dispose();  					Parent?.Invalidate(new InvalidateArgs(this' InvalidateType.Path));  					return Task.CompletedTask;  				});
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,SmoothPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Path\SmoothPathObject3D.cs,DoSmoothing,The following statement contains a magic number: IntPoint newPos = (prev + cur + next) / 3;
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,SmoothPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Path\SmoothPathObject3D.cs,DoSmoothing,The following statement contains a magic number: outputPolygons = ClipperLib.Clipper.CleanPolygons(outputPolygons' Math.Max(maxDist/10' 1.415));
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,SmoothPathObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\Path\SmoothPathObject3D.cs,DoSmoothing,The following statement contains a magic number: outputPolygons = ClipperLib.Clipper.CleanPolygons(outputPolygons' Math.Max(maxDist/10' 1.415));
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,RotateObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\RotateObject3D_2.cs,DrawEditor,The following statement contains a magic number: layer.World.RenderDirectionAxis(RotateAbout' this.WorldMatrix()' 30);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,ScaleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ScaleObject3D.cs,DrawEditor,The following statement contains a magic number: layer.World.RenderAxis(ScaleAbout' this.WorldMatrix()' 30' 1);
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,ScaleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ScaleObject3D.cs,UpdateControls,The following statement contains a magic number: switch (Operation)  				{  					case ScaleType.Inches_to_mm:  						scale = 25.4;  						break;  					case ScaleType.mm_to_Inches:  						scale = .0393;  						break;  					case ScaleType.mm_to_cm:  						scale = .1;  						break;  					case ScaleType.cm_to_mm:  						scale = 10;  						break;  				}
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,ScaleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ScaleObject3D.cs,UpdateControls,The following statement contains a magic number: switch (Operation)  				{  					case ScaleType.Inches_to_mm:  						scale = 25.4;  						break;  					case ScaleType.mm_to_Inches:  						scale = .0393;  						break;  					case ScaleType.mm_to_cm:  						scale = .1;  						break;  					case ScaleType.cm_to_mm:  						scale = 10;  						break;  				}
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,ScaleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ScaleObject3D.cs,UpdateControls,The following statement contains a magic number: switch (Operation)  				{  					case ScaleType.Inches_to_mm:  						scale = 25.4;  						break;  					case ScaleType.mm_to_Inches:  						scale = .0393;  						break;  					case ScaleType.mm_to_cm:  						scale = .1;  						break;  					case ScaleType.cm_to_mm:  						scale = 10;  						break;  				}
Magic Number,MatterHackers.MatterControl.DesignTools.Operations,ScaleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ScaleObject3D.cs,UpdateControls,The following statement contains a magic number: switch (Operation)  				{  					case ScaleType.Inches_to_mm:  						scale = 25.4;  						break;  					case ScaleType.mm_to_Inches:  						scale = .0393;  						break;  					case ScaleType.mm_to_cm:  						scale = .1;  						break;  					case ScaleType.cm_to_mm:  						scale = 10;  						break;  				}
Magic Number,MatterHackers.MatterControl.EeProm,EePromMarlinSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinSettings.cs,Import,The following statement contains a magic number: descriptionValue.Length == 2
Magic Number,MatterHackers.MatterControl.EeProm,MarlinEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinWindow.cs,MarlinEEPromPage,The following statement contains a magic number: exportButton.Click += (s' e) =>  			{  				UiThread.RunOnIdle(this.ExportSettings' .1);  			};
Magic Number,MatterHackers.MatterControl.EeProm,MarlinEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinWindow.cs,MarlinEEPromPage,The following statement contains a magic number: overflowBar.ExtendOverflowMenu = (popupMenu) =>  				{  					var menuItem = popupMenu.CreateMenuItem("Import".Localize());  					menuItem.Name = "Import Menu Item";  					menuItem.Click += (s' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							AggContext.FileDialogs.OpenFileDialog(  								new OpenFileDialogParams("EEPROM Settings|*.ini")  								{  									ActionButtonLabel = "Import EEPROM Settings".Localize()'  									Title = "Import EEPROM".Localize()'  								}'  								(openParams) =>  								{  									if (!string.IsNullOrEmpty(openParams.FileName))  									{  										currentEePromSettings.Import(openParams.FileName);  										SetUiToPrinterSettings(null' null);  									}  								});  						}' .1);  					};    					// put in the export button  					menuItem = popupMenu.CreateMenuItem("Export".Localize());  					menuItem.Name = "Export Menu Item";  					menuItem.Click += (s' e) =>  					{  						UiThread.RunOnIdle(this.ExportSettings' .1);  					};    					popupMenu.CreateSeparator();    					menuItem = popupMenu.CreateMenuItem("Reset to Factory Defaults".Localize());  					menuItem.Click += (s' e) =>  					{  						currentEePromSettings.SetPrinterToFactorySettings();  						currentEePromSettings.Update();  					};  				};
Magic Number,MatterHackers.MatterControl.EeProm,MarlinEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinWindow.cs,MarlinEEPromPage,The following statement contains a magic number: overflowBar.ExtendOverflowMenu = (popupMenu) =>  				{  					var menuItem = popupMenu.CreateMenuItem("Import".Localize());  					menuItem.Name = "Import Menu Item";  					menuItem.Click += (s' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							AggContext.FileDialogs.OpenFileDialog(  								new OpenFileDialogParams("EEPROM Settings|*.ini")  								{  									ActionButtonLabel = "Import EEPROM Settings".Localize()'  									Title = "Import EEPROM".Localize()'  								}'  								(openParams) =>  								{  									if (!string.IsNullOrEmpty(openParams.FileName))  									{  										currentEePromSettings.Import(openParams.FileName);  										SetUiToPrinterSettings(null' null);  									}  								});  						}' .1);  					};    					// put in the export button  					menuItem = popupMenu.CreateMenuItem("Export".Localize());  					menuItem.Name = "Export Menu Item";  					menuItem.Click += (s' e) =>  					{  						UiThread.RunOnIdle(this.ExportSettings' .1);  					};    					popupMenu.CreateSeparator();    					menuItem = popupMenu.CreateMenuItem("Reset to Factory Defaults".Localize());  					menuItem.Click += (s' e) =>  					{  						currentEePromSettings.SetPrinterToFactorySettings();  						currentEePromSettings.Update();  					};  				};
Magic Number,MatterHackers.MatterControl.EeProm,MarlinEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinWindow.cs,CreateMHNumEdit,The following statement contains a magic number: numberEditToCreate = new MHNumberEdit(0' theme' pixelWidth: 80' allowNegatives: true' allowDecimals: true)  			{  				SelectAllOnFocus = true'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(3' 0)'  				TabIndex = GetNextTabIndex()  			};
Magic Number,MatterHackers.MatterControl.EeProm,MarlinEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinWindow.cs,CreateMHNumEdit,The following statement contains a magic number: numberEditToCreate = new MHNumberEdit(0' theme' pixelWidth: 80' allowNegatives: true' allowDecimals: true)  			{  				SelectAllOnFocus = true'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(3' 0)'  				TabIndex = GetNextTabIndex()  			};
Magic Number,MatterHackers.MatterControl.EeProm,MarlinEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinWindow.cs,CreateTextField,The following statement contains a magic number: var container = new GuiWidget(textWidget.Height' 24);
Magic Number,MatterHackers.MatterControl.EeProm,MarlinEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinWindow.cs,Create4FieldSet,The following statement contains a magic number: var row = new FlowLayoutWidget  			{  				Margin = 3'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl.EeProm,MarlinEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinWindow.cs,Create4FieldSet,The following statement contains a magic number: var holder = new GuiWidget(labelWidget.Width' labelWidget.Height)  			{  				Margin = new BorderDouble(3' 0)'  				VAnchor = VAnchor.Fit | VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: string[] lines = line.Substring(4).Split(' ');
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: value = lines[2];
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: int startPos = 7 + lines[0].Length + lines[1].Length + lines[2].Length;
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: int startPos = 7 + lines[0].Length + lines[1].Length + lines[2].Length;
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: lines.Length > 2
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierParameter.cs,update,The following statement contains a magic number: line.Length > 4
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierParameter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierParameter.cs,Save,The following statement contains a magic number: type == 3
Magic Number,MatterHackers.MatterControl.EeProm,EePromRepetierStorage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierStorage.cs,Import,The following statement contains a magic number: descriptionValue.Length == 2
Magic Number,MatterHackers.MatterControl.EeProm,EEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,EEPromPage,The following statement contains a magic number: this.WindowSize = new VectorMath.Vector2(663' 575);
Magic Number,MatterHackers.MatterControl.EeProm,EEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,EEPromPage,The following statement contains a magic number: this.WindowSize = new VectorMath.Vector2(663' 575);
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,RepetierEEPromPage,The following statement contains a magic number: descriptionWidget.Margin = new BorderDouble(left: 3);
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,RepetierEEPromPage,The following statement contains a magic number: row.AddChild(new TextWidget("Value".Localize()' pointSize: theme.FontSize10' textColor: theme.TextColor)  			{  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(left: 5' right: 60)  			});
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,RepetierEEPromPage,The following statement contains a magic number: row.AddChild(new TextWidget("Value".Localize()' pointSize: theme.FontSize10' textColor: theme.TextColor)  			{  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(left: 5' right: 60)  			});
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,RepetierEEPromPage,The following statement contains a magic number: overflowBar.ExtendOverflowMenu = (popupMenu) =>  				{  					var menuItem = popupMenu.CreateMenuItem("Import".Localize());  					menuItem.Name = "Import Menu Item";  					menuItem.Click += (s' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							AggContext.FileDialogs.OpenFileDialog(  								new OpenFileDialogParams("EEPROM Settings|*.ini")  								{  									ActionButtonLabel = "Import EEPROM Settings".Localize()'  									Title = "Import EEPROM".Localize()'  								}'  								(openParams) =>  								{  									if (!string.IsNullOrEmpty(openParams.FileName))  									{  										currentEePromSettings.Import(openParams.FileName);  										RebuildUi();  									}  								});  						}' .1);  					};    					menuItem = popupMenu.CreateMenuItem("Export".Localize());  					menuItem.Name = "Export Menu Item";  					menuItem.Click += (s' e) =>  					{  						UiThread.RunOnIdle(this.ExportSettings' .1);  					};  				};
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,RepetierEEPromPage,The following statement contains a magic number: overflowBar.ExtendOverflowMenu = (popupMenu) =>  				{  					var menuItem = popupMenu.CreateMenuItem("Import".Localize());  					menuItem.Name = "Import Menu Item";  					menuItem.Click += (s' e) =>  					{  						UiThread.RunOnIdle(() =>  						{  							AggContext.FileDialogs.OpenFileDialog(  								new OpenFileDialogParams("EEPROM Settings|*.ini")  								{  									ActionButtonLabel = "Import EEPROM Settings".Localize()'  									Title = "Import EEPROM".Localize()'  								}'  								(openParams) =>  								{  									if (!string.IsNullOrEmpty(openParams.FileName))  									{  										currentEePromSettings.Import(openParams.FileName);  										RebuildUi();  									}  								});  						}' .1);  					};    					menuItem = popupMenu.CreateMenuItem("Export".Localize());  					menuItem.Name = "Export Menu Item";  					menuItem.Click += (s' e) =>  					{  						UiThread.RunOnIdle(this.ExportSettings' .1);  					};  				};
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,RepetierEEPromPage,The following statement contains a magic number: exportButton.Click += (s' e) =>  			{  				UiThread.RunOnIdle(this.ExportSettings' .1);  			};
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,RebuildUi,The following statement contains a magic number: var row = new FlowLayoutWidget  					{  						HAnchor = HAnchor.MaxFitOrStretch'  						Padding = new BorderDouble(5' 0)  					};
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,RebuildUi,The following statement contains a magic number: row.BackgroundColor = new Color(0' 0' 0' 30);
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,RebuildUi,The following statement contains a magic number: (settingsColumn.Children.Count % 2) == 1
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,RebuildUi,The following statement contains a magic number: var valueEdit = new MHNumberEdit(currentValue' theme' pixelWidth: 80 * GuiWidget.DeviceScale' allowNegatives: true' allowDecimals: true)  					{  						SelectAllOnFocus = true'  						TabIndex = currentTabIndex++'  						VAnchor = VAnchor.Center  					};
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,AddDescription,The following statement contains a magic number: var holder = new GuiWidget(340' 40);
Magic Number,MatterHackers.MatterControl.EeProm,RepetierEEPromPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromRepetierWindow.cs,AddDescription,The following statement contains a magic number: var holder = new GuiWidget(340' 40);
Magic Number,MatterControlLib,HelpIndex,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\HelpIndex.cs,Search,The following statement contains a magic number: writer.MaxDoc < 10
Magic Number,MatterControlLib,HelpIndex,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\HelpIndex.cs,Search,The following statement contains a magic number: var hits = searcher.Search(query' 40 /* top 20 */).ScoreDocs;
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: this.Height = 50;
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: this.Margin = new BorderDouble(6' 0' 6' 6);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: indicator.Width = 15;
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: indicator.BackgroundColor = new Color(38' 147' 51' 180);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: indicator.BackgroundColor = new Color(38' 147' 51' 180);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: indicator.BackgroundColor = new Color(38' 147' 51' 180);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: indicator.BackgroundColor = new Color(38' 147' 51' 180);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: middleColumn.Padding = new BorderDouble(6' 3);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: middleColumn.Padding = new BorderDouble(6' 3);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: partLabel = new TextWidget(labelName' pointSize: 15 * pointSizeFactor);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: Color timeTextColor = new Color(34' 34' 34);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: Color timeTextColor = new Color(34' 34' 34);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: Color timeTextColor = new Color(34' 34' 34);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: var timeLabel = new TextWidget("Time".Localize().ToUpper() + ": "' pointSize: 8 * pointSizeFactor);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: timeIndicator.Margin = new BorderDouble(right: 6);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: timestampColumn.Padding = new BorderDouble(6' 0);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: startTimeContainer.Padding = new BorderDouble(0' 3);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: TextWidget startLabel = new TextWidget(startLabelFull' pointSize: 8 * pointSizeFactor);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: TextWidget startDate = new TextWidget(startTimeString' pointSize: 12 * pointSizeFactor);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: endTimeContainer.Padding = new BorderDouble(0' 3);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: TextWidget endLabel = new TextWidget(endLabelFull' pointSize: 8 * pointSizeFactor);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: TextWidget endDate = new TextWidget(endTimeString' pointSize: 12 * pointSizeFactor);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,PrintHistoryListItem,The following statement contains a magic number: timestampColumn.Padding = new BorderDouble(5' 0' 15' 0);
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,ShowCantFindFileMessage,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				string maxLengthName = printItemWrapper.FileLocation;  				int maxLength = 43;  				if (maxLengthName.Length > maxLength)  				{  					string start = maxLengthName.Substring(0' 15) + "...";  					int amountRemaining = (maxLength - start.Length);  					string end = maxLengthName.Substring(maxLengthName.Length - amountRemaining' amountRemaining);  					maxLengthName = start + end;  				}  				string notFoundMessage = "Oops! Could not find this file".Localize() + ":";  				string message = "{0}:\n'{1}'".FormatWith(notFoundMessage' maxLengthName);  				string titleLabel = "Item not Found".Localize();  				StyledMessageBox.ShowMessageBox(onConfirmRemove' message' titleLabel' StyledMessageBox.MessageType.OK);  			});
Magic Number,MatterHackers.MatterControl.PrintHistory,PrintHistoryListItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\History\PrintHistoryListItem.cs,ShowCantFindFileMessage,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				string maxLengthName = printItemWrapper.FileLocation;  				int maxLength = 43;  				if (maxLengthName.Length > maxLength)  				{  					string start = maxLengthName.Substring(0' 15) + "...";  					int amountRemaining = (maxLength - start.Length);  					string end = maxLengthName.Substring(maxLengthName.Length - amountRemaining' amountRemaining);  					maxLengthName = start + end;  				}  				string notFoundMessage = "Oops! Could not find this file".Localize() + ":";  				string message = "{0}:\n'{1}'".FormatWith(notFoundMessage' maxLengthName);  				string titleLabel = "Item not Found".Localize();  				StyledMessageBox.ShowMessageBox(onConfirmRemove' message' titleLabel' StyledMessageBox.MessageType.OK);  			});
Magic Number,MatterHackers.MatterControl.Library.Export,GCodeExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\GCodeExport.cs,GetOptionsPanel,The following statement contains a magic number: var container = new FlowLayoutWidget()  			{  				Margin = new BorderDouble(left: 40' bottom: 10)'  			};
Magic Number,MatterHackers.MatterControl.Library.Export,GCodeExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\GCodeExport.cs,GetOptionsPanel,The following statement contains a magic number: var container = new FlowLayoutWidget()  			{  				Margin = new BorderDouble(left: 40' bottom: 10)'  			};
Magic Number,MatterHackers.MatterControl.Library.Export,GCodeExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\GCodeExport.cs,GetOptionsPanel,The following statement contains a magic number: var spiralVaseCheckbox = new CheckBox("Spiral Vase".Localize()' theme.TextColor' 10)  			{  				Checked = forceSpiralVase'  				Cursor = Cursors.Hand'  			};
Magic Number,MatterHackers.MatterControl.Library.Export,GCodeExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\GCodeExport.cs,GetOptionsPanel,The following statement contains a magic number: var levelingCheckbox = new CheckBox("Apply leveling to G-Code during export".Localize()' theme.TextColor' 10)  				{  					Checked = true'  					Cursor = Cursors.Hand'  					Margin = new BorderDouble(left: 10)  				};
Magic Number,MatterHackers.MatterControl.Library.Export,GCodeExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\GCodeExport.cs,GetOptionsPanel,The following statement contains a magic number: var levelingCheckbox = new CheckBox("Apply leveling to G-Code during export".Localize()' theme.TextColor' 10)  				{  					Checked = true'  					Cursor = Cursors.Hand'  					Margin = new BorderDouble(left: 10)  				};
Magic Number,MatterHackers.MatterControl.Library.Export,GCodeExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\GCodeExport.cs,ApplyStreamPipelineAndExport,The following statement contains a magic number: var multiplier = settings.GetValue<double>(SettingsKey.print_time_estimate_multiplier) / 100.0;
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\X3GExport.cs,TrimPacketStructure,The following statement contains a magic number: byte[] x3gCommand = new byte[s3gPacket.Length - 3];
Magic Number,MatterHackers.MatterControl.Plugins.X3GDriver,X3GExport,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Export\X3GExport.cs,TrimPacketStructure,The following statement contains a magic number: x3gCommand[i] = s3gPacket[i + 2];
Magic Number,MatterHackers.MatterControl.PrintLibrary,AddPrinterWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\AddPrinterWidget.cs,AddPrinterWidget,The following statement contains a magic number: panel2Column.AddChild(PrinterNameError = new TextWidget(""' 0' 0' 10)  			{  				TextColor = Color.Red'  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(top: 3)  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,AddPrinterWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\AddPrinterWidget.cs,AddPrinterWidget,The following statement contains a magic number: panel2Column.AddChild(PrinterNameError = new TextWidget(""' 0' 0' 10)  			{  				TextColor = Color.Red'  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(top: 3)  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,AddPrinterWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\AddPrinterWidget.cs,AddPrinterWidget,The following statement contains a magic number: printerInfo.Padding = new BorderDouble(right: theme.DefaultContainerPadding + 2);
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var commonMargin = new BorderDouble(4' 2);
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var commonMargin = new BorderDouble(4' 2);
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var openButton = new IconButton(AggContext.StaticData.LoadIcon("fa-folder-open_16.png"' 16' 16' theme.InvertIcons)' theme)  			{  				BackgroundColor = theme.MinimalShade'  				Margin = new BorderDouble(left: 8)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var openButton = new IconButton(AggContext.StaticData.LoadIcon("fa-folder-open_16.png"' 16' 16' theme.InvertIcons)' theme)  			{  				BackgroundColor = theme.MinimalShade'  				Margin = new BorderDouble(left: 8)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var openButton = new IconButton(AggContext.StaticData.LoadIcon("fa-folder-open_16.png"' 16' 16' theme.InvertIcons)' theme)  			{  				BackgroundColor = theme.MinimalShade'  				Margin = new BorderDouble(left: 8)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var exactCloneColumn = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(top: 15)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var exactCloneSummary = new WrappedTextWidget("Copy all settings including hardware calibration".Localize()' pointSize: theme.DefaultFontSize - 1' textColor: theme.TextColor)  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(left: 30' bottom: 10' top: 4)'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var exactCloneSummary = new WrappedTextWidget("Copy all settings including hardware calibration".Localize()' pointSize: theme.DefaultFontSize - 1' textColor: theme.TextColor)  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(left: 30' bottom: 10' top: 4)'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var exactCloneSummary = new WrappedTextWidget("Copy all settings including hardware calibration".Localize()' pointSize: theme.DefaultFontSize - 1' textColor: theme.TextColor)  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(left: 30' bottom: 10' top: 4)'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var copySummary = new WrappedTextWidget(summary' pointSize: theme.DefaultFontSize - 1' textColor: theme.TextColor)  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(left: 30' bottom: 10' top: 4)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var copySummary = new WrappedTextWidget(summary' pointSize: theme.DefaultFontSize - 1' textColor: theme.TextColor)  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(left: 30' bottom: 10' top: 4)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,CloneSettingsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\CloneSettingsPage.cs,CloneSettingsPage,The following statement contains a magic number: var copySummary = new WrappedTextWidget(summary' pointSize: theme.DefaultFontSize - 1' textColor: theme.TextColor)  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(left: 30' bottom: 10' top: 4)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\HardwareTabPage.cs,HardwareTabPage,The following statement contains a magic number: toolbar.AddChild(new TextButton("Inventory".Localize()' theme)  			{  				Padding = new BorderDouble(6' 0)'  				MinimumSize = new Vector2(0' theme.ButtonHeight)'  				Selectable = false  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\HardwareTabPage.cs,HardwareTabPage,The following statement contains a magic number: var treeView = new HardwareTreeView(theme)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch'  				Width = 300'  				Margin = 5  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\HardwareTabPage.cs,HardwareTabPage,The following statement contains a magic number: var treeView = new HardwareTreeView(theme)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch'  				Width = 300'  				Margin = 5  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\HardwareTabPage.cs,HardwareTabPage,The following statement contains a magic number: treeView.NodeMouseDoubleClick += (s' e) =>  			{  				if (e is MouseEventArgs mouseEvent  					&& s is GuiWidget clickedWidget  					&& mouseEvent.Button == MouseButtons.Left  						&& mouseEvent.Clicks == 2)  				{  					if (treeView?.SelectedNode.Tag is PrinterInfo printerInfo)  					{  						ApplicationController.Instance.OpenPrinter(printerInfo);  					}  				}  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTreeView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwareTreeView.cs,HardwareTreeView,The following statement contains a magic number: printersNode = new TreeNode(theme)  			{  				Text = "Printers".Localize()'  				HAnchor = HAnchor.Stretch'  				AlwaysExpandable = true'  				Image = AggContext.StaticData.LoadIcon("printer.png"' 16' 16' theme.InvertIcons)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTreeView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwareTreeView.cs,HardwareTreeView,The following statement contains a magic number: printersNode = new TreeNode(theme)  			{  				Text = "Printers".Localize()'  				HAnchor = HAnchor.Stretch'  				AlwaysExpandable = true'  				Image = AggContext.StaticData.LoadIcon("printer.png"' 16' 16' theme.InvertIcons)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTreeView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwareTreeView.cs,HardwareTreeView,The following statement contains a magic number: var forcedHeight = 20;
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTreeView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwareTreeView.cs,HardwareTreeView,The following statement contains a magic number: var createPrinter = new IconButton(AggContext.StaticData.LoadIcon("md-add-circle_18.png"' 18' 18' theme.InvertIcons)' theme)  			{  				Name = "Create Printer"'  				VAnchor = VAnchor.Center'  				Margin = theme.ButtonSpacing.Clone(left: theme.ButtonSpacing.Right)'  				ToolTipText = "Create Printer".Localize()'  				Height = forcedHeight'  				Width = forcedHeight  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTreeView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwareTreeView.cs,HardwareTreeView,The following statement contains a magic number: var createPrinter = new IconButton(AggContext.StaticData.LoadIcon("md-add-circle_18.png"' 18' 18' theme.InvertIcons)' theme)  			{  				Name = "Create Printer"'  				VAnchor = VAnchor.Center'  				Margin = theme.ButtonSpacing.Clone(left: theme.ButtonSpacing.Right)'  				ToolTipText = "Create Printer".Localize()'  				Height = forcedHeight'  				Width = forcedHeight  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTreeView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwareTreeView.cs,HardwareTreeView,The following statement contains a magic number: var importPrinter = new IconButton(AggContext.StaticData.LoadIcon("md-import_18.png"' 18' 18' theme.InvertIcons)' theme)  			{  				VAnchor = VAnchor.Center'  				Margin = theme.ButtonSpacing'  				ToolTipText = "Import Printer".Localize()'  				Height = forcedHeight'  				Width = forcedHeight'  				Name = "Import Printer Button"  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTreeView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwareTreeView.cs,HardwareTreeView,The following statement contains a magic number: var importPrinter = new IconButton(AggContext.StaticData.LoadIcon("md-import_18.png"' 18' 18' theme.InvertIcons)' theme)  			{  				VAnchor = VAnchor.Center'  				Margin = theme.ButtonSpacing'  				ToolTipText = "Import Printer".Localize()'  				Height = forcedHeight'  				Width = forcedHeight'  				Name = "Import Printer Button"  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTreeView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwareTreeView.cs,HardwareTreeView,The following statement contains a magic number: var materialsNode = new TreeNode(theme)  			{  				Text = "Materials".Localize()'  				AlwaysExpandable = true'  				Image = AggContext.StaticData.LoadIcon("filament.png"' 16' 16' theme.InvertIcons)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTreeView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwareTreeView.cs,HardwareTreeView,The following statement contains a magic number: var materialsNode = new TreeNode(theme)  			{  				Text = "Materials".Localize()'  				AlwaysExpandable = true'  				Image = AggContext.StaticData.LoadIcon("filament.png"' 16' 16' theme.InvertIcons)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,HardwareTreeView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwareTreeView.cs,Printer_SettingChanged,The following statement contains a magic number: UiThread.RunOnIdle(() =>  				{  					HardwareTreeView.CreatePrinterProfilesTree(printersNode' theme);  				}' .2);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The following statement contains a magic number: var searchPanel = new SearchInputBox(theme)  			{  				Visible = false'  				Margin = new BorderDouble(10' 0' 5' 0)'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The following statement contains a magic number: var searchPanel = new SearchInputBox(theme)  			{  				Visible = false'  				Margin = new BorderDouble(10' 0' 5' 0)'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The following statement contains a magic number: navBar.AddChild(  				viewOptionsButton = new PopupMenuButton(  					new ImageWidget(AggContext.StaticData.LoadIcon("fa-sort_16.png"' 32' 32' theme.InvertIcons))  					{  						//VAnchor = VAnchor.Center  					}'  					theme)  				{  					AlignToRightEdge = true'  					Name = "Print Library View Options"  				});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The following statement contains a magic number: navBar.AddChild(  				viewOptionsButton = new PopupMenuButton(  					new ImageWidget(AggContext.StaticData.LoadIcon("fa-sort_16.png"' 32' 32' theme.InvertIcons))  					{  						//VAnchor = VAnchor.Center  					}'  					theme)  				{  					AlignToRightEdge = true'  					Name = "Print Library View Options"  				});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The following statement contains a magic number: navBar.AddChild(  				viewMenuButton = new PopupMenuButton(  					new ImageWidget(AggContext.StaticData.LoadIcon("mi-view-list_10.png"' 32' 32' theme.InvertIcons))  					{  						//VAnchor = VAnchor.Center  					}'  					theme)  				{  					AlignToRightEdge = true  				});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The following statement contains a magic number: navBar.AddChild(  				viewMenuButton = new PopupMenuButton(  					new ImageWidget(AggContext.StaticData.LoadIcon("mi-view-list_10.png"' 32' 32' theme.InvertIcons))  					{  						//VAnchor = VAnchor.Center  					}'  					theme)  				{  					AlignToRightEdge = true  				});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The following statement contains a magic number: viewMenuButton.DynamicPopupContent = () =>  			{  				var popupMenu = new PopupMenu(ApplicationController.Instance.MenuTheme);    				var listView = this.libraryView;    				var siblingList = new List<GuiWidget>();    				popupMenu.CreateBoolMenuItem(  					"View List".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.RowListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.RowListView;  						listView.ListContentView = new RowListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #if DEBUG  				popupMenu.CreateBoolMenuItem(  					"View XSmall Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView18'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView18;  						listView.ListContentView = new IconListView(theme' 18);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Small Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView70'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView70;  						listView.ListContentView = new IconListView(theme' 70);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #endif  				popupMenu.CreateBoolMenuItem(  					"View Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView;  						listView.ListContentView = new IconListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Large Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView256'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView256;  						listView.ListContentView = new IconListView(theme' 256);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The following statement contains a magic number: viewMenuButton.DynamicPopupContent = () =>  			{  				var popupMenu = new PopupMenu(ApplicationController.Instance.MenuTheme);    				var listView = this.libraryView;    				var siblingList = new List<GuiWidget>();    				popupMenu.CreateBoolMenuItem(  					"View List".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.RowListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.RowListView;  						listView.ListContentView = new RowListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #if DEBUG  				popupMenu.CreateBoolMenuItem(  					"View XSmall Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView18'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView18;  						listView.ListContentView = new IconListView(theme' 18);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Small Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView70'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView70;  						listView.ListContentView = new IconListView(theme' 70);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #endif  				popupMenu.CreateBoolMenuItem(  					"View Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView;  						listView.ListContentView = new IconListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Large Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView256'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView256;  						listView.ListContentView = new IconListView(theme' 256);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The following statement contains a magic number: viewMenuButton.DynamicPopupContent = () =>  			{  				var popupMenu = new PopupMenu(ApplicationController.Instance.MenuTheme);    				var listView = this.libraryView;    				var siblingList = new List<GuiWidget>();    				popupMenu.CreateBoolMenuItem(  					"View List".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.RowListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.RowListView;  						listView.ListContentView = new RowListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #if DEBUG  				popupMenu.CreateBoolMenuItem(  					"View XSmall Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView18'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView18;  						listView.ListContentView = new IconListView(theme' 18);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Small Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView70'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView70;  						listView.ListContentView = new IconListView(theme' 70);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #endif  				popupMenu.CreateBoolMenuItem(  					"View Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView;  						listView.ListContentView = new IconListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Large Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView256'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView256;  						listView.ListContentView = new IconListView(theme' 256);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The following statement contains a magic number: libraryTreeView = new TreeView(theme)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch'  				Margin = 5  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,LibraryWidget,The following statement contains a magic number: var rootColumn = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(left: 10)  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateTreeNode,The following statement contains a magic number: ApplicationController.Instance.Library.LoadItemThumbnail(  				(icon) =>  				{  					treeNode.Image = icon.SetPreMultiply();  				}'  				null'  				containerItem'  				null'  				16'  				16'  				theme).ConfigureAwait(false);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateTreeNode,The following statement contains a magic number: ApplicationController.Instance.Library.LoadItemThumbnail(  				(icon) =>  				{  					treeNode.Image = icon.SetPreMultiply();  				}'  				null'  				containerItem'  				null'  				16'  				16'  				theme).ConfigureAwait(false);
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,AddLibraryButtonElements,The following statement contains a magic number: providerMessageWidget = new TextWidget("")  			{  				PointSize = 8'  				HAnchor = HAnchor.Right'  				VAnchor = VAnchor.Bottom'  				TextColor =  theme.BorderColor'  				Margin = new BorderDouble(6)'  				AutoExpandBoundsToText = true'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,AddLibraryButtonElements,The following statement contains a magic number: providerMessageWidget = new TextWidget("")  			{  				PointSize = 8'  				HAnchor = HAnchor.Right'  				VAnchor = VAnchor.Bottom'  				TextColor =  theme.BorderColor'  				Margin = new BorderDouble(6)'  				AutoExpandBoundsToText = true'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The following statement contains a magic number: menuActions.Add(new LibraryAction(ActionScope.ListView)  			{  				Icon = AggContext.StaticData.LoadIcon("cube.png"' 16' 16' ApplicationController.Instance.MenuTheme.InvertIcons)'  				Title = "Add".Localize()'  				ToolTipText = "Add an.stl' .obj' .amf' .gcode or.zip file to the Library".Localize()'  				Action = (selectedLibraryItems' listView) =>  				{  					UiThread.RunOnIdle(() =>  					{  						AggContext.FileDialogs.OpenFileDialog(  							new OpenFileDialogParams(ApplicationSettings.OpenPrintableFileParams' multiSelect: true)'  							(openParams) =>  							{  								if (openParams.FileNames != null)  								{  									var writableContainer = libraryView.ActiveContainer as ILibraryWritableContainer;  									if (writableContainer != null  										&& openParams.FileNames.Length > 0)  									{  										writableContainer.Add(openParams.FileNames.Select(f => new FileSystemFileItem(f)));  									}  								}  							});  					});  				}'  				IsEnabled = (s' l) => libraryView.ActiveContainer is ILibraryWritableContainer  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The following statement contains a magic number: menuActions.Add(new LibraryAction(ActionScope.ListView)  			{  				Icon = AggContext.StaticData.LoadIcon("cube.png"' 16' 16' ApplicationController.Instance.MenuTheme.InvertIcons)'  				Title = "Add".Localize()'  				ToolTipText = "Add an.stl' .obj' .amf' .gcode or.zip file to the Library".Localize()'  				Action = (selectedLibraryItems' listView) =>  				{  					UiThread.RunOnIdle(() =>  					{  						AggContext.FileDialogs.OpenFileDialog(  							new OpenFileDialogParams(ApplicationSettings.OpenPrintableFileParams' multiSelect: true)'  							(openParams) =>  							{  								if (openParams.FileNames != null)  								{  									var writableContainer = libraryView.ActiveContainer as ILibraryWritableContainer;  									if (writableContainer != null  										&& openParams.FileNames.Length > 0)  									{  										writableContainer.Add(openParams.FileNames.Select(f => new FileSystemFileItem(f)));  									}  								}  							});  					});  				}'  				IsEnabled = (s' l) => libraryView.ActiveContainer is ILibraryWritableContainer  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The following statement contains a magic number: menuActions.Add(new LibraryAction(ActionScope.ListView)  			{  				Title = "Create Folder".Localize()'  				Icon = AggContext.StaticData.LoadIcon("fa-folder-new_16.png"' 16' 16' ApplicationController.Instance.MenuTheme.InvertIcons)'  				Action = (selectedLibraryItems' listView) =>  				{  					DialogWindow.Show(  						new InputBoxPage(  							"Create Folder".Localize()'  							"Folder Name".Localize()'  							""'  							"Enter New Name Here".Localize()'  							"Create".Localize()'  							(newName) =>  							{  								if (!string.IsNullOrEmpty(newName)  									&& libraryView.ActiveContainer is ILibraryWritableContainer writableContainer)  								{  									writableContainer.Add(new[]  									{  									new CreateFolderItem() { Name = newName }  									});  								}  							}));  				}'  				IsEnabled = (s' l) =>  				{  					return libraryView.ActiveContainer is ILibraryWritableContainer writableContainer  						&& writableContainer?.AllowAction(ContainerActions.AddContainers) == true;  				}  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The following statement contains a magic number: menuActions.Add(new LibraryAction(ActionScope.ListView)  			{  				Title = "Create Folder".Localize()'  				Icon = AggContext.StaticData.LoadIcon("fa-folder-new_16.png"' 16' 16' ApplicationController.Instance.MenuTheme.InvertIcons)'  				Action = (selectedLibraryItems' listView) =>  				{  					DialogWindow.Show(  						new InputBoxPage(  							"Create Folder".Localize()'  							"Folder Name".Localize()'  							""'  							"Enter New Name Here".Localize()'  							"Create".Localize()'  							(newName) =>  							{  								if (!string.IsNullOrEmpty(newName)  									&& libraryView.ActiveContainer is ILibraryWritableContainer writableContainer)  								{  									writableContainer.Add(new[]  									{  									new CreateFolderItem() { Name = newName }  									});  								}  							}));  				}'  				IsEnabled = (s' l) =>  				{  					return libraryView.ActiveContainer is ILibraryWritableContainer writableContainer  						&& writableContainer?.AllowAction(ContainerActions.AddContainers) == true;  				}  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The following statement contains a magic number: menuActions.Add(new LibraryAction(ActionScope.ListItem)  			{  				Title = "Open".Localize()'  				Icon = AggContext.StaticData.LoadIcon("cube.png"' 16' 16' theme.InvertIcons)'  				Action = (selectedLibraryItems' listView) =>  				{  					ApplicationController.Instance.OpenIntoNewTab(selectedLibraryItems);  				}'  				IsEnabled = (selectedListItems' listView) =>  				{  					// Singleselect - disallow containers  					return listView.SelectedItems.Count == 1  						&& listView.SelectedItems.All(i => !(i.Model is ILibraryContainerLink));  				}  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The following statement contains a magic number: menuActions.Add(new LibraryAction(ActionScope.ListItem)  			{  				Title = "Open".Localize()'  				Icon = AggContext.StaticData.LoadIcon("cube.png"' 16' 16' theme.InvertIcons)'  				Action = (selectedLibraryItems' listView) =>  				{  					ApplicationController.Instance.OpenIntoNewTab(selectedLibraryItems);  				}'  				IsEnabled = (selectedListItems' listView) =>  				{  					// Singleselect - disallow containers  					return listView.SelectedItems.Count == 1  						&& listView.SelectedItems.All(i => !(i.Model is ILibraryContainerLink));  				}  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The following statement contains a magic number: menuActions.Add(new LibraryAction(ActionScope.ListItem)  			{  				Title = "Add to Bed".Localize()'  				Icon = AggContext.StaticData.LoadIcon("bed_add.png"' 16' 16' theme.InvertIcons)'  				Action = (selectedLibraryItems' listView) =>  				{  					var activeContext = ApplicationController.Instance.DragDropData;  					var printer = activeContext.View3DWidget.Printer;    					if (listView.SelectedItems.Count == 1 &&  						selectedLibraryItems.FirstOrDefault() is ILibraryAssetStream assetStream  						&& assetStream.ContentType == "gcode")  					{  						// Change loaded scene to new context  						printer.Bed.LoadContent(  							new EditContext()  							{  								SourceItem = assetStream'  								// No content store for GCode  								ContentStore = null  							}).ConfigureAwait(false);  					}  					else  					{  						activeContext.SceneContext.AddToPlate(selectedLibraryItems);  					}    					ApplicationController.Instance.BlinkTab(  						ApplicationController.Instance.MainView.TabControl.AllTabs.FirstOrDefault(t => t.TabContent is PrinterTabPage));  				}'  				IsEnabled = (selectedListItems' listView) =>  				{  					// Multiselect - disallow containers' require View3DWidget context  					return ApplicationController.Instance.DragDropData.View3DWidget != null  						&& listView.SelectedItems.Any()  						&& listView.SelectedItems.All(i => !(i.Model is ILibraryContainerLink));  				}  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The following statement contains a magic number: menuActions.Add(new LibraryAction(ActionScope.ListItem)  			{  				Title = "Add to Bed".Localize()'  				Icon = AggContext.StaticData.LoadIcon("bed_add.png"' 16' 16' theme.InvertIcons)'  				Action = (selectedLibraryItems' listView) =>  				{  					var activeContext = ApplicationController.Instance.DragDropData;  					var printer = activeContext.View3DWidget.Printer;    					if (listView.SelectedItems.Count == 1 &&  						selectedLibraryItems.FirstOrDefault() is ILibraryAssetStream assetStream  						&& assetStream.ContentType == "gcode")  					{  						// Change loaded scene to new context  						printer.Bed.LoadContent(  							new EditContext()  							{  								SourceItem = assetStream'  								// No content store for GCode  								ContentStore = null  							}).ConfigureAwait(false);  					}  					else  					{  						activeContext.SceneContext.AddToPlate(selectedLibraryItems);  					}    					ApplicationController.Instance.BlinkTab(  						ApplicationController.Instance.MainView.TabControl.AllTabs.FirstOrDefault(t => t.TabContent is PrinterTabPage));  				}'  				IsEnabled = (selectedListItems' listView) =>  				{  					// Multiselect - disallow containers' require View3DWidget context  					return ApplicationController.Instance.DragDropData.View3DWidget != null  						&& listView.SelectedItems.Any()  						&& listView.SelectedItems.All(i => !(i.Model is ILibraryContainerLink));  				}  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The following statement contains a magic number: menuActions.Add(new LibraryAction(ActionScope.ListItem)  			{  				Title = "Export".Localize()'  				Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' theme.InvertIcons)'  				Action = (selectedLibraryItems' listView) =>  				{  					ApplicationController.Instance.ExportLibraryItems(libraryView.SelectedItems.Select(item => item.Model));  				}'  				IsEnabled = (selectedListItems' listView) =>  				{  					// Multiselect - disallow containers  					return listView.SelectedItems.Any()  						&& listView.SelectedItems.All(i => !(i.Model is ILibraryContainerLink));  				}'  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,LibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\LibraryWidget.cs,CreateMenuActions,The following statement contains a magic number: menuActions.Add(new LibraryAction(ActionScope.ListItem)  			{  				Title = "Export".Localize()'  				Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' theme.InvertIcons)'  				Action = (selectedLibraryItems' listView) =>  				{  					ApplicationController.Instance.ExportLibraryItems(libraryView.SelectedItems.Select(item => item.Model));  				}'  				IsEnabled = (selectedListItems' listView) =>  				{  					// Multiselect - disallow containers  					return listView.SelectedItems.Any()  						&& listView.SelectedItems.All(i => !(i.Model is ILibraryContainerLink));  				}'  			});
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,PrintLibraryWidget,The following statement contains a magic number: var toolbar = new OverflowBar(AggContext.StaticData.LoadIcon("fa-sort_16.png"' 32' 32' theme.InvertIcons)' theme)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Name = "Folders Toolbar"  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,PrintLibraryWidget,The following statement contains a magic number: var toolbar = new OverflowBar(AggContext.StaticData.LoadIcon("fa-sort_16.png"' 32' 32' theme.InvertIcons)' theme)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Name = "Folders Toolbar"  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,PrintLibraryWidget,The following statement contains a magic number: toolbar.AddChild(  				viewMenuButton = new PopupMenuButton(  					new ImageWidget(AggContext.StaticData.LoadIcon("mi-view-list_10.png"' 32' 32' theme.InvertIcons))  					{  						//VAnchor = VAnchor.Center  					}'  					theme)  				{  					AlignToRightEdge = true  				});
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,PrintLibraryWidget,The following statement contains a magic number: toolbar.AddChild(  				viewMenuButton = new PopupMenuButton(  					new ImageWidget(AggContext.StaticData.LoadIcon("mi-view-list_10.png"' 32' 32' theme.InvertIcons))  					{  						//VAnchor = VAnchor.Center  					}'  					theme)  				{  					AlignToRightEdge = true  				});
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,PrintLibraryWidget,The following statement contains a magic number: viewMenuButton.DynamicPopupContent = () =>  			{  				var popupMenu = new PopupMenu(ApplicationController.Instance.MenuTheme);    				var listView = this.libraryView;    				var siblingList = new List<GuiWidget>();    				popupMenu.CreateBoolMenuItem(  					"View List".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.RowListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.RowListView;  						listView.ListContentView = new RowListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #if DEBUG  				popupMenu.CreateBoolMenuItem(  					"View XSmall Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView18'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView18;  						listView.ListContentView = new IconListView(theme' 18);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Small Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView70'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView70;  						listView.ListContentView = new IconListView(theme' 70);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #endif  				popupMenu.CreateBoolMenuItem(  					"View Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView;  						listView.ListContentView = new IconListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Large Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView256'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView256;  						listView.ListContentView = new IconListView(theme' 256);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,PrintLibraryWidget,The following statement contains a magic number: viewMenuButton.DynamicPopupContent = () =>  			{  				var popupMenu = new PopupMenu(ApplicationController.Instance.MenuTheme);    				var listView = this.libraryView;    				var siblingList = new List<GuiWidget>();    				popupMenu.CreateBoolMenuItem(  					"View List".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.RowListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.RowListView;  						listView.ListContentView = new RowListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #if DEBUG  				popupMenu.CreateBoolMenuItem(  					"View XSmall Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView18'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView18;  						listView.ListContentView = new IconListView(theme' 18);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Small Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView70'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView70;  						listView.ListContentView = new IconListView(theme' 70);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #endif  				popupMenu.CreateBoolMenuItem(  					"View Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView;  						listView.ListContentView = new IconListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Large Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView256'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView256;  						listView.ListContentView = new IconListView(theme' 256);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,PrintLibraryWidget,The following statement contains a magic number: viewMenuButton.DynamicPopupContent = () =>  			{  				var popupMenu = new PopupMenu(ApplicationController.Instance.MenuTheme);    				var listView = this.libraryView;    				var siblingList = new List<GuiWidget>();    				popupMenu.CreateBoolMenuItem(  					"View List".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.RowListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.RowListView;  						listView.ListContentView = new RowListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #if DEBUG  				popupMenu.CreateBoolMenuItem(  					"View XSmall Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView18'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView18;  						listView.ListContentView = new IconListView(theme' 18);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Small Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView70'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView70;  						listView.ListContentView = new IconListView(theme' 70);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);  #endif  				popupMenu.CreateBoolMenuItem(  					"View Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView;  						listView.ListContentView = new IconListView(theme);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				popupMenu.CreateBoolMenuItem(  					"View Large Icons".Localize()'  					() => ApplicationController.Instance.ViewState.LibraryViewMode == ListViewModes.IconListView256'  					(isChecked) =>  					{  						ApplicationController.Instance.ViewState.LibraryViewMode = ListViewModes.IconListView256;  						listView.ListContentView = new IconListView(theme' 256);  						listView.Reload().ConfigureAwait(false);  					}'  					useRadioStyle: true'  					siblingRadioButtonList: siblingList);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,PrintLibraryWidget,The following statement contains a magic number: var searchPanel = new SearchInputBox(theme)  			{  				Visible = false'  				Margin = new BorderDouble(10' 0' 5' 0)'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,PrintLibraryWidget,The following statement contains a magic number: var searchPanel = new SearchInputBox(theme)  			{  				Visible = false'  				Margin = new BorderDouble(10' 0' 5' 0)'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,AddLibraryButtonElements,The following statement contains a magic number: providerMessageWidget = new TextWidget("")  			{  				PointSize = 8'  				HAnchor = HAnchor.Right'  				VAnchor = VAnchor.Bottom'  				TextColor = theme.LightTextColor'  				Margin = new BorderDouble(6)'  				AutoExpandBoundsToText = true'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,PrintLibraryWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\PrintLibraryWidget.cs,AddLibraryButtonElements,The following statement contains a magic number: providerMessageWidget = new TextWidget("")  			{  				PointSize = 8'  				HAnchor = HAnchor.Right'  				VAnchor = VAnchor.Bottom'  				TextColor = theme.LightTextColor'  				Margin = new BorderDouble(6)'  				AutoExpandBoundsToText = true'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,SearchableTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\SearchableTreePanel.cs,SearchableTreePanel,The following statement contains a magic number: var searchIcon = AggContext.StaticData.LoadIcon("icon_search_24x24.png"' 16' 16' theme.InvertIcons).AjustAlpha(0.3);
Magic Number,MatterHackers.MatterControl.PrintLibrary,SearchableTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\SearchableTreePanel.cs,SearchableTreePanel,The following statement contains a magic number: var searchIcon = AggContext.StaticData.LoadIcon("icon_search_24x24.png"' 16' 16' theme.InvertIcons).AjustAlpha(0.3);
Magic Number,MatterHackers.MatterControl.PrintLibrary,SearchableTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\SearchableTreePanel.cs,SearchableTreePanel,The following statement contains a magic number: var searchIcon = AggContext.StaticData.LoadIcon("icon_search_24x24.png"' 16' 16' theme.InvertIcons).AjustAlpha(0.3);
Magic Number,MatterHackers.MatterControl.PrintLibrary,SearchableTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\SearchableTreePanel.cs,SearchableTreePanel,The following statement contains a magic number: searchBox = new SearchInputBox(theme)  			{  				Name = "Search"'  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(6)'  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,SearchableTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\SearchableTreePanel.cs,SearchableTreePanel,The following statement contains a magic number: searchInput.BeforeDraw += (s' e) =>  			{  				if (!searchBox.ResetButton.Visible)  				{  					e.Graphics2D.Render(  						searchIcon'  						searchInput.Width - searchIcon.Width - 5'  						searchInput.LocalBounds.Bottom + searchInput.Height / 2 - searchIcon.Height / 2);  				}  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,SearchableTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\SearchableTreePanel.cs,SearchableTreePanel,The following statement contains a magic number: searchInput.BeforeDraw += (s' e) =>  			{  				if (!searchBox.ResetButton.Visible)  				{  					e.Graphics2D.Render(  						searchIcon'  						searchInput.Width - searchIcon.Width - 5'  						searchInput.LocalBounds.Bottom + searchInput.Height / 2 - searchIcon.Height / 2);  				}  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,SearchableTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\SearchableTreePanel.cs,SearchableTreePanel,The following statement contains a magic number: searchInput.BeforeDraw += (s' e) =>  			{  				if (!searchBox.ResetButton.Visible)  				{  					e.Graphics2D.Render(  						searchIcon'  						searchInput.Width - searchIcon.Width - 5'  						searchInput.LocalBounds.Bottom + searchInput.Height / 2 - searchIcon.Height / 2);  				}  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,SearchableTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\SearchableTreePanel.cs,SearchableTreePanel,The following statement contains a magic number: horizontalSplitter = new Splitter()  			{  				SplitterDistance = Math.Max(UserSettings.Instance.LibraryViewWidth' 20)'  				SplitterSize = theme.SplitterWidth'  				SplitterBackground = theme.SplitterBackground  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,SearchableTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\SearchableTreePanel.cs,SearchableTreePanel,The following statement contains a magic number: horizontalSplitter.DistanceChanged += (s' e) =>  			{  				UserSettings.Instance.LibraryViewWidth = Math.Max(horizontalSplitter.SplitterDistance' 20);  			};
Magic Number,MatterHackers.MatterControl.PrintLibrary,SearchableTreePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\SearchableTreePanel.cs,SearchableTreePanel,The following statement contains a magic number: contentPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(left: 2)  			};
Magic Number,MatterHackers.MatterControl.Library.Widgets.HardwarePage,PrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\PrinterDetails.cs,CreateProductDataWidgets,The following statement contains a magic number: var image = new ImageBuffer(150' 10);
Magic Number,MatterHackers.MatterControl.Library.Widgets.HardwarePage,PrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\PrinterDetails.cs,CreateProductDataWidgets,The following statement contains a magic number: var image = new ImageBuffer(150' 10);
Magic Number,MatterHackers.MatterControl.Library.Widgets.HardwarePage,PrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\PrinterDetails.cs,CreateProductDataWidgets,The following statement contains a magic number: var description = new MarkdownWidget(theme)  			{  				MinimumSize = new VectorMath.Vector2(50' 0)'  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				AutoScroll = false'  				Markdown = product.ProductDescription.Trim()  			};
Magic Number,MatterHackers.MatterControl.Library.Widgets.HardwarePage,PrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\PrinterDetails.cs,CreateProductDataWidgets,The following statement contains a magic number: descriptionBackground.BeforeDraw += (s' e) =>  			{  				var rect = new RoundedRect(descriptionBackground.LocalBounds' 3);  				e.Graphics2D.Render(rect' theme.SlightShade);  			};
Magic Number,MatterHackers.MatterControl.Library.Widgets.HardwarePage,PrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\PrinterDetails.cs,CreateProductDataWidgets,The following statement contains a magic number: var icon = new ImageBuffer(80' 0);
Magic Number,MatterHackers.MatterControl.Library.Widgets.HardwarePage,PrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\PrinterDetails.cs,AddHeading,The following statement contains a magic number: var row = new FlowLayoutWidget()  			{  				Margin = new BorderDouble(top: 5)  			};
Magic Number,MatterHackers.MatterControl.Library.Widgets.HardwarePage,PrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\PrinterDetails.cs,AddHeading,The following statement contains a magic number: row.AddChild(new ImageWidget(icon' false)  			{  				Margin = new BorderDouble(right: 4)'  				VAnchor = VAnchor.Center  			});
Magic Number,MatterHackers.MatterControl.Library.Widgets.HardwarePage,PrinterDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\PrinterDetails.cs,AddHeading,The following statement contains a magic number: var row = new FlowLayoutWidget()  			{  				Margin = new BorderDouble(top: 5)  			};
Magic Number,MatterHackers.MatterControl.Library.Widgets.HardwarePage,AddOnRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\HardwarePage\PrinterDetails.cs,AddOnRow,The following statement contains a magic number: imageWidget.Margin = 4;
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Queue\QueueData.cs,AddItem,The following statement contains a magic number: estimatedMemoryUse > 100000000
Magic Number,MatterHackers.MatterControl.PrintQueue,QueueData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Queue\QueueData.cs,AddItem,The following statement contains a magic number: AggContext.PhysicalMemory < 2000000000
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExploreItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExploreItem.cs,ExploreItem,The following statement contains a magic number: this.Width = 400 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExploreItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExploreItem.cs,ExploreItem,The following statement contains a magic number: var wrappedText = new WrappedTextWidget(item.title' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  			{  				Selectable = false'  				VAnchor = VAnchor.Center | VAnchor.Fit'  				Margin = 3  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,ExplorePanel,The following statement contains a magic number: this.Margin = new BorderDouble(30 - 11' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,ExplorePanel,The following statement contains a magic number: this.Margin = new BorderDouble(30 - 11' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,OnLoad,The following statement contains a magic number: this.Margin = new BorderDouble(20);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,OnLoad,The following statement contains a magic number: Task.Run(() =>  			{  				// Construct directly from cache  				WebCache.RetrieveText($"https://www.matterhackers.com/feeds/{relativeUrl}"' (newData) =>  				{  					lock (locker)  					{  						explorerFeed = JsonConvert.DeserializeObject<FeedData>(newData);    						if (explorerFeed != null)  						{  							UiThread.RunOnIdle(() =>  							{  								this.CloseAllChildren();    									// Add controls for content  								foreach (var content in explorerFeed.Content)  								{  									AddContentItem(content);  								}    								// Force layout to change to get it working  								this.Margin = new BorderDouble(20);  								this.Margin = oldMargin;  							});  						}  					}  				});  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following statement contains a magic number: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExploreSection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExploreSection.cs,AddContent,The following statement contains a magic number: int leftRightMargin = 5;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExploreSection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExploreSection.cs,AddContent,The following statement contains a magic number: int topBottomMargin = 5;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExploreSection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExploreSection.cs,AddContent,The following statement contains a magic number: this.AddChild(new TextWidget(content.group_title' pointSize: theme.H1PointSize' textColor: theme.TextColor' bold: true)  				{  					HAnchor = HAnchor.Left'  					Margin = new BorderDouble(leftRightMargin' 5)  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExploreSection,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExploreSection.cs,AddContent,The following statement contains a magic number: moreButton.Click += (s' e1) =>  				{  					// if we can go out to the site than do that  					if (content.group_link != null)  					{  						ApplicationController.Instance.LaunchBrowser(content.group_link);  					}  					else // show more items in the list  					{  						var scroll = this.Parents<ScrollableWidget>().FirstOrDefault();  						var position = scroll.ScrollPositionFromTop;    						maxStuff += 6;  						AddContent();    						scroll.ScrollPositionFromTop = position;  					}  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,StoreTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\StoreTabPage.cs,StoreTabPage,The following statement contains a magic number: this.ScrollArea.Padding = new BorderDouble(3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,StoreTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\StoreTabPage.cs,StoreTabPage,The following statement contains a magic number: this.MinimumSize = new Vector2(0' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,StoreTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\StoreTabPage.cs,OnMouseWheel,The following statement contains a magic number: this.ScrollPosition += new Vector2(0' (ExploreItem.IconSize + (ExploreItem.ItemSpacing * 2)) * direction);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,GCode2DWidget,The following statement contains a magic number: this.LocalBounds = new RectangleDouble(0' 0' 100' 100);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,GCode2DWidget,The following statement contains a magic number: this.LocalBounds = new RectangleDouble(0' 0' 100' 100);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,GCode2DWidget,The following statement contains a magic number: overlay.NewGraphics2D().Clear(new Color(theme.BackgroundColor' 100));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,OnDraw,The following statement contains a magic number: double gridLineWidths = 0.2 * layerScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,DrawBedImage,The following statement contains a magic number: Vector2 gridOffset = gridCenterMm - gridSizeMm / 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,Zoom,The following statement contains a magic number: ScalePartAndFixPosition(new MouseEventArgs(MouseButtons.None'0' Width/2' Height/2' 0)' layerScale * scaleAmount);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,Zoom,The following statement contains a magic number: ScalePartAndFixPosition(new MouseEventArgs(MouseButtons.None'0' Width/2' Height/2' 0)' layerScale * scaleAmount);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,OnMouseWheel,The following statement contains a magic number: const double deltaFor1Click = 120;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,OnMouseWheel,The following statement contains a magic number: double scaleAmount = (mouseEvent.WheelDelta / deltaFor1Click) * .1;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,OnMouseMove,The following statement contains a magic number: switch (TransformState)  				{  					case ETransformState.Move:  						scalingTransform.inverse_transform(ref mouseDelta);    						unscaledRenderOffset += mouseDelta;  						break;    					case ETransformState.Scale:  						double zoomDelta = 1;  						if (mouseDelta.Y < 0)  						{  							zoomDelta = 1 - (-1 * mouseDelta.Y / 100);  						}  						else if (mouseDelta.Y > 0)  						{  							zoomDelta = 1 + (1 * mouseDelta.Y / 100);  						}    						Vector2 mousePreScale = mouseDownPosition;  						totalTransform.inverse_transform(ref mousePreScale);    						layerScale *= zoomDelta;    						Vector2 mousePostScale = mouseDownPosition;  						totalTransform.inverse_transform(ref mousePostScale);    						unscaledRenderOffset += (mousePostScale - mousePreScale);  						break;    					default:  						throw new NotImplementedException();  				}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCode2DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCode2DWidget.cs,OnMouseMove,The following statement contains a magic number: switch (TransformState)  				{  					case ETransformState.Move:  						scalingTransform.inverse_transform(ref mouseDelta);    						unscaledRenderOffset += mouseDelta;  						break;    					case ETransformState.Scale:  						double zoomDelta = 1;  						if (mouseDelta.Y < 0)  						{  							zoomDelta = 1 - (-1 * mouseDelta.Y / 100);  						}  						else if (mouseDelta.Y > 0)  						{  							zoomDelta = 1 + (1 * mouseDelta.Y / 100);  						}    						Vector2 mousePreScale = mouseDownPosition;  						totalTransform.inverse_transform(ref mousePreScale);    						layerScale *= zoomDelta;    						Vector2 mousePostScale = mouseDownPosition;  						totalTransform.inverse_transform(ref mousePostScale);    						unscaledRenderOffset += (mousePostScale - mousePreScale);  						break;    					default:  						throw new NotImplementedException();  				}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodeDebugView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeDebugView.cs,LayerFeaturesScrollbar_SecondValueChanged,The following statement contains a magic number: int featureIndex = (int)(featuresOnLayer * renderInfo.FeatureToEndOnRatio0To1 + .5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodeDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeDetails.cs,SecondsToTime,The following statement contains a magic number: int hoursRemaining = (int)(secondsRemaining / (60 * 60));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodeDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeDetails.cs,SecondsToTime,The following statement contains a magic number: int hoursRemaining = (int)(secondsRemaining / (60 * 60));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodeDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeDetails.cs,SecondsToTime,The following statement contains a magic number: int minutesRemaining = (int)(secondsRemaining / 60 - hoursRemaining * 60);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodeDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeDetails.cs,SecondsToTime,The following statement contains a magic number: int minutesRemaining = (int)(secondsRemaining / 60 - hoursRemaining * 60);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodeDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeDetails.cs,SecondsToTime,The following statement contains a magic number: secondsRemaining = secondsRemaining % 60;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodeDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeDetails.cs,FilamentVolume,The following statement contains a magic number: return string.Format("{0:0.00} cm³"' loadedGCode.GetFilamentCubicMm(printer.Settings.GetValue<double>(SettingsKey.filament_diameter)) / 1000);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodeDetails,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeDetails.cs,TotalCost,The following statement contains a magic number: return loadedGCode.TotalMass(printer) / 1000 * filamentCost;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodeOptionsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodeDetails\GCodeOptionsPanel.cs,GCodeOptionsPanel,The following statement contains a magic number: settingsItem.Padding = settingsItem.Padding.Clone(right: 8);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,RefreshGCodeDetails,The following statement contains a magic number: loadedGCodeSection.AddChild(  					speedsWidget = new SectionWidget(  						"Speeds".Localize()'  						new SpeedsLegend(sceneContext.LoadedGCode' theme' printer)  						{  							HAnchor = HAnchor.Stretch'  							Visible = renderSpeeds'  							Padding = new BorderDouble(15' 4)  						}'  						theme'  						serializationKey: "gcode_panel_speeds"'  						expanded: true)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,RefreshGCodeDetails,The following statement contains a magic number: loadedGCodeSection.AddChild(  					speedsWidget = new SectionWidget(  						"Speeds".Localize()'  						new SpeedsLegend(sceneContext.LoadedGCode' theme' printer)  						{  							HAnchor = HAnchor.Stretch'  							Visible = renderSpeeds'  							Padding = new BorderDouble(15' 4)  						}'  						theme'  						serializationKey: "gcode_panel_speeds"'  						expanded: true)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,RefreshGCodeDetails,The following statement contains a magic number: loadedGCodeSection.AddChild(  					new SectionWidget(  						"Details".Localize()'  						new GCodeDetailsView(printer.Bed.LoadedGCode' printer' theme)  						{  							HAnchor = HAnchor.Stretch'  							Margin = new BorderDouble(bottom: 3)'  							Padding = new BorderDouble(15' 4)  						}'  						theme'  						serializationKey: "gcode_panel_details"'  						expanded: true)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,RefreshGCodeDetails,The following statement contains a magic number: loadedGCodeSection.AddChild(  					new SectionWidget(  						"Details".Localize()'  						new GCodeDetailsView(printer.Bed.LoadedGCode' printer' theme)  						{  							HAnchor = HAnchor.Stretch'  							Margin = new BorderDouble(bottom: 3)'  							Padding = new BorderDouble(15' 4)  						}'  						theme'  						serializationKey: "gcode_panel_details"'  						expanded: true)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,RefreshGCodeDetails,The following statement contains a magic number: loadedGCodeSection.AddChild(  					new SectionWidget(  						"Details".Localize()'  						new GCodeDetailsView(printer.Bed.LoadedGCode' printer' theme)  						{  							HAnchor = HAnchor.Stretch'  							Margin = new BorderDouble(bottom: 3)'  							Padding = new BorderDouble(15' 4)  						}'  						theme'  						serializationKey: "gcode_panel_details"'  						expanded: true)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,RefreshGCodeDetails,The following statement contains a magic number: loadedGCodeSection.AddChild(  					new SectionWidget(  						"Layer".Localize()'  						new GCodeLayerDetailsView(printer.Bed.LoadedGCode' sceneContext' theme)  						{  							HAnchor = HAnchor.Stretch'  							Margin = new BorderDouble(bottom: 3)'  							Padding = new BorderDouble(15' 4)  						}'  						theme'  						serializationKey: "gcode_panel_layer_details"'  						expanded: true)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,RefreshGCodeDetails,The following statement contains a magic number: loadedGCodeSection.AddChild(  					new SectionWidget(  						"Layer".Localize()'  						new GCodeLayerDetailsView(printer.Bed.LoadedGCode' sceneContext' theme)  						{  							HAnchor = HAnchor.Stretch'  							Margin = new BorderDouble(bottom: 3)'  							Padding = new BorderDouble(15' 4)  						}'  						theme'  						serializationKey: "gcode_panel_layer_details"'  						expanded: true)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,RefreshGCodeDetails,The following statement contains a magic number: loadedGCodeSection.AddChild(  					new SectionWidget(  						"Layer".Localize()'  						new GCodeLayerDetailsView(printer.Bed.LoadedGCode' sceneContext' theme)  						{  							HAnchor = HAnchor.Stretch'  							Margin = new BorderDouble(bottom: 3)'  							Padding = new BorderDouble(15' 4)  						}'  						theme'  						serializationKey: "gcode_panel_layer_details"'  						expanded: true)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,RefreshGCodeDetails,The following statement contains a magic number: loadedGCodeSection.AddChild(  					lineInspectorWidget = new SectionWidget(  						"Line Inspector".Localize()'  						new GCodeDebugView(printerTabPage' printer.Bed.LoadedGCode' sceneContext' theme)  						{  							HAnchor = HAnchor.Stretch'  							Margin = new BorderDouble(bottom: 3)'  							Padding = new BorderDouble(15' 4)  						}'  						theme'  						serializationKey: "gcode_panel_line_inspector"'  						expanded: false)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,RefreshGCodeDetails,The following statement contains a magic number: loadedGCodeSection.AddChild(  					lineInspectorWidget = new SectionWidget(  						"Line Inspector".Localize()'  						new GCodeDebugView(printerTabPage' printer.Bed.LoadedGCode' sceneContext' theme)  						{  							HAnchor = HAnchor.Stretch'  							Margin = new BorderDouble(bottom: 3)'  							Padding = new BorderDouble(15' 4)  						}'  						theme'  						serializationKey: "gcode_panel_line_inspector"'  						expanded: false)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,RefreshGCodeDetails,The following statement contains a magic number: loadedGCodeSection.AddChild(  					lineInspectorWidget = new SectionWidget(  						"Line Inspector".Localize()'  						new GCodeDebugView(printerTabPage' printer.Bed.LoadedGCode' sceneContext' theme)  						{  							HAnchor = HAnchor.Stretch'  							Margin = new BorderDouble(bottom: 3)'  							Padding = new BorderDouble(15' 4)  						}'  						theme'  						serializationKey: "gcode_panel_line_inspector"'  						expanded: false)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,EnsureSectionWidgetStyling,The following statement contains a magic number: contentPanel.Padding = new BorderDouble(10' 0' 10' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,EnsureSectionWidgetStyling,The following statement contains a magic number: contentPanel.Padding = new BorderDouble(10' 0' 10' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GCodePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GCodePanel.cs,EnsureSectionWidgetStyling,The following statement contains a magic number: contentPanel.Margin = contentPanel.Margin.Clone(bottom: 4);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GenerateSupportPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GenerateSupportPanel.cs,GenerateSupportPanel,The following statement contains a magic number: this.Width = 300;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GenerateSupportPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\GenerateSupportPanel.cs,GenerateSupportPanel,The following statement contains a magic number: var buttonRow = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(top: 5)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ItemColorButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ItemColorButton.cs,ItemColorButton,The following statement contains a magic number: var scaledButtonSize = 14 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ItemColorButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ItemColorButton.cs,ItemColorButton,The following statement contains a magic number: Width = 30 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ItemColorButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ItemColorButton.cs,ItemColorButton,The following statement contains a magic number: Height = 30 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ItemColorButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ItemColorButton.cs,ItemColorButton,The following statement contains a magic number: this.DynamicPopupContent = () =>  			{  #if false  				var container = new GuiWidget(128' 128);  				var picker = new RadialColorPicker()  				{  					SelectedColor = selectedColor'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Stretch'  				};    				picker.SelectedColorChanged += (s' newColor) => colorButton.BackgroundColor = picker.SelectedColor;    				container.AddChild(picker);    				return container;  #else  				return new ColorSwatchSelector(menuTheme'  					buttonSize: 16'  					buttonSpacing: new BorderDouble(1' 1' 0' 0)'  					colorNotifier: (newColor) => colorButton.BackgroundColor = newColor)  				{  					Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor'  					HAnchor = HAnchor.Fit'  					VAnchor = VAnchor.Fit  				};  #endif  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ItemMaterialButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ItemMaterialButton.cs,ItemMaterialButton,The following statement contains a magic number: var scaledButtonSize = 14 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ItemMaterialButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ItemMaterialButton.cs,ItemMaterialButton,The following statement contains a magic number: Width = 30 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ItemMaterialButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ItemMaterialButton.cs,ItemMaterialButton,The following statement contains a magic number: Height = 30 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: var extensionArea = new LeftClipFlowLayoutWidget()  			{  				BackgroundColor = theme.TabBarBackground'  				VAnchor = VAnchor.Stretch'  				Padding = new BorderDouble(left: 8)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: tabControl.TabBar.Padding = theme.TabbarPadding.Clone(top: theme.TabbarPadding.Top * 2' bottom: 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: updateAvailableButton = new LinkLabel("Update Available".Localize()' theme)  				{  					Visible = false'  					Name = "Update Available Link"'  					ToolTipText = "There is a new update available for download".Localize()'  					VAnchor = VAnchor.Center'  					Margin = new BorderDouble(10' 0)  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: tabControl.AddTab(  				new ChromeTab("Store"' "Store".Localize()' tabControl' new StoreTabPage(theme)' theme' hasClose: false)  				{  					MinimumSize = new Vector2(0' theme.TabButtonHeight)'  					Name = "Store Tab"'  					Padding = new BorderDouble(15' 0)'  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: tabControl.AddTab(  				new ChromeTab("Library"' "Library".Localize()' tabControl' libraryWidget' theme' hasClose: false)  				{  					MinimumSize = new Vector2(0' theme.TabButtonHeight)'  					Name = "Library Tab"'  					Padding = new BorderDouble(15' 0)'  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: tabControl.AddTab(  				new ChromeTab(  					"Hardware"'  					"Hardware".Localize()'  					tabControl'  					new HardwareTabPage(theme)  					{  						BackgroundColor = theme.BackgroundColor  					}'  					theme'  					hasClose: false)  				{  					MinimumSize = new Vector2(0' theme.TabButtonHeight)'  					Name = "Hardware Tab"'  					Padding = new BorderDouble(15' 0)'  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: statusBar = new Toolbar(theme)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Absolute'  				Padding = 1'  				Height = 22'  				BackgroundColor = theme.BackgroundColor'  				Border = new BorderDouble(top: 1)'  				BorderColor = theme.BorderColor20'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: stretchStatusPanel = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch'  				Padding = new BorderDouble(right: 3)'  				Margin = new BorderDouble(right: 2' top: 1' bottom: 1)'  				Border = new BorderDouble(1)'  				BackgroundColor = theme.MinimalShade.WithAlpha(10)'  				BorderColor = theme.SlightShade'  				Width = 200  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: stretchStatusPanel = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch'  				Padding = new BorderDouble(right: 3)'  				Margin = new BorderDouble(right: 2' top: 1' bottom: 1)'  				Border = new BorderDouble(1)'  				BackgroundColor = theme.MinimalShade.WithAlpha(10)'  				BorderColor = theme.SlightShade'  				Width = 200  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: stretchStatusPanel = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch'  				Padding = new BorderDouble(right: 3)'  				Margin = new BorderDouble(right: 2' top: 1' bottom: 1)'  				Border = new BorderDouble(1)'  				BackgroundColor = theme.MinimalShade.WithAlpha(10)'  				BorderColor = theme.SlightShade'  				Width = 200  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: stretchStatusPanel = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Stretch'  				Padding = new BorderDouble(right: 3)'  				Margin = new BorderDouble(right: 2' top: 1' bottom: 1)'  				Border = new BorderDouble(1)'  				BackgroundColor = theme.MinimalShade.WithAlpha(10)'  				BorderColor = theme.SlightShade'  				Width = 200  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,MainViewWidget,The following statement contains a magic number: var panelBackgroundColor = theme.MinimalShade.WithAlpha(10);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,ShowUpdateAvailableAnimation,The following statement contains a magic number: double displayTime = 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,ShowUpdateAvailableAnimation,The following statement contains a magic number: var flashBackground = new Animation()  			{  				DrawTarget = updateAvailableButton'  				FramesPerSecond = 10'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,ShowUpdateAvailableAnimation,The following statement contains a magic number: flashBackground.Update += (s1' updateEvent) =>  			{  				totalSeconds += updateEvent.SecondsPassed;  				if (totalSeconds < displayTime)  				{  					double blend = AttentionGetter.GetFadeInOutPulseRatio(totalSeconds' pulseTime);  					var color = new Color(startColor' (int)((1 - blend) * 255));  					foreach (var textWidget in textWidgets)  					{  						textWidget.TextColor = color;  					}  				}  				else  				{  					foreach (var textWidget in textWidgets)  					{  						textWidget.TextColor = startColor;  					}    					flashBackground.Stop();  				}  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreateNetworkStatusPanel,The following statement contains a magic number: var networkStatus = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Stretch'  				Padding = new BorderDouble(right: 3)'  				Margin = new BorderDouble(right: 2' top: 1' bottom: 1)'  				Border = new BorderDouble(1)'  				BackgroundColor = theme.MinimalShade.WithAlpha(10)'  				BorderColor = theme.SlightShade'  				Width = 120  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreateNetworkStatusPanel,The following statement contains a magic number: var networkStatus = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Stretch'  				Padding = new BorderDouble(right: 3)'  				Margin = new BorderDouble(right: 2' top: 1' bottom: 1)'  				Border = new BorderDouble(1)'  				BackgroundColor = theme.MinimalShade.WithAlpha(10)'  				BorderColor = theme.SlightShade'  				Width = 120  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreateNetworkStatusPanel,The following statement contains a magic number: var networkStatus = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Stretch'  				Padding = new BorderDouble(right: 3)'  				Margin = new BorderDouble(right: 2' top: 1' bottom: 1)'  				Border = new BorderDouble(1)'  				BackgroundColor = theme.MinimalShade.WithAlpha(10)'  				BorderColor = theme.SlightShade'  				Width = 120  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreateNetworkStatusPanel,The following statement contains a magic number: var networkStatus = new GuiWidget()  			{  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Stretch'  				Padding = new BorderDouble(right: 3)'  				Margin = new BorderDouble(right: 2' top: 1' bottom: 1)'  				Border = new BorderDouble(1)'  				BackgroundColor = theme.MinimalShade.WithAlpha(10)'  				BorderColor = theme.SlightShade'  				Width = 120  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreateThemeStatusPanel,The following statement contains a magic number: var themePanel = new GuiWidget()  			{  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Stretch'  				Margin = new BorderDouble(right: 2' top: 1' bottom: 1)'  				Border = new BorderDouble(1)'  				BackgroundColor = panelBackgroundColor'  				BorderColor = theme.SlightShade'  				Cursor = Cursors.Hand'  				ToolTipText = "Theme".Localize()'  				Name = "Theme Select Button"  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreateThemeStatusPanel,The following statement contains a magic number: themePanel.AddChild(  				new ImageWidget(AggContext.StaticData.LoadIcon("theme.png"' 16' 16' theme.InvertIcons)' false)  				{  					HAnchor = HAnchor.Center | HAnchor.Absolute'  					VAnchor = VAnchor.Center | VAnchor.Absolute'  					Margin = new BorderDouble(5' 0)'  					Selectable = false  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreateThemeStatusPanel,The following statement contains a magic number: themePanel.AddChild(  				new ImageWidget(AggContext.StaticData.LoadIcon("theme.png"' 16' 16' theme.InvertIcons)' false)  				{  					HAnchor = HAnchor.Center | HAnchor.Absolute'  					VAnchor = VAnchor.Center | VAnchor.Absolute'  					Margin = new BorderDouble(5' 0)'  					Selectable = false  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreateThemeStatusPanel,The following statement contains a magic number: themePanel.AddChild(  				new ImageWidget(AggContext.StaticData.LoadIcon("theme.png"' 16' 16' theme.InvertIcons)' false)  				{  					HAnchor = HAnchor.Center | HAnchor.Absolute'  					VAnchor = VAnchor.Center | VAnchor.Absolute'  					Margin = new BorderDouble(5' 0)'  					Selectable = false  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreateThemeStatusPanel,The following statement contains a magic number: themePanel.Click += (s' e) =>  			{  				themePanel.BackgroundColor = theme.DropList.Open.BackgroundColor;    				var menuTheme = AppContext.MenuTheme;  				var widget = new GuiWidget()  				{  					HAnchor = HAnchor.Absolute'  					VAnchor = VAnchor.Fit'  					Width = 650'  					Border = 1'  					BorderColor = theme.DropList.Open.BackgroundColor'  					// Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor  				};    				var section = ApplicationSettingsPage.CreateThemePanel(menuTheme);  				widget.AddChild(section);    				var systemWindow = this.Parents<SystemWindow>().FirstOrDefault();  				systemWindow.ShowPopup(  					new MatePoint(themePanel)  					{  						Mate = new MateOptions(MateEdge.Right' MateEdge.Top)'  						AltMate = new MateOptions(MateEdge.Right' MateEdge.Top)  					}'  					new MatePoint(widget)  					{  						Mate = new MateOptions(MateEdge.Right' MateEdge.Bottom)'  						AltMate = new MateOptions(MateEdge.Right' MateEdge.Bottom)  					});  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreatePrinterTab,The following statement contains a magic number: var printerTab = new ChromeTab(  					printer.Settings.GetValue(SettingsKey.printer_name)'  					printer.Settings.GetValue(SettingsKey.printer_name)'  					tabControl'  					new PrinterTabPage(workspace' theme' "unused_tab_title")'  					theme'  					tabImageUrl: ApplicationController.Instance.GetFavIconUrl(oemName: printer.Settings.GetValue(SettingsKey.make)))  				{  					Name = "3D View Tab"'  					MinimumSize = new Vector2(120' theme.TabButtonHeight)  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreatePartTab,The following statement contains a magic number: var partTab = new ChromeTab(  				workspace.Name'  				workspace.Name'  				tabControl'  				new PartTabPage(workspace' theme' "")'  				theme'  				AggContext.StaticData.LoadIcon("cube.png"' 16' 16' theme.InvertIcons))  			{  				Name = "newPart" + tabControl.AllTabs.Count()'  				MinimumSize = new Vector2(120' theme.TabButtonHeight)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreatePartTab,The following statement contains a magic number: var partTab = new ChromeTab(  				workspace.Name'  				workspace.Name'  				tabControl'  				new PartTabPage(workspace' theme' "")'  				theme'  				AggContext.StaticData.LoadIcon("cube.png"' 16' 16' theme.InvertIcons))  			{  				Name = "newPart" + tabControl.AllTabs.Count()'  				MinimumSize = new Vector2(120' theme.TabButtonHeight)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,CreatePartTab,The following statement contains a magic number: var partTab = new ChromeTab(  				workspace.Name'  				workspace.Name'  				tabControl'  				new PartTabPage(workspace' theme' "")'  				theme'  				AggContext.StaticData.LoadIcon("cube.png"' 16' 16' theme.InvertIcons))  			{  				Name = "newPart" + tabControl.AllTabs.Count()'  				MinimumSize = new Vector2(120' theme.TabButtonHeight)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,RenderRunningTasks,The following statement contains a magic number: var progressBackgroundColor = new Color(theme.AccentMimimalOverlay' 35);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,RenderRunningTasks,The following statement contains a magic number: var runningTaskPanel = new RunningTaskStatusPanel(""' taskItem' theme)  				{  					HAnchor = HAnchor.Absolute'  					VAnchor = VAnchor.Stretch'  					Margin = new BorderDouble(right: 2' top: 1' bottom: 1)'  					Border = new BorderDouble(1)'  					BorderColor = theme.SlightShade'  					ProgressBackgroundColor = progressBackgroundColor'  					Width = 200  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MainViewWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MainViewWidget.cs,RenderRunningTasks,The following statement contains a magic number: var runningTaskPanel = new RunningTaskStatusPanel(""' taskItem' theme)  				{  					HAnchor = HAnchor.Absolute'  					VAnchor = VAnchor.Stretch'  					Margin = new BorderDouble(right: 2' top: 1' bottom: 1)'  					Border = new BorderDouble(1)'  					BorderColor = theme.SlightShade'  					ProgressBackgroundColor = progressBackgroundColor'  					Width = 200  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MaterialControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MaterialControls.cs,MaterialControls,The following statement contains a magic number: int extruderCount = 4;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MaterialControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MaterialControls.cs,MaterialControls,The following statement contains a magic number: var scaledButtonSize = 16 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MaterialControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MaterialControls.cs,MaterialControls,The following statement contains a magic number: buttonView.AddChild(new ColorButton(MaterialRendering.Color(extruderIndex' theme.BorderColor))  				{  					Width = scaledButtonSize'  					Height = scaledButtonSize'  					VAnchor = VAnchor.Center'  					Margin = new BorderDouble(3' 0' 5' 0)'  					DrawGrid = true'  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MaterialControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MaterialControls.cs,MaterialControls,The following statement contains a magic number: buttonView.AddChild(new ColorButton(MaterialRendering.Color(extruderIndex' theme.BorderColor))  				{  					Width = scaledButtonSize'  					Height = scaledButtonSize'  					VAnchor = VAnchor.Center'  					Margin = new BorderDouble(3' 0' 5' 0)'  					DrawGrid = true'  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MaterialControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\MaterialControls.cs,MaterialControls,The following statement contains a magic number: radioButtonView.RadioCircle.Margin = radioButtonView.RadioCircle.Margin.Clone(right: 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: favoritesBar = new LibraryListView(favoritesBarContext' theme)  			{  				Name = "LibraryView"'  				// Drop containers  				ContainerFilter = (container) => false'  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Stretch'  				AllowContextMenu = false'    				// restore to state for favorites bar size  				Width = expanded ? 55 : 33'  				ListContentView = new IconView(theme' expanded ? 48 : 24)  				{  					VAnchor = VAnchor.Fit | VAnchor.Top  				}'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: favoritesBar = new LibraryListView(favoritesBarContext' theme)  			{  				Name = "LibraryView"'  				// Drop containers  				ContainerFilter = (container) => false'  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Stretch'  				AllowContextMenu = false'    				// restore to state for favorites bar size  				Width = expanded ? 55 : 33'  				ListContentView = new IconView(theme' expanded ? 48 : 24)  				{  					VAnchor = VAnchor.Fit | VAnchor.Top  				}'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: favoritesBar = new LibraryListView(favoritesBarContext' theme)  			{  				Name = "LibraryView"'  				// Drop containers  				ContainerFilter = (container) => false'  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Stretch'  				AllowContextMenu = false'    				// restore to state for favorites bar size  				Width = expanded ? 55 : 33'  				ListContentView = new IconView(theme' expanded ? 48 : 24)  				{  					VAnchor = VAnchor.Fit | VAnchor.Top  				}'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: favoritesBar = new LibraryListView(favoritesBarContext' theme)  			{  				Name = "LibraryView"'  				// Drop containers  				ContainerFilter = (container) => false'  				HAnchor = HAnchor.Absolute'  				VAnchor = VAnchor.Stretch'  				AllowContextMenu = false'    				// restore to state for favorites bar size  				Width = expanded ? 55 : 33'  				ListContentView = new IconView(theme' expanded ? 48 : 24)  				{  					VAnchor = VAnchor.Fit | VAnchor.Top  				}'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: var expandedImage = AggContext.StaticData.LoadIcon("expand.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: var expandedImage = AggContext.StaticData.LoadIcon("expand.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: var collapsedImage = AggContext.StaticData.LoadIcon("collapse.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: var collapsedImage = AggContext.StaticData.LoadIcon("collapse.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: var expandBarButton = new IconButton(expanded ? collapsedImage : expandedImage' theme)  			{  				HAnchor = HAnchor.Center'  				VAnchor = VAnchor.Absolute | VAnchor.Bottom'  				Margin = new BorderDouble(bottom: 3' top: 3)'  				Height = theme.ButtonHeight - 6'  				Width = theme.ButtonHeight - 6  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: var expandBarButton = new IconButton(expanded ? collapsedImage : expandedImage' theme)  			{  				HAnchor = HAnchor.Center'  				VAnchor = VAnchor.Absolute | VAnchor.Bottom'  				Margin = new BorderDouble(bottom: 3' top: 3)'  				Height = theme.ButtonHeight - 6'  				Width = theme.ButtonHeight - 6  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: var expandBarButton = new IconButton(expanded ? collapsedImage : expandedImage' theme)  			{  				HAnchor = HAnchor.Center'  				VAnchor = VAnchor.Absolute | VAnchor.Bottom'  				Margin = new BorderDouble(bottom: 3' top: 3)'  				Height = theme.ButtonHeight - 6'  				Width = theme.ButtonHeight - 6  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: var expandBarButton = new IconButton(expanded ? collapsedImage : expandedImage' theme)  			{  				HAnchor = HAnchor.Center'  				VAnchor = VAnchor.Absolute | VAnchor.Bottom'  				Margin = new BorderDouble(bottom: 3' top: 3)'  				Height = theme.ButtonHeight - 6'  				Width = theme.ButtonHeight - 6  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: expandBarButton.Click += (s' e) => UiThread.RunOnIdle(() =>  			{  				expanded = !expanded;    				UserSettings.Instance.set(UserSettingsKey.FavoritesBarExpansion' expanded ? "1" : "0");    				favoritesBar.ListContentView = new IconView(theme' expanded ? 48 : 24);  				favoritesBar.Width = expanded ? 55 : 33;  				expandBarButton.SetIcon(expanded ? collapsedImage : expandedImage);  				expandBarButton.Invalidate();    				favoritesBar.Reload().ConfigureAwait(false);  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: expandBarButton.Click += (s' e) => UiThread.RunOnIdle(() =>  			{  				expanded = !expanded;    				UserSettings.Instance.set(UserSettingsKey.FavoritesBarExpansion' expanded ? "1" : "0");    				favoritesBar.ListContentView = new IconView(theme' expanded ? 48 : 24);  				favoritesBar.Width = expanded ? 55 : 33;  				expandBarButton.SetIcon(expanded ? collapsedImage : expandedImage);  				expandBarButton.Invalidate();    				favoritesBar.Reload().ConfigureAwait(false);  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: expandBarButton.Click += (s' e) => UiThread.RunOnIdle(() =>  			{  				expanded = !expanded;    				UserSettings.Instance.set(UserSettingsKey.FavoritesBarExpansion' expanded ? "1" : "0");    				favoritesBar.ListContentView = new IconView(theme' expanded ? 48 : 24);  				favoritesBar.Width = expanded ? 55 : 33;  				expandBarButton.SetIcon(expanded ? collapsedImage : expandedImage);  				expandBarButton.Invalidate();    				favoritesBar.Reload().ConfigureAwait(false);  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PartTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PartTabPage.cs,PartTabPage,The following statement contains a magic number: expandBarButton.Click += (s' e) => UiThread.RunOnIdle(() =>  			{  				expanded = !expanded;    				UserSettings.Instance.set(UserSettingsKey.FavoritesBarExpansion' expanded ? "1" : "0");    				favoritesBar.ListContentView = new IconView(theme' expanded ? 48 : 24);  				favoritesBar.Width = expanded ? 55 : 33;  				expandBarButton.SetIcon(expanded ? collapsedImage : expandedImage);  				expandBarButton.Invalidate();    				favoritesBar.Reload().ConfigureAwait(false);  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,Popover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Popover.cs,GetShape,The following statement contains a magic number: notchSize += 0.5;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,Popover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Popover.cs,GetShape,The following statement contains a magic number: var radius = 4.0;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,CreateSeparator,The following statement contains a magic number: var line = new HorizontalLine(theme: ApplicationController.Instance.MenuTheme)  			{  				Margin = new BorderDouble(theme.MenuGutterWidth - 8' 1' 8' 1)'  				BackgroundColor = theme.RowBorder  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,CreateSeparator,The following statement contains a magic number: var line = new HorizontalLine(theme: ApplicationController.Instance.MenuTheme)  			{  				Margin = new BorderDouble(theme.MenuGutterWidth - 8' 1' 8' 1)'  				BackgroundColor = theme.RowBorder  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SubMenuItemButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: var x = this.LocalBounds.Right - this.LocalBounds.Height / 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SubMenuItemButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: var y = this.Size.Y / 2 + 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SubMenuItemButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: var y = this.Size.Y / 2 + 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SubMenuItemButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: arrow.MoveTo(x + 3' y);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SubMenuItemButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: arrow.LineTo(x - 3' y + 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SubMenuItemButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: arrow.LineTo(x - 3' y + 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SubMenuItemButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: arrow.LineTo(x - 3' y - 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SubMenuItemButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: arrow.LineTo(x - 3' y - 5);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,CheckboxMenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,CheckboxMenuItem,The following statement contains a magic number: faChecked = AggContext.StaticData.LoadIcon("fa-check_16.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,CheckboxMenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,CheckboxMenuItem,The following statement contains a magic number: faChecked = AggContext.StaticData.LoadIcon("fa-check_16.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RadioMenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnLoad,The following statement contains a magic number: radioIconChecked = new ImageBuffer(16' 16).SetPreMultiply();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RadioMenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnLoad,The following statement contains a magic number: radioIconChecked = new ImageBuffer(16' 16).SetPreMultiply();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RadioMenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnLoad,The following statement contains a magic number: radioIconUnchecked = new ImageBuffer(16' 16).SetPreMultiply();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RadioMenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnLoad,The following statement contains a magic number: radioIconUnchecked = new ImageBuffer(16' 16).SetPreMultiply();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RadioMenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnLoad,The following statement contains a magic number: var rect = new RectangleDouble(0' 0' 16' 16);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RadioMenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnLoad,The following statement contains a magic number: var rect = new RectangleDouble(0' 0' 16' 16);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,MenuItem,The following statement contains a magic number: this.Padding = new BorderDouble(left: Math.Ceiling(theme.MenuGutterWidth / GuiWidget.DeviceScale) ' right: 15);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,MenuItem,The following statement contains a magic number: this.MinimumSize = new Vector2(150 * GuiWidget.DeviceScale' theme.ButtonHeight);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: var x = this.LocalBounds.Left + (this.GutterWidth / 2 - this.Image.Width / 2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: var x = this.LocalBounds.Left + (this.GutterWidth / 2 - this.Image.Width / 2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: var y = this.Size.Y / 2 - this.Image.Height / 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MenuItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenu.cs,OnDraw,The following statement contains a magic number: var y = this.Size.Y / 2 - this.Image.Height / 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PopupMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenuButton.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(  					dropArrow'  					LocalBounds.Right - DropArrow.ArrowHeight * 2 - 2'  					LocalBounds.Center.Y + DropArrow.ArrowHeight / 2'  					this.Enabled ? theme.BorderColor : this.DisabledColor);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PopupMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenuButton.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(  					dropArrow'  					LocalBounds.Right - DropArrow.ArrowHeight * 2 - 2'  					LocalBounds.Center.Y + DropArrow.ArrowHeight / 2'  					this.Enabled ? theme.BorderColor : this.DisabledColor);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PopupMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PopupMenuButton.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(  					dropArrow'  					LocalBounds.Right - DropArrow.ArrowHeight * 2 - 2'  					LocalBounds.Center.Y + DropArrow.ArrowHeight / 2'  					this.Enabled ? theme.BorderColor : this.DisabledColor);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrinterTabPage,The following statement contains a magic number: LayerScrollbar = new SliceLayerSelector(printer' theme)  			{  				VAnchor = VAnchor.Stretch'  				HAnchor = HAnchor.Right | HAnchor.Fit'  				Margin = new BorderDouble(0' 4' 4' 4)'  				Maximum = sceneContext.LoadedGCode?.LayerCount ?? 1  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrinterTabPage,The following statement contains a magic number: LayerScrollbar = new SliceLayerSelector(printer' theme)  			{  				VAnchor = VAnchor.Stretch'  				HAnchor = HAnchor.Right | HAnchor.Fit'  				Margin = new BorderDouble(0' 4' 4' 4)'  				Maximum = sceneContext.LoadedGCode?.LayerCount ?? 1  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrinterTabPage,The following statement contains a magic number: LayerScrollbar = new SliceLayerSelector(printer' theme)  			{  				VAnchor = VAnchor.Stretch'  				HAnchor = HAnchor.Right | HAnchor.Fit'  				Margin = new BorderDouble(0' 4' 4' 4)'  				Maximum = sceneContext.LoadedGCode?.LayerCount ?? 1  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrinterTabPage,The following statement contains a magic number: gcodeContainer = new VerticalResizeContainer(theme' GrabBarSide.Left)  			{  				Width = printer?.ViewState.SelectedObjectPanelWidth ?? 200'  				VAnchor = VAnchor.Stretch'  				HAnchor = HAnchor.Absolute'  				SplitterBarColor = theme.SplitterBackground'  				SplitterWidth = theme.SplitterWidth'  				Visible = false'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrinterTabPage,The following statement contains a magic number: view3DContainer.AddChild(new RunningTasksWidget(theme' printer)  			{  				MinimumSize = new Vector2(100' 0)'  				Margin = new BorderDouble(top: PrinterActionsBar.Height + 1' left: favoritesBar.LocalBounds.Width + favoritesBar.DeviceMarginAndBorder.Width + 1)'  				VAnchor = VAnchor.Top | VAnchor.Fit'  				HAnchor = HAnchor.Left | HAnchor.Fit'  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrinterTabPage,The following statement contains a magic number: this.LayerScrollbar.Margin = LayerScrollbar.Margin.Clone(top: tumbleCubeControl.Height + tumbleCubeControl.Margin.Height + 4);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,CreateTextField,The following statement contains a magic number: return new WrappedTextWidget(text)  			{  				Margin = new BorderDouble(left: 10' top: 10)'  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,CreateTextField,The following statement contains a magic number: return new WrappedTextWidget(text)  			{  				Margin = new BorderDouble(left: 10' top: 10)'  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,Connection_FilamentRunout,The following statement contains a magic number: UiThread.RunOnIdle(() =>  					{  						var unloadFilamentButton = new TextButton("Unload Filament".Localize()' theme)  						{  							Name = "unload Filament"'  							BackgroundColor = theme.MinimalShade'  							VAnchor = Agg.UI.VAnchor.Absolute'  							HAnchor = Agg.UI.HAnchor.Fit | Agg.UI.HAnchor.Left'  							Margin = new BorderDouble(10' 10' 0' 15)  						};    						unloadFilamentButton.Click += (s' e2) =>  						{  							unloadFilamentButton.Parents<SystemWindow>().First().Close();  							DialogWindow.Show(new UnloadFilamentWizard(printer' extruderIndex: 0));  						};    						theme.ApplyPrimaryActionStyle(unloadFilamentButton);    						string filamentPauseMessage = "Your 3D print has been paused.\n\nOut of filament' or jam' detected. Please load more filament or clear the jam.".Localize();    						var messageBox = new MessageBoxPage(ResumePrint'  							filamentPauseMessage.FormatWith(printePauseEventArgs.LayerNumber)'  							pauseCaption'  							StyledMessageBox.MessageType.YES_NO_WITHOUT_HIGHLIGHT'  							null'  							500'  							400'  							"Resume".Localize()'  							"OK".Localize()'  							ApplicationController.Instance.Theme'  							false);    						messageBox.AddPageAction(unloadFilamentButton);    						DialogWindow.Show(messageBox);  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,Connection_FilamentRunout,The following statement contains a magic number: UiThread.RunOnIdle(() =>  					{  						var unloadFilamentButton = new TextButton("Unload Filament".Localize()' theme)  						{  							Name = "unload Filament"'  							BackgroundColor = theme.MinimalShade'  							VAnchor = Agg.UI.VAnchor.Absolute'  							HAnchor = Agg.UI.HAnchor.Fit | Agg.UI.HAnchor.Left'  							Margin = new BorderDouble(10' 10' 0' 15)  						};    						unloadFilamentButton.Click += (s' e2) =>  						{  							unloadFilamentButton.Parents<SystemWindow>().First().Close();  							DialogWindow.Show(new UnloadFilamentWizard(printer' extruderIndex: 0));  						};    						theme.ApplyPrimaryActionStyle(unloadFilamentButton);    						string filamentPauseMessage = "Your 3D print has been paused.\n\nOut of filament' or jam' detected. Please load more filament or clear the jam.".Localize();    						var messageBox = new MessageBoxPage(ResumePrint'  							filamentPauseMessage.FormatWith(printePauseEventArgs.LayerNumber)'  							pauseCaption'  							StyledMessageBox.MessageType.YES_NO_WITHOUT_HIGHLIGHT'  							null'  							500'  							400'  							"Resume".Localize()'  							"OK".Localize()'  							ApplicationController.Instance.Theme'  							false);    						messageBox.AddPageAction(unloadFilamentButton);    						DialogWindow.Show(messageBox);  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,Connection_FilamentRunout,The following statement contains a magic number: UiThread.RunOnIdle(() =>  					{  						var unloadFilamentButton = new TextButton("Unload Filament".Localize()' theme)  						{  							Name = "unload Filament"'  							BackgroundColor = theme.MinimalShade'  							VAnchor = Agg.UI.VAnchor.Absolute'  							HAnchor = Agg.UI.HAnchor.Fit | Agg.UI.HAnchor.Left'  							Margin = new BorderDouble(10' 10' 0' 15)  						};    						unloadFilamentButton.Click += (s' e2) =>  						{  							unloadFilamentButton.Parents<SystemWindow>().First().Close();  							DialogWindow.Show(new UnloadFilamentWizard(printer' extruderIndex: 0));  						};    						theme.ApplyPrimaryActionStyle(unloadFilamentButton);    						string filamentPauseMessage = "Your 3D print has been paused.\n\nOut of filament' or jam' detected. Please load more filament or clear the jam.".Localize();    						var messageBox = new MessageBoxPage(ResumePrint'  							filamentPauseMessage.FormatWith(printePauseEventArgs.LayerNumber)'  							pauseCaption'  							StyledMessageBox.MessageType.YES_NO_WITHOUT_HIGHLIGHT'  							null'  							500'  							400'  							"Resume".Localize()'  							"OK".Localize()'  							ApplicationController.Instance.Theme'  							false);    						messageBox.AddPageAction(unloadFilamentButton);    						DialogWindow.Show(messageBox);  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,Connection_FilamentRunout,The following statement contains a magic number: UiThread.RunOnIdle(() =>  					{  						var unloadFilamentButton = new TextButton("Unload Filament".Localize()' theme)  						{  							Name = "unload Filament"'  							BackgroundColor = theme.MinimalShade'  							VAnchor = Agg.UI.VAnchor.Absolute'  							HAnchor = Agg.UI.HAnchor.Fit | Agg.UI.HAnchor.Left'  							Margin = new BorderDouble(10' 10' 0' 15)  						};    						unloadFilamentButton.Click += (s' e2) =>  						{  							unloadFilamentButton.Parents<SystemWindow>().First().Close();  							DialogWindow.Show(new UnloadFilamentWizard(printer' extruderIndex: 0));  						};    						theme.ApplyPrimaryActionStyle(unloadFilamentButton);    						string filamentPauseMessage = "Your 3D print has been paused.\n\nOut of filament' or jam' detected. Please load more filament or clear the jam.".Localize();    						var messageBox = new MessageBoxPage(ResumePrint'  							filamentPauseMessage.FormatWith(printePauseEventArgs.LayerNumber)'  							pauseCaption'  							StyledMessageBox.MessageType.YES_NO_WITHOUT_HIGHLIGHT'  							null'  							500'  							400'  							"Resume".Localize()'  							"OK".Localize()'  							ApplicationController.Instance.Theme'  							false);    						messageBox.AddPageAction(unloadFilamentButton);    						DialogWindow.Show(messageBox);  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,Connection_FilamentRunout,The following statement contains a magic number: UiThread.RunOnIdle(() =>  					{  						var unloadFilamentButton = new TextButton("Unload Filament".Localize()' theme)  						{  							Name = "unload Filament"'  							BackgroundColor = theme.MinimalShade'  							VAnchor = Agg.UI.VAnchor.Absolute'  							HAnchor = Agg.UI.HAnchor.Fit | Agg.UI.HAnchor.Left'  							Margin = new BorderDouble(10' 10' 0' 15)  						};    						unloadFilamentButton.Click += (s' e2) =>  						{  							unloadFilamentButton.Parents<SystemWindow>().First().Close();  							DialogWindow.Show(new UnloadFilamentWizard(printer' extruderIndex: 0));  						};    						theme.ApplyPrimaryActionStyle(unloadFilamentButton);    						string filamentPauseMessage = "Your 3D print has been paused.\n\nOut of filament' or jam' detected. Please load more filament or clear the jam.".Localize();    						var messageBox = new MessageBoxPage(ResumePrint'  							filamentPauseMessage.FormatWith(printePauseEventArgs.LayerNumber)'  							pauseCaption'  							StyledMessageBox.MessageType.YES_NO_WITHOUT_HIGHLIGHT'  							null'  							500'  							400'  							"Resume".Localize()'  							"OK".Localize()'  							ApplicationController.Instance.Theme'  							false);    						messageBox.AddPageAction(unloadFilamentButton);    						DialogWindow.Show(messageBox);  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,SetSliderSizes,The following statement contains a magic number: layerRenderRatioSlider.OriginRelativeParent = new Vector2(4' 13);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,SetSliderSizes,The following statement contains a magic number: layerRenderRatioSlider.OriginRelativeParent = new Vector2(4' 13);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,SetSliderSizes,The following statement contains a magic number: layerRenderRatioSlider.TotalWidthInPixels = view3DWidget.InteractionLayer.Width - 32;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,AddSettingsTabBar,The following statement contains a magic number: sideBar = new DockingTabControl(widgetTodockTo' DockSide.Right' printer' theme)  			{  				Name = "DockingTabControl"'  				ControlIsPinned = printer.ViewState.SliceSettingsTabPinned'  				MinDockingWidth = 400 * (int)GuiWidget.DeviceScale  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var bodyRow = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Top | VAnchor.Fit'  				// BackgroundColor = new Color(theme.Colors.PrimaryBackgroundColor' 128)'  				MinimumSize = new Vector2(275' 140)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var bodyRow = new GuiWidget()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Top | VAnchor.Fit'  				// BackgroundColor = new Color(theme.Colors.PrimaryBackgroundColor' 128)'  				MinimumSize = new Vector2(275' 140)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var progressDial = new ProgressDial(theme)  			{  				HAnchor = HAnchor.Center'  				Height = 200 * DeviceScale'  				Width = 200 * DeviceScale  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var progressDial = new ProgressDial(theme)  			{  				HAnchor = HAnchor.Center'  				Height = 200 * DeviceScale'  				Width = 200 * DeviceScale  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var timeContainer = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.Center | HAnchor.Fit'  				Margin = 3  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var resliceButton = new TextButton("Re-Slice"' theme)  				{  					HAnchor = HAnchor.Right'  					VAnchor = VAnchor.Center'  					Margin = new BorderDouble(0' 0' 7' 0)'  					Name = "Re-Slice Button"  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: resliceMessageRow.AddChild(new WrappedTextWidget(switchMessage' theme.DefaultFontSize' textColor: theme.TextColor)  					{  						Margin = new BorderDouble(7' 3)  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: resliceMessageRow.AddChild(new WrappedTextWidget(switchMessage' theme.DefaultFontSize' textColor: theme.TextColor)  					{  						Margin = new BorderDouble(7' 3)  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var switchButton = new TextButton("Switch"' theme)  					{  						VAnchor = VAnchor.Center'  						Margin = new BorderDouble(5)'  						Name = "Switch Button"  					};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var cancelButton = new TextButton("Cancel"' theme)  					{  						VAnchor = VAnchor.Center'  						Margin = new BorderDouble(5)'  						Name = "Cancel Re-Slice Button"  					};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: IntPtr.Size == 8
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var timeStack = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(10' 0' 0' 0)'  				Padding = new BorderDouble(5' 0' 0' 0)'  				VAnchor = VAnchor.Center | VAnchor.Fit  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var timeStack = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(10' 0' 0' 0)'  				Padding = new BorderDouble(5' 0' 0' 0)'  				VAnchor = VAnchor.Center | VAnchor.Fit  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var timePrinted = new TextWidget(""' pointSize: 16' textColor: theme.TextColor)  			{  				AutoExpandBoundsToText = true'  				HAnchor = HAnchor.Center'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var timeToEnd = new TextWidget(""' pointSize: 9' textColor: theme.TextColor)  			{  				AutoExpandBoundsToText = true'  				HAnchor = HAnchor.Center'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var runningInterval = UiThread.SetInterval(() =>  				{  					int totalSecondsPrinted = printer.Connection.SecondsPrinted;    					int hoursPrinted = totalSecondsPrinted / (60 * 60);  					int minutesPrinted = totalSecondsPrinted / 60 - hoursPrinted * 60;  					var secondsPrinted = totalSecondsPrinted % 60;    					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration  					timePrinted.Text = GetFormatedTime(hoursPrinted' minutesPrinted' secondsPrinted);    					int totalSecondsToEnd = printer.Connection.SecondsToEnd;    					int hoursToEnd = totalSecondsToEnd / (60 * 60);  					int minutesToEnd = totalSecondsToEnd / 60 - hoursToEnd * 60;  					var secondsToEnd = totalSecondsToEnd % 60;    					timeToEnd.Text = GetFormatedTime(hoursToEnd' minutesToEnd' secondsToEnd);    					progressDial.LayerIndex = printer.Connection.CurrentlyPrintingLayer;  					progressDial.LayerCompletedRatio = printer.Connection.RatioIntoCurrentLayerSeconds;  					progressDial.CompletedRatio = printer.Connection.PercentComplete / 100;    					switch (printer.Connection.CommunicationState)  					{  						case CommunicationStates.PreparingToPrint:  						case CommunicationStates.Printing:  						case CommunicationStates.Paused:  							bodyRow.Visible = true;  							break;    						default:  							bodyRow.Visible = false;  							break;  					}  				}' 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var runningInterval = UiThread.SetInterval(() =>  				{  					int totalSecondsPrinted = printer.Connection.SecondsPrinted;    					int hoursPrinted = totalSecondsPrinted / (60 * 60);  					int minutesPrinted = totalSecondsPrinted / 60 - hoursPrinted * 60;  					var secondsPrinted = totalSecondsPrinted % 60;    					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration  					timePrinted.Text = GetFormatedTime(hoursPrinted' minutesPrinted' secondsPrinted);    					int totalSecondsToEnd = printer.Connection.SecondsToEnd;    					int hoursToEnd = totalSecondsToEnd / (60 * 60);  					int minutesToEnd = totalSecondsToEnd / 60 - hoursToEnd * 60;  					var secondsToEnd = totalSecondsToEnd % 60;    					timeToEnd.Text = GetFormatedTime(hoursToEnd' minutesToEnd' secondsToEnd);    					progressDial.LayerIndex = printer.Connection.CurrentlyPrintingLayer;  					progressDial.LayerCompletedRatio = printer.Connection.RatioIntoCurrentLayerSeconds;  					progressDial.CompletedRatio = printer.Connection.PercentComplete / 100;    					switch (printer.Connection.CommunicationState)  					{  						case CommunicationStates.PreparingToPrint:  						case CommunicationStates.Printing:  						case CommunicationStates.Paused:  							bodyRow.Visible = true;  							break;    						default:  							bodyRow.Visible = false;  							break;  					}  				}' 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var runningInterval = UiThread.SetInterval(() =>  				{  					int totalSecondsPrinted = printer.Connection.SecondsPrinted;    					int hoursPrinted = totalSecondsPrinted / (60 * 60);  					int minutesPrinted = totalSecondsPrinted / 60 - hoursPrinted * 60;  					var secondsPrinted = totalSecondsPrinted % 60;    					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration  					timePrinted.Text = GetFormatedTime(hoursPrinted' minutesPrinted' secondsPrinted);    					int totalSecondsToEnd = printer.Connection.SecondsToEnd;    					int hoursToEnd = totalSecondsToEnd / (60 * 60);  					int minutesToEnd = totalSecondsToEnd / 60 - hoursToEnd * 60;  					var secondsToEnd = totalSecondsToEnd % 60;    					timeToEnd.Text = GetFormatedTime(hoursToEnd' minutesToEnd' secondsToEnd);    					progressDial.LayerIndex = printer.Connection.CurrentlyPrintingLayer;  					progressDial.LayerCompletedRatio = printer.Connection.RatioIntoCurrentLayerSeconds;  					progressDial.CompletedRatio = printer.Connection.PercentComplete / 100;    					switch (printer.Connection.CommunicationState)  					{  						case CommunicationStates.PreparingToPrint:  						case CommunicationStates.Printing:  						case CommunicationStates.Paused:  							bodyRow.Visible = true;  							break;    						default:  							bodyRow.Visible = false;  							break;  					}  				}' 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var runningInterval = UiThread.SetInterval(() =>  				{  					int totalSecondsPrinted = printer.Connection.SecondsPrinted;    					int hoursPrinted = totalSecondsPrinted / (60 * 60);  					int minutesPrinted = totalSecondsPrinted / 60 - hoursPrinted * 60;  					var secondsPrinted = totalSecondsPrinted % 60;    					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration  					timePrinted.Text = GetFormatedTime(hoursPrinted' minutesPrinted' secondsPrinted);    					int totalSecondsToEnd = printer.Connection.SecondsToEnd;    					int hoursToEnd = totalSecondsToEnd / (60 * 60);  					int minutesToEnd = totalSecondsToEnd / 60 - hoursToEnd * 60;  					var secondsToEnd = totalSecondsToEnd % 60;    					timeToEnd.Text = GetFormatedTime(hoursToEnd' minutesToEnd' secondsToEnd);    					progressDial.LayerIndex = printer.Connection.CurrentlyPrintingLayer;  					progressDial.LayerCompletedRatio = printer.Connection.RatioIntoCurrentLayerSeconds;  					progressDial.CompletedRatio = printer.Connection.PercentComplete / 100;    					switch (printer.Connection.CommunicationState)  					{  						case CommunicationStates.PreparingToPrint:  						case CommunicationStates.Printing:  						case CommunicationStates.Paused:  							bodyRow.Visible = true;  							break;    						default:  							bodyRow.Visible = false;  							break;  					}  				}' 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var runningInterval = UiThread.SetInterval(() =>  				{  					int totalSecondsPrinted = printer.Connection.SecondsPrinted;    					int hoursPrinted = totalSecondsPrinted / (60 * 60);  					int minutesPrinted = totalSecondsPrinted / 60 - hoursPrinted * 60;  					var secondsPrinted = totalSecondsPrinted % 60;    					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration  					timePrinted.Text = GetFormatedTime(hoursPrinted' minutesPrinted' secondsPrinted);    					int totalSecondsToEnd = printer.Connection.SecondsToEnd;    					int hoursToEnd = totalSecondsToEnd / (60 * 60);  					int minutesToEnd = totalSecondsToEnd / 60 - hoursToEnd * 60;  					var secondsToEnd = totalSecondsToEnd % 60;    					timeToEnd.Text = GetFormatedTime(hoursToEnd' minutesToEnd' secondsToEnd);    					progressDial.LayerIndex = printer.Connection.CurrentlyPrintingLayer;  					progressDial.LayerCompletedRatio = printer.Connection.RatioIntoCurrentLayerSeconds;  					progressDial.CompletedRatio = printer.Connection.PercentComplete / 100;    					switch (printer.Connection.CommunicationState)  					{  						case CommunicationStates.PreparingToPrint:  						case CommunicationStates.Printing:  						case CommunicationStates.Paused:  							bodyRow.Visible = true;  							break;    						default:  							bodyRow.Visible = false;  							break;  					}  				}' 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var runningInterval = UiThread.SetInterval(() =>  				{  					int totalSecondsPrinted = printer.Connection.SecondsPrinted;    					int hoursPrinted = totalSecondsPrinted / (60 * 60);  					int minutesPrinted = totalSecondsPrinted / 60 - hoursPrinted * 60;  					var secondsPrinted = totalSecondsPrinted % 60;    					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration  					timePrinted.Text = GetFormatedTime(hoursPrinted' minutesPrinted' secondsPrinted);    					int totalSecondsToEnd = printer.Connection.SecondsToEnd;    					int hoursToEnd = totalSecondsToEnd / (60 * 60);  					int minutesToEnd = totalSecondsToEnd / 60 - hoursToEnd * 60;  					var secondsToEnd = totalSecondsToEnd % 60;    					timeToEnd.Text = GetFormatedTime(hoursToEnd' minutesToEnd' secondsToEnd);    					progressDial.LayerIndex = printer.Connection.CurrentlyPrintingLayer;  					progressDial.LayerCompletedRatio = printer.Connection.RatioIntoCurrentLayerSeconds;  					progressDial.CompletedRatio = printer.Connection.PercentComplete / 100;    					switch (printer.Connection.CommunicationState)  					{  						case CommunicationStates.PreparingToPrint:  						case CommunicationStates.Printing:  						case CommunicationStates.Paused:  							bodyRow.Visible = true;  							break;    						default:  							bodyRow.Visible = false;  							break;  					}  				}' 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var runningInterval = UiThread.SetInterval(() =>  				{  					int totalSecondsPrinted = printer.Connection.SecondsPrinted;    					int hoursPrinted = totalSecondsPrinted / (60 * 60);  					int minutesPrinted = totalSecondsPrinted / 60 - hoursPrinted * 60;  					var secondsPrinted = totalSecondsPrinted % 60;    					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration  					timePrinted.Text = GetFormatedTime(hoursPrinted' minutesPrinted' secondsPrinted);    					int totalSecondsToEnd = printer.Connection.SecondsToEnd;    					int hoursToEnd = totalSecondsToEnd / (60 * 60);  					int minutesToEnd = totalSecondsToEnd / 60 - hoursToEnd * 60;  					var secondsToEnd = totalSecondsToEnd % 60;    					timeToEnd.Text = GetFormatedTime(hoursToEnd' minutesToEnd' secondsToEnd);    					progressDial.LayerIndex = printer.Connection.CurrentlyPrintingLayer;  					progressDial.LayerCompletedRatio = printer.Connection.RatioIntoCurrentLayerSeconds;  					progressDial.CompletedRatio = printer.Connection.PercentComplete / 100;    					switch (printer.Connection.CommunicationState)  					{  						case CommunicationStates.PreparingToPrint:  						case CommunicationStates.Printing:  						case CommunicationStates.Paused:  							bodyRow.Visible = true;  							break;    						default:  							bodyRow.Visible = false;  							break;  					}  				}' 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var runningInterval = UiThread.SetInterval(() =>  				{  					int totalSecondsPrinted = printer.Connection.SecondsPrinted;    					int hoursPrinted = totalSecondsPrinted / (60 * 60);  					int minutesPrinted = totalSecondsPrinted / 60 - hoursPrinted * 60;  					var secondsPrinted = totalSecondsPrinted % 60;    					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration  					timePrinted.Text = GetFormatedTime(hoursPrinted' minutesPrinted' secondsPrinted);    					int totalSecondsToEnd = printer.Connection.SecondsToEnd;    					int hoursToEnd = totalSecondsToEnd / (60 * 60);  					int minutesToEnd = totalSecondsToEnd / 60 - hoursToEnd * 60;  					var secondsToEnd = totalSecondsToEnd % 60;    					timeToEnd.Text = GetFormatedTime(hoursToEnd' minutesToEnd' secondsToEnd);    					progressDial.LayerIndex = printer.Connection.CurrentlyPrintingLayer;  					progressDial.LayerCompletedRatio = printer.Connection.RatioIntoCurrentLayerSeconds;  					progressDial.CompletedRatio = printer.Connection.PercentComplete / 100;    					switch (printer.Connection.CommunicationState)  					{  						case CommunicationStates.PreparingToPrint:  						case CommunicationStates.Printing:  						case CommunicationStates.Paused:  							bodyRow.Visible = true;  							break;    						default:  							bodyRow.Visible = false;  							break;  					}  				}' 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var runningInterval = UiThread.SetInterval(() =>  				{  					int totalSecondsPrinted = printer.Connection.SecondsPrinted;    					int hoursPrinted = totalSecondsPrinted / (60 * 60);  					int minutesPrinted = totalSecondsPrinted / 60 - hoursPrinted * 60;  					var secondsPrinted = totalSecondsPrinted % 60;    					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration  					timePrinted.Text = GetFormatedTime(hoursPrinted' minutesPrinted' secondsPrinted);    					int totalSecondsToEnd = printer.Connection.SecondsToEnd;    					int hoursToEnd = totalSecondsToEnd / (60 * 60);  					int minutesToEnd = totalSecondsToEnd / 60 - hoursToEnd * 60;  					var secondsToEnd = totalSecondsToEnd % 60;    					timeToEnd.Text = GetFormatedTime(hoursToEnd' minutesToEnd' secondsToEnd);    					progressDial.LayerIndex = printer.Connection.CurrentlyPrintingLayer;  					progressDial.LayerCompletedRatio = printer.Connection.RatioIntoCurrentLayerSeconds;  					progressDial.CompletedRatio = printer.Connection.PercentComplete / 100;    					switch (printer.Connection.CommunicationState)  					{  						case CommunicationStates.PreparingToPrint:  						case CommunicationStates.Printing:  						case CommunicationStates.Paused:  							bodyRow.Visible = true;  							break;    						default:  							bodyRow.Visible = false;  							break;  					}  				}' 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var runningInterval = UiThread.SetInterval(() =>  				{  					int totalSecondsPrinted = printer.Connection.SecondsPrinted;    					int hoursPrinted = totalSecondsPrinted / (60 * 60);  					int minutesPrinted = totalSecondsPrinted / 60 - hoursPrinted * 60;  					var secondsPrinted = totalSecondsPrinted % 60;    					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration  					timePrinted.Text = GetFormatedTime(hoursPrinted' minutesPrinted' secondsPrinted);    					int totalSecondsToEnd = printer.Connection.SecondsToEnd;    					int hoursToEnd = totalSecondsToEnd / (60 * 60);  					int minutesToEnd = totalSecondsToEnd / 60 - hoursToEnd * 60;  					var secondsToEnd = totalSecondsToEnd % 60;    					timeToEnd.Text = GetFormatedTime(hoursToEnd' minutesToEnd' secondsToEnd);    					progressDial.LayerIndex = printer.Connection.CurrentlyPrintingLayer;  					progressDial.LayerCompletedRatio = printer.Connection.RatioIntoCurrentLayerSeconds;  					progressDial.CompletedRatio = printer.Connection.PercentComplete / 100;    					switch (printer.Connection.CommunicationState)  					{  						case CommunicationStates.PreparingToPrint:  						case CommunicationStates.Printing:  						case CommunicationStates.Paused:  							bodyRow.Visible = true;  							break;    						default:  							bodyRow.Visible = false;  							break;  					}  				}' 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrintProgressWidget,The following statement contains a magic number: var runningInterval = UiThread.SetInterval(() =>  				{  					int totalSecondsPrinted = printer.Connection.SecondsPrinted;    					int hoursPrinted = totalSecondsPrinted / (60 * 60);  					int minutesPrinted = totalSecondsPrinted / 60 - hoursPrinted * 60;  					var secondsPrinted = totalSecondsPrinted % 60;    					// TODO: Consider if the consistency of a common time format would look and feel better than changing formats based on elapsed duration  					timePrinted.Text = GetFormatedTime(hoursPrinted' minutesPrinted' secondsPrinted);    					int totalSecondsToEnd = printer.Connection.SecondsToEnd;    					int hoursToEnd = totalSecondsToEnd / (60 * 60);  					int minutesToEnd = totalSecondsToEnd / 60 - hoursToEnd * 60;  					var secondsToEnd = totalSecondsToEnd % 60;    					timeToEnd.Text = GetFormatedTime(hoursToEnd' minutesToEnd' secondsToEnd);    					progressDial.LayerIndex = printer.Connection.CurrentlyPrintingLayer;  					progressDial.LayerCompletedRatio = printer.Connection.RatioIntoCurrentLayerSeconds;  					progressDial.CompletedRatio = printer.Connection.PercentComplete / 100;    					switch (printer.Connection.CommunicationState)  					{  						case CommunicationStates.PreparingToPrint:  						case CommunicationStates.Printing:  						case CommunicationStates.Paused:  							bodyRow.Visible = true;  							break;    						default:  							bodyRow.Visible = false;  							break;  					}  				}' 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RenderOptionsButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RenderOptionsButton.cs,RenderOptionsButton,The following statement contains a magic number: this.PopupContent = () =>  			{  				var menuTheme = AppContext.MenuTheme;    				var subPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor'  					HAnchor = HAnchor.Absolute'  					VAnchor = VAnchor.Fit  				};    				subPanel.BoundsChanged += (s' e) =>  				{  					Console.WriteLine();  				};    				foreach (var drawable in ApplicationController.Instance.DragDropData.View3DWidget.InteractionLayer.Drawables)  				{  					var row = new SettingsRow(drawable.Title' drawable.Description' theme);  					subPanel.AddChild(row);    					var toggleSwitch = new RoundedToggleSwitch(theme)  					{  						Checked = drawable.Enabled  					};  					toggleSwitch.CheckedStateChanged += (s' e) =>  					{  						drawable.Enabled = toggleSwitch.Checked;  					};  					row.AddChild(toggleSwitch);  				}    				foreach (var drawable in ApplicationController.Instance.DragDropData.View3DWidget.InteractionLayer.ItemDrawables)  				{  					var row = new SettingsRow(drawable.Title' drawable.Description' theme);  					subPanel.AddChild(row);    					var toggleSwitch = new RoundedToggleSwitch(theme)  					{  						Checked = drawable.Enabled  					};  					toggleSwitch.CheckedStateChanged += (s' e) =>  					{  						drawable.Enabled = toggleSwitch.Checked;  					};  					row.AddChild(toggleSwitch);  				}    				subPanel.Width = 400;    				return subPanel;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskRow.cs,RunningTaskRow,The following statement contains a magic number: this.MinimumSize = new Vector2(100' 20);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskRow.cs,RunningTaskRow,The following statement contains a magic number: this.MinimumSize = new Vector2(100' 20);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskRow.cs,RunningTaskRow,The following statement contains a magic number: progressBar = new ProgressBar()  			{  				HAnchor = HAnchor.Stretch'  				Height = 2'  				VAnchor = VAnchor.Absolute | VAnchor.Bottom'  				FillColor = theme.PrimaryAccentColor'  				BorderColor = Color.Transparent'  				Margin = new BorderDouble(32' 7' theme.ButtonHeight * 2 + 14' 0)'  				Visible = !taskDetails.IsExpanded  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskRow.cs,RunningTaskRow,The following statement contains a magic number: progressBar = new ProgressBar()  			{  				HAnchor = HAnchor.Stretch'  				Height = 2'  				VAnchor = VAnchor.Absolute | VAnchor.Bottom'  				FillColor = theme.PrimaryAccentColor'  				BorderColor = Color.Transparent'  				Margin = new BorderDouble(32' 7' theme.ButtonHeight * 2 + 14' 0)'  				Visible = !taskDetails.IsExpanded  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskRow.cs,RunningTaskRow,The following statement contains a magic number: progressBar = new ProgressBar()  			{  				HAnchor = HAnchor.Stretch'  				Height = 2'  				VAnchor = VAnchor.Absolute | VAnchor.Bottom'  				FillColor = theme.PrimaryAccentColor'  				BorderColor = Color.Transparent'  				Margin = new BorderDouble(32' 7' theme.ButtonHeight * 2 + 14' 0)'  				Visible = !taskDetails.IsExpanded  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskRow.cs,RunningTaskRow,The following statement contains a magic number: progressBar = new ProgressBar()  			{  				HAnchor = HAnchor.Stretch'  				Height = 2'  				VAnchor = VAnchor.Absolute | VAnchor.Bottom'  				FillColor = theme.PrimaryAccentColor'  				BorderColor = Color.Transparent'  				Margin = new BorderDouble(32' 7' theme.ButtonHeight * 2 + 14' 0)'  				Visible = !taskDetails.IsExpanded  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskRow.cs,RunningTaskRow,The following statement contains a magic number: progressBar = new ProgressBar()  			{  				HAnchor = HAnchor.Stretch'  				Height = 2'  				VAnchor = VAnchor.Absolute | VAnchor.Bottom'  				FillColor = theme.PrimaryAccentColor'  				BorderColor = Color.Transparent'  				Margin = new BorderDouble(32' 7' theme.ButtonHeight * 2 + 14' 0)'  				Visible = !taskDetails.IsExpanded  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskRow.cs,RunningTaskRow,The following statement contains a magic number: expandButton = new ExpandCheckboxButton(!string.IsNullOrWhiteSpace(title) ? title : taskDetails.Title' theme' 10)  			{  				VAnchor = VAnchor.Center | VAnchor.Fit'  				HAnchor = HAnchor.Stretch'  				Checked = false'  				Padding = 0'  				AlwaysShowArrow = true  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskRow.cs,RunningTaskRow,The following statement contains a magic number: runningInterval = UiThread.SetInterval(() =>  				{  					if(taskDetails.Options.IsPaused())  					{  						pauseButton.Visible = false;  						resumeButton.Visible = true;  					}  					else  					{  						pauseButton.Visible = true;  						resumeButton.Visible = false;  					}  					if (this.HasBeenClosed)  					{  						UiThread.ClearInterval(runningInterval);  					}  				}' .2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskStatusPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskStatusPanel.cs,RunningTaskStatusPanel,The following statement contains a magic number: this.Padding = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskStatusPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskStatusPanel.cs,RunningTaskStatusPanel,The following statement contains a magic number: this.AddChild(new ImageWidget(AggContext.StaticData.LoadIcon("wait.png"' 14' 14' theme.InvertIcons))  			{  				VAnchor = VAnchor.Center'  				HAnchor = HAnchor.Left  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskStatusPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskStatusPanel.cs,RunningTaskStatusPanel,The following statement contains a magic number: this.AddChild(new ImageWidget(AggContext.StaticData.LoadIcon("wait.png"' 14' 14' theme.InvertIcons))  			{  				VAnchor = VAnchor.Center'  				HAnchor = HAnchor.Left  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskStatusPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskStatusPanel.cs,RunningTaskStatusPanel,The following statement contains a magic number: this.AddChild(textWidget = new TextWidget(!string.IsNullOrWhiteSpace(title) ? title : taskDetails.Title' pointSize: theme.FontSize8' textColor: theme.TextColor)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(left: 16)'  				AutoExpandBoundsToText = true  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskStatusPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskStatusPanel.cs,RunningTaskStatusPanel,The following statement contains a magic number: progressBar = new ProgressBar()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Absolute | VAnchor.Center'  				Height = 2'  				FillColor = theme.PrimaryAccentColor'  				BorderColor = Color.Transparent'  				Margin = new BorderDouble(left: 16' bottom: 3' top: 15)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskStatusPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskStatusPanel.cs,RunningTaskStatusPanel,The following statement contains a magic number: progressBar = new ProgressBar()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Absolute | VAnchor.Center'  				Height = 2'  				FillColor = theme.PrimaryAccentColor'  				BorderColor = Color.Transparent'  				Margin = new BorderDouble(left: 16' bottom: 3' top: 15)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskStatusPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskStatusPanel.cs,RunningTaskStatusPanel,The following statement contains a magic number: progressBar = new ProgressBar()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Absolute | VAnchor.Center'  				Height = 2'  				FillColor = theme.PrimaryAccentColor'  				BorderColor = Color.Transparent'  				Margin = new BorderDouble(left: 16' bottom: 3' top: 15)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTaskStatusPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTaskStatusPanel.cs,RunningTaskStatusPanel,The following statement contains a magic number: progressBar = new ProgressBar()  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Absolute | VAnchor.Center'  				Height = 2'  				FillColor = theme.PrimaryAccentColor'  				BorderColor = Color.Transparent'  				Margin = new BorderDouble(left: 16' bottom: 3' top: 15)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTasksWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTasksWidget.cs,RunningTasksWidget,The following statement contains a magic number: borderColor = theme.AccentMimimalOverlay.Blend(Color.White' 0.2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTasksWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTasksWidget.cs,RunningTasksWidget,The following statement contains a magic number: pendingTasksList = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				BackgroundColor = theme.InteractionLayerOverlayColor'  				HAnchor = HAnchor.Fit | HAnchor.Left'  				VAnchor = VAnchor.Fit'  				MinimumSize = new Vector2(325' 0)'  				Border = new BorderDouble(top: 1)'  				BorderColor = borderColor'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,RunningTasksWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\RunningTasksWidget.cs,RenderRunningTasks,The following statement contains a magic number: var progressBackgroundColor = new Color(borderColor' 35);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,AxisIndicatorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\AxisIndicatorDrawable.cs,AxisIndicatorDrawable,The following statement contains a magic number: meshes.Add((GetMesh(2' 1)' Color.Blue));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,AxisIndicatorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\AxisIndicatorDrawable.cs,GetMesh,The following statement contains a magic number: scale[(axis + 1) % 3] = small;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,AxisIndicatorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\AxisIndicatorDrawable.cs,GetMesh,The following statement contains a magic number: scale[(axis + 2) % 3] = small;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,AxisIndicatorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\AxisIndicatorDrawable.cs,GetMesh,The following statement contains a magic number: scale[(axis + 2) % 3] = small;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,AxisIndicatorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\AxisIndicatorDrawable.cs,GetMesh,The following statement contains a magic number: translate[axis] = big / 2 * direction;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,EnsureBedTexture,The following statement contains a magic number: Task.Run(() =>  				{  					// On first draw we might take a few 100ms to generate textures and this  					// ensures we get a theme colored bed appearing on screen before out main  					// textures are finished generating  					if (clearToPlaceholderImage)  					{  						var placeHolderImage = new ImageBuffer(5' 5);  						var graphics = placeHolderImage.NewGraphics2D();  						graphics.Clear(theme.BedColor);    						SetActiveTexture(placeHolderImage);  					}    					try  					{  						var bedImage = BedMeshGenerator.CreatePrintBedImage(sceneContext.Printer);    						if (printer.Settings.Helpers.HotendCount() > 1)  						{  							bedTextures = new[]  							{  								bedImage'					// No limits' basic themed bed  								new ImageBuffer(bedImage)'	// T0 limits  								new ImageBuffer(bedImage)'	// T1 limits  								new ImageBuffer(bedImage)	// Unioned T0 & T1 limits  							};    							GenerateToolLimitsTexture(printer' 0' bedTextures[1]);  							GenerateToolLimitsTexture(printer' 1' bedTextures[2]);    							// Special case for union of both tools  							GenerateToolLimitsTexture(printer' 2' bedTextures[3]);  						}  						else  						{  							bedTextures = new[]  							{  								bedImage'                   // No limits' basic themed bed  							};    							activeBedToolClippingImage = 0;  						}    						this.SetActiveTexture(bedTextures[0]);  					}  					catch  					{  					}    					loadingTextures = false;  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,EnsureBedTexture,The following statement contains a magic number: Task.Run(() =>  				{  					// On first draw we might take a few 100ms to generate textures and this  					// ensures we get a theme colored bed appearing on screen before out main  					// textures are finished generating  					if (clearToPlaceholderImage)  					{  						var placeHolderImage = new ImageBuffer(5' 5);  						var graphics = placeHolderImage.NewGraphics2D();  						graphics.Clear(theme.BedColor);    						SetActiveTexture(placeHolderImage);  					}    					try  					{  						var bedImage = BedMeshGenerator.CreatePrintBedImage(sceneContext.Printer);    						if (printer.Settings.Helpers.HotendCount() > 1)  						{  							bedTextures = new[]  							{  								bedImage'					// No limits' basic themed bed  								new ImageBuffer(bedImage)'	// T0 limits  								new ImageBuffer(bedImage)'	// T1 limits  								new ImageBuffer(bedImage)	// Unioned T0 & T1 limits  							};    							GenerateToolLimitsTexture(printer' 0' bedTextures[1]);  							GenerateToolLimitsTexture(printer' 1' bedTextures[2]);    							// Special case for union of both tools  							GenerateToolLimitsTexture(printer' 2' bedTextures[3]);  						}  						else  						{  							bedTextures = new[]  							{  								bedImage'                   // No limits' basic themed bed  							};    							activeBedToolClippingImage = 0;  						}    						this.SetActiveTexture(bedTextures[0]);  					}  					catch  					{  					}    					loadingTextures = false;  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,EnsureBedTexture,The following statement contains a magic number: Task.Run(() =>  				{  					// On first draw we might take a few 100ms to generate textures and this  					// ensures we get a theme colored bed appearing on screen before out main  					// textures are finished generating  					if (clearToPlaceholderImage)  					{  						var placeHolderImage = new ImageBuffer(5' 5);  						var graphics = placeHolderImage.NewGraphics2D();  						graphics.Clear(theme.BedColor);    						SetActiveTexture(placeHolderImage);  					}    					try  					{  						var bedImage = BedMeshGenerator.CreatePrintBedImage(sceneContext.Printer);    						if (printer.Settings.Helpers.HotendCount() > 1)  						{  							bedTextures = new[]  							{  								bedImage'					// No limits' basic themed bed  								new ImageBuffer(bedImage)'	// T0 limits  								new ImageBuffer(bedImage)'	// T1 limits  								new ImageBuffer(bedImage)	// Unioned T0 & T1 limits  							};    							GenerateToolLimitsTexture(printer' 0' bedTextures[1]);  							GenerateToolLimitsTexture(printer' 1' bedTextures[2]);    							// Special case for union of both tools  							GenerateToolLimitsTexture(printer' 2' bedTextures[3]);  						}  						else  						{  							bedTextures = new[]  							{  								bedImage'                   // No limits' basic themed bed  							};    							activeBedToolClippingImage = 0;  						}    						this.SetActiveTexture(bedTextures[0]);  					}  					catch  					{  					}    					loadingTextures = false;  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,EnsureBedTexture,The following statement contains a magic number: Task.Run(() =>  				{  					// On first draw we might take a few 100ms to generate textures and this  					// ensures we get a theme colored bed appearing on screen before out main  					// textures are finished generating  					if (clearToPlaceholderImage)  					{  						var placeHolderImage = new ImageBuffer(5' 5);  						var graphics = placeHolderImage.NewGraphics2D();  						graphics.Clear(theme.BedColor);    						SetActiveTexture(placeHolderImage);  					}    					try  					{  						var bedImage = BedMeshGenerator.CreatePrintBedImage(sceneContext.Printer);    						if (printer.Settings.Helpers.HotendCount() > 1)  						{  							bedTextures = new[]  							{  								bedImage'					// No limits' basic themed bed  								new ImageBuffer(bedImage)'	// T0 limits  								new ImageBuffer(bedImage)'	// T1 limits  								new ImageBuffer(bedImage)	// Unioned T0 & T1 limits  							};    							GenerateToolLimitsTexture(printer' 0' bedTextures[1]);  							GenerateToolLimitsTexture(printer' 1' bedTextures[2]);    							// Special case for union of both tools  							GenerateToolLimitsTexture(printer' 2' bedTextures[3]);  						}  						else  						{  							bedTextures = new[]  							{  								bedImage'                   // No limits' basic themed bed  							};    							activeBedToolClippingImage = 0;  						}    						this.SetActiveTexture(bedTextures[0]);  					}  					catch  					{  					}    					loadingTextures = false;  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,EnsureBedTexture,The following statement contains a magic number: Task.Run(() =>  				{  					// On first draw we might take a few 100ms to generate textures and this  					// ensures we get a theme colored bed appearing on screen before out main  					// textures are finished generating  					if (clearToPlaceholderImage)  					{  						var placeHolderImage = new ImageBuffer(5' 5);  						var graphics = placeHolderImage.NewGraphics2D();  						graphics.Clear(theme.BedColor);    						SetActiveTexture(placeHolderImage);  					}    					try  					{  						var bedImage = BedMeshGenerator.CreatePrintBedImage(sceneContext.Printer);    						if (printer.Settings.Helpers.HotendCount() > 1)  						{  							bedTextures = new[]  							{  								bedImage'					// No limits' basic themed bed  								new ImageBuffer(bedImage)'	// T0 limits  								new ImageBuffer(bedImage)'	// T1 limits  								new ImageBuffer(bedImage)	// Unioned T0 & T1 limits  							};    							GenerateToolLimitsTexture(printer' 0' bedTextures[1]);  							GenerateToolLimitsTexture(printer' 1' bedTextures[2]);    							// Special case for union of both tools  							GenerateToolLimitsTexture(printer' 2' bedTextures[3]);  						}  						else  						{  							bedTextures = new[]  							{  								bedImage'                   // No limits' basic themed bed  							};    							activeBedToolClippingImage = 0;  						}    						this.SetActiveTexture(bedTextures[0]);  					}  					catch  					{  					}    					loadingTextures = false;  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,GetActiveToolIndex,The following statement contains a magic number: return 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,GenerateToolLimitsTexture,The following statement contains a magic number: int alpha = 80;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,GenerateToolLimitsTexture,The following statement contains a magic number: toolIndex == 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,GenerateToolLimitsTexture,The following statement contains a magic number: toolIndex == 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,GenerateToolLimitsTexture,The following statement contains a magic number: int textPadding = 8;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,GenerateToolLimitsTexture,The following statement contains a magic number: graphics.Render(  				new RoundedRectShape(cornerRect' bottomLeftRadius: 6)'  				theme.PrimaryAccentColor);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,GenerateToolLimitsTexture,The following statement contains a magic number: graphics.DrawString(  				toolTitle'  				toolBounds.Right - textPadding'  				cornerRect.Bottom + (cornerRect.Height / 2 - printerBounds.Height / 2) + 1'  				theme.DefaultFontSize'  				justification: Justification.Right'  				baseline: Baseline.Text'  				color: Color.White'  				bold: true);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,FloorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\FloorDrawable.cs,GenerateToolLimitsTexture,The following statement contains a magic number: graphics.DrawString(  				toolTitle'  				toolBounds.Right - textPadding'  				cornerRect.Bottom + (cornerRect.Height / 2 - printerBounds.Height / 2) + 1'  				theme.DefaultFontSize'  				justification: Justification.Right'  				baseline: Baseline.Text'  				color: Color.White'  				bold: true);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,NormalsDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\NormalsDrawable.cs,Draw,The following statement contains a magic number: world.Render3DLineNoPrep(frustum' transformed1' transformed1 + normal' Color.Red' 2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScreenspaceAxisIndicatorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\ScreenspaceAxisIndicatorDrawable.cs,Draw,The following statement contains a magic number: Matrix4X4 xyMatrix = world.GetXYInViewRotation(new Vector3(0' 0' 30));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ScreenspaceAxisIndicatorDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\ScreenspaceAxisIndicatorDrawable.cs,Draw,The following statement contains a magic number: GLHelper.Render(mesh.mesh' mesh.color' xyMatrix * Matrix4X4.CreateTranslation(0' 0' 30));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedItemDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\SelectedItemDrawable.cs,Draw,The following statement contains a magic number: double secondsSinceSelectionChanged = (UiThread.CurrentTimerMs - lastSelectionChangedMs) / 1000.0;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedItemDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\SelectedItemDrawable.cs,Draw,The following statement contains a magic number: selectionColor = Color.White.Blend(accentColor' Quadratic.InOut(secondsSinceSelectionChanged * 4));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedItemDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\SelectedItemDrawable.cs,Draw,The following statement contains a magic number: secondsSinceSelectionChanged < .25
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedItemDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\SelectedItemDrawable.cs,Draw,The following statement contains a magic number: secondsSinceSelectionChanged < .5
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedItemDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\SelectedItemDrawable.cs,RenderSelection,The following statement contains a magic number: var pixelsWant = pixelsAccross + Vector3.One * 4 * Math.Sqrt(2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedItemDrawable,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\SelectedItemDrawable.cs,RenderSelection,The following statement contains a magic number: var pixelsWant = pixelsAccross + Vector3.One * 4 * Math.Sqrt(2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SearchPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SearchPanel.cs,SearchPanel,The following statement contains a magic number: this.Width = 500;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SearchPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SearchPanel.cs,SearchPanel,The following statement contains a magic number: this.Height = 200;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SearchPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SearchPanel.cs,SearchPanel,The following statement contains a magic number: searchBox = new SearchInputBox(theme)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(5' 8' 5' 5)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SearchPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SearchPanel.cs,SearchPanel,The following statement contains a magic number: searchBox = new SearchInputBox(theme)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(5' 8' 5' 5)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SearchPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SearchPanel.cs,SearchPanel,The following statement contains a magic number: searchBox = new SearchInputBox(theme)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(5' 8' 5' 5)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SearchPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SearchPanel.cs,SearchPanel,The following statement contains a magic number: searchBox = new SearchInputBox(theme)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(5' 8' 5' 5)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SearchPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SearchPanel.cs,SearchPanel,The following statement contains a magic number: searchBox.searchInput.ActualTextEditWidget.EnterPressed += async (s2' e2) =>  			{  				searchResults.CloseAllChildren();    				searchResults.AddChild(  					new TextWidget("Searching".Localize() + "..."' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  					{  						Margin = 10  					});    				this.Invalidate();    				var searchHits = await Task.Run(() =>  				{  					return HelpIndex.Search(searchBox.searchInput.Text);  				});    				searchResults.CloseAllChildren();    				foreach (var searchResult in searchHits)  				{  					var resultsRow = new HelpSearchResultRow(searchResult' theme);  					resultsRow.Click += this.ResultsRow_Click;    					searchResults.AddChild(resultsRow);  				}    				if (searchResults.Children.Count == 0)  				{  					searchResults.AddChild(new SettingsRow("No results found".Localize()' null' theme' AggContext.StaticData.LoadIcon("StatusInfoTip_16x.png").SetPreMultiply()));  				}    				// Add top border to first child  				if (searchResults.Children.FirstOrDefault() is GuiWidget firstChild)  				{  					searchResults.BorderColor = firstChild.BorderColor;  					searchResults.Border = new BorderDouble(top: 1);  					// firstChild.Border = firstChild.Border.Clone(top: 1); - doesn't work for some reason' pushing border to parent above  				}    				scrollable.TopLeftOffset = Vector2.Zero;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,SelectedObjectPanel,The following statement contains a magic number: var icon = AggContext.StaticData.LoadIcon("noun_766157.png"' 16' 16' theme.InvertIcons).SetPreMultiply();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,SelectedObjectPanel,The following statement contains a magic number: var icon = AggContext.StaticData.LoadIcon("noun_766157.png"' 16' 16' theme.InvertIcons).SetPreMultiply();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,SelectedObjectPanel,The following statement contains a magic number: removeButton = new IconButton(AggContext.StaticData.LoadIcon("remove.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Margin = theme.ButtonSpacing'  				ToolTipText = "Delete".Localize()'  				Enabled = scene.SelectedItem != null  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,SelectedObjectPanel,The following statement contains a magic number: removeButton = new IconButton(AggContext.StaticData.LoadIcon("remove.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Margin = theme.ButtonSpacing'  				ToolTipText = "Delete".Localize()'  				Enabled = scene.SelectedItem != null  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,ShowObjectEditor,The following statement contains a magic number: editorWidget.Padding = new BorderDouble(10' 10' 10' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,ShowObjectEditor,The following statement contains a magic number: editorWidget.Padding = new BorderDouble(10' 10' 10' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectedObjectPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SelectedObjectPanel.cs,ShowObjectEditor,The following statement contains a magic number: editorWidget.Padding = new BorderDouble(10' 10' 10' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SliceLayerSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,SliceLayerSelector,The following statement contains a magic number: var tagContainer = new HorizontalTag()  			{  				HAnchor = HAnchor.Fit | HAnchor.Right'  				VAnchor = VAnchor.Fit'  				Padding = new BorderDouble(6' 4' 10' 4)'  				Margin = new BorderDouble(right: layerScrollbar.Width + layerScrollbar.Margin.Width)'  				TagColor = (theme.IsDarkTheme) ? theme.Shade : theme.SlightShade  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SliceLayerSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,SliceLayerSelector,The following statement contains a magic number: var tagContainer = new HorizontalTag()  			{  				HAnchor = HAnchor.Fit | HAnchor.Right'  				VAnchor = VAnchor.Fit'  				Padding = new BorderDouble(6' 4' 10' 4)'  				Margin = new BorderDouble(right: layerScrollbar.Width + layerScrollbar.Margin.Width)'  				TagColor = (theme.IsDarkTheme) ? theme.Shade : theme.SlightShade  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SliceLayerSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,SliceLayerSelector,The following statement contains a magic number: var tagContainer = new HorizontalTag()  			{  				HAnchor = HAnchor.Fit | HAnchor.Right'  				VAnchor = VAnchor.Fit'  				Padding = new BorderDouble(6' 4' 10' 4)'  				Margin = new BorderDouble(right: layerScrollbar.Width + layerScrollbar.Margin.Width)'  				TagColor = (theme.IsDarkTheme) ? theme.Shade : theme.SlightShade  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SliceLayerSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,SliceLayerSelector,The following statement contains a magic number: var tagContainer = new HorizontalTag()  			{  				HAnchor = HAnchor.Fit | HAnchor.Right'  				VAnchor = VAnchor.Fit'  				Padding = new BorderDouble(6' 4' 10' 4)'  				Margin = new BorderDouble(right: layerScrollbar.Width + layerScrollbar.Margin.Width)'  				TagColor = (theme.IsDarkTheme) ? theme.Shade : theme.SlightShade  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SliceLayerSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,SliceLayerSelector,The following statement contains a magic number: layerInfoHalfHeight = currentLayerInfo.Height / 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LayerScrollbar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,LayerScrollbar,The following statement contains a magic number: layerCountText = new TextWidget(""' pointSize: 9' textColor: theme.TextColor)  				{  					MinimumSize = new Vector2(20' 20)'  					AutoExpandBoundsToText = true'  					HAnchor = HAnchor.Center  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LayerScrollbar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,LayerScrollbar,The following statement contains a magic number: layerCountText = new TextWidget(""' pointSize: 9' textColor: theme.TextColor)  				{  					MinimumSize = new Vector2(20' 20)'  					AutoExpandBoundsToText = true'  					HAnchor = HAnchor.Center  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LayerScrollbar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,LayerScrollbar,The following statement contains a magic number: layerCountText = new TextWidget(""' pointSize: 9' textColor: theme.TextColor)  				{  					MinimumSize = new Vector2(20' 20)'  					AutoExpandBoundsToText = true'  					HAnchor = HAnchor.Center  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LayerScrollbar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,LayerScrollbar,The following statement contains a magic number: layerSlider = new SolidSlider(new Vector2()' SliderWidth' theme' 0' 1' Orientation.Vertical)  				{  					HAnchor = HAnchor.Center'  					VAnchor = VAnchor.Stretch'  					Margin = new BorderDouble(0' 5)'  					Minimum = 0'  					Maximum = printer.Bed.LoadedGCode?.LayerCount ?? 1'  					Value = printer.Bed.ActiveLayerIndex  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LayerScrollbar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,LayerScrollbar,The following statement contains a magic number: layerSlider.ValueChanged += (s' e) =>  				{  					if (printer?.Bed?.RenderInfo != null)  					{  						printer.Bed.ActiveLayerIndex = (int)(layerSlider.Value + .5);  					}    					// show the layer info next to the slider  					this.Invalidate();  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LayerScrollbar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,LayerScrollbar,The following statement contains a magic number: layerStartText = new TextWidget("1"' pointSize: 9' textColor: theme.TextColor)  				{  					AutoExpandBoundsToText = true'  					HAnchor = HAnchor.Center  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LayerScrollbar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,ActiveLayer_Changed,The following statement contains a magic number: layerSlider != null  					&& printer.Bed.ActiveLayerIndex != (int)(layerSlider.Value + .5)
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HorizontalTag,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,OnBoundsChanged,The following statement contains a magic number: var radius = 3.0;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HorizontalTag,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,OnBoundsChanged,The following statement contains a magic number: tabShape2.LineTo(rect.Right - 8' rect.Top);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HorizontalTag,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SliceLayerSelector.cs,OnBoundsChanged,The following statement contains a magic number: tabShape2.LineTo(rect.Right - 8' rect.Bottom);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SpeedsLegend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SpeedsLegend.cs,SpeedsLegend,The following statement contains a magic number: int maxItems = Math.Min(7' speeds.Count);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SpeedsLegend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SpeedsLegend.cs,SpeedsLegend,The following statement contains a magic number: speeds.Count < 8
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SpeedsLegend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SpeedsLegend.cs,SpeedsLegend,The following statement contains a magic number: this.AddChild(  					new SpeedLegendRow(speedColors[i]' millimetersPerSecond: feedrate / 60' pointSize: theme.FontSize10)  					{  						Margin = new BorderDouble(5' 2' 2' 2)'  						HAnchor = HAnchor.Stretch  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SpeedsLegend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SpeedsLegend.cs,SpeedsLegend,The following statement contains a magic number: this.AddChild(  					new SpeedLegendRow(speedColors[i]' millimetersPerSecond: feedrate / 60' pointSize: theme.FontSize10)  					{  						Margin = new BorderDouble(5' 2' 2' 2)'  						HAnchor = HAnchor.Stretch  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SpeedsLegend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SpeedsLegend.cs,SpeedsLegend,The following statement contains a magic number: this.AddChild(  					new SpeedLegendRow(speedColors[i]' millimetersPerSecond: feedrate / 60' pointSize: theme.FontSize10)  					{  						Margin = new BorderDouble(5' 2' 2' 2)'  						HAnchor = HAnchor.Stretch  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SpeedsLegend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SpeedsLegend.cs,SpeedsLegend,The following statement contains a magic number: this.AddChild(  					new SpeedLegendRow(speedColors[i]' millimetersPerSecond: feedrate / 60' pointSize: theme.FontSize10)  					{  						Margin = new BorderDouble(5' 2' 2' 2)'  						HAnchor = HAnchor.Stretch  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SpeedsLegend,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SpeedsLegend.cs,SpeedsLegend,The following statement contains a magic number: this.AddChild(  					new SpeedLegendRow(speedColors[i]' millimetersPerSecond: feedrate / 60' pointSize: theme.FontSize10)  					{  						Margin = new BorderDouble(5' 2' 2' 2)'  						HAnchor = HAnchor.Stretch  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SpeedLegendRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SpeedsLegend.cs,SpeedLegendRow,The following statement contains a magic number: this.AddChild(  					new GuiWidget  					{  						VAnchor = VAnchor.Center'  						Width = 13'  						Height = 13'  						BackgroundColor = color'  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SpeedLegendRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SpeedsLegend.cs,SpeedLegendRow,The following statement contains a magic number: this.AddChild(  					new GuiWidget  					{  						VAnchor = VAnchor.Center'  						Width = 13'  						Height = 13'  						BackgroundColor = color'  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SpeedLegendRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SpeedsLegend.cs,SpeedLegendRow,The following statement contains a magic number: this.AddChild(  					new TextWidget($"{millimetersPerSecond} mm/s"' pointSize: pointSize' textColor: AppContext.Theme.TextColor)  					{  						VAnchor = VAnchor.Center'  						Margin = new BorderDouble(8' 0)'  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SystemWindowExtension,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SystemWindowExtension.cs,ShowPopover,The following statement contains a magic number: (popup.AltMate.Right && altScreenPosition.X > -15)  							|| (popup.AltMate.Left && altScreenPosition.X + popup.Widget.Width < systemWindow.Width)
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SystemWindowExtension,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SystemWindowExtension.cs,ShowPopup,The following statement contains a magic number: e.Graphics2D.Render(  						new Stroke(  							new RoundedRect(popup.Widget.LocalBounds' 0)'  							borderWidth * 2)'  						AppContext.Theme.PopupBorderColor);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ChromeTabs,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,ChromeTabs,The following statement contains a magic number: leadingTabAdornment = new GuiWidget()  			{  				MinimumSize = new Vector2(16' theme.TabButtonHeight)'  				VAnchor = VAnchor.Bottom  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ChromeTabs,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,ChromeTabs,The following statement contains a magic number: tabTrailer = new TabTrailer(this' theme)  			{  				VAnchor = VAnchor.Bottom'  				MinimumSize = new Vector2(8' theme.TabButtonHeight)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ChromeTabs,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,ChromeTabs,The following statement contains a magic number: var plusTabButton = new NewTabButton(AggContext.StaticData.LoadIcon("fa-plus_12.png"' theme.InvertIcons)' theme)  			{  				Height = 20'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SimpleTab,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,SimpleTab,The following statement contains a magic number: tabPill.Margin = (hasClose) ? new BorderDouble(right: 16) : 0;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SimpleTab,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,SimpleTab,The following statement contains a magic number: closeButton.Margin = new BorderDouble(right: 7' top: 1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TabPill,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,TabPill,The following statement contains a magic number: this.Padding = new BorderDouble(10' 5' 10' 4);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TabPill,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,TabPill,The following statement contains a magic number: this.Padding = new BorderDouble(10' 5' 10' 4);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TabPill,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,TabPill,The following statement contains a magic number: this.Padding = new BorderDouble(10' 5' 10' 4);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TabPill,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,TabPill,The following statement contains a magic number: this.Padding = new BorderDouble(10' 5' 10' 4);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TabPill,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,TabPill,The following statement contains a magic number: imageWidget = new ImageWidget(imageBuffer)  					{  						Margin = new BorderDouble(right: 6' bottom: 2)'  						VAnchor = VAnchor.Center  					};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TabPill,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,TabPill,The following statement contains a magic number: imageWidget = new ImageWidget(imageBuffer)  					{  						Margin = new BorderDouble(right: 6' bottom: 2)'  						VAnchor = VAnchor.Center  					};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ToolTab,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,ToolTab,The following statement contains a magic number: tabPill.Padding = tabPill.Padding.Clone(top: 10' bottom: 10);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ToolTab,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,ToolTab,The following statement contains a magic number: tabPill.Padding = tabPill.Padding.Clone(top: 10' bottom: 10);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ChromeTab,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\Tabs.cs,DrawTabLowerLeft,The following statement contains a magic number: graphics2D.Line(rect.Left' rect.YCenter' rect.Left + tabInsetDistance' rect.Bottom' AppContext.Theme.MinimalShade' 1.3);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValueTag,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ValueTag.cs,ValueTag,The following statement contains a magic number: this.TagColor = theme.ResolveColor(AppContext.Theme.BackgroundColor' theme.AccentMimimalOverlay.WithAlpha(50));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValueTag,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ValueTag.cs,ValueTag,The following statement contains a magic number: this.AddChild(  				new TextWidget(title' pointSize: theme.DefaultFontSize - 1' textColor: theme.TextColor)  				{  					Margin = new BorderDouble(right: 12)  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValueTag,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ValueTag.cs,ValueTag,The following statement contains a magic number: this.AddChild(  				new TextWidget(value' pointSize: theme.DefaultFontSize - 1' textColor: theme.TextColor)  				{  					Margin = new BorderDouble(left: 5)  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValueTag,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ValueTag.cs,RebuildShape,The following statement contains a magic number: this.Children.Count() < 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValueTag,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ValueTag.cs,RebuildShape,The following statement contains a magic number: secondChildBounds.Left = firstChildBounds.Right - 10;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorSwatchSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ColorSwatchSelector,The following statement contains a magic number: int colorCount = 9;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorSwatchSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ColorSwatchSelector,The following statement contains a magic number: double[] lightness = new double[] { .7' .5' .3 };
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorSwatchSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ColorSwatchSelector,The following statement contains a magic number: double[] lightness = new double[] { .7' .5' .3 };
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorSwatchSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ColorSwatchSelector,The following statement contains a magic number: double[] lightness = new double[] { .7' .5' .3 };
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorSwatchSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ColorSwatchSelector,The following statement contains a magic number: var grayLevel = new Color[] { Color.White' new Color(180' 180' 180)' Color.Gray };
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorSwatchSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ColorSwatchSelector,The following statement contains a magic number: var grayLevel = new Color[] { Color.White' new Color(180' 180' 180)' Color.Gray };
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorSwatchSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ColorSwatchSelector,The following statement contains a magic number: var grayLevel = new Color[] { Color.White' new Color(180' 180' 180)' Color.Gray };
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorSwatchSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ColorSwatchSelector,The following statement contains a magic number: switch(rowIndex)  				{  					case 0:  						var resetButton = new IconButton(AggContext.StaticData.LoadIcon("transparent_grid.png")' theme)  						{  							Width = scaledButtonSize'  							Height = scaledButtonSize'  							Margin = buttonSpacing'  							VAnchor = VAnchor.Absolute  						};  						resetButton.Click += (s' e) =>  						{  							// The colorChanged action displays the given color - use .MinimalHighlight rather than no color  							colorChanged(Color.Transparent);  						};  						colorRow.AddChild(resetButton);  						break;    					case 1:  						colorRow.AddChild(MakeColorButton(new Color("#555")' scaledButtonSize' buttonSpacing' colorChanged));  						break;    					case 2:  						colorRow.AddChild(MakeColorButton(new Color("#222")' scaledButtonSize' buttonSpacing' colorChanged));  						break;  				}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,OnDraw,The following statement contains a magic number: var numberOfStripes = 3;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,OnDraw,The following statement contains a magic number: int ix = 20;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,OnDraw,The following statement contains a magic number: graphics2D.Line(  						i * thickness + thickness / 2 - ix'  						0'  						i * thickness + thickness / 2'  						ix'  						Color.Gray'  						0.05);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,OnDraw,The following statement contains a magic number: graphics2D.Line(  						i * thickness + thickness / 2 - ix'  						0'  						i * thickness + thickness / 2'  						ix'  						Color.Gray'  						0.05);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,OnDraw,The following statement contains a magic number: graphics2D.Line(  						i * thickness + thickness / 2 - ix'  						0'  						i * thickness + thickness / 2'  						ix'  						Color.Gray'  						0.05);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,OnDraw,The following statement contains a magic number: i < numberOfStripes * 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ToGrayscale,The following statement contains a magic number: int y = (color.red * 77) + (color.green * 151) + (color.blue * 28);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ToGrayscale,The following statement contains a magic number: int y = (color.red * 77) + (color.green * 151) + (color.blue * 28);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ToGrayscale,The following statement contains a magic number: int y = (color.red * 77) + (color.green * 151) + (color.blue * 28);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ToGrayscale,The following statement contains a magic number: int gray = (y >> 8);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ColorExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ToGrayscale,The following statement contains a magic number: return new Color(gray' gray' gray' 255);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The following statement contains a magic number: Vector3 lineCenter = (start + end) / 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The following statement contains a magic number: Matrix4X4 rotateTransform = Matrix4X4.CreateRotation(new Quaternion(delta.GetNormal()' Vector3.UnitX + new Vector3(.0001' -.00001' .00002)));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The following statement contains a magic number: Matrix4X4 rotateTransform = Matrix4X4.CreateRotation(new Quaternion(delta.GetNormal()' Vector3.UnitX + new Vector3(.0001' -.00001' .00002)));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderLine,The following statement contains a magic number: Matrix4X4 rotateTransform = Matrix4X4.CreateRotation(new Quaternion(delta.GetNormal()' Vector3.UnitX + new Vector3(.0001' -.00001' .00002)));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetBottomCorner(1)' aabb.GetBottomCorner(2)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetBottomCorner(2)' aabb.GetBottomCorner(3)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetBottomCorner(2)' aabb.GetBottomCorner(3)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetBottomCorner(3)' aabb.GetBottomCorner(0)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetTopCorner(1)' aabb.GetTopCorner(2)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetTopCorner(2)' aabb.GetTopCorner(3)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetTopCorner(2)' aabb.GetTopCorner(3)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DebugBvh,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DebugBvh.cs,RenderBounds,The following statement contains a magic number: RenderLine(transform.Peek()' aabb.GetTopCorner(3)' aabb.GetTopCorner(0)' color);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DragDropLoadProgress,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DragDropLoadProgress.cs,DragDropLoadProgress,The following statement contains a magic number: progressBar = new ProgressBar(80' 15)  			{  				FillColor = theme.PrimaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DragDropLoadProgress,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DragDropLoadProgress.cs,DragDropLoadProgress,The following statement contains a magic number: progressBar = new ProgressBar(80' 15)  			{  				FillColor = theme.PrimaryAccentColor'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DragDropLoadProgress,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DragDropLoadProgress.cs,View3DWidget_AfterDraw,The following statement contains a magic number: Vector3 renderPosition = bounds.GetBottomCorner(2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DragDropLoadProgress,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DragDropLoadProgress.cs,View3DWidget_AfterDraw,The following statement contains a magic number: Vector2 cornerScreenSpace = view3DWidget.InteractionLayer.World.GetScreenPosition(renderPosition) - new Vector2(20' 0);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DragDropLoadProgress,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DragDropLoadProgress.cs,View3DWidget_AfterDraw,The following statement contains a magic number: e.Graphics2D.DrawString(this.State' 0' -20' 11);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DragDropLoadProgress,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DragDropLoadProgress.cs,View3DWidget_AfterDraw,The following statement contains a magic number: e.Graphics2D.DrawString(this.State' 0' -20' 11);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,DragDropLoadProgress,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\DragDropLoadProgress.cs,ProgressReporter,The following statement contains a magic number: progress0To1 > 1.1
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GridOptionsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\GridOptionsPanel.cs,GridOptionsPanel,The following statement contains a magic number: this.AddChild(new IconButton(AggContext.StaticData.LoadIcon("1694146.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Selectable = false  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GridOptionsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\GridOptionsPanel.cs,GridOptionsPanel,The following statement contains a magic number: this.AddChild(new IconButton(AggContext.StaticData.LoadIcon("1694146.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Selectable = false  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GridOptionsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\GridOptionsPanel.cs,ShowGridOptions,The following statement contains a magic number: var snapSettings = new List<double>()  			{  				.1' .25' .5' 1' 2' 5  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GridOptionsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\GridOptionsPanel.cs,ShowGridOptions,The following statement contains a magic number: var snapSettings = new List<double>()  			{  				.1' .25' .5' 1' 2' 5  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GridOptionsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\GridOptionsPanel.cs,ShowGridOptions,The following statement contains a magic number: var snapSettings = new List<double>()  			{  				.1' .25' .5' 1' 2' 5  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GridOptionsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\GridOptionsPanel.cs,ShowGridOptions,The following statement contains a magic number: var snapSettings = new List<double>()  			{  				.1' .25' .5' 1' 2' 5  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,GridOptionsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\GridOptionsPanel.cs,ShowGridOptions,The following statement contains a magic number: var snapSettings = new List<double>()  			{  				.1' .25' .5' 1' 2' 5  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,MoveInZControl,The following statement contains a magic number: zHeightDisplayInfo.EditComplete += (s' e) =>  			{  				var selectedItem = RootSelection;    				Matrix4X4 startingTransform = selectedItem.Matrix;    				var newZPosition = zHeightDisplayInfo.Value;    				if (InteractionContext.SnapGridDistance > 0)  				{  					// snap this position to the grid  					double snapGridDistance = InteractionContext.SnapGridDistance;    					// snap this position to the grid  					newZPosition = ((int)((newZPosition / snapGridDistance) + .5)) * snapGridDistance;  				}    				AxisAlignedBoundingBox originalSelectedBounds = selectedItem.GetAxisAlignedBoundingBox();  				var moveAmount = newZPosition - originalSelectedBounds.MinXYZ.Z;    				if (moveAmount != 0)  				{  					selectedItem.Matrix = selectedItem.Matrix * Matrix4X4.CreateTranslation(0' 0' moveAmount);  					Invalidate();  				}    				context.Scene.AddTransformSnapshot(startingTransform);  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,OnMouseMove,The following statement contains a magic number: newZPosition = ((int)((newZPosition / snapGridDistance) + .5)) * snapGridDistance;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,SetPosition,The following statement contains a magic number: boxCenter.Z += (10 + upArrowSize / 2) * distBetweenPixelsWorldSpace;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,SetPosition,The following statement contains a magic number: boxCenter.Z += (10 + upArrowSize / 2) * distBetweenPixelsWorldSpace;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,SetPosition,The following statement contains a magic number: lines.Add(new Vector2(lines[2].X + lineLength' lines[2].Y));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,SetPosition,The following statement contains a magic number: lines.Add(new Vector2(lines[2].X + lineLength' lines[2].Y));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: DrawMeasureLine(drawEvent.Graphics2D' (lines[i] + lines[i + 1]) / 2' (lines[i + 2] + lines[i + 3]) / 2' LineArrows.Both' theme);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: zHeightDisplayInfo.OriginRelativeParent = lines[1] + new Vector2(10' - zHeightDisplayInfo.LocalBounds.Center.Y);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,MoveInZControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\MoveInZControl.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: selectedItem != null  				&& lines.Count > 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectionShadow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SelectionShadow.cs,SelectionShadow,The following statement contains a magic number: shadowColor = theme.ResolveColor(theme.BackgroundColor' Color.Black.WithAlpha(80)).WithAlpha(110);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectionShadow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SelectionShadow.cs,SelectionShadow,The following statement contains a magic number: shadowColor = theme.ResolveColor(theme.BackgroundColor' Color.Black.WithAlpha(80)).WithAlpha(110);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectionShadow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SelectionShadow.cs,SetPosition,The following statement contains a magic number: TotalTransform = Matrix4X4.CreateTranslation(new Vector3(boundsCenter.X' boundsCenter.Y' 0.1));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SelectionShadow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SelectionShadow.cs,GetNormalShadowMesh,The following statement contains a magic number: normalShadowMesh = PlatonicSolids.CreateCube(1' 1' .1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: switch (meshSelectInfo.HitQuadrant)  			{  				case HitQuadrant.LB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.LT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: switch (meshSelectInfo.HitQuadrant)  			{  				case HitQuadrant.LB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.LT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: switch (meshSelectInfo.HitQuadrant)  			{  				case HitQuadrant.LB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.LT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: switch (meshSelectInfo.HitQuadrant)  			{  				case HitQuadrant.LB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.LT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: switch (meshSelectInfo.HitQuadrant)  			{  				case HitQuadrant.LB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.LT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: switch (meshSelectInfo.HitQuadrant)  			{  				case HitQuadrant.LB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.LT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: switch (meshSelectInfo.HitQuadrant)  			{  				case HitQuadrant.LB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.LT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following statement contains a magic number: switch (meshSelectInfo.HitQuadrant)  			{  				case HitQuadrant.LB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.LT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;  			}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: drawEvent.Graphics2D.Line(lines[2]' lines[3]' Color.Red);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,InteractionLayer_AfterDraw,The following statement contains a magic number: drawEvent.Graphics2D.Line(lines[2]' lines[3]' Color.Red);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,InteractionLayer,The following statement contains a magic number: gCodeMeshColor = new Color(theme.PrimaryAccentColor' 35);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,InteractionLayer,The following statement contains a magic number: BuildVolumeColor = new ColorF(.2' .8' .3' .2).ToColor();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,InteractionLayer,The following statement contains a magic number: BuildVolumeColor = new ColorF(.2' .8' .3' .2).ToColor();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,InteractionLayer,The following statement contains a magic number: BuildVolumeColor = new ColorF(.2' .8' .3' .2).ToColor();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,InteractionLayer,The following statement contains a magic number: BuildVolumeColor = new ColorF(.2' .8' .3' .2).ToColor();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,InteractionLayer,The following statement contains a magic number: UiThread.RunOnIdle(() =>  				{  					ViewOnlyTexture = new ImageBuffer(32' 32' 32);  					var graphics2D = ViewOnlyTexture.NewGraphics2D();  					graphics2D.Clear(Color.White);  					graphics2D.FillRectangle(0' 0' ViewOnlyTexture.Width / 2' ViewOnlyTexture.Height' Color.LightGray);  					// request the texture so we can set it to repeat  					ImageGlPlugin.GetImageGlPlugin(ViewOnlyTexture' true' true' false);  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,InteractionLayer,The following statement contains a magic number: UiThread.RunOnIdle(() =>  				{  					ViewOnlyTexture = new ImageBuffer(32' 32' 32);  					var graphics2D = ViewOnlyTexture.NewGraphics2D();  					graphics2D.Clear(Color.White);  					graphics2D.FillRectangle(0' 0' ViewOnlyTexture.Width / 2' ViewOnlyTexture.Height' Color.LightGray);  					// request the texture so we can set it to repeat  					ImageGlPlugin.GetImageGlPlugin(ViewOnlyTexture' true' true' false);  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,InteractionLayer,The following statement contains a magic number: UiThread.RunOnIdle(() =>  				{  					ViewOnlyTexture = new ImageBuffer(32' 32' 32);  					var graphics2D = ViewOnlyTexture.NewGraphics2D();  					graphics2D.Clear(Color.White);  					graphics2D.FillRectangle(0' 0' ViewOnlyTexture.Width / 2' ViewOnlyTexture.Height' Color.LightGray);  					// request the texture so we can set it to repeat  					ImageGlPlugin.GetImageGlPlugin(ViewOnlyTexture' true' true' false);  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,InteractionLayer,The following statement contains a magic number: UiThread.RunOnIdle(() =>  				{  					ViewOnlyTexture = new ImageBuffer(32' 32' 32);  					var graphics2D = ViewOnlyTexture.NewGraphics2D();  					graphics2D.Clear(Color.White);  					graphics2D.FillRectangle(0' 0' ViewOnlyTexture.Width / 2' ViewOnlyTexture.Height' Color.LightGray);  					// request the texture so we can set it to repeat  					ImageGlPlugin.GetImageGlPlugin(ViewOnlyTexture' true' true' false);  				});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,RenderBounds,The following statement contains a magic number: Vector3 bottomEndPosition = Vector3Ex.Transform(bvh.GetAxisAlignedBoundingBox().GetBottomCorner((i + 1) % 4)' transformToWorld);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,RenderBounds,The following statement contains a magic number: Vector3 topEndPosition = Vector3Ex.Transform(bvh.GetAxisAlignedBoundingBox().GetTopCorner((i + 1) % 4)' transformToWorld);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,RenderBounds,The following statement contains a magic number: i < 4
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,RenderBounds,The following statement contains a magic number: e.Graphics2D.Circle(screenPos' 3' Color.Red);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,RenderBounds,The following statement contains a magic number: i < 3
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,FindDescendants,The following statement contains a magic number: i < 4
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,FindDescendants,The following statement contains a magic number: i < 4
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawObject,The following statement contains a magic number: (drawColor.alpha == 255  					&& !hasTransparentTextures)  					|| (item == scene.DebugItem)
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,GetItemColor,The following statement contains a magic number: drawColor = new Color(Color.Yellow' 120);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,GetItemColor,The following statement contains a magic number: drawColor = Color.Red.WithAlpha(90);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,GetItemColor,The following statement contains a magic number: drawColor.alpha != 255  				&& item is Object3D item3D
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,GetItemColor,The following statement contains a magic number: drawColor = new Color(drawColor' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,The following statement contains a magic number: UiThread.CurrentTimerMs > lastEmulatorDrawMs + 100
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,The following statement contains a magic number: var matrix = Matrix4X4.CreateTranslation(emulator.CurrentPosition + new Vector3(.5' .5' 5));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,The following statement contains a magic number: var matrix = Matrix4X4.CreateTranslation(emulator.CurrentPosition + new Vector3(.5' .5' 5));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,The following statement contains a magic number: var matrix = Matrix4X4.CreateTranslation(emulator.CurrentPosition + new Vector3(.5' .5' 5));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,The following statement contains a magic number: var pointOnBedInViewSpace = Vector3Ex.Transform(new Vector3(10' 10' 0)' World.ModelviewMatrix);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,The following statement contains a magic number: var pointOnBedInViewSpace = Vector3Ex.Transform(new Vector3(10' 10' 0)' World.ModelviewMatrix);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,The following statement contains a magic number: GLHelper.Render(  					object3D.Mesh'  					item.Color'  					object3D.WorldMatrix()'  					RenderTypes.Outlines'  					object3D.WorldMatrix() * World.ModelviewMatrix'  					wireColor'  					allowBspRendering: transparentMeshes.Count < 1000);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LevelingMeshVisualizer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\LevelingMeshVisualizer.cs,BuildMeshFromLevelingData,The following statement contains a magic number: var points = new int[3];
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LevelingMeshVisualizer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\LevelingMeshVisualizer.cs,BuildMeshFromLevelingData,The following statement contains a magic number: faces.Add(new Face(points[0]' points[2]' points[1]' vertices));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LevelingMeshVisualizer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\LevelingMeshVisualizer.cs,BuildMeshFromLevelingData,The following statement contains a magic number: faces.Add(new Face(points[0]' points[1]' points[2]' vertices));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,LevelingMeshVisualizer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\LevelingMeshVisualizer.cs,GetOuterPoints,The following statement contains a magic number: var outerPointsOnly = pointCounts.Where(kvp => kvp.Value <= 3).Select(kvp => kvp.Key).ToList();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,Object3DView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\MeshViewerWidget.cs,Object3DView,The following statement contains a magic number: source is Object3D object3D  				&& color != source.Color  					&& color.alpha != 255
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,OverflowBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\OverflowBar.cs,OnBoundsChanged,The following statement contains a magic number: withinLimits &= (accumulatedX + totalX / 2) <= maxRight;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,OverflowMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\OverflowBar.cs,CreateOverflowIcon,The following statement contains a magic number: return AggContext.StaticData.LoadIcon(Path.Combine("ViewTransformControls"' "overflow.png")' 32' 32' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,OverflowMenuButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\OverflowBar.cs,CreateOverflowIcon,The following statement contains a magic number: return AggContext.StaticData.LoadIcon(Path.Combine("ViewTransformControls"' "overflow.png")' 32' 32' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,PrinterActionsBar,The following statement contains a magic number: var resetConnectionButton = new TextIconButton(  					"Reset".Localize()'  					AggContext.StaticData.LoadIcon("e_stop.png"' 14' 14' theme.InvertIcons)'  					theme)  				{  					ToolTipText = "Reboots the firmware on the controller".Localize()'  					Margin = defaultMargin  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,PrinterActionsBar,The following statement contains a magic number: var resetConnectionButton = new TextIconButton(  					"Reset".Localize()'  					AggContext.StaticData.LoadIcon("e_stop.png"' 14' 14' theme.InvertIcons)'  					theme)  				{  					ToolTipText = "Reboots the firmware on the controller".Localize()'  					Margin = defaultMargin  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,PrinterActionsBar,The following statement contains a magic number: modelViewButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 16' 16' theme.InvertIcons)' theme)  			{  				SiblingRadioButtonList = buttonGroupB'  				Name = "Model View Button"'  				Checked = printer?.ViewState.ViewMode == PartViewMode.Model || printer == null'  				ToolTipText = "Model View".Localize()'  				Margin = theme.ButtonSpacing  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,PrinterActionsBar,The following statement contains a magic number: modelViewButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 16' 16' theme.InvertIcons)' theme)  			{  				SiblingRadioButtonList = buttonGroupB'  				Name = "Model View Button"'  				Checked = printer?.ViewState.ViewMode == PartViewMode.Model || printer == null'  				ToolTipText = "Model View".Localize()'  				Margin = theme.ButtonSpacing  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,PrinterActionsBar,The following statement contains a magic number: layers3DButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 16' 16' theme.InvertIcons)' theme)  			{  				SiblingRadioButtonList = buttonGroupB'  				Name = "Layers3D Button"'  				Checked = printer?.ViewState.ViewMode == PartViewMode.Layers3D'  				ToolTipText = "3D Layer View".Localize()'  				Margin = theme.ButtonSpacing  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,PrinterActionsBar,The following statement contains a magic number: layers3DButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 16' 16' theme.InvertIcons)' theme)  			{  				SiblingRadioButtonList = buttonGroupB'  				Name = "Layers3D Button"'  				Checked = printer?.ViewState.ViewMode == PartViewMode.Layers3D'  				ToolTipText = "3D Layer View".Localize()'  				Margin = theme.ButtonSpacing  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,PrinterActionsBar,The following statement contains a magic number: layers2DButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 16' 16' theme.InvertIcons)' theme)  			{  				SiblingRadioButtonList = buttonGroupB'  				Name = "Layers2D Button"'  				Checked = printer?.ViewState.ViewMode == PartViewMode.Layers2D'  				ToolTipText = "2D Layer View".Localize()'  				Margin = theme.ButtonSpacing'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,PrinterActionsBar,The following statement contains a magic number: layers2DButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 16' 16' theme.InvertIcons)' theme)  			{  				SiblingRadioButtonList = buttonGroupB'  				Name = "Layers2D Button"'  				Checked = printer?.ViewState.ViewMode == PartViewMode.Layers2D'  				ToolTipText = "2D Layer View".Localize()'  				Margin = theme.ButtonSpacing'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,PrinterActionsBar,The following statement contains a magic number: this.AddChild(new TemperatureWidgetHotend(printer' extruderIndex' theme' hotendCount)  					{  						Margin = new BorderDouble(right: 10)  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,GeneratePrinterOverflowMenu,The following statement contains a magic number: var menuActions = new List<NamedAction>()  			{  				new NamedAction()  				{  					Icon = AggContext.StaticData.LoadIcon("memory_16x16.png"' 16' 16' theme.InvertIcons)'  					Title = "Configure EEProm".Localize()'  					Action = configureEePromButton_Click'  					IsEnabled = () => printer.Connection.IsConnected  				}'  				new NamedBoolAction()  				{  					Title = "Show Controls".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.ControlsVisible'  					SetIsActive = (value) => printer.ViewState.ControlsVisible = value  				}'  				new NamedBoolAction()  				{  					Title = "Show Terminal".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.TerminalVisible'  					SetIsActive = (value) => printer.ViewState.TerminalVisible = value  				}'  				new NamedBoolAction()  				{  					Title = "Configure Printer".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.ConfigurePrinterVisible'  					SetIsActive = (value) => printer.ViewState.ConfigurePrinterVisible = value  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Import Presets".Localize()'  					Action = () =>  					{  						AggContext.FileDialogs.OpenFileDialog(  							new OpenFileDialogParams("settings files|*.printer")'  							(dialogParams) =>  							{  								if (!string.IsNullOrEmpty(dialogParams.FileName))  								{  									DialogWindow.Show(new ImportSettingsPage(dialogParams.FileName' printer));  								}  							});  					}  				}'  				new NamedAction()  				{  					Title = "Export Printer".Localize()'  					Action = () => UiThread.RunOnIdle(() =>  					{  						ApplicationController.Instance.ExportAsMatterControlConfig(printer);  					})'  					Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' theme.InvertIcons)'  				}'  				new ActionSeparator()'    				new NamedAction()  				{  					Title = "Calibrate Printer".Localize()'  					Action = () => UiThread.RunOnIdle(() =>  					{  						UiThread.RunOnIdle(() =>  						{  							DialogWindow.Show(new PrinterCalibrationWizard(printer' theme));  						});  					})'  					Icon = AggContext.StaticData.LoadIcon("compass.png"' theme.InvertIcons)  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Restore Settings".Localize()'  					Action = () =>  					{    						DialogWindow.Show(new PrinterProfileHistoryPage(printer));  					}  				}'  				new NamedAction()  				{  					Title = "Reset to Defaults".Localize()'  					Action = () =>  					{  						StyledMessageBox.ShowMessageBox(  							(revertSettings) =>  							{  								if (revertSettings)  								{  									printer.Settings.ClearUserOverrides();  									printer.Settings.ClearBlackList();  									// this is user driven  									printer.Settings.Save();  									printer.Settings.Helpers.PrintLevelingData.SampledPositions.Clear();    									ApplicationController.Instance.ReloadAll().ConfigureAwait(false);  								}  							}'  							"Resetting to default values will remove your current overrides and restore your original printer settings.\nAre you sure you want to continue?".Localize()'  							"Revert Settings".Localize()'  							StyledMessageBox.MessageType.YES_NO);  					}  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Delete Printer".Localize()'  					Action = () =>  					{  						StyledMessageBox.ShowMessageBox(  							(doDelete) =>  							{  								if (doDelete)  								{  									ProfileManager.Instance.DeletePrinter(printer.Settings.ID);  								}  							}'  							"Are you sure you want to delete printer '{0}'?".Localize().FormatWith(printer.Settings.GetValue(SettingsKey.printer_name))'  							"Delete Printer?".Localize()'  							StyledMessageBox.MessageType.YES_NO'  							"Delete Printer".Localize());  					}'  				}  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,GeneratePrinterOverflowMenu,The following statement contains a magic number: var menuActions = new List<NamedAction>()  			{  				new NamedAction()  				{  					Icon = AggContext.StaticData.LoadIcon("memory_16x16.png"' 16' 16' theme.InvertIcons)'  					Title = "Configure EEProm".Localize()'  					Action = configureEePromButton_Click'  					IsEnabled = () => printer.Connection.IsConnected  				}'  				new NamedBoolAction()  				{  					Title = "Show Controls".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.ControlsVisible'  					SetIsActive = (value) => printer.ViewState.ControlsVisible = value  				}'  				new NamedBoolAction()  				{  					Title = "Show Terminal".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.TerminalVisible'  					SetIsActive = (value) => printer.ViewState.TerminalVisible = value  				}'  				new NamedBoolAction()  				{  					Title = "Configure Printer".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.ConfigurePrinterVisible'  					SetIsActive = (value) => printer.ViewState.ConfigurePrinterVisible = value  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Import Presets".Localize()'  					Action = () =>  					{  						AggContext.FileDialogs.OpenFileDialog(  							new OpenFileDialogParams("settings files|*.printer")'  							(dialogParams) =>  							{  								if (!string.IsNullOrEmpty(dialogParams.FileName))  								{  									DialogWindow.Show(new ImportSettingsPage(dialogParams.FileName' printer));  								}  							});  					}  				}'  				new NamedAction()  				{  					Title = "Export Printer".Localize()'  					Action = () => UiThread.RunOnIdle(() =>  					{  						ApplicationController.Instance.ExportAsMatterControlConfig(printer);  					})'  					Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' theme.InvertIcons)'  				}'  				new ActionSeparator()'    				new NamedAction()  				{  					Title = "Calibrate Printer".Localize()'  					Action = () => UiThread.RunOnIdle(() =>  					{  						UiThread.RunOnIdle(() =>  						{  							DialogWindow.Show(new PrinterCalibrationWizard(printer' theme));  						});  					})'  					Icon = AggContext.StaticData.LoadIcon("compass.png"' theme.InvertIcons)  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Restore Settings".Localize()'  					Action = () =>  					{    						DialogWindow.Show(new PrinterProfileHistoryPage(printer));  					}  				}'  				new NamedAction()  				{  					Title = "Reset to Defaults".Localize()'  					Action = () =>  					{  						StyledMessageBox.ShowMessageBox(  							(revertSettings) =>  							{  								if (revertSettings)  								{  									printer.Settings.ClearUserOverrides();  									printer.Settings.ClearBlackList();  									// this is user driven  									printer.Settings.Save();  									printer.Settings.Helpers.PrintLevelingData.SampledPositions.Clear();    									ApplicationController.Instance.ReloadAll().ConfigureAwait(false);  								}  							}'  							"Resetting to default values will remove your current overrides and restore your original printer settings.\nAre you sure you want to continue?".Localize()'  							"Revert Settings".Localize()'  							StyledMessageBox.MessageType.YES_NO);  					}  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Delete Printer".Localize()'  					Action = () =>  					{  						StyledMessageBox.ShowMessageBox(  							(doDelete) =>  							{  								if (doDelete)  								{  									ProfileManager.Instance.DeletePrinter(printer.Settings.ID);  								}  							}'  							"Are you sure you want to delete printer '{0}'?".Localize().FormatWith(printer.Settings.GetValue(SettingsKey.printer_name))'  							"Delete Printer?".Localize()'  							StyledMessageBox.MessageType.YES_NO'  							"Delete Printer".Localize());  					}'  				}  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,GeneratePrinterOverflowMenu,The following statement contains a magic number: var menuActions = new List<NamedAction>()  			{  				new NamedAction()  				{  					Icon = AggContext.StaticData.LoadIcon("memory_16x16.png"' 16' 16' theme.InvertIcons)'  					Title = "Configure EEProm".Localize()'  					Action = configureEePromButton_Click'  					IsEnabled = () => printer.Connection.IsConnected  				}'  				new NamedBoolAction()  				{  					Title = "Show Controls".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.ControlsVisible'  					SetIsActive = (value) => printer.ViewState.ControlsVisible = value  				}'  				new NamedBoolAction()  				{  					Title = "Show Terminal".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.TerminalVisible'  					SetIsActive = (value) => printer.ViewState.TerminalVisible = value  				}'  				new NamedBoolAction()  				{  					Title = "Configure Printer".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.ConfigurePrinterVisible'  					SetIsActive = (value) => printer.ViewState.ConfigurePrinterVisible = value  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Import Presets".Localize()'  					Action = () =>  					{  						AggContext.FileDialogs.OpenFileDialog(  							new OpenFileDialogParams("settings files|*.printer")'  							(dialogParams) =>  							{  								if (!string.IsNullOrEmpty(dialogParams.FileName))  								{  									DialogWindow.Show(new ImportSettingsPage(dialogParams.FileName' printer));  								}  							});  					}  				}'  				new NamedAction()  				{  					Title = "Export Printer".Localize()'  					Action = () => UiThread.RunOnIdle(() =>  					{  						ApplicationController.Instance.ExportAsMatterControlConfig(printer);  					})'  					Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' theme.InvertIcons)'  				}'  				new ActionSeparator()'    				new NamedAction()  				{  					Title = "Calibrate Printer".Localize()'  					Action = () => UiThread.RunOnIdle(() =>  					{  						UiThread.RunOnIdle(() =>  						{  							DialogWindow.Show(new PrinterCalibrationWizard(printer' theme));  						});  					})'  					Icon = AggContext.StaticData.LoadIcon("compass.png"' theme.InvertIcons)  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Restore Settings".Localize()'  					Action = () =>  					{    						DialogWindow.Show(new PrinterProfileHistoryPage(printer));  					}  				}'  				new NamedAction()  				{  					Title = "Reset to Defaults".Localize()'  					Action = () =>  					{  						StyledMessageBox.ShowMessageBox(  							(revertSettings) =>  							{  								if (revertSettings)  								{  									printer.Settings.ClearUserOverrides();  									printer.Settings.ClearBlackList();  									// this is user driven  									printer.Settings.Save();  									printer.Settings.Helpers.PrintLevelingData.SampledPositions.Clear();    									ApplicationController.Instance.ReloadAll().ConfigureAwait(false);  								}  							}'  							"Resetting to default values will remove your current overrides and restore your original printer settings.\nAre you sure you want to continue?".Localize()'  							"Revert Settings".Localize()'  							StyledMessageBox.MessageType.YES_NO);  					}  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Delete Printer".Localize()'  					Action = () =>  					{  						StyledMessageBox.ShowMessageBox(  							(doDelete) =>  							{  								if (doDelete)  								{  									ProfileManager.Instance.DeletePrinter(printer.Settings.ID);  								}  							}'  							"Are you sure you want to delete printer '{0}'?".Localize().FormatWith(printer.Settings.GetValue(SettingsKey.printer_name))'  							"Delete Printer?".Localize()'  							StyledMessageBox.MessageType.YES_NO'  							"Delete Printer".Localize());  					}'  				}  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrinterActionsBar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrinterActionsBar.cs,GeneratePrinterOverflowMenu,The following statement contains a magic number: var menuActions = new List<NamedAction>()  			{  				new NamedAction()  				{  					Icon = AggContext.StaticData.LoadIcon("memory_16x16.png"' 16' 16' theme.InvertIcons)'  					Title = "Configure EEProm".Localize()'  					Action = configureEePromButton_Click'  					IsEnabled = () => printer.Connection.IsConnected  				}'  				new NamedBoolAction()  				{  					Title = "Show Controls".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.ControlsVisible'  					SetIsActive = (value) => printer.ViewState.ControlsVisible = value  				}'  				new NamedBoolAction()  				{  					Title = "Show Terminal".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.TerminalVisible'  					SetIsActive = (value) => printer.ViewState.TerminalVisible = value  				}'  				new NamedBoolAction()  				{  					Title = "Configure Printer".Localize()'  					Action = () => { }'  					GetIsActive = () => printer.ViewState.ConfigurePrinterVisible'  					SetIsActive = (value) => printer.ViewState.ConfigurePrinterVisible = value  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Import Presets".Localize()'  					Action = () =>  					{  						AggContext.FileDialogs.OpenFileDialog(  							new OpenFileDialogParams("settings files|*.printer")'  							(dialogParams) =>  							{  								if (!string.IsNullOrEmpty(dialogParams.FileName))  								{  									DialogWindow.Show(new ImportSettingsPage(dialogParams.FileName' printer));  								}  							});  					}  				}'  				new NamedAction()  				{  					Title = "Export Printer".Localize()'  					Action = () => UiThread.RunOnIdle(() =>  					{  						ApplicationController.Instance.ExportAsMatterControlConfig(printer);  					})'  					Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' theme.InvertIcons)'  				}'  				new ActionSeparator()'    				new NamedAction()  				{  					Title = "Calibrate Printer".Localize()'  					Action = () => UiThread.RunOnIdle(() =>  					{  						UiThread.RunOnIdle(() =>  						{  							DialogWindow.Show(new PrinterCalibrationWizard(printer' theme));  						});  					})'  					Icon = AggContext.StaticData.LoadIcon("compass.png"' theme.InvertIcons)  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Restore Settings".Localize()'  					Action = () =>  					{    						DialogWindow.Show(new PrinterProfileHistoryPage(printer));  					}  				}'  				new NamedAction()  				{  					Title = "Reset to Defaults".Localize()'  					Action = () =>  					{  						StyledMessageBox.ShowMessageBox(  							(revertSettings) =>  							{  								if (revertSettings)  								{  									printer.Settings.ClearUserOverrides();  									printer.Settings.ClearBlackList();  									// this is user driven  									printer.Settings.Save();  									printer.Settings.Helpers.PrintLevelingData.SampledPositions.Clear();    									ApplicationController.Instance.ReloadAll().ConfigureAwait(false);  								}  							}'  							"Resetting to default values will remove your current overrides and restore your original printer settings.\nAre you sure you want to continue?".Localize()'  							"Revert Settings".Localize()'  							StyledMessageBox.MessageType.YES_NO);  					}  				}'  				new ActionSeparator()'  				new NamedAction()  				{  					Title = "Delete Printer".Localize()'  					Action = () =>  					{  						StyledMessageBox.ShowMessageBox(  							(doDelete) =>  							{  								if (doDelete)  								{  									ProfileManager.Instance.DeletePrinter(printer.Settings.ID);  								}  							}'  							"Are you sure you want to delete printer '{0}'?".Localize().FormatWith(printer.Settings.GetValue(SettingsKey.printer_name))'  							"Delete Printer?".Localize()'  							StyledMessageBox.MessageType.YES_NO'  							"Delete Printer".Localize());  					}'  				}  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrintPopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrintPopupMenu.cs,PrintPopupMenu,The following statement contains a magic number: this.DynamicPopupContent = () =>  			{  				var menuTheme = ApplicationController.Instance.MenuTheme;    				int tabIndex = 0;    				allUiFields.Clear();    				var printPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor  				};    				printPanel.AddChild(new TextWidget("Options".Localize()' textColor: menuTheme.TextColor' pointSize: theme.DefaultFontSize)  				{  					HAnchor = HAnchor.Left  				});    				var optionsPanel = new IgnoredFlowLayout()  				{  					Name = "PrintPopupMenu Panel"'  					HAnchor = HAnchor.Fit | HAnchor.Left'  					VAnchor = VAnchor.Fit'  					Padding = 5'  					MinimumSize = new Vector2(400' 65)'  				};  				printPanel.AddChild(optionsPanel);    				foreach (var key in new[] { SettingsKey.layer_height' SettingsKey.fill_density' SettingsKey.create_raft })  				{  					var settingsData = PrinterSettings.SettingsData[key];  					var row = SliceSettingsTabView.CreateItemRow(settingsData' settingsContext' printer' menuTheme' ref tabIndex' allUiFields);    					if (row is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					optionsPanel.AddChild(row);  				}    				var subPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(2' 0)  				};    				bool anySettingOverridden = false;  				anySettingOverridden |= printer.Settings.GetValue<bool>(SettingsKey.spiral_vase);  				anySettingOverridden |= !string.IsNullOrWhiteSpace(printer.Settings.GetValue(SettingsKey.layer_to_pause));    				var sectionWidget = new SectionWidget("Advanced".Localize()' subPanel' menuTheme' expanded: anySettingOverridden)  				{  					Name = "Advanced Section"'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit'  					Margin = 0  				};  				printPanel.AddChild(sectionWidget);    				foreach (var key in new[] { SettingsKey.spiral_vase' SettingsKey.layer_to_pause })  				{  					var advancedRow = SliceSettingsTabView.CreateItemRow(  						PrinterSettings.SettingsData[key]'  						settingsContext'  						printer'  						menuTheme'  						ref tabIndex'  						allUiFields);    					if (advancedRow is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					subPanel.AddChild(advancedRow);  				}    				menuTheme.ApplyBoxStyle(sectionWidget);    				sectionWidget.Margin = new BorderDouble(0' 10);  				sectionWidget.ContentPanel.Children<SettingsRow>().First().Border = new BorderDouble(0' 1);  				sectionWidget.ContentPanel.Children<SettingsRow>().Last().Border = 0;    				var printerReadyToTakeCommands = printer.Connection.CommunicationState == CommunicationStates.FinishedPrint  					|| printer.Connection.CommunicationState == CommunicationStates.Connected;    				// add the start print button  				var setupRow = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.Stretch  				};    				// Perform validation before popup  				var errors = printer.Validate();    				// Enable print option when no validation Errors exists  				var printEnabled = !errors.Any(err => err.ErrorLevel == ValidationErrorLevel.Error);    				var startPrintButton = new TextButton("Start Print".Localize()' menuTheme)  				{  					Name = "Start Print Button"'  					Enabled = printEnabled  				};    				startPrintButton.Click += (s' e) =>  				{  					// Exit if the bed is not GCode and the bed has no printable items  					if (!printer.Bed.EditContext.IsGGCodeSource  						&& !printer.PrintableItems(printer.Bed.Scene).Any())  					{  						return;  					}    					UiThread.RunOnIdle(async () =>  					{  						// Save any pending changes before starting print operation  						await ApplicationController.Instance.Tasks.Execute("Saving Changes".Localize()' printer' printer.Bed.SaveChanges);    						await ApplicationController.Instance.PrintPart(  							printer.Bed.EditContext'  							printer'  							null'  							CancellationToken.None);  					});    					this.CloseMenu();  				};    				var hasErrors = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Error);  				var hasWarnings = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Warning  					&& UserSettings.Instance.get($"Ignore_{e.ID}") != "true");    				var hasErrorsOrWarnings = hasErrors || hasWarnings;  				if (hasErrorsOrWarnings)  				{  					string label = hasErrors ? "Action Required".Localize() : "Action Recommended".Localize();    					setupRow.AddChild(new TextWidget(label' textColor: hasErrors ? Color.Red : theme.PrimaryAccentColor' pointSize: theme.DefaultFontSize)  					{  						VAnchor = VAnchor.Bottom'  						AutoExpandBoundsToText = true'  					});  				}    				setupRow.AddChild(new HorizontalSpacer());    				// Export button {{  				bool isSailfish = printer.Settings.GetValue<bool>("enable_sailfish_communication");  				var exportPlugins = PluginFinder.CreateInstancesOf<IExportPlugin>();  				var targetPluginType = isSailfish ? typeof(X3GExport) : typeof(GCodeExport);    				// Find the first export plugin with the target type  				if (exportPlugins.FirstOrDefault(p => p.GetType() == targetPluginType) is IExportPlugin exportPlugin)  				{  					string exportType = isSailfish ? "Export X3G".Localize() : "Export G-Code".Localize();    					exportPlugin.Initialize(printer);    					var exportGCodeButton = menuTheme.CreateDialogButton("Export".Localize());  					exportGCodeButton.Name = "Export Gcode Button";  					exportGCodeButton.Enabled = exportPlugin.Enabled;  					exportGCodeButton.ToolTipText = exportPlugin.Enabled ? exportType : exportPlugin.DisabledReason;    					exportGCodeButton.Click += (s' e) =>  					{  						ExportPrintItemPage.DoExport(  							new[] { new InMemoryLibraryItem(printer.Bed.Scene) }'  							printer'  							exportPlugin);  					};    					setupRow.AddChild(exportGCodeButton);  				}    				// Export button }}    				setupRow.AddChild(startPrintButton);    				printPanel.AddChild(setupRow);    				if (printEnabled)  				{  					theme.ApplyPrimaryActionStyle(startPrintButton);  				}  				else  				{  					startPrintButton.BackgroundColor = theme.MinimalShade;  				}    				if (hasErrorsOrWarnings)  				{  					var errorsPanel = new ValidationErrorsPanel(errors' menuTheme);    					// Conditional layout for right or bottom errors panel alignment  					var layoutStyle = FlowDirection.TopToBottom;    					if (layoutStyle == FlowDirection.LeftToRight)  					{  						errorsPanel.HAnchor = HAnchor.Absolute;  						errorsPanel.VAnchor = VAnchor.Fit | VAnchor.Top;  						errorsPanel.BackgroundColor = theme.ResolveColor(menuTheme.BackgroundColor' theme.PrimaryAccentColor.WithAlpha(30));  						errorsPanel.Width = 350;    						errorsPanel.Load += (s' e) =>  						{  							errorsPanel.Parent.BackgroundColor = Color.Transparent;  						};  					}  					else  					{  						errorsPanel.HAnchor = HAnchor.Stretch;  						errorsPanel.VAnchor = VAnchor.Fit;  						errorsPanel.Margin = 3;  					}    					// Instead of the typical case where the print panel is returned' wrap and append validation errors panel  					var errorsContainer = new FlowLayoutWidget(layoutStyle)  					{  						HAnchor = HAnchor.Fit'  						VAnchor = VAnchor.Fit'  						BackgroundColor = layoutStyle == FlowDirection.TopToBottom ? printPanel.BackgroundColor : Color.Transparent  					};    					// Clear bottom padding  					printPanel.Padding = printPanel.Padding.Clone(bottom: 2);    					errorsContainer.AddChild(printPanel);  					errorsContainer.AddChild(errorsPanel);    					return errorsContainer;  				}    				return printPanel;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrintPopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrintPopupMenu.cs,PrintPopupMenu,The following statement contains a magic number: this.DynamicPopupContent = () =>  			{  				var menuTheme = ApplicationController.Instance.MenuTheme;    				int tabIndex = 0;    				allUiFields.Clear();    				var printPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor  				};    				printPanel.AddChild(new TextWidget("Options".Localize()' textColor: menuTheme.TextColor' pointSize: theme.DefaultFontSize)  				{  					HAnchor = HAnchor.Left  				});    				var optionsPanel = new IgnoredFlowLayout()  				{  					Name = "PrintPopupMenu Panel"'  					HAnchor = HAnchor.Fit | HAnchor.Left'  					VAnchor = VAnchor.Fit'  					Padding = 5'  					MinimumSize = new Vector2(400' 65)'  				};  				printPanel.AddChild(optionsPanel);    				foreach (var key in new[] { SettingsKey.layer_height' SettingsKey.fill_density' SettingsKey.create_raft })  				{  					var settingsData = PrinterSettings.SettingsData[key];  					var row = SliceSettingsTabView.CreateItemRow(settingsData' settingsContext' printer' menuTheme' ref tabIndex' allUiFields);    					if (row is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					optionsPanel.AddChild(row);  				}    				var subPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(2' 0)  				};    				bool anySettingOverridden = false;  				anySettingOverridden |= printer.Settings.GetValue<bool>(SettingsKey.spiral_vase);  				anySettingOverridden |= !string.IsNullOrWhiteSpace(printer.Settings.GetValue(SettingsKey.layer_to_pause));    				var sectionWidget = new SectionWidget("Advanced".Localize()' subPanel' menuTheme' expanded: anySettingOverridden)  				{  					Name = "Advanced Section"'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit'  					Margin = 0  				};  				printPanel.AddChild(sectionWidget);    				foreach (var key in new[] { SettingsKey.spiral_vase' SettingsKey.layer_to_pause })  				{  					var advancedRow = SliceSettingsTabView.CreateItemRow(  						PrinterSettings.SettingsData[key]'  						settingsContext'  						printer'  						menuTheme'  						ref tabIndex'  						allUiFields);    					if (advancedRow is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					subPanel.AddChild(advancedRow);  				}    				menuTheme.ApplyBoxStyle(sectionWidget);    				sectionWidget.Margin = new BorderDouble(0' 10);  				sectionWidget.ContentPanel.Children<SettingsRow>().First().Border = new BorderDouble(0' 1);  				sectionWidget.ContentPanel.Children<SettingsRow>().Last().Border = 0;    				var printerReadyToTakeCommands = printer.Connection.CommunicationState == CommunicationStates.FinishedPrint  					|| printer.Connection.CommunicationState == CommunicationStates.Connected;    				// add the start print button  				var setupRow = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.Stretch  				};    				// Perform validation before popup  				var errors = printer.Validate();    				// Enable print option when no validation Errors exists  				var printEnabled = !errors.Any(err => err.ErrorLevel == ValidationErrorLevel.Error);    				var startPrintButton = new TextButton("Start Print".Localize()' menuTheme)  				{  					Name = "Start Print Button"'  					Enabled = printEnabled  				};    				startPrintButton.Click += (s' e) =>  				{  					// Exit if the bed is not GCode and the bed has no printable items  					if (!printer.Bed.EditContext.IsGGCodeSource  						&& !printer.PrintableItems(printer.Bed.Scene).Any())  					{  						return;  					}    					UiThread.RunOnIdle(async () =>  					{  						// Save any pending changes before starting print operation  						await ApplicationController.Instance.Tasks.Execute("Saving Changes".Localize()' printer' printer.Bed.SaveChanges);    						await ApplicationController.Instance.PrintPart(  							printer.Bed.EditContext'  							printer'  							null'  							CancellationToken.None);  					});    					this.CloseMenu();  				};    				var hasErrors = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Error);  				var hasWarnings = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Warning  					&& UserSettings.Instance.get($"Ignore_{e.ID}") != "true");    				var hasErrorsOrWarnings = hasErrors || hasWarnings;  				if (hasErrorsOrWarnings)  				{  					string label = hasErrors ? "Action Required".Localize() : "Action Recommended".Localize();    					setupRow.AddChild(new TextWidget(label' textColor: hasErrors ? Color.Red : theme.PrimaryAccentColor' pointSize: theme.DefaultFontSize)  					{  						VAnchor = VAnchor.Bottom'  						AutoExpandBoundsToText = true'  					});  				}    				setupRow.AddChild(new HorizontalSpacer());    				// Export button {{  				bool isSailfish = printer.Settings.GetValue<bool>("enable_sailfish_communication");  				var exportPlugins = PluginFinder.CreateInstancesOf<IExportPlugin>();  				var targetPluginType = isSailfish ? typeof(X3GExport) : typeof(GCodeExport);    				// Find the first export plugin with the target type  				if (exportPlugins.FirstOrDefault(p => p.GetType() == targetPluginType) is IExportPlugin exportPlugin)  				{  					string exportType = isSailfish ? "Export X3G".Localize() : "Export G-Code".Localize();    					exportPlugin.Initialize(printer);    					var exportGCodeButton = menuTheme.CreateDialogButton("Export".Localize());  					exportGCodeButton.Name = "Export Gcode Button";  					exportGCodeButton.Enabled = exportPlugin.Enabled;  					exportGCodeButton.ToolTipText = exportPlugin.Enabled ? exportType : exportPlugin.DisabledReason;    					exportGCodeButton.Click += (s' e) =>  					{  						ExportPrintItemPage.DoExport(  							new[] { new InMemoryLibraryItem(printer.Bed.Scene) }'  							printer'  							exportPlugin);  					};    					setupRow.AddChild(exportGCodeButton);  				}    				// Export button }}    				setupRow.AddChild(startPrintButton);    				printPanel.AddChild(setupRow);    				if (printEnabled)  				{  					theme.ApplyPrimaryActionStyle(startPrintButton);  				}  				else  				{  					startPrintButton.BackgroundColor = theme.MinimalShade;  				}    				if (hasErrorsOrWarnings)  				{  					var errorsPanel = new ValidationErrorsPanel(errors' menuTheme);    					// Conditional layout for right or bottom errors panel alignment  					var layoutStyle = FlowDirection.TopToBottom;    					if (layoutStyle == FlowDirection.LeftToRight)  					{  						errorsPanel.HAnchor = HAnchor.Absolute;  						errorsPanel.VAnchor = VAnchor.Fit | VAnchor.Top;  						errorsPanel.BackgroundColor = theme.ResolveColor(menuTheme.BackgroundColor' theme.PrimaryAccentColor.WithAlpha(30));  						errorsPanel.Width = 350;    						errorsPanel.Load += (s' e) =>  						{  							errorsPanel.Parent.BackgroundColor = Color.Transparent;  						};  					}  					else  					{  						errorsPanel.HAnchor = HAnchor.Stretch;  						errorsPanel.VAnchor = VAnchor.Fit;  						errorsPanel.Margin = 3;  					}    					// Instead of the typical case where the print panel is returned' wrap and append validation errors panel  					var errorsContainer = new FlowLayoutWidget(layoutStyle)  					{  						HAnchor = HAnchor.Fit'  						VAnchor = VAnchor.Fit'  						BackgroundColor = layoutStyle == FlowDirection.TopToBottom ? printPanel.BackgroundColor : Color.Transparent  					};    					// Clear bottom padding  					printPanel.Padding = printPanel.Padding.Clone(bottom: 2);    					errorsContainer.AddChild(printPanel);  					errorsContainer.AddChild(errorsPanel);    					return errorsContainer;  				}    				return printPanel;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrintPopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrintPopupMenu.cs,PrintPopupMenu,The following statement contains a magic number: this.DynamicPopupContent = () =>  			{  				var menuTheme = ApplicationController.Instance.MenuTheme;    				int tabIndex = 0;    				allUiFields.Clear();    				var printPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor  				};    				printPanel.AddChild(new TextWidget("Options".Localize()' textColor: menuTheme.TextColor' pointSize: theme.DefaultFontSize)  				{  					HAnchor = HAnchor.Left  				});    				var optionsPanel = new IgnoredFlowLayout()  				{  					Name = "PrintPopupMenu Panel"'  					HAnchor = HAnchor.Fit | HAnchor.Left'  					VAnchor = VAnchor.Fit'  					Padding = 5'  					MinimumSize = new Vector2(400' 65)'  				};  				printPanel.AddChild(optionsPanel);    				foreach (var key in new[] { SettingsKey.layer_height' SettingsKey.fill_density' SettingsKey.create_raft })  				{  					var settingsData = PrinterSettings.SettingsData[key];  					var row = SliceSettingsTabView.CreateItemRow(settingsData' settingsContext' printer' menuTheme' ref tabIndex' allUiFields);    					if (row is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					optionsPanel.AddChild(row);  				}    				var subPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(2' 0)  				};    				bool anySettingOverridden = false;  				anySettingOverridden |= printer.Settings.GetValue<bool>(SettingsKey.spiral_vase);  				anySettingOverridden |= !string.IsNullOrWhiteSpace(printer.Settings.GetValue(SettingsKey.layer_to_pause));    				var sectionWidget = new SectionWidget("Advanced".Localize()' subPanel' menuTheme' expanded: anySettingOverridden)  				{  					Name = "Advanced Section"'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit'  					Margin = 0  				};  				printPanel.AddChild(sectionWidget);    				foreach (var key in new[] { SettingsKey.spiral_vase' SettingsKey.layer_to_pause })  				{  					var advancedRow = SliceSettingsTabView.CreateItemRow(  						PrinterSettings.SettingsData[key]'  						settingsContext'  						printer'  						menuTheme'  						ref tabIndex'  						allUiFields);    					if (advancedRow is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					subPanel.AddChild(advancedRow);  				}    				menuTheme.ApplyBoxStyle(sectionWidget);    				sectionWidget.Margin = new BorderDouble(0' 10);  				sectionWidget.ContentPanel.Children<SettingsRow>().First().Border = new BorderDouble(0' 1);  				sectionWidget.ContentPanel.Children<SettingsRow>().Last().Border = 0;    				var printerReadyToTakeCommands = printer.Connection.CommunicationState == CommunicationStates.FinishedPrint  					|| printer.Connection.CommunicationState == CommunicationStates.Connected;    				// add the start print button  				var setupRow = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.Stretch  				};    				// Perform validation before popup  				var errors = printer.Validate();    				// Enable print option when no validation Errors exists  				var printEnabled = !errors.Any(err => err.ErrorLevel == ValidationErrorLevel.Error);    				var startPrintButton = new TextButton("Start Print".Localize()' menuTheme)  				{  					Name = "Start Print Button"'  					Enabled = printEnabled  				};    				startPrintButton.Click += (s' e) =>  				{  					// Exit if the bed is not GCode and the bed has no printable items  					if (!printer.Bed.EditContext.IsGGCodeSource  						&& !printer.PrintableItems(printer.Bed.Scene).Any())  					{  						return;  					}    					UiThread.RunOnIdle(async () =>  					{  						// Save any pending changes before starting print operation  						await ApplicationController.Instance.Tasks.Execute("Saving Changes".Localize()' printer' printer.Bed.SaveChanges);    						await ApplicationController.Instance.PrintPart(  							printer.Bed.EditContext'  							printer'  							null'  							CancellationToken.None);  					});    					this.CloseMenu();  				};    				var hasErrors = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Error);  				var hasWarnings = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Warning  					&& UserSettings.Instance.get($"Ignore_{e.ID}") != "true");    				var hasErrorsOrWarnings = hasErrors || hasWarnings;  				if (hasErrorsOrWarnings)  				{  					string label = hasErrors ? "Action Required".Localize() : "Action Recommended".Localize();    					setupRow.AddChild(new TextWidget(label' textColor: hasErrors ? Color.Red : theme.PrimaryAccentColor' pointSize: theme.DefaultFontSize)  					{  						VAnchor = VAnchor.Bottom'  						AutoExpandBoundsToText = true'  					});  				}    				setupRow.AddChild(new HorizontalSpacer());    				// Export button {{  				bool isSailfish = printer.Settings.GetValue<bool>("enable_sailfish_communication");  				var exportPlugins = PluginFinder.CreateInstancesOf<IExportPlugin>();  				var targetPluginType = isSailfish ? typeof(X3GExport) : typeof(GCodeExport);    				// Find the first export plugin with the target type  				if (exportPlugins.FirstOrDefault(p => p.GetType() == targetPluginType) is IExportPlugin exportPlugin)  				{  					string exportType = isSailfish ? "Export X3G".Localize() : "Export G-Code".Localize();    					exportPlugin.Initialize(printer);    					var exportGCodeButton = menuTheme.CreateDialogButton("Export".Localize());  					exportGCodeButton.Name = "Export Gcode Button";  					exportGCodeButton.Enabled = exportPlugin.Enabled;  					exportGCodeButton.ToolTipText = exportPlugin.Enabled ? exportType : exportPlugin.DisabledReason;    					exportGCodeButton.Click += (s' e) =>  					{  						ExportPrintItemPage.DoExport(  							new[] { new InMemoryLibraryItem(printer.Bed.Scene) }'  							printer'  							exportPlugin);  					};    					setupRow.AddChild(exportGCodeButton);  				}    				// Export button }}    				setupRow.AddChild(startPrintButton);    				printPanel.AddChild(setupRow);    				if (printEnabled)  				{  					theme.ApplyPrimaryActionStyle(startPrintButton);  				}  				else  				{  					startPrintButton.BackgroundColor = theme.MinimalShade;  				}    				if (hasErrorsOrWarnings)  				{  					var errorsPanel = new ValidationErrorsPanel(errors' menuTheme);    					// Conditional layout for right or bottom errors panel alignment  					var layoutStyle = FlowDirection.TopToBottom;    					if (layoutStyle == FlowDirection.LeftToRight)  					{  						errorsPanel.HAnchor = HAnchor.Absolute;  						errorsPanel.VAnchor = VAnchor.Fit | VAnchor.Top;  						errorsPanel.BackgroundColor = theme.ResolveColor(menuTheme.BackgroundColor' theme.PrimaryAccentColor.WithAlpha(30));  						errorsPanel.Width = 350;    						errorsPanel.Load += (s' e) =>  						{  							errorsPanel.Parent.BackgroundColor = Color.Transparent;  						};  					}  					else  					{  						errorsPanel.HAnchor = HAnchor.Stretch;  						errorsPanel.VAnchor = VAnchor.Fit;  						errorsPanel.Margin = 3;  					}    					// Instead of the typical case where the print panel is returned' wrap and append validation errors panel  					var errorsContainer = new FlowLayoutWidget(layoutStyle)  					{  						HAnchor = HAnchor.Fit'  						VAnchor = VAnchor.Fit'  						BackgroundColor = layoutStyle == FlowDirection.TopToBottom ? printPanel.BackgroundColor : Color.Transparent  					};    					// Clear bottom padding  					printPanel.Padding = printPanel.Padding.Clone(bottom: 2);    					errorsContainer.AddChild(printPanel);  					errorsContainer.AddChild(errorsPanel);    					return errorsContainer;  				}    				return printPanel;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrintPopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrintPopupMenu.cs,PrintPopupMenu,The following statement contains a magic number: this.DynamicPopupContent = () =>  			{  				var menuTheme = ApplicationController.Instance.MenuTheme;    				int tabIndex = 0;    				allUiFields.Clear();    				var printPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor  				};    				printPanel.AddChild(new TextWidget("Options".Localize()' textColor: menuTheme.TextColor' pointSize: theme.DefaultFontSize)  				{  					HAnchor = HAnchor.Left  				});    				var optionsPanel = new IgnoredFlowLayout()  				{  					Name = "PrintPopupMenu Panel"'  					HAnchor = HAnchor.Fit | HAnchor.Left'  					VAnchor = VAnchor.Fit'  					Padding = 5'  					MinimumSize = new Vector2(400' 65)'  				};  				printPanel.AddChild(optionsPanel);    				foreach (var key in new[] { SettingsKey.layer_height' SettingsKey.fill_density' SettingsKey.create_raft })  				{  					var settingsData = PrinterSettings.SettingsData[key];  					var row = SliceSettingsTabView.CreateItemRow(settingsData' settingsContext' printer' menuTheme' ref tabIndex' allUiFields);    					if (row is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					optionsPanel.AddChild(row);  				}    				var subPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(2' 0)  				};    				bool anySettingOverridden = false;  				anySettingOverridden |= printer.Settings.GetValue<bool>(SettingsKey.spiral_vase);  				anySettingOverridden |= !string.IsNullOrWhiteSpace(printer.Settings.GetValue(SettingsKey.layer_to_pause));    				var sectionWidget = new SectionWidget("Advanced".Localize()' subPanel' menuTheme' expanded: anySettingOverridden)  				{  					Name = "Advanced Section"'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit'  					Margin = 0  				};  				printPanel.AddChild(sectionWidget);    				foreach (var key in new[] { SettingsKey.spiral_vase' SettingsKey.layer_to_pause })  				{  					var advancedRow = SliceSettingsTabView.CreateItemRow(  						PrinterSettings.SettingsData[key]'  						settingsContext'  						printer'  						menuTheme'  						ref tabIndex'  						allUiFields);    					if (advancedRow is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					subPanel.AddChild(advancedRow);  				}    				menuTheme.ApplyBoxStyle(sectionWidget);    				sectionWidget.Margin = new BorderDouble(0' 10);  				sectionWidget.ContentPanel.Children<SettingsRow>().First().Border = new BorderDouble(0' 1);  				sectionWidget.ContentPanel.Children<SettingsRow>().Last().Border = 0;    				var printerReadyToTakeCommands = printer.Connection.CommunicationState == CommunicationStates.FinishedPrint  					|| printer.Connection.CommunicationState == CommunicationStates.Connected;    				// add the start print button  				var setupRow = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.Stretch  				};    				// Perform validation before popup  				var errors = printer.Validate();    				// Enable print option when no validation Errors exists  				var printEnabled = !errors.Any(err => err.ErrorLevel == ValidationErrorLevel.Error);    				var startPrintButton = new TextButton("Start Print".Localize()' menuTheme)  				{  					Name = "Start Print Button"'  					Enabled = printEnabled  				};    				startPrintButton.Click += (s' e) =>  				{  					// Exit if the bed is not GCode and the bed has no printable items  					if (!printer.Bed.EditContext.IsGGCodeSource  						&& !printer.PrintableItems(printer.Bed.Scene).Any())  					{  						return;  					}    					UiThread.RunOnIdle(async () =>  					{  						// Save any pending changes before starting print operation  						await ApplicationController.Instance.Tasks.Execute("Saving Changes".Localize()' printer' printer.Bed.SaveChanges);    						await ApplicationController.Instance.PrintPart(  							printer.Bed.EditContext'  							printer'  							null'  							CancellationToken.None);  					});    					this.CloseMenu();  				};    				var hasErrors = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Error);  				var hasWarnings = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Warning  					&& UserSettings.Instance.get($"Ignore_{e.ID}") != "true");    				var hasErrorsOrWarnings = hasErrors || hasWarnings;  				if (hasErrorsOrWarnings)  				{  					string label = hasErrors ? "Action Required".Localize() : "Action Recommended".Localize();    					setupRow.AddChild(new TextWidget(label' textColor: hasErrors ? Color.Red : theme.PrimaryAccentColor' pointSize: theme.DefaultFontSize)  					{  						VAnchor = VAnchor.Bottom'  						AutoExpandBoundsToText = true'  					});  				}    				setupRow.AddChild(new HorizontalSpacer());    				// Export button {{  				bool isSailfish = printer.Settings.GetValue<bool>("enable_sailfish_communication");  				var exportPlugins = PluginFinder.CreateInstancesOf<IExportPlugin>();  				var targetPluginType = isSailfish ? typeof(X3GExport) : typeof(GCodeExport);    				// Find the first export plugin with the target type  				if (exportPlugins.FirstOrDefault(p => p.GetType() == targetPluginType) is IExportPlugin exportPlugin)  				{  					string exportType = isSailfish ? "Export X3G".Localize() : "Export G-Code".Localize();    					exportPlugin.Initialize(printer);    					var exportGCodeButton = menuTheme.CreateDialogButton("Export".Localize());  					exportGCodeButton.Name = "Export Gcode Button";  					exportGCodeButton.Enabled = exportPlugin.Enabled;  					exportGCodeButton.ToolTipText = exportPlugin.Enabled ? exportType : exportPlugin.DisabledReason;    					exportGCodeButton.Click += (s' e) =>  					{  						ExportPrintItemPage.DoExport(  							new[] { new InMemoryLibraryItem(printer.Bed.Scene) }'  							printer'  							exportPlugin);  					};    					setupRow.AddChild(exportGCodeButton);  				}    				// Export button }}    				setupRow.AddChild(startPrintButton);    				printPanel.AddChild(setupRow);    				if (printEnabled)  				{  					theme.ApplyPrimaryActionStyle(startPrintButton);  				}  				else  				{  					startPrintButton.BackgroundColor = theme.MinimalShade;  				}    				if (hasErrorsOrWarnings)  				{  					var errorsPanel = new ValidationErrorsPanel(errors' menuTheme);    					// Conditional layout for right or bottom errors panel alignment  					var layoutStyle = FlowDirection.TopToBottom;    					if (layoutStyle == FlowDirection.LeftToRight)  					{  						errorsPanel.HAnchor = HAnchor.Absolute;  						errorsPanel.VAnchor = VAnchor.Fit | VAnchor.Top;  						errorsPanel.BackgroundColor = theme.ResolveColor(menuTheme.BackgroundColor' theme.PrimaryAccentColor.WithAlpha(30));  						errorsPanel.Width = 350;    						errorsPanel.Load += (s' e) =>  						{  							errorsPanel.Parent.BackgroundColor = Color.Transparent;  						};  					}  					else  					{  						errorsPanel.HAnchor = HAnchor.Stretch;  						errorsPanel.VAnchor = VAnchor.Fit;  						errorsPanel.Margin = 3;  					}    					// Instead of the typical case where the print panel is returned' wrap and append validation errors panel  					var errorsContainer = new FlowLayoutWidget(layoutStyle)  					{  						HAnchor = HAnchor.Fit'  						VAnchor = VAnchor.Fit'  						BackgroundColor = layoutStyle == FlowDirection.TopToBottom ? printPanel.BackgroundColor : Color.Transparent  					};    					// Clear bottom padding  					printPanel.Padding = printPanel.Padding.Clone(bottom: 2);    					errorsContainer.AddChild(printPanel);  					errorsContainer.AddChild(errorsPanel);    					return errorsContainer;  				}    				return printPanel;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrintPopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrintPopupMenu.cs,PrintPopupMenu,The following statement contains a magic number: this.DynamicPopupContent = () =>  			{  				var menuTheme = ApplicationController.Instance.MenuTheme;    				int tabIndex = 0;    				allUiFields.Clear();    				var printPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor  				};    				printPanel.AddChild(new TextWidget("Options".Localize()' textColor: menuTheme.TextColor' pointSize: theme.DefaultFontSize)  				{  					HAnchor = HAnchor.Left  				});    				var optionsPanel = new IgnoredFlowLayout()  				{  					Name = "PrintPopupMenu Panel"'  					HAnchor = HAnchor.Fit | HAnchor.Left'  					VAnchor = VAnchor.Fit'  					Padding = 5'  					MinimumSize = new Vector2(400' 65)'  				};  				printPanel.AddChild(optionsPanel);    				foreach (var key in new[] { SettingsKey.layer_height' SettingsKey.fill_density' SettingsKey.create_raft })  				{  					var settingsData = PrinterSettings.SettingsData[key];  					var row = SliceSettingsTabView.CreateItemRow(settingsData' settingsContext' printer' menuTheme' ref tabIndex' allUiFields);    					if (row is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					optionsPanel.AddChild(row);  				}    				var subPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(2' 0)  				};    				bool anySettingOverridden = false;  				anySettingOverridden |= printer.Settings.GetValue<bool>(SettingsKey.spiral_vase);  				anySettingOverridden |= !string.IsNullOrWhiteSpace(printer.Settings.GetValue(SettingsKey.layer_to_pause));    				var sectionWidget = new SectionWidget("Advanced".Localize()' subPanel' menuTheme' expanded: anySettingOverridden)  				{  					Name = "Advanced Section"'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit'  					Margin = 0  				};  				printPanel.AddChild(sectionWidget);    				foreach (var key in new[] { SettingsKey.spiral_vase' SettingsKey.layer_to_pause })  				{  					var advancedRow = SliceSettingsTabView.CreateItemRow(  						PrinterSettings.SettingsData[key]'  						settingsContext'  						printer'  						menuTheme'  						ref tabIndex'  						allUiFields);    					if (advancedRow is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					subPanel.AddChild(advancedRow);  				}    				menuTheme.ApplyBoxStyle(sectionWidget);    				sectionWidget.Margin = new BorderDouble(0' 10);  				sectionWidget.ContentPanel.Children<SettingsRow>().First().Border = new BorderDouble(0' 1);  				sectionWidget.ContentPanel.Children<SettingsRow>().Last().Border = 0;    				var printerReadyToTakeCommands = printer.Connection.CommunicationState == CommunicationStates.FinishedPrint  					|| printer.Connection.CommunicationState == CommunicationStates.Connected;    				// add the start print button  				var setupRow = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.Stretch  				};    				// Perform validation before popup  				var errors = printer.Validate();    				// Enable print option when no validation Errors exists  				var printEnabled = !errors.Any(err => err.ErrorLevel == ValidationErrorLevel.Error);    				var startPrintButton = new TextButton("Start Print".Localize()' menuTheme)  				{  					Name = "Start Print Button"'  					Enabled = printEnabled  				};    				startPrintButton.Click += (s' e) =>  				{  					// Exit if the bed is not GCode and the bed has no printable items  					if (!printer.Bed.EditContext.IsGGCodeSource  						&& !printer.PrintableItems(printer.Bed.Scene).Any())  					{  						return;  					}    					UiThread.RunOnIdle(async () =>  					{  						// Save any pending changes before starting print operation  						await ApplicationController.Instance.Tasks.Execute("Saving Changes".Localize()' printer' printer.Bed.SaveChanges);    						await ApplicationController.Instance.PrintPart(  							printer.Bed.EditContext'  							printer'  							null'  							CancellationToken.None);  					});    					this.CloseMenu();  				};    				var hasErrors = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Error);  				var hasWarnings = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Warning  					&& UserSettings.Instance.get($"Ignore_{e.ID}") != "true");    				var hasErrorsOrWarnings = hasErrors || hasWarnings;  				if (hasErrorsOrWarnings)  				{  					string label = hasErrors ? "Action Required".Localize() : "Action Recommended".Localize();    					setupRow.AddChild(new TextWidget(label' textColor: hasErrors ? Color.Red : theme.PrimaryAccentColor' pointSize: theme.DefaultFontSize)  					{  						VAnchor = VAnchor.Bottom'  						AutoExpandBoundsToText = true'  					});  				}    				setupRow.AddChild(new HorizontalSpacer());    				// Export button {{  				bool isSailfish = printer.Settings.GetValue<bool>("enable_sailfish_communication");  				var exportPlugins = PluginFinder.CreateInstancesOf<IExportPlugin>();  				var targetPluginType = isSailfish ? typeof(X3GExport) : typeof(GCodeExport);    				// Find the first export plugin with the target type  				if (exportPlugins.FirstOrDefault(p => p.GetType() == targetPluginType) is IExportPlugin exportPlugin)  				{  					string exportType = isSailfish ? "Export X3G".Localize() : "Export G-Code".Localize();    					exportPlugin.Initialize(printer);    					var exportGCodeButton = menuTheme.CreateDialogButton("Export".Localize());  					exportGCodeButton.Name = "Export Gcode Button";  					exportGCodeButton.Enabled = exportPlugin.Enabled;  					exportGCodeButton.ToolTipText = exportPlugin.Enabled ? exportType : exportPlugin.DisabledReason;    					exportGCodeButton.Click += (s' e) =>  					{  						ExportPrintItemPage.DoExport(  							new[] { new InMemoryLibraryItem(printer.Bed.Scene) }'  							printer'  							exportPlugin);  					};    					setupRow.AddChild(exportGCodeButton);  				}    				// Export button }}    				setupRow.AddChild(startPrintButton);    				printPanel.AddChild(setupRow);    				if (printEnabled)  				{  					theme.ApplyPrimaryActionStyle(startPrintButton);  				}  				else  				{  					startPrintButton.BackgroundColor = theme.MinimalShade;  				}    				if (hasErrorsOrWarnings)  				{  					var errorsPanel = new ValidationErrorsPanel(errors' menuTheme);    					// Conditional layout for right or bottom errors panel alignment  					var layoutStyle = FlowDirection.TopToBottom;    					if (layoutStyle == FlowDirection.LeftToRight)  					{  						errorsPanel.HAnchor = HAnchor.Absolute;  						errorsPanel.VAnchor = VAnchor.Fit | VAnchor.Top;  						errorsPanel.BackgroundColor = theme.ResolveColor(menuTheme.BackgroundColor' theme.PrimaryAccentColor.WithAlpha(30));  						errorsPanel.Width = 350;    						errorsPanel.Load += (s' e) =>  						{  							errorsPanel.Parent.BackgroundColor = Color.Transparent;  						};  					}  					else  					{  						errorsPanel.HAnchor = HAnchor.Stretch;  						errorsPanel.VAnchor = VAnchor.Fit;  						errorsPanel.Margin = 3;  					}    					// Instead of the typical case where the print panel is returned' wrap and append validation errors panel  					var errorsContainer = new FlowLayoutWidget(layoutStyle)  					{  						HAnchor = HAnchor.Fit'  						VAnchor = VAnchor.Fit'  						BackgroundColor = layoutStyle == FlowDirection.TopToBottom ? printPanel.BackgroundColor : Color.Transparent  					};    					// Clear bottom padding  					printPanel.Padding = printPanel.Padding.Clone(bottom: 2);    					errorsContainer.AddChild(printPanel);  					errorsContainer.AddChild(errorsPanel);    					return errorsContainer;  				}    				return printPanel;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrintPopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrintPopupMenu.cs,PrintPopupMenu,The following statement contains a magic number: this.DynamicPopupContent = () =>  			{  				var menuTheme = ApplicationController.Instance.MenuTheme;    				int tabIndex = 0;    				allUiFields.Clear();    				var printPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor  				};    				printPanel.AddChild(new TextWidget("Options".Localize()' textColor: menuTheme.TextColor' pointSize: theme.DefaultFontSize)  				{  					HAnchor = HAnchor.Left  				});    				var optionsPanel = new IgnoredFlowLayout()  				{  					Name = "PrintPopupMenu Panel"'  					HAnchor = HAnchor.Fit | HAnchor.Left'  					VAnchor = VAnchor.Fit'  					Padding = 5'  					MinimumSize = new Vector2(400' 65)'  				};  				printPanel.AddChild(optionsPanel);    				foreach (var key in new[] { SettingsKey.layer_height' SettingsKey.fill_density' SettingsKey.create_raft })  				{  					var settingsData = PrinterSettings.SettingsData[key];  					var row = SliceSettingsTabView.CreateItemRow(settingsData' settingsContext' printer' menuTheme' ref tabIndex' allUiFields);    					if (row is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					optionsPanel.AddChild(row);  				}    				var subPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(2' 0)  				};    				bool anySettingOverridden = false;  				anySettingOverridden |= printer.Settings.GetValue<bool>(SettingsKey.spiral_vase);  				anySettingOverridden |= !string.IsNullOrWhiteSpace(printer.Settings.GetValue(SettingsKey.layer_to_pause));    				var sectionWidget = new SectionWidget("Advanced".Localize()' subPanel' menuTheme' expanded: anySettingOverridden)  				{  					Name = "Advanced Section"'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit'  					Margin = 0  				};  				printPanel.AddChild(sectionWidget);    				foreach (var key in new[] { SettingsKey.spiral_vase' SettingsKey.layer_to_pause })  				{  					var advancedRow = SliceSettingsTabView.CreateItemRow(  						PrinterSettings.SettingsData[key]'  						settingsContext'  						printer'  						menuTheme'  						ref tabIndex'  						allUiFields);    					if (advancedRow is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					subPanel.AddChild(advancedRow);  				}    				menuTheme.ApplyBoxStyle(sectionWidget);    				sectionWidget.Margin = new BorderDouble(0' 10);  				sectionWidget.ContentPanel.Children<SettingsRow>().First().Border = new BorderDouble(0' 1);  				sectionWidget.ContentPanel.Children<SettingsRow>().Last().Border = 0;    				var printerReadyToTakeCommands = printer.Connection.CommunicationState == CommunicationStates.FinishedPrint  					|| printer.Connection.CommunicationState == CommunicationStates.Connected;    				// add the start print button  				var setupRow = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.Stretch  				};    				// Perform validation before popup  				var errors = printer.Validate();    				// Enable print option when no validation Errors exists  				var printEnabled = !errors.Any(err => err.ErrorLevel == ValidationErrorLevel.Error);    				var startPrintButton = new TextButton("Start Print".Localize()' menuTheme)  				{  					Name = "Start Print Button"'  					Enabled = printEnabled  				};    				startPrintButton.Click += (s' e) =>  				{  					// Exit if the bed is not GCode and the bed has no printable items  					if (!printer.Bed.EditContext.IsGGCodeSource  						&& !printer.PrintableItems(printer.Bed.Scene).Any())  					{  						return;  					}    					UiThread.RunOnIdle(async () =>  					{  						// Save any pending changes before starting print operation  						await ApplicationController.Instance.Tasks.Execute("Saving Changes".Localize()' printer' printer.Bed.SaveChanges);    						await ApplicationController.Instance.PrintPart(  							printer.Bed.EditContext'  							printer'  							null'  							CancellationToken.None);  					});    					this.CloseMenu();  				};    				var hasErrors = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Error);  				var hasWarnings = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Warning  					&& UserSettings.Instance.get($"Ignore_{e.ID}") != "true");    				var hasErrorsOrWarnings = hasErrors || hasWarnings;  				if (hasErrorsOrWarnings)  				{  					string label = hasErrors ? "Action Required".Localize() : "Action Recommended".Localize();    					setupRow.AddChild(new TextWidget(label' textColor: hasErrors ? Color.Red : theme.PrimaryAccentColor' pointSize: theme.DefaultFontSize)  					{  						VAnchor = VAnchor.Bottom'  						AutoExpandBoundsToText = true'  					});  				}    				setupRow.AddChild(new HorizontalSpacer());    				// Export button {{  				bool isSailfish = printer.Settings.GetValue<bool>("enable_sailfish_communication");  				var exportPlugins = PluginFinder.CreateInstancesOf<IExportPlugin>();  				var targetPluginType = isSailfish ? typeof(X3GExport) : typeof(GCodeExport);    				// Find the first export plugin with the target type  				if (exportPlugins.FirstOrDefault(p => p.GetType() == targetPluginType) is IExportPlugin exportPlugin)  				{  					string exportType = isSailfish ? "Export X3G".Localize() : "Export G-Code".Localize();    					exportPlugin.Initialize(printer);    					var exportGCodeButton = menuTheme.CreateDialogButton("Export".Localize());  					exportGCodeButton.Name = "Export Gcode Button";  					exportGCodeButton.Enabled = exportPlugin.Enabled;  					exportGCodeButton.ToolTipText = exportPlugin.Enabled ? exportType : exportPlugin.DisabledReason;    					exportGCodeButton.Click += (s' e) =>  					{  						ExportPrintItemPage.DoExport(  							new[] { new InMemoryLibraryItem(printer.Bed.Scene) }'  							printer'  							exportPlugin);  					};    					setupRow.AddChild(exportGCodeButton);  				}    				// Export button }}    				setupRow.AddChild(startPrintButton);    				printPanel.AddChild(setupRow);    				if (printEnabled)  				{  					theme.ApplyPrimaryActionStyle(startPrintButton);  				}  				else  				{  					startPrintButton.BackgroundColor = theme.MinimalShade;  				}    				if (hasErrorsOrWarnings)  				{  					var errorsPanel = new ValidationErrorsPanel(errors' menuTheme);    					// Conditional layout for right or bottom errors panel alignment  					var layoutStyle = FlowDirection.TopToBottom;    					if (layoutStyle == FlowDirection.LeftToRight)  					{  						errorsPanel.HAnchor = HAnchor.Absolute;  						errorsPanel.VAnchor = VAnchor.Fit | VAnchor.Top;  						errorsPanel.BackgroundColor = theme.ResolveColor(menuTheme.BackgroundColor' theme.PrimaryAccentColor.WithAlpha(30));  						errorsPanel.Width = 350;    						errorsPanel.Load += (s' e) =>  						{  							errorsPanel.Parent.BackgroundColor = Color.Transparent;  						};  					}  					else  					{  						errorsPanel.HAnchor = HAnchor.Stretch;  						errorsPanel.VAnchor = VAnchor.Fit;  						errorsPanel.Margin = 3;  					}    					// Instead of the typical case where the print panel is returned' wrap and append validation errors panel  					var errorsContainer = new FlowLayoutWidget(layoutStyle)  					{  						HAnchor = HAnchor.Fit'  						VAnchor = VAnchor.Fit'  						BackgroundColor = layoutStyle == FlowDirection.TopToBottom ? printPanel.BackgroundColor : Color.Transparent  					};    					// Clear bottom padding  					printPanel.Padding = printPanel.Padding.Clone(bottom: 2);    					errorsContainer.AddChild(printPanel);  					errorsContainer.AddChild(errorsPanel);    					return errorsContainer;  				}    				return printPanel;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrintPopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrintPopupMenu.cs,PrintPopupMenu,The following statement contains a magic number: this.DynamicPopupContent = () =>  			{  				var menuTheme = ApplicationController.Instance.MenuTheme;    				int tabIndex = 0;    				allUiFields.Clear();    				var printPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor  				};    				printPanel.AddChild(new TextWidget("Options".Localize()' textColor: menuTheme.TextColor' pointSize: theme.DefaultFontSize)  				{  					HAnchor = HAnchor.Left  				});    				var optionsPanel = new IgnoredFlowLayout()  				{  					Name = "PrintPopupMenu Panel"'  					HAnchor = HAnchor.Fit | HAnchor.Left'  					VAnchor = VAnchor.Fit'  					Padding = 5'  					MinimumSize = new Vector2(400' 65)'  				};  				printPanel.AddChild(optionsPanel);    				foreach (var key in new[] { SettingsKey.layer_height' SettingsKey.fill_density' SettingsKey.create_raft })  				{  					var settingsData = PrinterSettings.SettingsData[key];  					var row = SliceSettingsTabView.CreateItemRow(settingsData' settingsContext' printer' menuTheme' ref tabIndex' allUiFields);    					if (row is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					optionsPanel.AddChild(row);  				}    				var subPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(2' 0)  				};    				bool anySettingOverridden = false;  				anySettingOverridden |= printer.Settings.GetValue<bool>(SettingsKey.spiral_vase);  				anySettingOverridden |= !string.IsNullOrWhiteSpace(printer.Settings.GetValue(SettingsKey.layer_to_pause));    				var sectionWidget = new SectionWidget("Advanced".Localize()' subPanel' menuTheme' expanded: anySettingOverridden)  				{  					Name = "Advanced Section"'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit'  					Margin = 0  				};  				printPanel.AddChild(sectionWidget);    				foreach (var key in new[] { SettingsKey.spiral_vase' SettingsKey.layer_to_pause })  				{  					var advancedRow = SliceSettingsTabView.CreateItemRow(  						PrinterSettings.SettingsData[key]'  						settingsContext'  						printer'  						menuTheme'  						ref tabIndex'  						allUiFields);    					if (advancedRow is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					subPanel.AddChild(advancedRow);  				}    				menuTheme.ApplyBoxStyle(sectionWidget);    				sectionWidget.Margin = new BorderDouble(0' 10);  				sectionWidget.ContentPanel.Children<SettingsRow>().First().Border = new BorderDouble(0' 1);  				sectionWidget.ContentPanel.Children<SettingsRow>().Last().Border = 0;    				var printerReadyToTakeCommands = printer.Connection.CommunicationState == CommunicationStates.FinishedPrint  					|| printer.Connection.CommunicationState == CommunicationStates.Connected;    				// add the start print button  				var setupRow = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.Stretch  				};    				// Perform validation before popup  				var errors = printer.Validate();    				// Enable print option when no validation Errors exists  				var printEnabled = !errors.Any(err => err.ErrorLevel == ValidationErrorLevel.Error);    				var startPrintButton = new TextButton("Start Print".Localize()' menuTheme)  				{  					Name = "Start Print Button"'  					Enabled = printEnabled  				};    				startPrintButton.Click += (s' e) =>  				{  					// Exit if the bed is not GCode and the bed has no printable items  					if (!printer.Bed.EditContext.IsGGCodeSource  						&& !printer.PrintableItems(printer.Bed.Scene).Any())  					{  						return;  					}    					UiThread.RunOnIdle(async () =>  					{  						// Save any pending changes before starting print operation  						await ApplicationController.Instance.Tasks.Execute("Saving Changes".Localize()' printer' printer.Bed.SaveChanges);    						await ApplicationController.Instance.PrintPart(  							printer.Bed.EditContext'  							printer'  							null'  							CancellationToken.None);  					});    					this.CloseMenu();  				};    				var hasErrors = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Error);  				var hasWarnings = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Warning  					&& UserSettings.Instance.get($"Ignore_{e.ID}") != "true");    				var hasErrorsOrWarnings = hasErrors || hasWarnings;  				if (hasErrorsOrWarnings)  				{  					string label = hasErrors ? "Action Required".Localize() : "Action Recommended".Localize();    					setupRow.AddChild(new TextWidget(label' textColor: hasErrors ? Color.Red : theme.PrimaryAccentColor' pointSize: theme.DefaultFontSize)  					{  						VAnchor = VAnchor.Bottom'  						AutoExpandBoundsToText = true'  					});  				}    				setupRow.AddChild(new HorizontalSpacer());    				// Export button {{  				bool isSailfish = printer.Settings.GetValue<bool>("enable_sailfish_communication");  				var exportPlugins = PluginFinder.CreateInstancesOf<IExportPlugin>();  				var targetPluginType = isSailfish ? typeof(X3GExport) : typeof(GCodeExport);    				// Find the first export plugin with the target type  				if (exportPlugins.FirstOrDefault(p => p.GetType() == targetPluginType) is IExportPlugin exportPlugin)  				{  					string exportType = isSailfish ? "Export X3G".Localize() : "Export G-Code".Localize();    					exportPlugin.Initialize(printer);    					var exportGCodeButton = menuTheme.CreateDialogButton("Export".Localize());  					exportGCodeButton.Name = "Export Gcode Button";  					exportGCodeButton.Enabled = exportPlugin.Enabled;  					exportGCodeButton.ToolTipText = exportPlugin.Enabled ? exportType : exportPlugin.DisabledReason;    					exportGCodeButton.Click += (s' e) =>  					{  						ExportPrintItemPage.DoExport(  							new[] { new InMemoryLibraryItem(printer.Bed.Scene) }'  							printer'  							exportPlugin);  					};    					setupRow.AddChild(exportGCodeButton);  				}    				// Export button }}    				setupRow.AddChild(startPrintButton);    				printPanel.AddChild(setupRow);    				if (printEnabled)  				{  					theme.ApplyPrimaryActionStyle(startPrintButton);  				}  				else  				{  					startPrintButton.BackgroundColor = theme.MinimalShade;  				}    				if (hasErrorsOrWarnings)  				{  					var errorsPanel = new ValidationErrorsPanel(errors' menuTheme);    					// Conditional layout for right or bottom errors panel alignment  					var layoutStyle = FlowDirection.TopToBottom;    					if (layoutStyle == FlowDirection.LeftToRight)  					{  						errorsPanel.HAnchor = HAnchor.Absolute;  						errorsPanel.VAnchor = VAnchor.Fit | VAnchor.Top;  						errorsPanel.BackgroundColor = theme.ResolveColor(menuTheme.BackgroundColor' theme.PrimaryAccentColor.WithAlpha(30));  						errorsPanel.Width = 350;    						errorsPanel.Load += (s' e) =>  						{  							errorsPanel.Parent.BackgroundColor = Color.Transparent;  						};  					}  					else  					{  						errorsPanel.HAnchor = HAnchor.Stretch;  						errorsPanel.VAnchor = VAnchor.Fit;  						errorsPanel.Margin = 3;  					}    					// Instead of the typical case where the print panel is returned' wrap and append validation errors panel  					var errorsContainer = new FlowLayoutWidget(layoutStyle)  					{  						HAnchor = HAnchor.Fit'  						VAnchor = VAnchor.Fit'  						BackgroundColor = layoutStyle == FlowDirection.TopToBottom ? printPanel.BackgroundColor : Color.Transparent  					};    					// Clear bottom padding  					printPanel.Padding = printPanel.Padding.Clone(bottom: 2);    					errorsContainer.AddChild(printPanel);  					errorsContainer.AddChild(errorsPanel);    					return errorsContainer;  				}    				return printPanel;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrintPopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrintPopupMenu.cs,PrintPopupMenu,The following statement contains a magic number: this.DynamicPopupContent = () =>  			{  				var menuTheme = ApplicationController.Instance.MenuTheme;    				int tabIndex = 0;    				allUiFields.Clear();    				var printPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor  				};    				printPanel.AddChild(new TextWidget("Options".Localize()' textColor: menuTheme.TextColor' pointSize: theme.DefaultFontSize)  				{  					HAnchor = HAnchor.Left  				});    				var optionsPanel = new IgnoredFlowLayout()  				{  					Name = "PrintPopupMenu Panel"'  					HAnchor = HAnchor.Fit | HAnchor.Left'  					VAnchor = VAnchor.Fit'  					Padding = 5'  					MinimumSize = new Vector2(400' 65)'  				};  				printPanel.AddChild(optionsPanel);    				foreach (var key in new[] { SettingsKey.layer_height' SettingsKey.fill_density' SettingsKey.create_raft })  				{  					var settingsData = PrinterSettings.SettingsData[key];  					var row = SliceSettingsTabView.CreateItemRow(settingsData' settingsContext' printer' menuTheme' ref tabIndex' allUiFields);    					if (row is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					optionsPanel.AddChild(row);  				}    				var subPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(2' 0)  				};    				bool anySettingOverridden = false;  				anySettingOverridden |= printer.Settings.GetValue<bool>(SettingsKey.spiral_vase);  				anySettingOverridden |= !string.IsNullOrWhiteSpace(printer.Settings.GetValue(SettingsKey.layer_to_pause));    				var sectionWidget = new SectionWidget("Advanced".Localize()' subPanel' menuTheme' expanded: anySettingOverridden)  				{  					Name = "Advanced Section"'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit'  					Margin = 0  				};  				printPanel.AddChild(sectionWidget);    				foreach (var key in new[] { SettingsKey.spiral_vase' SettingsKey.layer_to_pause })  				{  					var advancedRow = SliceSettingsTabView.CreateItemRow(  						PrinterSettings.SettingsData[key]'  						settingsContext'  						printer'  						menuTheme'  						ref tabIndex'  						allUiFields);    					if (advancedRow is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					subPanel.AddChild(advancedRow);  				}    				menuTheme.ApplyBoxStyle(sectionWidget);    				sectionWidget.Margin = new BorderDouble(0' 10);  				sectionWidget.ContentPanel.Children<SettingsRow>().First().Border = new BorderDouble(0' 1);  				sectionWidget.ContentPanel.Children<SettingsRow>().Last().Border = 0;    				var printerReadyToTakeCommands = printer.Connection.CommunicationState == CommunicationStates.FinishedPrint  					|| printer.Connection.CommunicationState == CommunicationStates.Connected;    				// add the start print button  				var setupRow = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.Stretch  				};    				// Perform validation before popup  				var errors = printer.Validate();    				// Enable print option when no validation Errors exists  				var printEnabled = !errors.Any(err => err.ErrorLevel == ValidationErrorLevel.Error);    				var startPrintButton = new TextButton("Start Print".Localize()' menuTheme)  				{  					Name = "Start Print Button"'  					Enabled = printEnabled  				};    				startPrintButton.Click += (s' e) =>  				{  					// Exit if the bed is not GCode and the bed has no printable items  					if (!printer.Bed.EditContext.IsGGCodeSource  						&& !printer.PrintableItems(printer.Bed.Scene).Any())  					{  						return;  					}    					UiThread.RunOnIdle(async () =>  					{  						// Save any pending changes before starting print operation  						await ApplicationController.Instance.Tasks.Execute("Saving Changes".Localize()' printer' printer.Bed.SaveChanges);    						await ApplicationController.Instance.PrintPart(  							printer.Bed.EditContext'  							printer'  							null'  							CancellationToken.None);  					});    					this.CloseMenu();  				};    				var hasErrors = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Error);  				var hasWarnings = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Warning  					&& UserSettings.Instance.get($"Ignore_{e.ID}") != "true");    				var hasErrorsOrWarnings = hasErrors || hasWarnings;  				if (hasErrorsOrWarnings)  				{  					string label = hasErrors ? "Action Required".Localize() : "Action Recommended".Localize();    					setupRow.AddChild(new TextWidget(label' textColor: hasErrors ? Color.Red : theme.PrimaryAccentColor' pointSize: theme.DefaultFontSize)  					{  						VAnchor = VAnchor.Bottom'  						AutoExpandBoundsToText = true'  					});  				}    				setupRow.AddChild(new HorizontalSpacer());    				// Export button {{  				bool isSailfish = printer.Settings.GetValue<bool>("enable_sailfish_communication");  				var exportPlugins = PluginFinder.CreateInstancesOf<IExportPlugin>();  				var targetPluginType = isSailfish ? typeof(X3GExport) : typeof(GCodeExport);    				// Find the first export plugin with the target type  				if (exportPlugins.FirstOrDefault(p => p.GetType() == targetPluginType) is IExportPlugin exportPlugin)  				{  					string exportType = isSailfish ? "Export X3G".Localize() : "Export G-Code".Localize();    					exportPlugin.Initialize(printer);    					var exportGCodeButton = menuTheme.CreateDialogButton("Export".Localize());  					exportGCodeButton.Name = "Export Gcode Button";  					exportGCodeButton.Enabled = exportPlugin.Enabled;  					exportGCodeButton.ToolTipText = exportPlugin.Enabled ? exportType : exportPlugin.DisabledReason;    					exportGCodeButton.Click += (s' e) =>  					{  						ExportPrintItemPage.DoExport(  							new[] { new InMemoryLibraryItem(printer.Bed.Scene) }'  							printer'  							exportPlugin);  					};    					setupRow.AddChild(exportGCodeButton);  				}    				// Export button }}    				setupRow.AddChild(startPrintButton);    				printPanel.AddChild(setupRow);    				if (printEnabled)  				{  					theme.ApplyPrimaryActionStyle(startPrintButton);  				}  				else  				{  					startPrintButton.BackgroundColor = theme.MinimalShade;  				}    				if (hasErrorsOrWarnings)  				{  					var errorsPanel = new ValidationErrorsPanel(errors' menuTheme);    					// Conditional layout for right or bottom errors panel alignment  					var layoutStyle = FlowDirection.TopToBottom;    					if (layoutStyle == FlowDirection.LeftToRight)  					{  						errorsPanel.HAnchor = HAnchor.Absolute;  						errorsPanel.VAnchor = VAnchor.Fit | VAnchor.Top;  						errorsPanel.BackgroundColor = theme.ResolveColor(menuTheme.BackgroundColor' theme.PrimaryAccentColor.WithAlpha(30));  						errorsPanel.Width = 350;    						errorsPanel.Load += (s' e) =>  						{  							errorsPanel.Parent.BackgroundColor = Color.Transparent;  						};  					}  					else  					{  						errorsPanel.HAnchor = HAnchor.Stretch;  						errorsPanel.VAnchor = VAnchor.Fit;  						errorsPanel.Margin = 3;  					}    					// Instead of the typical case where the print panel is returned' wrap and append validation errors panel  					var errorsContainer = new FlowLayoutWidget(layoutStyle)  					{  						HAnchor = HAnchor.Fit'  						VAnchor = VAnchor.Fit'  						BackgroundColor = layoutStyle == FlowDirection.TopToBottom ? printPanel.BackgroundColor : Color.Transparent  					};    					// Clear bottom padding  					printPanel.Padding = printPanel.Padding.Clone(bottom: 2);    					errorsContainer.AddChild(printPanel);  					errorsContainer.AddChild(errorsPanel);    					return errorsContainer;  				}    				return printPanel;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrintPopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrintPopupMenu.cs,PrintPopupMenu,The following statement contains a magic number: this.DynamicPopupContent = () =>  			{  				var menuTheme = ApplicationController.Instance.MenuTheme;    				int tabIndex = 0;    				allUiFields.Clear();    				var printPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Padding = theme.DefaultContainerPadding'  					BackgroundColor = menuTheme.BackgroundColor  				};    				printPanel.AddChild(new TextWidget("Options".Localize()' textColor: menuTheme.TextColor' pointSize: theme.DefaultFontSize)  				{  					HAnchor = HAnchor.Left  				});    				var optionsPanel = new IgnoredFlowLayout()  				{  					Name = "PrintPopupMenu Panel"'  					HAnchor = HAnchor.Fit | HAnchor.Left'  					VAnchor = VAnchor.Fit'  					Padding = 5'  					MinimumSize = new Vector2(400' 65)'  				};  				printPanel.AddChild(optionsPanel);    				foreach (var key in new[] { SettingsKey.layer_height' SettingsKey.fill_density' SettingsKey.create_raft })  				{  					var settingsData = PrinterSettings.SettingsData[key];  					var row = SliceSettingsTabView.CreateItemRow(settingsData' settingsContext' printer' menuTheme' ref tabIndex' allUiFields);    					if (row is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					optionsPanel.AddChild(row);  				}    				var subPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Margin = new BorderDouble(2' 0)  				};    				bool anySettingOverridden = false;  				anySettingOverridden |= printer.Settings.GetValue<bool>(SettingsKey.spiral_vase);  				anySettingOverridden |= !string.IsNullOrWhiteSpace(printer.Settings.GetValue(SettingsKey.layer_to_pause));    				var sectionWidget = new SectionWidget("Advanced".Localize()' subPanel' menuTheme' expanded: anySettingOverridden)  				{  					Name = "Advanced Section"'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit'  					Margin = 0  				};  				printPanel.AddChild(sectionWidget);    				foreach (var key in new[] { SettingsKey.spiral_vase' SettingsKey.layer_to_pause })  				{  					var advancedRow = SliceSettingsTabView.CreateItemRow(  						PrinterSettings.SettingsData[key]'  						settingsContext'  						printer'  						menuTheme'  						ref tabIndex'  						allUiFields);    					if (advancedRow is SliceSettingsRow settingsRow)  					{  						settingsRow.ArrowDirection = ArrowDirection.Left;  					}    					subPanel.AddChild(advancedRow);  				}    				menuTheme.ApplyBoxStyle(sectionWidget);    				sectionWidget.Margin = new BorderDouble(0' 10);  				sectionWidget.ContentPanel.Children<SettingsRow>().First().Border = new BorderDouble(0' 1);  				sectionWidget.ContentPanel.Children<SettingsRow>().Last().Border = 0;    				var printerReadyToTakeCommands = printer.Connection.CommunicationState == CommunicationStates.FinishedPrint  					|| printer.Connection.CommunicationState == CommunicationStates.Connected;    				// add the start print button  				var setupRow = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.Stretch  				};    				// Perform validation before popup  				var errors = printer.Validate();    				// Enable print option when no validation Errors exists  				var printEnabled = !errors.Any(err => err.ErrorLevel == ValidationErrorLevel.Error);    				var startPrintButton = new TextButton("Start Print".Localize()' menuTheme)  				{  					Name = "Start Print Button"'  					Enabled = printEnabled  				};    				startPrintButton.Click += (s' e) =>  				{  					// Exit if the bed is not GCode and the bed has no printable items  					if (!printer.Bed.EditContext.IsGGCodeSource  						&& !printer.PrintableItems(printer.Bed.Scene).Any())  					{  						return;  					}    					UiThread.RunOnIdle(async () =>  					{  						// Save any pending changes before starting print operation  						await ApplicationController.Instance.Tasks.Execute("Saving Changes".Localize()' printer' printer.Bed.SaveChanges);    						await ApplicationController.Instance.PrintPart(  							printer.Bed.EditContext'  							printer'  							null'  							CancellationToken.None);  					});    					this.CloseMenu();  				};    				var hasErrors = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Error);  				var hasWarnings = errors.Any(e => e.ErrorLevel == ValidationErrorLevel.Warning  					&& UserSettings.Instance.get($"Ignore_{e.ID}") != "true");    				var hasErrorsOrWarnings = hasErrors || hasWarnings;  				if (hasErrorsOrWarnings)  				{  					string label = hasErrors ? "Action Required".Localize() : "Action Recommended".Localize();    					setupRow.AddChild(new TextWidget(label' textColor: hasErrors ? Color.Red : theme.PrimaryAccentColor' pointSize: theme.DefaultFontSize)  					{  						VAnchor = VAnchor.Bottom'  						AutoExpandBoundsToText = true'  					});  				}    				setupRow.AddChild(new HorizontalSpacer());    				// Export button {{  				bool isSailfish = printer.Settings.GetValue<bool>("enable_sailfish_communication");  				var exportPlugins = PluginFinder.CreateInstancesOf<IExportPlugin>();  				var targetPluginType = isSailfish ? typeof(X3GExport) : typeof(GCodeExport);    				// Find the first export plugin with the target type  				if (exportPlugins.FirstOrDefault(p => p.GetType() == targetPluginType) is IExportPlugin exportPlugin)  				{  					string exportType = isSailfish ? "Export X3G".Localize() : "Export G-Code".Localize();    					exportPlugin.Initialize(printer);    					var exportGCodeButton = menuTheme.CreateDialogButton("Export".Localize());  					exportGCodeButton.Name = "Export Gcode Button";  					exportGCodeButton.Enabled = exportPlugin.Enabled;  					exportGCodeButton.ToolTipText = exportPlugin.Enabled ? exportType : exportPlugin.DisabledReason;    					exportGCodeButton.Click += (s' e) =>  					{  						ExportPrintItemPage.DoExport(  							new[] { new InMemoryLibraryItem(printer.Bed.Scene) }'  							printer'  							exportPlugin);  					};    					setupRow.AddChild(exportGCodeButton);  				}    				// Export button }}    				setupRow.AddChild(startPrintButton);    				printPanel.AddChild(setupRow);    				if (printEnabled)  				{  					theme.ApplyPrimaryActionStyle(startPrintButton);  				}  				else  				{  					startPrintButton.BackgroundColor = theme.MinimalShade;  				}    				if (hasErrorsOrWarnings)  				{  					var errorsPanel = new ValidationErrorsPanel(errors' menuTheme);    					// Conditional layout for right or bottom errors panel alignment  					var layoutStyle = FlowDirection.TopToBottom;    					if (layoutStyle == FlowDirection.LeftToRight)  					{  						errorsPanel.HAnchor = HAnchor.Absolute;  						errorsPanel.VAnchor = VAnchor.Fit | VAnchor.Top;  						errorsPanel.BackgroundColor = theme.ResolveColor(menuTheme.BackgroundColor' theme.PrimaryAccentColor.WithAlpha(30));  						errorsPanel.Width = 350;    						errorsPanel.Load += (s' e) =>  						{  							errorsPanel.Parent.BackgroundColor = Color.Transparent;  						};  					}  					else  					{  						errorsPanel.HAnchor = HAnchor.Stretch;  						errorsPanel.VAnchor = VAnchor.Fit;  						errorsPanel.Margin = 3;  					}    					// Instead of the typical case where the print panel is returned' wrap and append validation errors panel  					var errorsContainer = new FlowLayoutWidget(layoutStyle)  					{  						HAnchor = HAnchor.Fit'  						VAnchor = VAnchor.Fit'  						BackgroundColor = layoutStyle == FlowDirection.TopToBottom ? printPanel.BackgroundColor : Color.Transparent  					};    					// Clear bottom padding  					printPanel.Padding = printPanel.Padding.Clone(bottom: 2);    					errorsContainer.AddChild(printPanel);  					errorsContainer.AddChild(errorsPanel);    					return errorsContainer;  				}    				return printPanel;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,PrintPopupMenu,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\PrintPopupMenu.cs,PrintPopupMenu,The following statement contains a magic number: this.AddChild(new TextButton("Print".Localize()' theme)  			{  				Selectable = false'  				Padding = theme.TextButtonPadding.Clone(right: 5)  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: this.BackgroundColor = theme.ResolveColor(theme.BackgroundColor' theme.PrimaryAccentColor.WithAlpha(30));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: var errorImage = AggContext.StaticData.LoadIcon("SettingsGroupError_16x.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: var errorImage = AggContext.StaticData.LoadIcon("SettingsGroupError_16x.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: var warningImage = AggContext.StaticData.LoadIcon("SettingsGroupWarning_16x.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: var warningImage = AggContext.StaticData.LoadIcon("SettingsGroupWarning_16x.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: var infoImage = AggContext.StaticData.LoadIcon("StatusInfoTip_16x.png"' 16' 16);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: var infoImage = AggContext.StaticData.LoadIcon("StatusInfoTip_16x.png"' 16' 16);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: var fixIcon = AggContext.StaticData.LoadIcon("noun_1306.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: var fixIcon = AggContext.StaticData.LoadIcon("noun_1306.png"' 16' 16' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: var button = new LinkLabel(action.Title' theme' pointSize: theme.FontSize10)  					{  						VAnchor = VAnchor.Center'  						Margin = new BorderDouble(right: 8)'  						Enabled = action.IsEnabled == null || action.IsEnabled()  					};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: dismissButton.Margin = new BorderDouble(right: theme.ButtonHeight / 2 - dismissButton.Width / 2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ValidationErrorsPanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\ValidationErrorsPanel.cs,ValidationErrorsPanel,The following statement contains a magic number: dismissButton.Margin = new BorderDouble(right: theme.ButtonHeight / 2 - dismissButton.Width / 2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,WidgetAnimationExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\WidgetAnimationExtensions.cs,FlashBackground,The following statement contains a magic number: double displayTime = 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,WidgetAnimationExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\WidgetAnimationExtensions.cs,FlashBackground,The following statement contains a magic number: double pulseTime = .5;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,WidgetAnimationExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\WidgetAnimationExtensions.cs,FlashBackground,The following statement contains a magic number: var flashBackground = new Animation()  			{  				DrawTarget = widget'  				FramesPerSecond = 10'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,WidgetAnimationExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\WidgetAnimationExtensions.cs,FlashBackground,The following statement contains a magic number: flashBackground.Update += (s1' updateEvent) =>  			{  				totalSeconds += updateEvent.SecondsPassed;    				if (totalSeconds < displayTime)  				{  					double blend = AttentionGetter.GetFadeInOutPulseRatio(totalSeconds' pulseTime);  					widget.BackgroundColor = new Color(hightlightColor' (int)(blend * 255));  				}  				else  				{  					widget.BackgroundColor = backgroundColor;  					flashBackground.Stop();  				}  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,WidgetAnimationExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\WidgetAnimationExtensions.cs,SlideToNewState,The following statement contains a magic number: double displayTime = 600;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,WidgetAnimationExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\WidgetAnimationExtensions.cs,SlideToNewState,The following statement contains a magic number: var animation = new Animation()  			{  				DrawTarget = widget'  				FramesPerSecond = 20'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,WidgetAnimationExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\WidgetAnimationExtensions.cs,SlideToNewState,The following statement contains a magic number: animation.Update += (s1' updateEvent) =>  			{  				elapsedMs = UiThread.CurrentTimerMs - startedMS;  				if (elapsedMs < (displayTime + 300))  				{  					var ratio = Math.Min(1' elapsedMs / displayTime);  					double blend = Easing.Cubic.In(ratio);  					box.Position = new VectorMath.Vector2(startX + (xdistance * blend)' startY);    					// Console.WriteLine("Ms: {0}' Ratio: {1}' Easing: {2}' Position: {3}"' elapsedMs' ratio' blend' box.Position);  					box.Invalidate();  				}  				else  				{  					animation.Stop();    					animationComplete?.Invoke();    					UiThread.RunOnIdle(box.Close' .3);  				}  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,WidgetAnimationExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\PrinterBar\WidgetAnimationExtensions.cs,SlideToNewState,The following statement contains a magic number: animation.Update += (s1' updateEvent) =>  			{  				elapsedMs = UiThread.CurrentTimerMs - startedMS;  				if (elapsedMs < (displayTime + 300))  				{  					var ratio = Math.Min(1' elapsedMs / displayTime);  					double blend = Easing.Cubic.In(ratio);  					box.Position = new VectorMath.Vector2(startX + (xdistance * blend)' startY);    					// Console.WriteLine("Ms: {0}' Ratio: {1}' Easing: {2}' Position: {3}"' elapsedMs' ratio' blend' box.Position);  					box.Invalidate();  				}  				else  				{  					animation.Stop();    					animationComplete?.Invoke();    					UiThread.RunOnIdle(box.Close' .3);  				}  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SceneActions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\SceneActions.cs,Copy,The following statement contains a magic number: pasteObjectXOffset = 5;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SceneActions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\SceneActions.cs,MakeLowestFaceFlat,The following statement contains a magic number: meshToCheck == null  					&& meshToCheck.Vertices.Count < 3
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SceneActions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\SceneActions.cs,MakeLowestFaceFlat,The following statement contains a magic number: largestAreaOfAnyFace == 0  							|| (planSurfaceArea > largestAreaFound  								&& worldAngleDegrees < 45)
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SceneActions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\SceneActions.cs,MakeLowestFaceFlat,The following statement contains a magic number: var yPositive = (faceVertices[2] - faceVertices[0]).GetNormal();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SceneActions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\SceneActions.cs,MakeLowestFaceFlat,The following statement contains a magic number: maxDistFromLowestZ > .001
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SceneActions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\SceneActions.cs,MakeLowestFaceFlat,The following statement contains a magic number: Vector3 boundsCenter = (bounds.MaxXYZ + bounds.MinXYZ) / 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SceneActions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\SceneActions.cs,MakeLowestFaceFlat,The following statement contains a magic number: object3D.Matrix *= Matrix4X4.CreateTranslation(new Vector3(0' 0' -boundsCenter.Z + bounds.ZSize / 2));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,SliceProgressReporter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\SliceProgressReporter.cs,Report,The following statement contains a magic number: double destValue = 10;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ConnectedFaces,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,Tile,The following statement contains a magic number: return 3;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ConnectedFaces,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,Tile,The following statement contains a magic number: return 4;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ConnectedFaces,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,Tile,The following statement contains a magic number: return 6;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ConnectedFaces,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,Tile,The following statement contains a magic number: return 4;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TumbleCubeControl,The following statement contains a magic number: UiThread.RunOnIdle(() =>  			{  				TextureFace(0' "Top");  				TextureFace(2' "Left"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 4));  				TextureFace(4' "Right"' Matrix4X4.CreateRotationZ(-MathHelper.Tau / 4));  				TextureFace(6' "Bottom"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(8' "Back"' Matrix4X4.CreateRotationZ(MathHelper.Tau / 2));  				TextureFace(10' "Front");  				cube.MarkAsChanged();    				connections.Add(new ConnectedFaces(2' 1' 1' 5' 2' 4));  				connections.Add(new ConnectedFaces(0' -1' 4' 3' 5' 0));  				connections.Add(new ConnectedFaces(0' 1' 5' 3' 4' 0));  				connections.Add(new ConnectedFaces(2' -1' 1' 4' 2' 5));  				connections.Add(new ConnectedFaces(1' 1' 2' 3' 1' 0));  				connections.Add(new ConnectedFaces(1' -1' 1' 3' 2' 0));    				cubeTraceData = cube.CreateTraceData();  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,OnDraw,The following statement contains a magic number: world.RotationMatrix = Matrix4X4.LookAt(Vector3.Zero' directionForward' directionUp) * Matrix4X4.CreateScale(.8);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,OnMouseMove,The following statement contains a magic number: Quaternion activeRotationQuaternion = TrackBallController.GetRotationForMove(new Vector2(Width / 2' Height / 2)' world' Width' lastMovePosition' movePosition' false);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,OnMouseMove,The following statement contains a magic number: Quaternion activeRotationQuaternion = TrackBallController.GetRotationForMove(new Vector2(Width / 2' Height / 2)' world' Width' lastMovePosition' movePosition' false);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following statement contains a magic number: i < 3
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,OnMouseUp,The following statement contains a magic number: Task.Run(() =>  					{  						// TODO: stop any spinning happening in the view  						double duration = .25;  						var timer = Stopwatch.StartNew();  						var time = timer.Elapsed.TotalSeconds;    						while (time < duration)  						{  							var current = Quaternion.Slerp(start' end' time / duration);  							UiThread.RunOnIdle(() =>  							{  								interactionLayer.World.RotationMatrix = Matrix4X4.CreateRotation(current);  								Invalidate();  							});  							time = timer.Elapsed.TotalSeconds;  							Thread.Sleep(10);  						}    						interactionLayer.World.RotationMatrix = Matrix4X4.CreateRotation(end);  						Invalidate();  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,OnMouseUp,The following statement contains a magic number: Task.Run(() =>  					{  						// TODO: stop any spinning happening in the view  						double duration = .25;  						var timer = Stopwatch.StartNew();  						var time = timer.Elapsed.TotalSeconds;    						while (time < duration)  						{  							var current = Quaternion.Slerp(start' end' time / duration);  							UiThread.RunOnIdle(() =>  							{  								interactionLayer.World.RotationMatrix = Matrix4X4.CreateRotation(current);  								Invalidate();  							});  							time = timer.Elapsed.TotalSeconds;  							Thread.Sleep(10);  						}    						interactionLayer.World.RotationMatrix = Matrix4X4.CreateRotation(end);  						Invalidate();  					});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetDirectionForFace,The following statement contains a magic number: switch (faceIndex)  				{  					case -1:  						count--;  						break;    					case 0:  						// top  						normal += -Vector3.UnitZ;  						if (count == 1)  						{  							up = (hitData.TileIndex[0] == 4) ? Vector3.UnitY : Vector3.UnitZ;  						}    						break;    					case 1:  						// Left  						normal += Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 2:  						// Right  						normal += -Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 3:  						// Bottom  						normal += Vector3.UnitZ;  						if (count == 1)  						{  							up = -Vector3.UnitY;  						}    						break;    					case 4:  						// Back  						normal += -Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 5:  						// Front  						normal += Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;  				}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetDirectionForFace,The following statement contains a magic number: switch (faceIndex)  				{  					case -1:  						count--;  						break;    					case 0:  						// top  						normal += -Vector3.UnitZ;  						if (count == 1)  						{  							up = (hitData.TileIndex[0] == 4) ? Vector3.UnitY : Vector3.UnitZ;  						}    						break;    					case 1:  						// Left  						normal += Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 2:  						// Right  						normal += -Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 3:  						// Bottom  						normal += Vector3.UnitZ;  						if (count == 1)  						{  							up = -Vector3.UnitY;  						}    						break;    					case 4:  						// Back  						normal += -Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 5:  						// Front  						normal += Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;  				}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetDirectionForFace,The following statement contains a magic number: switch (faceIndex)  				{  					case -1:  						count--;  						break;    					case 0:  						// top  						normal += -Vector3.UnitZ;  						if (count == 1)  						{  							up = (hitData.TileIndex[0] == 4) ? Vector3.UnitY : Vector3.UnitZ;  						}    						break;    					case 1:  						// Left  						normal += Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 2:  						// Right  						normal += -Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 3:  						// Bottom  						normal += Vector3.UnitZ;  						if (count == 1)  						{  							up = -Vector3.UnitY;  						}    						break;    					case 4:  						// Back  						normal += -Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 5:  						// Front  						normal += Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;  				}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetDirectionForFace,The following statement contains a magic number: switch (faceIndex)  				{  					case -1:  						count--;  						break;    					case 0:  						// top  						normal += -Vector3.UnitZ;  						if (count == 1)  						{  							up = (hitData.TileIndex[0] == 4) ? Vector3.UnitY : Vector3.UnitZ;  						}    						break;    					case 1:  						// Left  						normal += Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 2:  						// Right  						normal += -Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 3:  						// Bottom  						normal += Vector3.UnitZ;  						if (count == 1)  						{  							up = -Vector3.UnitY;  						}    						break;    					case 4:  						// Back  						normal += -Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 5:  						// Front  						normal += Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;  				}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetDirectionForFace,The following statement contains a magic number: switch (faceIndex)  				{  					case -1:  						count--;  						break;    					case 0:  						// top  						normal += -Vector3.UnitZ;  						if (count == 1)  						{  							up = (hitData.TileIndex[0] == 4) ? Vector3.UnitY : Vector3.UnitZ;  						}    						break;    					case 1:  						// Left  						normal += Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 2:  						// Right  						normal += -Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 3:  						// Bottom  						normal += Vector3.UnitZ;  						if (count == 1)  						{  							up = -Vector3.UnitY;  						}    						break;    					case 4:  						// Back  						normal += -Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 5:  						// Front  						normal += Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;  				}
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetDirectionForFace,The following statement contains a magic number: i < 3
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetHitData,The following statement contains a magic number: return new HitData(i' 3' faceData.left' connections[faceData.left].Tile(i));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetHitData,The following statement contains a magic number: return new HitData(i' 4);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetHitData,The following statement contains a magic number: Math.Abs(hitPosition[faceData.axis] - faceData.direction * 2) < .0001
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetHitData,The following statement contains a magic number: Math.Abs(hitPosition[faceData.axis] - faceData.direction * 2) < .0001
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetHitData,The following statement contains a magic number: i < 6
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetHitData,The following statement contains a magic number: return new HitData(0' 4);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TextureFace,The following statement contains a magic number: var sourceTexture = new ImageBuffer(256' 256);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TextureFace,The following statement contains a magic number: var sourceTexture = new ImageBuffer(256' 256);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TextureFace,The following statement contains a magic number: graphics.DrawString(name'  				sourceTexture.Width / 2'  				sourceTexture.Height / 2'  				60'  				justification: Agg.Font.Justification.Center'  				baseline: Agg.Font.Baseline.BoundsCenter'  				color: theme.TextColor);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TextureFace,The following statement contains a magic number: graphics.DrawString(name'  				sourceTexture.Width / 2'  				sourceTexture.Height / 2'  				60'  				justification: Agg.Font.Justification.Center'  				baseline: Agg.Font.Baseline.BoundsCenter'  				color: theme.TextColor);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TextureFace,The following statement contains a magic number: graphics.DrawString(name'  				sourceTexture.Width / 2'  				sourceTexture.Height / 2'  				60'  				justification: Agg.Font.Justification.Center'  				baseline: Agg.Font.Baseline.BoundsCenter'  				color: theme.TextColor);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TextureFace,The following statement contains a magic number: graphics.Render(new Stroke(new RoundedRect(.5' .5' 254.5' 254.4' 0)' 6)' theme.BedGridColors.Line);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TextureFace,The following statement contains a magic number: graphics.Render(new Stroke(new RoundedRect(.5' .5' 254.5' 254.4' 0)' 6)' theme.BedGridColors.Line);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TextureFace,The following statement contains a magic number: graphics.Render(new Stroke(new RoundedRect(.5' .5' 254.5' 254.4' 0)' 6)' theme.BedGridColors.Line);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TextureFace,The following statement contains a magic number: graphics.Render(new Stroke(new RoundedRect(.5' .5' 254.5' 254.4' 0)' 6)' theme.BedGridColors.Line);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,TextureFace,The following statement contains a magic number: graphics.Render(new Stroke(new RoundedRect(.5' .5' 254.5' 254.4' 0)' 6)' theme.BedGridColors.Line);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HitData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,HitData,The following statement contains a magic number: FaceIndex[2] = faceIndex2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HitData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,HitData,The following statement contains a magic number: TileIndex[2] = tileIndex2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HitData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,Equals,The following statement contains a magic number: i < 3
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HitData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetHashCode,The following statement contains a magic number: var hashCode = 1739626167;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HitData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * -1521134295 + EqualityComparer<int[]>.Default.GetHashCode(FaceIndex);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,HitData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * -1521134295 + TileIndex.GetHashCode();
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The following statement contains a magic number: modelViewSidePanel = new VerticalResizeContainer(theme' GrabBarSide.Left)  			{  				Width = printer?.ViewState.SelectedObjectPanelWidth ?? 250'  				VAnchor = VAnchor.Stretch'  				HAnchor = HAnchor.Absolute'  				BackgroundColor = theme.InteractionLayerOverlayColor'  				SplitterBarColor = theme.SplitterBackground'  				SplitterWidth = theme.SplitterWidth'  				MinimumSize = new Vector2(theme.SplitterWidth' 0)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The following statement contains a magic number: treeView = new TreeView(theme)  			{  				Margin = new BorderDouble(left: theme.DefaultContainerPadding + 12)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The following statement contains a magic number: treeNodeContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(12' 3)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The following statement contains a magic number: treeNodeContainer = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Margin = new BorderDouble(12' 3)  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The following statement contains a magic number: historyAndProperties.Panel1.MinimumSize = new Vector2(0' 60);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The following statement contains a magic number: historyAndProperties.Panel2.MinimumSize = new Vector2(0' 60);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The following statement contains a magic number: iconButton.Height = 26;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The following statement contains a magic number: iconButton.Width = 26;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The following statement contains a magic number: var tumbleCubeControl = new TumbleCubeControl(this.InteractionLayer' theme)  			{  				Margin = new BorderDouble(0' 0' 10' 35)'  				VAnchor = VAnchor.Top'  				HAnchor = HAnchor.Right'  				Name = "Tumble Cube Control"  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,View3DWidget,The following statement contains a magic number: var tumbleCubeControl = new TumbleCubeControl(this.InteractionLayer' theme)  			{  				Margin = new BorderDouble(0' 0' 10' 35)'  				VAnchor = VAnchor.Top'  				HAnchor = HAnchor.Right'  				Name = "Tumble Cube Control"  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,GetNearFar,The following statement contains a magic number: zNear = .1;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,GetNearFar,The following statement contains a magic number: zFar = 100;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,ExpandNearAndFarToBounds,The following statement contains a magic number: zNear = Math.Max(.1' Math.Min(zNear' -viewPosition.Z));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,ExpandNearAndFarToBounds,The following statement contains a magic number: zFar = Math.Max(Math.Max(zFar' -viewPosition.Z)' zNear + .1);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,ExpandNearAndFarToBounds,The following statement contains a magic number: z < 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,ExpandNearAndFarToBounds,The following statement contains a magic number: y < 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,ExpandNearAndFarToBounds,The following statement contains a magic number: x < 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,StartDragDrop,The following statement contains a magic number: this.InteractionLayer.BackgroundColor = new Color(Color.Black' 200);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,InSelectionBounds,The following statement contains a magic number: Vector2[] traceBottoms = new Vector2[4];
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,InSelectionBounds,The following statement contains a magic number: Vector2[] traceTops = new Vector2[4];
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,InSelectionBounds,The following statement contains a magic number: i < 3
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,InSelectionBounds,The following statement contains a magic number: selectionRectangle.ClipLine(traceBottoms[i]' traceBottoms[(i + 1) % 3])
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,InSelectionBounds,The following statement contains a magic number: i < 3
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,DragSelectedObject,The following statement contains a magic number: double snappedX = ((int)((xToSnap / snapGridDistance) + .5)) * snapGridDistance;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,DragSelectedObject,The following statement contains a magic number: double snappedY = ((int)((yToSnap / snapGridDistance) + .5)) * snapGridDistance;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,ResetView,The following statement contains a magic number: world.Scale = .03;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,ResetView,The following statement contains a magic number: world.Rotate(Quaternion.FromEulerAngles(new Vector3(0' 0' -MathHelper.Tau / 16)));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,ResetView,The following statement contains a magic number: world.Rotate(Quaternion.FromEulerAngles(new Vector3(MathHelper.Tau * .19' 0' 0)));
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,Draw,The following statement contains a magic number: var drawColor = new Color(Color.Red' 20);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,Draw,The following statement contains a magic number: sceneContext.World.Render3DLine(  						drawCenter - new Vector3(-50' 0' 0)'  						drawCenter - new Vector3(50' 0' 0)'  						drawColor'  						zBuffer'  						2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,Draw,The following statement contains a magic number: sceneContext.World.Render3DLine(  						drawCenter - new Vector3(-50' 0' 0)'  						drawCenter - new Vector3(50' 0' 0)'  						drawColor'  						zBuffer'  						2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,Draw,The following statement contains a magic number: sceneContext.World.Render3DLine(  						drawCenter - new Vector3(-50' 0' 0)'  						drawCenter - new Vector3(50' 0' 0)'  						drawColor'  						zBuffer'  						2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,Draw,The following statement contains a magic number: sceneContext.World.Render3DLine(  						drawCenter - new Vector3(0' -50' 0)'  						drawCenter - new Vector3(0' 50' 0)'  						drawColor'  						zBuffer'  						2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,Draw,The following statement contains a magic number: sceneContext.World.Render3DLine(  						drawCenter - new Vector3(0' -50' 0)'  						drawCenter - new Vector3(0' 50' 0)'  						drawColor'  						zBuffer'  						2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,Draw,The following statement contains a magic number: sceneContext.World.Render3DLine(  						drawCenter - new Vector3(0' -50' 0)'  						drawCenter - new Vector3(0' 50' 0)'  						drawColor'  						zBuffer'  						2);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,Draw,The following statement contains a magic number: i < 2
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: bedMenuButton = new PopupMenuButton(AggContext.StaticData.LoadIcon("bed.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Name = "Bed Options Menu"'  				ToolTipText = "Bed"'  				Enabled = true'  				Margin = theme.ButtonSpacing'  				VAnchor = VAnchor.Center'  				DrawArrow = true  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: bedMenuButton = new PopupMenuButton(AggContext.StaticData.LoadIcon("bed.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Name = "Bed Options Menu"'  				ToolTipText = "Bed"'  				Enabled = true'  				Margin = theme.ButtonSpacing'  				VAnchor = VAnchor.Center'  				DrawArrow = true  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: undoButton = new IconButton(AggContext.StaticData.LoadIcon("Undo_grey_16x.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Name = "3D View Undo"'  				ToolTipText = "Undo".Localize()'  				Enabled = false'  				Margin = theme.ButtonSpacing'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: undoButton = new IconButton(AggContext.StaticData.LoadIcon("Undo_grey_16x.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Name = "3D View Undo"'  				ToolTipText = "Undo".Localize()'  				Enabled = false'  				Margin = theme.ButtonSpacing'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: redoButton = new IconButton(AggContext.StaticData.LoadIcon("Redo_grey_16x.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Name = "3D View Redo"'  				Margin = theme.ButtonSpacing'  				ToolTipText = "Redo".Localize()'  				Enabled = false'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: redoButton = new IconButton(AggContext.StaticData.LoadIcon("Redo_grey_16x.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Name = "3D View Redo"'  				Margin = theme.ButtonSpacing'  				ToolTipText = "Redo".Localize()'  				Enabled = false'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: rotateButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 32' 32' theme.InvertIcons)' theme)  				{  					SiblingRadioButtonList = buttonGroupA'  					ToolTipText = "Rotate (Alt + Left Mouse)".Localize()'  					Margin = theme.ButtonSpacing  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: rotateButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 32' 32' theme.InvertIcons)' theme)  				{  					SiblingRadioButtonList = buttonGroupA'  					ToolTipText = "Rotate (Alt + Left Mouse)".Localize()'  					Margin = theme.ButtonSpacing  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: translateButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 32' 32' theme.InvertIcons)' theme)  				{  					SiblingRadioButtonList = buttonGroupA'  					ToolTipText = "Move (Shift + Left Mouse)".Localize()'  					Margin = theme.ButtonSpacing  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: translateButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 32' 32' theme.InvertIcons)' theme)  				{  					SiblingRadioButtonList = buttonGroupA'  					ToolTipText = "Move (Shift + Left Mouse)".Localize()'  					Margin = theme.ButtonSpacing  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: scaleButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 32' 32' theme.InvertIcons)' theme)  				{  					SiblingRadioButtonList = buttonGroupA'  					ToolTipText = "Zoom (Ctrl + Left Mouse)".Localize()'  					Margin = theme.ButtonSpacing  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: scaleButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 32' 32' theme.InvertIcons)' theme)  				{  					SiblingRadioButtonList = buttonGroupA'  					ToolTipText = "Zoom (Ctrl + Left Mouse)".Localize()'  					Margin = theme.ButtonSpacing  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: partSelectButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 32' 32' theme.InvertIcons)' theme)  				{  					SiblingRadioButtonList = buttonGroupA'  					ToolTipText = "Select Part".Localize()'  					Margin = theme.ButtonSpacing  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,ViewControls3D,The following statement contains a magic number: partSelectButton = new RadioIconButton(AggContext.StaticData.LoadIcon(iconPath' 32' 32' theme.InvertIcons)' theme)  				{  					SiblingRadioButtonList = buttonGroupA'  					ToolTipText = "Select Part".Localize()'  					Margin = theme.ButtonSpacing  				};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The following statement contains a magic number: bedMenuButton.DynamicPopupContent = () =>  			{  				var workspaceActions = ApplicationController.Instance.GetWorkspaceActions(view3DWidget);  				var menuTheme = ApplicationController.Instance.MenuTheme;  				var popupMenu = new PopupMenu(menuTheme);    				int thumbWidth = 45;  				var gutterWidth = thumbWidth + 7;    				popupMenu.CreateSubMenu("Open Recent".Localize()' menuTheme' (subMenu) =>  				{  					int maxItemWidth = 0;    					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime);  					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12))  					{  						var imageBuffer = new ImageBuffer(thumbWidth' thumbWidth);    						var title = new FileInfo(item.Path).LastWriteTime.ToString("MMMM d h:mm tt");    						var bedHistory = subMenu.CreateMenuItem(title' imageBuffer);  						bedHistory.GutterWidth = gutterWidth;  						bedHistory.HAnchor = HAnchor.Fit;  						bedHistory.VAnchor = VAnchor.Absolute;  						bedHistory.Padding = new BorderDouble(gutterWidth + 3' 2' 12' 2);  						bedHistory.Height = thumbWidth + 3;  						bedHistory.Click += (s' e) =>  						{  							UiThread.RunOnIdle(async () =>  							{  								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges);    								await sceneContext.LoadLibraryContent(item);    								if (sceneContext.Printer != null)  								{  									sceneContext.Printer.ViewState.ViewMode = PartViewMode.Model;  								}  							});  						};    						maxItemWidth = (int)Math.Max(maxItemWidth' bedHistory.Width);    						void UpdateImageBuffer(ImageBuffer thumbnail)  						{  							// Dump OpenGL texture  							ImageGlPlugin.Remove(imageBuffer);    							// Copy updated thumbnail into original image  							imageBuffer.CopyFrom(thumbnail);    							bedHistory.Invalidate();  						}    						ApplicationController.Instance.Library.LoadItemThumbnail(  							UpdateImageBuffer'  							(contentProvider) =>  							{  								if (contentProvider is MeshContentProvider meshContentProvider)  								{  									ApplicationController.Instance.Thumbnails.QueueForGeneration(async () =>  									{  										// Ask the MeshContentProvider to RayTrace the image  										var thumbnail = await meshContentProvider.GetThumbnail(item' thumbWidth' thumbWidth);  										if (thumbnail != null)  										{  											UpdateImageBuffer(thumbnail);  										}  									});  								}  							}'  							item'  							ApplicationController.Instance.Library.PlatingHistory'  							thumbWidth'  							thumbWidth'  							menuTheme).ConfigureAwait(false);  					}    					// Resize menu items to max item width  					foreach (var menuItem in subMenu.Children)  					{  						menuItem.HAnchor = HAnchor.Left | HAnchor.Absolute;  						menuItem.Width = maxItemWidth;  					}  				});    				var actions = new NamedAction[]  				{  					new ActionSeparator()'  					workspaceActions["Cut"]'  					workspaceActions["Copy"]'  					workspaceActions["Paste"]'  					new ActionSeparator()'  					workspaceActions["Print"]'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "Export"'  						Title = "Export".Localize()'  						Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  						Action = () =>  						{  							ApplicationController.Instance.ExportLibraryItems(  								new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  								centerOnBed: false'  								printer: view3DWidget.Printer);  						}'  						IsEnabled = () => sceneContext.EditableScene  							|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  								&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  					}'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "ClearBed"'  						Title = "Clear Bed".Localize()'  						Action = () =>  						{  							UiThread.RunOnIdle(() =>  							{  								view3DWidget.ClearPlate();  							});  						}  					}  				};    				menuTheme.CreateMenuItems(popupMenu' actions);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The following statement contains a magic number: bedMenuButton.DynamicPopupContent = () =>  			{  				var workspaceActions = ApplicationController.Instance.GetWorkspaceActions(view3DWidget);  				var menuTheme = ApplicationController.Instance.MenuTheme;  				var popupMenu = new PopupMenu(menuTheme);    				int thumbWidth = 45;  				var gutterWidth = thumbWidth + 7;    				popupMenu.CreateSubMenu("Open Recent".Localize()' menuTheme' (subMenu) =>  				{  					int maxItemWidth = 0;    					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime);  					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12))  					{  						var imageBuffer = new ImageBuffer(thumbWidth' thumbWidth);    						var title = new FileInfo(item.Path).LastWriteTime.ToString("MMMM d h:mm tt");    						var bedHistory = subMenu.CreateMenuItem(title' imageBuffer);  						bedHistory.GutterWidth = gutterWidth;  						bedHistory.HAnchor = HAnchor.Fit;  						bedHistory.VAnchor = VAnchor.Absolute;  						bedHistory.Padding = new BorderDouble(gutterWidth + 3' 2' 12' 2);  						bedHistory.Height = thumbWidth + 3;  						bedHistory.Click += (s' e) =>  						{  							UiThread.RunOnIdle(async () =>  							{  								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges);    								await sceneContext.LoadLibraryContent(item);    								if (sceneContext.Printer != null)  								{  									sceneContext.Printer.ViewState.ViewMode = PartViewMode.Model;  								}  							});  						};    						maxItemWidth = (int)Math.Max(maxItemWidth' bedHistory.Width);    						void UpdateImageBuffer(ImageBuffer thumbnail)  						{  							// Dump OpenGL texture  							ImageGlPlugin.Remove(imageBuffer);    							// Copy updated thumbnail into original image  							imageBuffer.CopyFrom(thumbnail);    							bedHistory.Invalidate();  						}    						ApplicationController.Instance.Library.LoadItemThumbnail(  							UpdateImageBuffer'  							(contentProvider) =>  							{  								if (contentProvider is MeshContentProvider meshContentProvider)  								{  									ApplicationController.Instance.Thumbnails.QueueForGeneration(async () =>  									{  										// Ask the MeshContentProvider to RayTrace the image  										var thumbnail = await meshContentProvider.GetThumbnail(item' thumbWidth' thumbWidth);  										if (thumbnail != null)  										{  											UpdateImageBuffer(thumbnail);  										}  									});  								}  							}'  							item'  							ApplicationController.Instance.Library.PlatingHistory'  							thumbWidth'  							thumbWidth'  							menuTheme).ConfigureAwait(false);  					}    					// Resize menu items to max item width  					foreach (var menuItem in subMenu.Children)  					{  						menuItem.HAnchor = HAnchor.Left | HAnchor.Absolute;  						menuItem.Width = maxItemWidth;  					}  				});    				var actions = new NamedAction[]  				{  					new ActionSeparator()'  					workspaceActions["Cut"]'  					workspaceActions["Copy"]'  					workspaceActions["Paste"]'  					new ActionSeparator()'  					workspaceActions["Print"]'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "Export"'  						Title = "Export".Localize()'  						Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  						Action = () =>  						{  							ApplicationController.Instance.ExportLibraryItems(  								new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  								centerOnBed: false'  								printer: view3DWidget.Printer);  						}'  						IsEnabled = () => sceneContext.EditableScene  							|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  								&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  					}'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "ClearBed"'  						Title = "Clear Bed".Localize()'  						Action = () =>  						{  							UiThread.RunOnIdle(() =>  							{  								view3DWidget.ClearPlate();  							});  						}  					}  				};    				menuTheme.CreateMenuItems(popupMenu' actions);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The following statement contains a magic number: bedMenuButton.DynamicPopupContent = () =>  			{  				var workspaceActions = ApplicationController.Instance.GetWorkspaceActions(view3DWidget);  				var menuTheme = ApplicationController.Instance.MenuTheme;  				var popupMenu = new PopupMenu(menuTheme);    				int thumbWidth = 45;  				var gutterWidth = thumbWidth + 7;    				popupMenu.CreateSubMenu("Open Recent".Localize()' menuTheme' (subMenu) =>  				{  					int maxItemWidth = 0;    					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime);  					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12))  					{  						var imageBuffer = new ImageBuffer(thumbWidth' thumbWidth);    						var title = new FileInfo(item.Path).LastWriteTime.ToString("MMMM d h:mm tt");    						var bedHistory = subMenu.CreateMenuItem(title' imageBuffer);  						bedHistory.GutterWidth = gutterWidth;  						bedHistory.HAnchor = HAnchor.Fit;  						bedHistory.VAnchor = VAnchor.Absolute;  						bedHistory.Padding = new BorderDouble(gutterWidth + 3' 2' 12' 2);  						bedHistory.Height = thumbWidth + 3;  						bedHistory.Click += (s' e) =>  						{  							UiThread.RunOnIdle(async () =>  							{  								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges);    								await sceneContext.LoadLibraryContent(item);    								if (sceneContext.Printer != null)  								{  									sceneContext.Printer.ViewState.ViewMode = PartViewMode.Model;  								}  							});  						};    						maxItemWidth = (int)Math.Max(maxItemWidth' bedHistory.Width);    						void UpdateImageBuffer(ImageBuffer thumbnail)  						{  							// Dump OpenGL texture  							ImageGlPlugin.Remove(imageBuffer);    							// Copy updated thumbnail into original image  							imageBuffer.CopyFrom(thumbnail);    							bedHistory.Invalidate();  						}    						ApplicationController.Instance.Library.LoadItemThumbnail(  							UpdateImageBuffer'  							(contentProvider) =>  							{  								if (contentProvider is MeshContentProvider meshContentProvider)  								{  									ApplicationController.Instance.Thumbnails.QueueForGeneration(async () =>  									{  										// Ask the MeshContentProvider to RayTrace the image  										var thumbnail = await meshContentProvider.GetThumbnail(item' thumbWidth' thumbWidth);  										if (thumbnail != null)  										{  											UpdateImageBuffer(thumbnail);  										}  									});  								}  							}'  							item'  							ApplicationController.Instance.Library.PlatingHistory'  							thumbWidth'  							thumbWidth'  							menuTheme).ConfigureAwait(false);  					}    					// Resize menu items to max item width  					foreach (var menuItem in subMenu.Children)  					{  						menuItem.HAnchor = HAnchor.Left | HAnchor.Absolute;  						menuItem.Width = maxItemWidth;  					}  				});    				var actions = new NamedAction[]  				{  					new ActionSeparator()'  					workspaceActions["Cut"]'  					workspaceActions["Copy"]'  					workspaceActions["Paste"]'  					new ActionSeparator()'  					workspaceActions["Print"]'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "Export"'  						Title = "Export".Localize()'  						Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  						Action = () =>  						{  							ApplicationController.Instance.ExportLibraryItems(  								new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  								centerOnBed: false'  								printer: view3DWidget.Printer);  						}'  						IsEnabled = () => sceneContext.EditableScene  							|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  								&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  					}'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "ClearBed"'  						Title = "Clear Bed".Localize()'  						Action = () =>  						{  							UiThread.RunOnIdle(() =>  							{  								view3DWidget.ClearPlate();  							});  						}  					}  				};    				menuTheme.CreateMenuItems(popupMenu' actions);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The following statement contains a magic number: bedMenuButton.DynamicPopupContent = () =>  			{  				var workspaceActions = ApplicationController.Instance.GetWorkspaceActions(view3DWidget);  				var menuTheme = ApplicationController.Instance.MenuTheme;  				var popupMenu = new PopupMenu(menuTheme);    				int thumbWidth = 45;  				var gutterWidth = thumbWidth + 7;    				popupMenu.CreateSubMenu("Open Recent".Localize()' menuTheme' (subMenu) =>  				{  					int maxItemWidth = 0;    					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime);  					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12))  					{  						var imageBuffer = new ImageBuffer(thumbWidth' thumbWidth);    						var title = new FileInfo(item.Path).LastWriteTime.ToString("MMMM d h:mm tt");    						var bedHistory = subMenu.CreateMenuItem(title' imageBuffer);  						bedHistory.GutterWidth = gutterWidth;  						bedHistory.HAnchor = HAnchor.Fit;  						bedHistory.VAnchor = VAnchor.Absolute;  						bedHistory.Padding = new BorderDouble(gutterWidth + 3' 2' 12' 2);  						bedHistory.Height = thumbWidth + 3;  						bedHistory.Click += (s' e) =>  						{  							UiThread.RunOnIdle(async () =>  							{  								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges);    								await sceneContext.LoadLibraryContent(item);    								if (sceneContext.Printer != null)  								{  									sceneContext.Printer.ViewState.ViewMode = PartViewMode.Model;  								}  							});  						};    						maxItemWidth = (int)Math.Max(maxItemWidth' bedHistory.Width);    						void UpdateImageBuffer(ImageBuffer thumbnail)  						{  							// Dump OpenGL texture  							ImageGlPlugin.Remove(imageBuffer);    							// Copy updated thumbnail into original image  							imageBuffer.CopyFrom(thumbnail);    							bedHistory.Invalidate();  						}    						ApplicationController.Instance.Library.LoadItemThumbnail(  							UpdateImageBuffer'  							(contentProvider) =>  							{  								if (contentProvider is MeshContentProvider meshContentProvider)  								{  									ApplicationController.Instance.Thumbnails.QueueForGeneration(async () =>  									{  										// Ask the MeshContentProvider to RayTrace the image  										var thumbnail = await meshContentProvider.GetThumbnail(item' thumbWidth' thumbWidth);  										if (thumbnail != null)  										{  											UpdateImageBuffer(thumbnail);  										}  									});  								}  							}'  							item'  							ApplicationController.Instance.Library.PlatingHistory'  							thumbWidth'  							thumbWidth'  							menuTheme).ConfigureAwait(false);  					}    					// Resize menu items to max item width  					foreach (var menuItem in subMenu.Children)  					{  						menuItem.HAnchor = HAnchor.Left | HAnchor.Absolute;  						menuItem.Width = maxItemWidth;  					}  				});    				var actions = new NamedAction[]  				{  					new ActionSeparator()'  					workspaceActions["Cut"]'  					workspaceActions["Copy"]'  					workspaceActions["Paste"]'  					new ActionSeparator()'  					workspaceActions["Print"]'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "Export"'  						Title = "Export".Localize()'  						Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  						Action = () =>  						{  							ApplicationController.Instance.ExportLibraryItems(  								new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  								centerOnBed: false'  								printer: view3DWidget.Printer);  						}'  						IsEnabled = () => sceneContext.EditableScene  							|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  								&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  					}'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "ClearBed"'  						Title = "Clear Bed".Localize()'  						Action = () =>  						{  							UiThread.RunOnIdle(() =>  							{  								view3DWidget.ClearPlate();  							});  						}  					}  				};    				menuTheme.CreateMenuItems(popupMenu' actions);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The following statement contains a magic number: bedMenuButton.DynamicPopupContent = () =>  			{  				var workspaceActions = ApplicationController.Instance.GetWorkspaceActions(view3DWidget);  				var menuTheme = ApplicationController.Instance.MenuTheme;  				var popupMenu = new PopupMenu(menuTheme);    				int thumbWidth = 45;  				var gutterWidth = thumbWidth + 7;    				popupMenu.CreateSubMenu("Open Recent".Localize()' menuTheme' (subMenu) =>  				{  					int maxItemWidth = 0;    					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime);  					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12))  					{  						var imageBuffer = new ImageBuffer(thumbWidth' thumbWidth);    						var title = new FileInfo(item.Path).LastWriteTime.ToString("MMMM d h:mm tt");    						var bedHistory = subMenu.CreateMenuItem(title' imageBuffer);  						bedHistory.GutterWidth = gutterWidth;  						bedHistory.HAnchor = HAnchor.Fit;  						bedHistory.VAnchor = VAnchor.Absolute;  						bedHistory.Padding = new BorderDouble(gutterWidth + 3' 2' 12' 2);  						bedHistory.Height = thumbWidth + 3;  						bedHistory.Click += (s' e) =>  						{  							UiThread.RunOnIdle(async () =>  							{  								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges);    								await sceneContext.LoadLibraryContent(item);    								if (sceneContext.Printer != null)  								{  									sceneContext.Printer.ViewState.ViewMode = PartViewMode.Model;  								}  							});  						};    						maxItemWidth = (int)Math.Max(maxItemWidth' bedHistory.Width);    						void UpdateImageBuffer(ImageBuffer thumbnail)  						{  							// Dump OpenGL texture  							ImageGlPlugin.Remove(imageBuffer);    							// Copy updated thumbnail into original image  							imageBuffer.CopyFrom(thumbnail);    							bedHistory.Invalidate();  						}    						ApplicationController.Instance.Library.LoadItemThumbnail(  							UpdateImageBuffer'  							(contentProvider) =>  							{  								if (contentProvider is MeshContentProvider meshContentProvider)  								{  									ApplicationController.Instance.Thumbnails.QueueForGeneration(async () =>  									{  										// Ask the MeshContentProvider to RayTrace the image  										var thumbnail = await meshContentProvider.GetThumbnail(item' thumbWidth' thumbWidth);  										if (thumbnail != null)  										{  											UpdateImageBuffer(thumbnail);  										}  									});  								}  							}'  							item'  							ApplicationController.Instance.Library.PlatingHistory'  							thumbWidth'  							thumbWidth'  							menuTheme).ConfigureAwait(false);  					}    					// Resize menu items to max item width  					foreach (var menuItem in subMenu.Children)  					{  						menuItem.HAnchor = HAnchor.Left | HAnchor.Absolute;  						menuItem.Width = maxItemWidth;  					}  				});    				var actions = new NamedAction[]  				{  					new ActionSeparator()'  					workspaceActions["Cut"]'  					workspaceActions["Copy"]'  					workspaceActions["Paste"]'  					new ActionSeparator()'  					workspaceActions["Print"]'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "Export"'  						Title = "Export".Localize()'  						Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  						Action = () =>  						{  							ApplicationController.Instance.ExportLibraryItems(  								new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  								centerOnBed: false'  								printer: view3DWidget.Printer);  						}'  						IsEnabled = () => sceneContext.EditableScene  							|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  								&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  					}'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "ClearBed"'  						Title = "Clear Bed".Localize()'  						Action = () =>  						{  							UiThread.RunOnIdle(() =>  							{  								view3DWidget.ClearPlate();  							});  						}  					}  				};    				menuTheme.CreateMenuItems(popupMenu' actions);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The following statement contains a magic number: bedMenuButton.DynamicPopupContent = () =>  			{  				var workspaceActions = ApplicationController.Instance.GetWorkspaceActions(view3DWidget);  				var menuTheme = ApplicationController.Instance.MenuTheme;  				var popupMenu = new PopupMenu(menuTheme);    				int thumbWidth = 45;  				var gutterWidth = thumbWidth + 7;    				popupMenu.CreateSubMenu("Open Recent".Localize()' menuTheme' (subMenu) =>  				{  					int maxItemWidth = 0;    					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime);  					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12))  					{  						var imageBuffer = new ImageBuffer(thumbWidth' thumbWidth);    						var title = new FileInfo(item.Path).LastWriteTime.ToString("MMMM d h:mm tt");    						var bedHistory = subMenu.CreateMenuItem(title' imageBuffer);  						bedHistory.GutterWidth = gutterWidth;  						bedHistory.HAnchor = HAnchor.Fit;  						bedHistory.VAnchor = VAnchor.Absolute;  						bedHistory.Padding = new BorderDouble(gutterWidth + 3' 2' 12' 2);  						bedHistory.Height = thumbWidth + 3;  						bedHistory.Click += (s' e) =>  						{  							UiThread.RunOnIdle(async () =>  							{  								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges);    								await sceneContext.LoadLibraryContent(item);    								if (sceneContext.Printer != null)  								{  									sceneContext.Printer.ViewState.ViewMode = PartViewMode.Model;  								}  							});  						};    						maxItemWidth = (int)Math.Max(maxItemWidth' bedHistory.Width);    						void UpdateImageBuffer(ImageBuffer thumbnail)  						{  							// Dump OpenGL texture  							ImageGlPlugin.Remove(imageBuffer);    							// Copy updated thumbnail into original image  							imageBuffer.CopyFrom(thumbnail);    							bedHistory.Invalidate();  						}    						ApplicationController.Instance.Library.LoadItemThumbnail(  							UpdateImageBuffer'  							(contentProvider) =>  							{  								if (contentProvider is MeshContentProvider meshContentProvider)  								{  									ApplicationController.Instance.Thumbnails.QueueForGeneration(async () =>  									{  										// Ask the MeshContentProvider to RayTrace the image  										var thumbnail = await meshContentProvider.GetThumbnail(item' thumbWidth' thumbWidth);  										if (thumbnail != null)  										{  											UpdateImageBuffer(thumbnail);  										}  									});  								}  							}'  							item'  							ApplicationController.Instance.Library.PlatingHistory'  							thumbWidth'  							thumbWidth'  							menuTheme).ConfigureAwait(false);  					}    					// Resize menu items to max item width  					foreach (var menuItem in subMenu.Children)  					{  						menuItem.HAnchor = HAnchor.Left | HAnchor.Absolute;  						menuItem.Width = maxItemWidth;  					}  				});    				var actions = new NamedAction[]  				{  					new ActionSeparator()'  					workspaceActions["Cut"]'  					workspaceActions["Copy"]'  					workspaceActions["Paste"]'  					new ActionSeparator()'  					workspaceActions["Print"]'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "Export"'  						Title = "Export".Localize()'  						Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  						Action = () =>  						{  							ApplicationController.Instance.ExportLibraryItems(  								new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  								centerOnBed: false'  								printer: view3DWidget.Printer);  						}'  						IsEnabled = () => sceneContext.EditableScene  							|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  								&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  					}'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "ClearBed"'  						Title = "Clear Bed".Localize()'  						Action = () =>  						{  							UiThread.RunOnIdle(() =>  							{  								view3DWidget.ClearPlate();  							});  						}  					}  				};    				menuTheme.CreateMenuItems(popupMenu' actions);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The following statement contains a magic number: bedMenuButton.DynamicPopupContent = () =>  			{  				var workspaceActions = ApplicationController.Instance.GetWorkspaceActions(view3DWidget);  				var menuTheme = ApplicationController.Instance.MenuTheme;  				var popupMenu = new PopupMenu(menuTheme);    				int thumbWidth = 45;  				var gutterWidth = thumbWidth + 7;    				popupMenu.CreateSubMenu("Open Recent".Localize()' menuTheme' (subMenu) =>  				{  					int maxItemWidth = 0;    					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime);  					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12))  					{  						var imageBuffer = new ImageBuffer(thumbWidth' thumbWidth);    						var title = new FileInfo(item.Path).LastWriteTime.ToString("MMMM d h:mm tt");    						var bedHistory = subMenu.CreateMenuItem(title' imageBuffer);  						bedHistory.GutterWidth = gutterWidth;  						bedHistory.HAnchor = HAnchor.Fit;  						bedHistory.VAnchor = VAnchor.Absolute;  						bedHistory.Padding = new BorderDouble(gutterWidth + 3' 2' 12' 2);  						bedHistory.Height = thumbWidth + 3;  						bedHistory.Click += (s' e) =>  						{  							UiThread.RunOnIdle(async () =>  							{  								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges);    								await sceneContext.LoadLibraryContent(item);    								if (sceneContext.Printer != null)  								{  									sceneContext.Printer.ViewState.ViewMode = PartViewMode.Model;  								}  							});  						};    						maxItemWidth = (int)Math.Max(maxItemWidth' bedHistory.Width);    						void UpdateImageBuffer(ImageBuffer thumbnail)  						{  							// Dump OpenGL texture  							ImageGlPlugin.Remove(imageBuffer);    							// Copy updated thumbnail into original image  							imageBuffer.CopyFrom(thumbnail);    							bedHistory.Invalidate();  						}    						ApplicationController.Instance.Library.LoadItemThumbnail(  							UpdateImageBuffer'  							(contentProvider) =>  							{  								if (contentProvider is MeshContentProvider meshContentProvider)  								{  									ApplicationController.Instance.Thumbnails.QueueForGeneration(async () =>  									{  										// Ask the MeshContentProvider to RayTrace the image  										var thumbnail = await meshContentProvider.GetThumbnail(item' thumbWidth' thumbWidth);  										if (thumbnail != null)  										{  											UpdateImageBuffer(thumbnail);  										}  									});  								}  							}'  							item'  							ApplicationController.Instance.Library.PlatingHistory'  							thumbWidth'  							thumbWidth'  							menuTheme).ConfigureAwait(false);  					}    					// Resize menu items to max item width  					foreach (var menuItem in subMenu.Children)  					{  						menuItem.HAnchor = HAnchor.Left | HAnchor.Absolute;  						menuItem.Width = maxItemWidth;  					}  				});    				var actions = new NamedAction[]  				{  					new ActionSeparator()'  					workspaceActions["Cut"]'  					workspaceActions["Copy"]'  					workspaceActions["Paste"]'  					new ActionSeparator()'  					workspaceActions["Print"]'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "Export"'  						Title = "Export".Localize()'  						Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  						Action = () =>  						{  							ApplicationController.Instance.ExportLibraryItems(  								new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  								centerOnBed: false'  								printer: view3DWidget.Printer);  						}'  						IsEnabled = () => sceneContext.EditableScene  							|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  								&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  					}'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "ClearBed"'  						Title = "Clear Bed".Localize()'  						Action = () =>  						{  							UiThread.RunOnIdle(() =>  							{  								view3DWidget.ClearPlate();  							});  						}  					}  				};    				menuTheme.CreateMenuItems(popupMenu' actions);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The following statement contains a magic number: bedMenuButton.DynamicPopupContent = () =>  			{  				var workspaceActions = ApplicationController.Instance.GetWorkspaceActions(view3DWidget);  				var menuTheme = ApplicationController.Instance.MenuTheme;  				var popupMenu = new PopupMenu(menuTheme);    				int thumbWidth = 45;  				var gutterWidth = thumbWidth + 7;    				popupMenu.CreateSubMenu("Open Recent".Localize()' menuTheme' (subMenu) =>  				{  					int maxItemWidth = 0;    					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime);  					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12))  					{  						var imageBuffer = new ImageBuffer(thumbWidth' thumbWidth);    						var title = new FileInfo(item.Path).LastWriteTime.ToString("MMMM d h:mm tt");    						var bedHistory = subMenu.CreateMenuItem(title' imageBuffer);  						bedHistory.GutterWidth = gutterWidth;  						bedHistory.HAnchor = HAnchor.Fit;  						bedHistory.VAnchor = VAnchor.Absolute;  						bedHistory.Padding = new BorderDouble(gutterWidth + 3' 2' 12' 2);  						bedHistory.Height = thumbWidth + 3;  						bedHistory.Click += (s' e) =>  						{  							UiThread.RunOnIdle(async () =>  							{  								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges);    								await sceneContext.LoadLibraryContent(item);    								if (sceneContext.Printer != null)  								{  									sceneContext.Printer.ViewState.ViewMode = PartViewMode.Model;  								}  							});  						};    						maxItemWidth = (int)Math.Max(maxItemWidth' bedHistory.Width);    						void UpdateImageBuffer(ImageBuffer thumbnail)  						{  							// Dump OpenGL texture  							ImageGlPlugin.Remove(imageBuffer);    							// Copy updated thumbnail into original image  							imageBuffer.CopyFrom(thumbnail);    							bedHistory.Invalidate();  						}    						ApplicationController.Instance.Library.LoadItemThumbnail(  							UpdateImageBuffer'  							(contentProvider) =>  							{  								if (contentProvider is MeshContentProvider meshContentProvider)  								{  									ApplicationController.Instance.Thumbnails.QueueForGeneration(async () =>  									{  										// Ask the MeshContentProvider to RayTrace the image  										var thumbnail = await meshContentProvider.GetThumbnail(item' thumbWidth' thumbWidth);  										if (thumbnail != null)  										{  											UpdateImageBuffer(thumbnail);  										}  									});  								}  							}'  							item'  							ApplicationController.Instance.Library.PlatingHistory'  							thumbWidth'  							thumbWidth'  							menuTheme).ConfigureAwait(false);  					}    					// Resize menu items to max item width  					foreach (var menuItem in subMenu.Children)  					{  						menuItem.HAnchor = HAnchor.Left | HAnchor.Absolute;  						menuItem.Width = maxItemWidth;  					}  				});    				var actions = new NamedAction[]  				{  					new ActionSeparator()'  					workspaceActions["Cut"]'  					workspaceActions["Copy"]'  					workspaceActions["Paste"]'  					new ActionSeparator()'  					workspaceActions["Print"]'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "Export"'  						Title = "Export".Localize()'  						Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  						Action = () =>  						{  							ApplicationController.Instance.ExportLibraryItems(  								new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  								centerOnBed: false'  								printer: view3DWidget.Printer);  						}'  						IsEnabled = () => sceneContext.EditableScene  							|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  								&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  					}'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "ClearBed"'  						Title = "Clear Bed".Localize()'  						Action = () =>  						{  							UiThread.RunOnIdle(() =>  							{  								view3DWidget.ClearPlate();  							});  						}  					}  				};    				menuTheme.CreateMenuItems(popupMenu' actions);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The following statement contains a magic number: bedMenuButton.DynamicPopupContent = () =>  			{  				var workspaceActions = ApplicationController.Instance.GetWorkspaceActions(view3DWidget);  				var menuTheme = ApplicationController.Instance.MenuTheme;  				var popupMenu = new PopupMenu(menuTheme);    				int thumbWidth = 45;  				var gutterWidth = thumbWidth + 7;    				popupMenu.CreateSubMenu("Open Recent".Localize()' menuTheme' (subMenu) =>  				{  					int maxItemWidth = 0;    					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime);  					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12))  					{  						var imageBuffer = new ImageBuffer(thumbWidth' thumbWidth);    						var title = new FileInfo(item.Path).LastWriteTime.ToString("MMMM d h:mm tt");    						var bedHistory = subMenu.CreateMenuItem(title' imageBuffer);  						bedHistory.GutterWidth = gutterWidth;  						bedHistory.HAnchor = HAnchor.Fit;  						bedHistory.VAnchor = VAnchor.Absolute;  						bedHistory.Padding = new BorderDouble(gutterWidth + 3' 2' 12' 2);  						bedHistory.Height = thumbWidth + 3;  						bedHistory.Click += (s' e) =>  						{  							UiThread.RunOnIdle(async () =>  							{  								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges);    								await sceneContext.LoadLibraryContent(item);    								if (sceneContext.Printer != null)  								{  									sceneContext.Printer.ViewState.ViewMode = PartViewMode.Model;  								}  							});  						};    						maxItemWidth = (int)Math.Max(maxItemWidth' bedHistory.Width);    						void UpdateImageBuffer(ImageBuffer thumbnail)  						{  							// Dump OpenGL texture  							ImageGlPlugin.Remove(imageBuffer);    							// Copy updated thumbnail into original image  							imageBuffer.CopyFrom(thumbnail);    							bedHistory.Invalidate();  						}    						ApplicationController.Instance.Library.LoadItemThumbnail(  							UpdateImageBuffer'  							(contentProvider) =>  							{  								if (contentProvider is MeshContentProvider meshContentProvider)  								{  									ApplicationController.Instance.Thumbnails.QueueForGeneration(async () =>  									{  										// Ask the MeshContentProvider to RayTrace the image  										var thumbnail = await meshContentProvider.GetThumbnail(item' thumbWidth' thumbWidth);  										if (thumbnail != null)  										{  											UpdateImageBuffer(thumbnail);  										}  									});  								}  							}'  							item'  							ApplicationController.Instance.Library.PlatingHistory'  							thumbWidth'  							thumbWidth'  							menuTheme).ConfigureAwait(false);  					}    					// Resize menu items to max item width  					foreach (var menuItem in subMenu.Children)  					{  						menuItem.HAnchor = HAnchor.Left | HAnchor.Absolute;  						menuItem.Width = maxItemWidth;  					}  				});    				var actions = new NamedAction[]  				{  					new ActionSeparator()'  					workspaceActions["Cut"]'  					workspaceActions["Copy"]'  					workspaceActions["Paste"]'  					new ActionSeparator()'  					workspaceActions["Print"]'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "Export"'  						Title = "Export".Localize()'  						Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  						Action = () =>  						{  							ApplicationController.Instance.ExportLibraryItems(  								new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  								centerOnBed: false'  								printer: view3DWidget.Printer);  						}'  						IsEnabled = () => sceneContext.EditableScene  							|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  								&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  					}'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "ClearBed"'  						Title = "Clear Bed".Localize()'  						Action = () =>  						{  							UiThread.RunOnIdle(() =>  							{  								view3DWidget.ClearPlate();  							});  						}  					}  				};    				menuTheme.CreateMenuItems(popupMenu' actions);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The following statement contains a magic number: bedMenuButton.DynamicPopupContent = () =>  			{  				var workspaceActions = ApplicationController.Instance.GetWorkspaceActions(view3DWidget);  				var menuTheme = ApplicationController.Instance.MenuTheme;  				var popupMenu = new PopupMenu(menuTheme);    				int thumbWidth = 45;  				var gutterWidth = thumbWidth + 7;    				popupMenu.CreateSubMenu("Open Recent".Localize()' menuTheme' (subMenu) =>  				{  					int maxItemWidth = 0;    					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime);  					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12))  					{  						var imageBuffer = new ImageBuffer(thumbWidth' thumbWidth);    						var title = new FileInfo(item.Path).LastWriteTime.ToString("MMMM d h:mm tt");    						var bedHistory = subMenu.CreateMenuItem(title' imageBuffer);  						bedHistory.GutterWidth = gutterWidth;  						bedHistory.HAnchor = HAnchor.Fit;  						bedHistory.VAnchor = VAnchor.Absolute;  						bedHistory.Padding = new BorderDouble(gutterWidth + 3' 2' 12' 2);  						bedHistory.Height = thumbWidth + 3;  						bedHistory.Click += (s' e) =>  						{  							UiThread.RunOnIdle(async () =>  							{  								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges);    								await sceneContext.LoadLibraryContent(item);    								if (sceneContext.Printer != null)  								{  									sceneContext.Printer.ViewState.ViewMode = PartViewMode.Model;  								}  							});  						};    						maxItemWidth = (int)Math.Max(maxItemWidth' bedHistory.Width);    						void UpdateImageBuffer(ImageBuffer thumbnail)  						{  							// Dump OpenGL texture  							ImageGlPlugin.Remove(imageBuffer);    							// Copy updated thumbnail into original image  							imageBuffer.CopyFrom(thumbnail);    							bedHistory.Invalidate();  						}    						ApplicationController.Instance.Library.LoadItemThumbnail(  							UpdateImageBuffer'  							(contentProvider) =>  							{  								if (contentProvider is MeshContentProvider meshContentProvider)  								{  									ApplicationController.Instance.Thumbnails.QueueForGeneration(async () =>  									{  										// Ask the MeshContentProvider to RayTrace the image  										var thumbnail = await meshContentProvider.GetThumbnail(item' thumbWidth' thumbWidth);  										if (thumbnail != null)  										{  											UpdateImageBuffer(thumbnail);  										}  									});  								}  							}'  							item'  							ApplicationController.Instance.Library.PlatingHistory'  							thumbWidth'  							thumbWidth'  							menuTheme).ConfigureAwait(false);  					}    					// Resize menu items to max item width  					foreach (var menuItem in subMenu.Children)  					{  						menuItem.HAnchor = HAnchor.Left | HAnchor.Absolute;  						menuItem.Width = maxItemWidth;  					}  				});    				var actions = new NamedAction[]  				{  					new ActionSeparator()'  					workspaceActions["Cut"]'  					workspaceActions["Copy"]'  					workspaceActions["Paste"]'  					new ActionSeparator()'  					workspaceActions["Print"]'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "Export"'  						Title = "Export".Localize()'  						Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  						Action = () =>  						{  							ApplicationController.Instance.ExportLibraryItems(  								new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  								centerOnBed: false'  								printer: view3DWidget.Printer);  						}'  						IsEnabled = () => sceneContext.EditableScene  							|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  								&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  					}'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "ClearBed"'  						Title = "Clear Bed".Localize()'  						Action = () =>  						{  							UiThread.RunOnIdle(() =>  							{  								view3DWidget.ClearPlate();  							});  						}  					}  				};    				menuTheme.CreateMenuItems(popupMenu' actions);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,SetView3DWidget,The following statement contains a magic number: bedMenuButton.DynamicPopupContent = () =>  			{  				var workspaceActions = ApplicationController.Instance.GetWorkspaceActions(view3DWidget);  				var menuTheme = ApplicationController.Instance.MenuTheme;  				var popupMenu = new PopupMenu(menuTheme);    				int thumbWidth = 45;  				var gutterWidth = thumbWidth + 7;    				popupMenu.CreateSubMenu("Open Recent".Localize()' menuTheme' (subMenu) =>  				{  					int maxItemWidth = 0;    					var recentFiles = new DirectoryInfo(ApplicationDataStorage.Instance.PlatingDirectory).GetFiles("*.mcx").OrderByDescending(f => f.LastWriteTime);  					foreach (var item in recentFiles.Where(f => f.Length > 215).Select(f => new SceneReplacementFileItem(f.FullName)).Take(12))  					{  						var imageBuffer = new ImageBuffer(thumbWidth' thumbWidth);    						var title = new FileInfo(item.Path).LastWriteTime.ToString("MMMM d h:mm tt");    						var bedHistory = subMenu.CreateMenuItem(title' imageBuffer);  						bedHistory.GutterWidth = gutterWidth;  						bedHistory.HAnchor = HAnchor.Fit;  						bedHistory.VAnchor = VAnchor.Absolute;  						bedHistory.Padding = new BorderDouble(gutterWidth + 3' 2' 12' 2);  						bedHistory.Height = thumbWidth + 3;  						bedHistory.Click += (s' e) =>  						{  							UiThread.RunOnIdle(async () =>  							{  								await ApplicationController.Instance.Tasks.Execute("Saving changes".Localize() + "..."' sceneContext.Printer' sceneContext.SaveChanges);    								await sceneContext.LoadLibraryContent(item);    								if (sceneContext.Printer != null)  								{  									sceneContext.Printer.ViewState.ViewMode = PartViewMode.Model;  								}  							});  						};    						maxItemWidth = (int)Math.Max(maxItemWidth' bedHistory.Width);    						void UpdateImageBuffer(ImageBuffer thumbnail)  						{  							// Dump OpenGL texture  							ImageGlPlugin.Remove(imageBuffer);    							// Copy updated thumbnail into original image  							imageBuffer.CopyFrom(thumbnail);    							bedHistory.Invalidate();  						}    						ApplicationController.Instance.Library.LoadItemThumbnail(  							UpdateImageBuffer'  							(contentProvider) =>  							{  								if (contentProvider is MeshContentProvider meshContentProvider)  								{  									ApplicationController.Instance.Thumbnails.QueueForGeneration(async () =>  									{  										// Ask the MeshContentProvider to RayTrace the image  										var thumbnail = await meshContentProvider.GetThumbnail(item' thumbWidth' thumbWidth);  										if (thumbnail != null)  										{  											UpdateImageBuffer(thumbnail);  										}  									});  								}  							}'  							item'  							ApplicationController.Instance.Library.PlatingHistory'  							thumbWidth'  							thumbWidth'  							menuTheme).ConfigureAwait(false);  					}    					// Resize menu items to max item width  					foreach (var menuItem in subMenu.Children)  					{  						menuItem.HAnchor = HAnchor.Left | HAnchor.Absolute;  						menuItem.Width = maxItemWidth;  					}  				});    				var actions = new NamedAction[]  				{  					new ActionSeparator()'  					workspaceActions["Cut"]'  					workspaceActions["Copy"]'  					workspaceActions["Paste"]'  					new ActionSeparator()'  					workspaceActions["Print"]'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "Export"'  						Title = "Export".Localize()'  						Icon = AggContext.StaticData.LoadIcon("cube_export.png"' 16' 16' menuTheme.InvertIcons)'  						Action = () =>  						{  							ApplicationController.Instance.ExportLibraryItems(  								new[] { new InMemoryLibraryItem(sceneContext.Scene) }'  								centerOnBed: false'  								printer: view3DWidget.Printer);  						}'  						IsEnabled = () => sceneContext.EditableScene  							|| (sceneContext.EditContext.SourceItem is ILibraryAsset libraryAsset  								&& string.Equals(Path.GetExtension(libraryAsset.FileName)' ".gcode"' StringComparison.OrdinalIgnoreCase))  					}'  					new ActionSeparator()'  					new NamedAction()  					{  						ID = "ClearBed"'  						Title = "Clear Bed".Localize()'  						Action = () =>  						{  							UiThread.RunOnIdle(() =>  							{  								view3DWidget.ClearPlate();  							});  						}  					}  				};    				menuTheme.CreateMenuItems(popupMenu' actions);    				return popupMenu;  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateOpenButton,The following statement contains a magic number: var openButton = new IconButton(AggContext.StaticData.LoadIcon("fa-folder-open_16.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Margin = theme.ButtonSpacing'  				ToolTipText = "Open File".Localize()'  				Name = "Open File Button"  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateOpenButton,The following statement contains a magic number: var openButton = new IconButton(AggContext.StaticData.LoadIcon("fa-folder-open_16.png"' 16' 16' theme.InvertIcons)' theme)  			{  				Margin = theme.ButtonSpacing'  				ToolTipText = "Open File".Localize()'  				Name = "Open File Button"  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateOpenButton,The following statement contains a magic number: openButton.Click += (s' e) =>  			{  				var extensionsWithoutPeriod = new HashSet<string>(ApplicationSettings.OpenDesignFileParams.Split('|').First().Split(''').Select(t => t.Trim().Trim('.')));    				foreach (var extension in ApplicationController.Instance.Library.ContentProviders.Keys)  				{  					extensionsWithoutPeriod.Add(extension.ToUpper());  				}    				var extensionsArray = extensionsWithoutPeriod.OrderBy(t => t).ToArray();    				string filter = string.Format(  					"{0}|{1}"'  					string.Join("'"' extensionsArray)'  					string.Join(""' extensionsArray.Select(t => $"*.{t.ToLower()};").ToArray()));    				UiThread.RunOnIdle(() =>  				{  					AggContext.FileDialogs.OpenFileDialog(  						new OpenFileDialogParams(filter' multiSelect: true)'  						(openParams) =>  						{  							sceneContext.AddToPlate(openParams.FileNames);  						});  				}' .1);  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateAddButton,The following statement contains a magic number: var buttonView = new TextIconButton(  				""'  				AggContext.StaticData.LoadIcon("cube_add.png"' 16' 16' theme.InvertIcons)'  				theme);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateAddButton,The following statement contains a magic number: var buttonView = new TextIconButton(  				""'  				AggContext.StaticData.LoadIcon("cube_add.png"' 16' 16' theme.InvertIcons)'  				theme);
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateAddButton,The following statement contains a magic number: libraryPopup = new PopupMenuButton(buttonView' theme)  			{  				MakeScrollable = false'  				Name = "Add Content Menu"'  				ToolTipText = "Add Content".Localize()'  				AlwaysKeepOpen = true'  				DynamicPopupContent = () =>  				{  					if (mainViewWidget == null)  					{  						mainViewWidget = this.Parents<MainViewWidget>().FirstOrDefault();  					}    					var verticalResizeContainer = new VerticalResizeContainer(theme' GrabBarSide.Right)  					{  						BackgroundColor = openColor'  						MinimumSize = new Vector2(120' 50)'  						Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y'  						SplitterBarColor = theme.SlightShade'  					};    					double.TryParse(UserSettings.Instance.get(UserSettingsKey.PopupLibraryWidth)' out double controlWidth);  					if (controlWidth == 0)  					{  						controlWidth = 400;  					}    					verticalResizeContainer.Width = controlWidth;    					verticalResizeContainer.BoundsChanged += (s2' e2) =>  					{  						UserSettings.Instance.set(UserSettingsKey.PopupLibraryWidth' verticalResizeContainer.Width.ToString());  					};    					var systemWindow = this.Parents<SystemWindow>().FirstOrDefault();    					// Compute slight highlight of openColor for use as listView background color  					var slightHighlight = theme.ResolveColor(openColor' Color.White.WithAlpha(theme.IsDarkTheme ? 10 : 50));    					var printLibraryWidget = new PrintLibraryWidget(mainViewWidget' workspace' theme' slightHighlight' libraryPopup)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Absolute'  						Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y'  						Margin = new BorderDouble(left: verticalResizeContainer.SplitterWidth)  					};    					systemWindow.SizeChanged += (s' e) =>  					{  						printLibraryWidget.Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y;  					};    					verticalResizeContainer.AddChild(printLibraryWidget);    					systemWindow.MouseDown += SystemWindownMouseDown;    					void SystemWindownMouseDown(object s2' MouseEventArgs mouseEvent)  					{  						if (verticalResizeContainer.Parent != null)  						{  							// MouseUp on our SystemWindow outside of our bounds should call close  							var resizeContainerMousePosition = verticalResizeContainer.TransformFromScreenSpace(mouseEvent.Position);  							bool mouseUpOnWidget = resizeContainerMousePosition.X >= 0 && resizeContainerMousePosition.X <= verticalResizeContainer.Width  								&& resizeContainerMousePosition.Y >= 0 && resizeContainerMousePosition.Y <= verticalResizeContainer.Height;    							if (!mouseUpOnWidget)  							{  								libraryPopup.CloseMenu();  								systemWindow.MouseDown -= SystemWindownMouseDown;  							}  						}  						else  						{  							systemWindow.MouseDown -= SystemWindownMouseDown;  						}  					}    					return verticalResizeContainer;  				}'  				BackgroundColor = theme.ToolbarButtonBackground'  				HoverColor = theme.ToolbarButtonHover'  				MouseDownColor = theme.ToolbarButtonDown'  				OpenColor = openColor'  				DrawArrow = true'  				Margin = theme.ButtonSpacing'  				PopupBorderColor = Color.Transparent'  				PopupHAnchor = HAnchor.Fit'  				PopupVAnchor = VAnchor.Fit  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateAddButton,The following statement contains a magic number: libraryPopup = new PopupMenuButton(buttonView' theme)  			{  				MakeScrollable = false'  				Name = "Add Content Menu"'  				ToolTipText = "Add Content".Localize()'  				AlwaysKeepOpen = true'  				DynamicPopupContent = () =>  				{  					if (mainViewWidget == null)  					{  						mainViewWidget = this.Parents<MainViewWidget>().FirstOrDefault();  					}    					var verticalResizeContainer = new VerticalResizeContainer(theme' GrabBarSide.Right)  					{  						BackgroundColor = openColor'  						MinimumSize = new Vector2(120' 50)'  						Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y'  						SplitterBarColor = theme.SlightShade'  					};    					double.TryParse(UserSettings.Instance.get(UserSettingsKey.PopupLibraryWidth)' out double controlWidth);  					if (controlWidth == 0)  					{  						controlWidth = 400;  					}    					verticalResizeContainer.Width = controlWidth;    					verticalResizeContainer.BoundsChanged += (s2' e2) =>  					{  						UserSettings.Instance.set(UserSettingsKey.PopupLibraryWidth' verticalResizeContainer.Width.ToString());  					};    					var systemWindow = this.Parents<SystemWindow>().FirstOrDefault();    					// Compute slight highlight of openColor for use as listView background color  					var slightHighlight = theme.ResolveColor(openColor' Color.White.WithAlpha(theme.IsDarkTheme ? 10 : 50));    					var printLibraryWidget = new PrintLibraryWidget(mainViewWidget' workspace' theme' slightHighlight' libraryPopup)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Absolute'  						Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y'  						Margin = new BorderDouble(left: verticalResizeContainer.SplitterWidth)  					};    					systemWindow.SizeChanged += (s' e) =>  					{  						printLibraryWidget.Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y;  					};    					verticalResizeContainer.AddChild(printLibraryWidget);    					systemWindow.MouseDown += SystemWindownMouseDown;    					void SystemWindownMouseDown(object s2' MouseEventArgs mouseEvent)  					{  						if (verticalResizeContainer.Parent != null)  						{  							// MouseUp on our SystemWindow outside of our bounds should call close  							var resizeContainerMousePosition = verticalResizeContainer.TransformFromScreenSpace(mouseEvent.Position);  							bool mouseUpOnWidget = resizeContainerMousePosition.X >= 0 && resizeContainerMousePosition.X <= verticalResizeContainer.Width  								&& resizeContainerMousePosition.Y >= 0 && resizeContainerMousePosition.Y <= verticalResizeContainer.Height;    							if (!mouseUpOnWidget)  							{  								libraryPopup.CloseMenu();  								systemWindow.MouseDown -= SystemWindownMouseDown;  							}  						}  						else  						{  							systemWindow.MouseDown -= SystemWindownMouseDown;  						}  					}    					return verticalResizeContainer;  				}'  				BackgroundColor = theme.ToolbarButtonBackground'  				HoverColor = theme.ToolbarButtonHover'  				MouseDownColor = theme.ToolbarButtonDown'  				OpenColor = openColor'  				DrawArrow = true'  				Margin = theme.ButtonSpacing'  				PopupBorderColor = Color.Transparent'  				PopupHAnchor = HAnchor.Fit'  				PopupVAnchor = VAnchor.Fit  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateAddButton,The following statement contains a magic number: libraryPopup = new PopupMenuButton(buttonView' theme)  			{  				MakeScrollable = false'  				Name = "Add Content Menu"'  				ToolTipText = "Add Content".Localize()'  				AlwaysKeepOpen = true'  				DynamicPopupContent = () =>  				{  					if (mainViewWidget == null)  					{  						mainViewWidget = this.Parents<MainViewWidget>().FirstOrDefault();  					}    					var verticalResizeContainer = new VerticalResizeContainer(theme' GrabBarSide.Right)  					{  						BackgroundColor = openColor'  						MinimumSize = new Vector2(120' 50)'  						Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y'  						SplitterBarColor = theme.SlightShade'  					};    					double.TryParse(UserSettings.Instance.get(UserSettingsKey.PopupLibraryWidth)' out double controlWidth);  					if (controlWidth == 0)  					{  						controlWidth = 400;  					}    					verticalResizeContainer.Width = controlWidth;    					verticalResizeContainer.BoundsChanged += (s2' e2) =>  					{  						UserSettings.Instance.set(UserSettingsKey.PopupLibraryWidth' verticalResizeContainer.Width.ToString());  					};    					var systemWindow = this.Parents<SystemWindow>().FirstOrDefault();    					// Compute slight highlight of openColor for use as listView background color  					var slightHighlight = theme.ResolveColor(openColor' Color.White.WithAlpha(theme.IsDarkTheme ? 10 : 50));    					var printLibraryWidget = new PrintLibraryWidget(mainViewWidget' workspace' theme' slightHighlight' libraryPopup)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Absolute'  						Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y'  						Margin = new BorderDouble(left: verticalResizeContainer.SplitterWidth)  					};    					systemWindow.SizeChanged += (s' e) =>  					{  						printLibraryWidget.Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y;  					};    					verticalResizeContainer.AddChild(printLibraryWidget);    					systemWindow.MouseDown += SystemWindownMouseDown;    					void SystemWindownMouseDown(object s2' MouseEventArgs mouseEvent)  					{  						if (verticalResizeContainer.Parent != null)  						{  							// MouseUp on our SystemWindow outside of our bounds should call close  							var resizeContainerMousePosition = verticalResizeContainer.TransformFromScreenSpace(mouseEvent.Position);  							bool mouseUpOnWidget = resizeContainerMousePosition.X >= 0 && resizeContainerMousePosition.X <= verticalResizeContainer.Width  								&& resizeContainerMousePosition.Y >= 0 && resizeContainerMousePosition.Y <= verticalResizeContainer.Height;    							if (!mouseUpOnWidget)  							{  								libraryPopup.CloseMenu();  								systemWindow.MouseDown -= SystemWindownMouseDown;  							}  						}  						else  						{  							systemWindow.MouseDown -= SystemWindownMouseDown;  						}  					}    					return verticalResizeContainer;  				}'  				BackgroundColor = theme.ToolbarButtonBackground'  				HoverColor = theme.ToolbarButtonHover'  				MouseDownColor = theme.ToolbarButtonDown'  				OpenColor = openColor'  				DrawArrow = true'  				Margin = theme.ButtonSpacing'  				PopupBorderColor = Color.Transparent'  				PopupHAnchor = HAnchor.Fit'  				PopupVAnchor = VAnchor.Fit  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateAddButton,The following statement contains a magic number: libraryPopup = new PopupMenuButton(buttonView' theme)  			{  				MakeScrollable = false'  				Name = "Add Content Menu"'  				ToolTipText = "Add Content".Localize()'  				AlwaysKeepOpen = true'  				DynamicPopupContent = () =>  				{  					if (mainViewWidget == null)  					{  						mainViewWidget = this.Parents<MainViewWidget>().FirstOrDefault();  					}    					var verticalResizeContainer = new VerticalResizeContainer(theme' GrabBarSide.Right)  					{  						BackgroundColor = openColor'  						MinimumSize = new Vector2(120' 50)'  						Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y'  						SplitterBarColor = theme.SlightShade'  					};    					double.TryParse(UserSettings.Instance.get(UserSettingsKey.PopupLibraryWidth)' out double controlWidth);  					if (controlWidth == 0)  					{  						controlWidth = 400;  					}    					verticalResizeContainer.Width = controlWidth;    					verticalResizeContainer.BoundsChanged += (s2' e2) =>  					{  						UserSettings.Instance.set(UserSettingsKey.PopupLibraryWidth' verticalResizeContainer.Width.ToString());  					};    					var systemWindow = this.Parents<SystemWindow>().FirstOrDefault();    					// Compute slight highlight of openColor for use as listView background color  					var slightHighlight = theme.ResolveColor(openColor' Color.White.WithAlpha(theme.IsDarkTheme ? 10 : 50));    					var printLibraryWidget = new PrintLibraryWidget(mainViewWidget' workspace' theme' slightHighlight' libraryPopup)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Absolute'  						Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y'  						Margin = new BorderDouble(left: verticalResizeContainer.SplitterWidth)  					};    					systemWindow.SizeChanged += (s' e) =>  					{  						printLibraryWidget.Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y;  					};    					verticalResizeContainer.AddChild(printLibraryWidget);    					systemWindow.MouseDown += SystemWindownMouseDown;    					void SystemWindownMouseDown(object s2' MouseEventArgs mouseEvent)  					{  						if (verticalResizeContainer.Parent != null)  						{  							// MouseUp on our SystemWindow outside of our bounds should call close  							var resizeContainerMousePosition = verticalResizeContainer.TransformFromScreenSpace(mouseEvent.Position);  							bool mouseUpOnWidget = resizeContainerMousePosition.X >= 0 && resizeContainerMousePosition.X <= verticalResizeContainer.Width  								&& resizeContainerMousePosition.Y >= 0 && resizeContainerMousePosition.Y <= verticalResizeContainer.Height;    							if (!mouseUpOnWidget)  							{  								libraryPopup.CloseMenu();  								systemWindow.MouseDown -= SystemWindownMouseDown;  							}  						}  						else  						{  							systemWindow.MouseDown -= SystemWindownMouseDown;  						}  					}    					return verticalResizeContainer;  				}'  				BackgroundColor = theme.ToolbarButtonBackground'  				HoverColor = theme.ToolbarButtonHover'  				MouseDownColor = theme.ToolbarButtonDown'  				OpenColor = openColor'  				DrawArrow = true'  				Margin = theme.ButtonSpacing'  				PopupBorderColor = Color.Transparent'  				PopupHAnchor = HAnchor.Fit'  				PopupVAnchor = VAnchor.Fit  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateAddButton,The following statement contains a magic number: libraryPopup = new PopupMenuButton(buttonView' theme)  			{  				MakeScrollable = false'  				Name = "Add Content Menu"'  				ToolTipText = "Add Content".Localize()'  				AlwaysKeepOpen = true'  				DynamicPopupContent = () =>  				{  					if (mainViewWidget == null)  					{  						mainViewWidget = this.Parents<MainViewWidget>().FirstOrDefault();  					}    					var verticalResizeContainer = new VerticalResizeContainer(theme' GrabBarSide.Right)  					{  						BackgroundColor = openColor'  						MinimumSize = new Vector2(120' 50)'  						Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y'  						SplitterBarColor = theme.SlightShade'  					};    					double.TryParse(UserSettings.Instance.get(UserSettingsKey.PopupLibraryWidth)' out double controlWidth);  					if (controlWidth == 0)  					{  						controlWidth = 400;  					}    					verticalResizeContainer.Width = controlWidth;    					verticalResizeContainer.BoundsChanged += (s2' e2) =>  					{  						UserSettings.Instance.set(UserSettingsKey.PopupLibraryWidth' verticalResizeContainer.Width.ToString());  					};    					var systemWindow = this.Parents<SystemWindow>().FirstOrDefault();    					// Compute slight highlight of openColor for use as listView background color  					var slightHighlight = theme.ResolveColor(openColor' Color.White.WithAlpha(theme.IsDarkTheme ? 10 : 50));    					var printLibraryWidget = new PrintLibraryWidget(mainViewWidget' workspace' theme' slightHighlight' libraryPopup)  					{  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Absolute'  						Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y'  						Margin = new BorderDouble(left: verticalResizeContainer.SplitterWidth)  					};    					systemWindow.SizeChanged += (s' e) =>  					{  						printLibraryWidget.Height = libraryPopup.TransformToScreenSpace(libraryPopup.Position).Y;  					};    					verticalResizeContainer.AddChild(printLibraryWidget);    					systemWindow.MouseDown += SystemWindownMouseDown;    					void SystemWindownMouseDown(object s2' MouseEventArgs mouseEvent)  					{  						if (verticalResizeContainer.Parent != null)  						{  							// MouseUp on our SystemWindow outside of our bounds should call close  							var resizeContainerMousePosition = verticalResizeContainer.TransformFromScreenSpace(mouseEvent.Position);  							bool mouseUpOnWidget = resizeContainerMousePosition.X >= 0 && resizeContainerMousePosition.X <= verticalResizeContainer.Width  								&& resizeContainerMousePosition.Y >= 0 && resizeContainerMousePosition.Y <= verticalResizeContainer.Height;    							if (!mouseUpOnWidget)  							{  								libraryPopup.CloseMenu();  								systemWindow.MouseDown -= SystemWindownMouseDown;  							}  						}  						else  						{  							systemWindow.MouseDown -= SystemWindownMouseDown;  						}  					}    					return verticalResizeContainer;  				}'  				BackgroundColor = theme.ToolbarButtonBackground'  				HoverColor = theme.ToolbarButtonHover'  				MouseDownColor = theme.ToolbarButtonDown'  				OpenColor = openColor'  				DrawArrow = true'  				Margin = theme.ButtonSpacing'  				PopupBorderColor = Color.Transparent'  				PopupHAnchor = HAnchor.Fit'  				PopupVAnchor = VAnchor.Fit  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateWipeTowerButton,The following statement contains a magic number: var iconButton = new IconButton(  				AggContext.StaticData.LoadIcon("wipe_tower.png"' 16' 16' theme.InvertIcons)'  				theme)  			{  				ToolTipText = "Toggle Wipe Tower".Localize()'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateWipeTowerButton,The following statement contains a magic number: var iconButton = new IconButton(  				AggContext.StaticData.LoadIcon("wipe_tower.png"' 16' 16' theme.InvertIcons)'  				theme)  			{  				ToolTipText = "Toggle Wipe Tower".Localize()'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateSupportButton,The following statement contains a magic number: var iconButton = new IconButton(  				AggContext.StaticData.LoadIcon("support.png"' 16' 16' theme.InvertIcons)'  				theme)  			{  				ToolTipText = "Toggle Support".Localize()'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateSupportButton,The following statement contains a magic number: var iconButton = new IconButton(  				AggContext.StaticData.LoadIcon("support.png"' 16' 16' theme.InvertIcons)'  				theme)  			{  				ToolTipText = "Toggle Support".Localize()'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateSupportButton,The following statement contains a magic number: var minimumSupportHeight = .05;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateSupportButton,The following statement contains a magic number: minimumSupportHeight = sceneContext.Printer.Settings.GetValue<double>(SettingsKey.layer_height) / 2;
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateSaveButton,The following statement contains a magic number: return theme.CreateSplitButton(new SplitButtonParams()  			{  				ButtonName = "Save"'  				Icon = AggContext.StaticData.LoadIcon("save_grey_16x.png"' 16' 16' theme.InvertIcons)'  				DefaultAction = (menuButton) =>  				{  					ApplicationController.Instance.Tasks.Execute("Saving".Localize()' sceneContext.Printer' async (progress' cancellationToken) =>  					{  						menuButton.Enabled = false;    						try  						{  							await sceneContext.SaveChanges(progress' cancellationToken);  						}  						catch (Exception ex)  						{  							ApplicationController.Instance.LogError("Error saving file".Localize() + ": " + ex.Message);  						}    						menuButton.Enabled = true;  					}).ConfigureAwait(false);  				}'  				DefaultActionTooltip = "Save".Localize()'  				ExtendPopupMenu = (PopupMenu popupMenu) =>  				{  					var saveAs = popupMenu.CreateMenuItem("Save As".Localize());  					saveAs.Click += (s' e) => UiThread.RunOnIdle(() =>  					{  						DialogWindow.Show(  							new SaveAsPage(  								(newName' destinationContainer) =>  								{  									// Save to the destination provider  									if (destinationContainer is ILibraryWritableContainer writableContainer)  									{  										// Wrap stream with ReadOnlyStream library item and add to container  										writableContainer.Add(new[]  										{  											new InMemoryLibraryItem(sceneContext.Scene)  											{  												Name = newName  											}  										});    										destinationContainer.Dispose();  									}  								}));  					});  				}  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewControls3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewControls3D.cs,CreateSaveButton,The following statement contains a magic number: return theme.CreateSplitButton(new SplitButtonParams()  			{  				ButtonName = "Save"'  				Icon = AggContext.StaticData.LoadIcon("save_grey_16x.png"' 16' 16' theme.InvertIcons)'  				DefaultAction = (menuButton) =>  				{  					ApplicationController.Instance.Tasks.Execute("Saving".Localize()' sceneContext.Printer' async (progress' cancellationToken) =>  					{  						menuButton.Enabled = false;    						try  						{  							await sceneContext.SaveChanges(progress' cancellationToken);  						}  						catch (Exception ex)  						{  							ApplicationController.Instance.LogError("Error saving file".Localize() + ": " + ex.Message);  						}    						menuButton.Enabled = true;  					}).ConfigureAwait(false);  				}'  				DefaultActionTooltip = "Save".Localize()'  				ExtendPopupMenu = (PopupMenu popupMenu) =>  				{  					var saveAs = popupMenu.CreateMenuItem("Save As".Localize());  					saveAs.Click += (s' e) => UiThread.RunOnIdle(() =>  					{  						DialogWindow.Show(  							new SaveAsPage(  								(newName' destinationContainer) =>  								{  									// Save to the destination provider  									if (destinationContainer is ILibraryWritableContainer writableContainer)  									{  										// Wrap stream with ReadOnlyStream library item and add to container  										writableContainer.Add(new[]  										{  											new InMemoryLibraryItem(sceneContext.Scene)  											{  												Name = newName  											}  										});    										destinationContainer.Dispose();  									}  								}));  					});  				}  			});
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ViewStyleButton,The following statement contains a magic number: viewIcons = new Dictionary<RenderTypes' ImageBuffer>()  			{  				[RenderTypes.Shaded] = AggContext.StaticData.LoadIcon("view_shaded.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Outlines] = AggContext.StaticData.LoadIcon("view_outlines.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Polygons] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.NonManifold] = AggContext.StaticData.LoadIcon("view_polygons.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Materials] = AggContext.StaticData.LoadIcon("view_materials.png"' 16' 16' theme.InvertIcons)'  				[RenderTypes.Overhang] = AggContext.StaticData.LoadIcon("view_overhang.png"' 16' 16' theme.InvertIcons)'  			};
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,UserSettings_SettingChanged,The following statement contains a magic number: iconButton.FlashBackground(theme.PrimaryAccentColor.WithContrast(theme.TextColor' 6).ToColor());
Magic Number,MatterHackers.MatterControl.PartPreviewWindow,ViewStyleButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\ViewStyleButton.cs,ShowViewOptions,The following statement contains a magic number: menuItem.Padding = menuItem.Padding.Clone(left: 25);
Magic Number,MatterHackers.MatterControl.SettingsManagement,OemSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\OemSettings.cs,GetIcon,The following statement contains a magic number: var imageBuffer = new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl.SettingsManagement,OemSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\OemSettings.cs,GetIcon,The following statement contains a magic number: var imageBuffer = new ImageBuffer(16' 16);
Magic Number,MatterHackers.MatterControl.SettingsManagement,OemSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SettingsManagement\OemSettings.cs,DownloadMissingProfiles,The following statement contains a magic number: await Task.Delay(20000);
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Interaction\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: arrow.MoveTo(-3' -5);
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Interaction\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: arrow.MoveTo(-3' -5);
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Interaction\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: arrow.LineTo(3' -5);
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Interaction\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: arrow.LineTo(3' -5);
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Interaction\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Interaction\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: double rotation = Math.Atan2(direction.Y' direction.X) + MathHelper.Tau / 2;
Magic Number,MatterHackers.MeshVisualizer,InteractionVolume,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Interaction\InteractionVolume.cs,DrawMeasureLine,The following statement contains a magic number: IVertexSource correctRotation = new VertexSourceApplyTransform(arrow' Affine.NewRotation(rotation - MathHelper.Tau / 4));
Magic Number,MatterHackers.MeshVisualizer,MaterialRendering,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\MaterialRendering.cs,Color,The following statement contains a magic number: return ColorF.FromHSL(Math.Max(materialIndex' 0) / 10.0' .99' .49).ToColor();
Magic Number,MatterHackers.MeshVisualizer,MaterialRendering,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\MaterialRendering.cs,Color,The following statement contains a magic number: return ColorF.FromHSL(Math.Max(materialIndex' 0) / 10.0' .99' .49).ToColor();
Magic Number,MatterHackers.MeshVisualizer,MaterialRendering,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\MaterialRendering.cs,Color,The following statement contains a magic number: return ColorF.FromHSL(Math.Max(materialIndex' 0) / 10.0' .99' .49).ToColor();
Magic Number,MatterHackers.MeshVisualizer,MaterialRendering,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\MaterialRendering.cs,Color,The following statement contains a magic number: return (materialIndex == -1) ? unassignedColor : ColorF.FromHSL(materialIndex / 10.0' .99' .49).ToColor();
Magic Number,MatterHackers.MeshVisualizer,MaterialRendering,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\MaterialRendering.cs,Color,The following statement contains a magic number: return (materialIndex == -1) ? unassignedColor : ColorF.FromHSL(materialIndex / 10.0' .99' .49).ToColor();
Magic Number,MatterHackers.MeshVisualizer,MaterialRendering,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\MaterialRendering.cs,Color,The following statement contains a magic number: return (materialIndex == -1) ? unassignedColor : ColorF.FromHSL(materialIndex / 10.0' .99' .49).ToColor();
Magic Number,MatterHackers.MeshVisualizer,WorldViewExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\WorldViewExtensions.cs,RenderDirectionAxis,The following statement contains a magic number: int count = 20;
Magic Number,MatterHackers.MeshVisualizer,WorldViewExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\WorldViewExtensions.cs,RenderDirectionAxis,The following statement contains a magic number: var rotation = size / 4 * Vector3Ex.Transform(perpendicular' Matrix4X4.CreateRotation(axis.Normal' MathHelper.Tau * i / count));
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: double sliderWidth = 300 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: double sliderThumbWidth = 10 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: feedRateRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' theme' minFeedRateRatio' maxFeedRateRatio)  				{  					Name = "Feed Rate Slider"'  					Margin = new BorderDouble(5' 0)'  					Value = FeedRateMultiplierStream.FeedRateRatio'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Center'  					TotalWidthInPixels = sliderWidth'  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: feedRateRatioSlider.ValueChanged += (sender' e) =>  				{  					feedRateValue.ActuallNumberEdit.Value = Math.Round(feedRateRatioSlider.Value' 2);  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: feedRateRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					FeedRateMultiplierStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					printer.Settings.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplierStream.FeedRateRatio.ToString());  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplierStream.FeedRateRatio' 2)' theme' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.Center | VAnchor.Fit'  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplierStream.FeedRateRatio' 2)' theme' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.Center | VAnchor.Fit'  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: feedRateValue = new MHNumberEdit(Math.Round(FeedRateMultiplierStream.FeedRateRatio' 2)' theme' allowDecimals: true' minValue: minFeedRateRatio' maxValue: maxFeedRateRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Feed Rate NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.Center | VAnchor.Fit'  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: feedRateValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					feedRateRatioSlider.Value = feedRateValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					FeedRateMultiplierStream.FeedRateRatio = Math.Round(feedRateRatioSlider.Value' 2);    					// Persist data for future use  					printer.Settings.SetValue(  						SettingsKey.feedrate_ratio'  						FeedRateMultiplierStream.FeedRateRatio.ToString());  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: extrusionRatioSlider = new SolidSlider(new Vector2()' sliderThumbWidth' theme' minExtrutionRatio' maxExtrusionRatio' Orientation.Horizontal)  				{  					Name = "Extrusion Multiplier Slider"'  					TotalWidthInPixels = sliderWidth'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Center'  					Margin = new BorderDouble(5' 0)'  					Value = ExtrusionMultiplierStream.ExtrusionRatio  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: extrusionRatioSlider.ValueChanged += (sender' e) =>  				{  					extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatioSlider.Value' 2);  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: extrusionRatioSlider.SliderReleased += (s' e) =>  				{  					// Update state for runtime use  					ExtrusionMultiplierStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					printer.Settings.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplierStream.ExtrusionRatio.ToString());  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplierStream.ExtrusionRatio' 2)' theme' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.Center | VAnchor.Fit'  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplierStream.ExtrusionRatio' 2)' theme' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.Center | VAnchor.Fit'  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: extrusionValue = new MHNumberEdit(Math.Round(ExtrusionMultiplierStream.ExtrusionRatio' 2)' theme' allowDecimals: true' minValue: minExtrutionRatio' maxValue: maxExtrusionRatio' pixelWidth: 40 * GuiWidget.DeviceScale)  				{  					Name = "Extrusion Multiplier NumberEdit"'  					SelectAllOnFocus = true'  					Margin = new BorderDouble(0' 0' 5' 0)'  					VAnchor = VAnchor.Center | VAnchor.Fit'  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,AdjustmentControls,The following statement contains a magic number: extrusionValue.ActuallNumberEdit.EditComplete += (sender' e) =>  				{  					extrusionRatioSlider.Value = extrusionValue.ActuallNumberEdit.Value;    					// Update state for runtime use  					ExtrusionMultiplierStream.ExtrusionRatio = Math.Round(extrusionRatioSlider.Value' 2);    					// Persist data for future use  					printer.Settings.SetValue(  						SettingsKey.extrusion_ratio'  						ExtrusionMultiplierStream.ExtrusionRatio.ToString());  				};
Magic Number,MatterHackers.MatterControl.PrinterControls,AdjustmentControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\AdjustmentControls.cs,Printer_SettingChanged,The following statement contains a magic number: extrusionValue.ActuallNumberEdit.Value = Math.Round(extrusionRatio' 2);
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: fanSpeedDisplay = new MHNumberEdit(0' theme' minValue: 0' maxValue: 100' pixelWidth: 30)  			{  				Value = printer.Connection.FanSpeed0To255 * 100 / 255'  				VAnchor = VAnchor.Center | VAnchor.Fit'  				Margin = new BorderDouble(right: 2)'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: fanSpeedDisplay = new MHNumberEdit(0' theme' minValue: 0' maxValue: 100' pixelWidth: 30)  			{  				Value = printer.Connection.FanSpeed0To255 * 100 / 255'  				VAnchor = VAnchor.Center | VAnchor.Fit'  				Margin = new BorderDouble(right: 2)'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: fanSpeedDisplay = new MHNumberEdit(0' theme' minValue: 0' maxValue: 100' pixelWidth: 30)  			{  				Value = printer.Connection.FanSpeed0To255 * 100 / 255'  				VAnchor = VAnchor.Center | VAnchor.Fit'  				Margin = new BorderDouble(right: 2)'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: fanSpeedDisplay = new MHNumberEdit(0' theme' minValue: 0' maxValue: 100' pixelWidth: 30)  			{  				Value = printer.Connection.FanSpeed0To255 * 100 / 255'  				VAnchor = VAnchor.Center | VAnchor.Fit'  				Margin = new BorderDouble(right: 2)'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: fanSpeedDisplay = new MHNumberEdit(0' theme' minValue: 0' maxValue: 100' pixelWidth: 30)  			{  				Value = printer.Connection.FanSpeed0To255 * 100 / 255'  				VAnchor = VAnchor.Center | VAnchor.Fit'  				Margin = new BorderDouble(right: 2)'  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: fanSpeedDisplay.ActuallNumberEdit.EditComplete += (sender' e) =>  			{  				// limit the rate we can send this message to 2 per second so we don't get in a crazy toggle state.  				if (!timeSinceLastManualSend.IsRunning  					|| timeSinceLastManualSend.ElapsedMilliseconds > 500)  				{  					timeSinceLastManualSend.Restart();  					printer.Connection.FanSpeed0To255 = (int)(fanSpeedDisplay.Value * 255 / 100 + .5);  				}  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: fanSpeedDisplay.ActuallNumberEdit.EditComplete += (sender' e) =>  			{  				// limit the rate we can send this message to 2 per second so we don't get in a crazy toggle state.  				if (!timeSinceLastManualSend.IsRunning  					|| timeSinceLastManualSend.ElapsedMilliseconds > 500)  				{  					timeSinceLastManualSend.Restart();  					printer.Connection.FanSpeed0To255 = (int)(fanSpeedDisplay.Value * 255 / 100 + .5);  				}  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: fanSpeedDisplay.ActuallNumberEdit.EditComplete += (sender' e) =>  			{  				// limit the rate we can send this message to 2 per second so we don't get in a crazy toggle state.  				if (!timeSinceLastManualSend.IsRunning  					|| timeSinceLastManualSend.ElapsedMilliseconds > 500)  				{  					timeSinceLastManualSend.Restart();  					printer.Connection.FanSpeed0To255 = (int)(fanSpeedDisplay.Value * 255 / 100 + .5);  				}  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: fanSpeedDisplay.ActuallNumberEdit.EditComplete += (sender' e) =>  			{  				// limit the rate we can send this message to 2 per second so we don't get in a crazy toggle state.  				if (!timeSinceLastManualSend.IsRunning  					|| timeSinceLastManualSend.ElapsedMilliseconds > 500)  				{  					timeSinceLastManualSend.Restart();  					printer.Connection.FanSpeed0To255 = (int)(fanSpeedDisplay.Value * 255 / 100 + .5);  				}  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: container.AddChild(new TextWidget("%"' pointSize: 10' textColor: theme.TextColor)  			{  				VAnchor = VAnchor.Center  			});
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: toggleSwitch = new RoundedToggleSwitch(theme)  			{  				Margin = new BorderDouble(5' 0)'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: toggleSwitch.CheckedStateChanged += (s' e) =>  			{  				if (!timeSinceLastManualSend.IsRunning  					|| timeSinceLastManualSend.ElapsedMilliseconds > 500)  				{  					timeSinceLastManualSend.Restart();  					if (toggleSwitch.Checked)  					{  						printer.Connection.FanSpeed0To255 = 255;  					}  					else  					{  						printer.Connection.FanSpeed0To255 = 0;  					}  				}  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,FanControlsRow,The following statement contains a magic number: toggleSwitch.CheckedStateChanged += (s' e) =>  			{  				if (!timeSinceLastManualSend.IsRunning  					|| timeSinceLastManualSend.ElapsedMilliseconds > 500)  				{  					timeSinceLastManualSend.Restart();  					if (toggleSwitch.Checked)  					{  						printer.Connection.FanSpeed0To255 = 255;  					}  					else  					{  						printer.Connection.FanSpeed0To255 = 0;  					}  				}  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,Connection_FanSpeedSet,The following statement contains a magic number: fanSpeedDisplay.Value = printer.Connection.FanSpeed0To255 * 100 / 255;
Magic Number,MatterHackers.MatterControl.PrinterControls,FanControlsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\FanControlsRow.cs,Connection_FanSpeedSet,The following statement contains a magic number: fanSpeedDisplay.Value = printer.Connection.FanSpeed0To255 * 100 / 255;
Magic Number,MatterHackers.MatterControl.PrinterControls,MacroControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MacroControls.cs,Rebuild,The following statement contains a magic number: var noMacrosFound = new TextWidget("No macros are currently set up for this printer.".Localize()' pointSize: 10' textColor: theme.TextColor);
Magic Number,MatterHackers.MatterControl.PrinterControls,MacroControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MacroControls.cs,CreateSection,The following statement contains a magic number: var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme);
Magic Number,MatterHackers.MatterControl.PrinterControls,MacroControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MacroControls.cs,CreateSection,The following statement contains a magic number: var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MovementControls.cs,CreateSection,The following statement contains a magic number: var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MovementControls.cs,CreateSection,The following statement contains a magic number: var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme);
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: var toolbar = new FlowLayoutWidget  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(bottom: 10)  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: var offsetStreamLabel = new TextWidget("Z Offset".Localize() + ":"' pointSize: 8)  			{  				TextColor = theme.TextColor'  				Margin = new BorderDouble(left: 10)'  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MovementControls.cs,GetHomeButtonBar,The following statement contains a magic number: var offsetStreamLabel = new TextWidget("Z Offset".Localize() + ":"' pointSize: 8)  			{  				TextColor = theme.TextColor'  				Margin = new BorderDouble(left: 10)'  				AutoExpandBoundsToText = true'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,MovementControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MovementControls.cs,GetHWDestinationBar,The following statement contains a magic number: var hwDestinationBar = new FlowLayoutWidget  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(top: 8)'  				Padding = 0  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MovementControls.cs,ZTuningWidget,The following statement contains a magic number: zOffsetStreamContainer = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				Margin = new BorderDouble(3' 0)'  				Padding = new BorderDouble(3)'  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Center'  				BackgroundColor = theme.MinimalShade'  				Height = 20  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MovementControls.cs,ZTuningWidget,The following statement contains a magic number: zOffsetStreamContainer = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				Margin = new BorderDouble(3' 0)'  				Padding = new BorderDouble(3)'  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Center'  				BackgroundColor = theme.MinimalShade'  				Height = 20  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MovementControls.cs,ZTuningWidget,The following statement contains a magic number: zOffsetStreamContainer = new FlowLayoutWidget(FlowDirection.LeftToRight)  			{  				Margin = new BorderDouble(3' 0)'  				Padding = new BorderDouble(3)'  				HAnchor = HAnchor.Fit'  				VAnchor = VAnchor.Center'  				BackgroundColor = theme.MinimalShade'  				Height = 20  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MovementControls.cs,ZTuningWidget,The following statement contains a magic number: zOffsetStreamDisplay = new TextWidget(zoffset.ToString("0.##")' pointSize: theme.DefaultFontSize)  			{  				AutoExpandBoundsToText = true'  				TextColor = theme.TextColor'  				Margin = new BorderDouble(5' 0' 8' 0)'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,ZTuningWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\MovementControls.cs,ZTuningWidget,The following statement contains a magic number: zOffsetStreamDisplay = new TextWidget(zoffset.ToString("0.##")' pointSize: theme.DefaultFontSize)  			{  				AutoExpandBoundsToText = true'  				TextColor = theme.TextColor'  				Margin = new BorderDouble(5' 0' 8' 0)'  				VAnchor = VAnchor.Center  			};
Magic Number,MatterHackers.MatterControl.PrinterControls,TemperatureControls,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\ControlWidgets\TemperatureControls.cs,TemperatureControls,The following statement contains a magic number: preHeatButton = new TextButton("Preheat".Localize()' theme)  			{  				BackgroundColor = theme.MinimalShade'  				Margin = new BorderDouble(right: 10)  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: BorderDouble elementMargin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: TextWidget baudRateLabel = new TextWidget(baudRateLabelTextFull' 0' 0' 12);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: baudRateLabel.Margin = new BorderDouble(0' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: printerBaudRateError = new TextWidget("Select the baud rate.".Localize()' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: printerBaudRateHelpLink = new LinkLabel("What's this?".Localize()' theme)  			{  				Margin = new BorderDouble(left: 5)'  				VAnchor = VAnchor.Bottom  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: printerBaudRateHelpMessage = new TextWidget("The term 'Baud Rate' roughly means the speed at which\ndata is transmitted.  Baud rates may differ from printer to\nprinter. Refer to your printer manual for more info.\n\nTip: If you are uncertain - try 250000.".Localize()' 0' 0' 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,createPrinterBaudRateContainer,The following statement contains a magic number: printerBaudRateHelpMessage.Margin = new BorderDouble(top: 10);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,GetBaudRateWidget,The following statement contains a magic number: BorderDouble baudRateMargin = new BorderDouble(3' 3' 5' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,GetBaudRateWidget,The following statement contains a magic number: BorderDouble baudRateMargin = new BorderDouble(3' 3' 5' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepBaudRate,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepBaudRate.cs,GetBaudRateWidget,The following statement contains a magic number: BorderDouble baudRateMargin = new BorderDouble(3' 3' 5' 0);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortContainer,The following statement contains a magic number: BorderDouble elementMargin = new BorderDouble(top: 3);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortContainer,The following statement contains a magic number: var comPortLabel = new TextWidget("Serial Port".Localize() + ":"' 0' 0' 12)  			{  				TextColor = theme.TextColor'  				Margin = new BorderDouble(0' 0' 0' 10)'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortContainer,The following statement contains a magic number: var comPortLabel = new TextWidget("Serial Port".Localize() + ":"' 0' 0' 12)  			{  				TextColor = theme.TextColor'  				Margin = new BorderDouble(0' 0' 0' 10)'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortContainer,The following statement contains a magic number: printerComPortError = new TextWidget("Currently available serial ports.".Localize()' 0' 0' 10)  			{  				TextColor = theme.TextColor'  				AutoExpandBoundsToText = true  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortContainer,The following statement contains a magic number: printerComPortHelpLink = new LinkLabel("What's this?".Localize()' theme)  			{  				Margin = new BorderDouble(left: 5)'  				VAnchor = VAnchor.Bottom  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortContainer,The following statement contains a magic number: printerComPortHelpMessage = new TextWidget("The 'Serial Port' section lists all available serial\nports on your device. Changing which USB port the printer\nis connected to may change the associated serial port.\n\nTip: If you are uncertain' unplug/plug in your printer\nand hit refresh. The new port that appears should be\nyour printer.".Localize()' 0' 0' 10)  			{  				TextColor = theme.TextColor'  				Margin = new BorderDouble(top: 10)'  				Visible = false  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortContainer,The following statement contains a magic number: printerComPortHelpMessage = new TextWidget("The 'Serial Port' section lists all available serial\nports on your device. Changing which USB port the printer\nis connected to may change the associated serial port.\n\nTip: If you are uncertain' unplug/plug in your printer\nand hit refresh. The new port that appears should be\nyour printer.".Localize()' 0' 0' 10)  			{  				TextColor = theme.TextColor'  				Margin = new BorderDouble(top: 10)'  				Visible = false  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateSerialPortControls,The following statement contains a magic number: var comPortOption = new TextWidget("No COM ports available".Localize())  				{  					Margin = new BorderDouble(3' 6' 5' 6)'  					TextColor = theme.TextColor  				};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateSerialPortControls,The following statement contains a magic number: var comPortOption = new TextWidget("No COM ports available".Localize())  				{  					Margin = new BorderDouble(3' 6' 5' 6)'  					TextColor = theme.TextColor  				};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateSerialPortControls,The following statement contains a magic number: var comPortOption = new TextWidget("No COM ports available".Localize())  				{  					Margin = new BorderDouble(3' 6' 5' 6)'  					TextColor = theme.TextColor  				};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateSerialPortControls,The following statement contains a magic number: var comPortOption = new TextWidget("No COM ports available".Localize())  				{  					Margin = new BorderDouble(3' 6' 5' 6)'  					TextColor = theme.TextColor  				};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortOption,The following statement contains a magic number: return new SerialPortIndexRadioButton(portName' portName)  			{  				HAnchor = HAnchor.Left'  				Margin = new BorderDouble(3' 3' 5' 3)'  				TextColor = theme.TextColor'  				Checked = isActivePrinterPort  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortOption,The following statement contains a magic number: return new SerialPortIndexRadioButton(portName' portName)  			{  				HAnchor = HAnchor.Left'  				Margin = new BorderDouble(3' 3' 5' 3)'  				TextColor = theme.TextColor'  				Checked = isActivePrinterPort  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortOption,The following statement contains a magic number: return new SerialPortIndexRadioButton(portName' portName)  			{  				HAnchor = HAnchor.Left'  				Margin = new BorderDouble(3' 3' 5' 3)'  				TextColor = theme.TextColor'  				Checked = isActivePrinterPort  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortManual,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortManual.cs,CreateComPortOption,The following statement contains a magic number: return new SerialPortIndexRadioButton(portName' portName)  			{  				HAnchor = HAnchor.Left'  				Margin = new BorderDouble(3' 3' 5' 3)'  				TextColor = theme.TextColor'  				Checked = isActivePrinterPort  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The following statement contains a magic number: var container = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				VAnchor = VAnchor.Stretch'  				Margin = new BorderDouble(5)'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The following statement contains a magic number: var elementMargin = new BorderDouble(top: 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The following statement contains a magic number: var printerMessageOne = new TextWidget("MatterControl will now attempt to auto-detect printer.".Localize()' 0' 0' 10)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The following statement contains a magic number: var printerMessageTwo = new TextWidget(string.Format("1.) {0} ({1})."' "Disconnect printer".Localize()' "if currently connected".Localize())' 0' 0' 12)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The following statement contains a magic number: var printerMessageThree = new TextWidget(string.Format("2.) {0} '{1}'."' "Press".Localize()' "Continue".Localize())' 0' 0' 12)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The following statement contains a magic number: container.AddChild(new ImageWidget(removeImage)  			{  				HAnchor = HAnchor.Center'  				Margin = new BorderDouble(0' 10)'  			});
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The following statement contains a magic number: var setupManualConfigurationOrSkipConnectionWidget = new TextWidget("You can also".Localize() + ":"' 0' 0' 10)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The following statement contains a magic number: var manualLink = new LinkLabel("Manually Configure Connection".Localize()' theme)  			{  				Margin = new BorderDouble(0' 5)'  				TextColor = theme.TextColor  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The following statement contains a magic number: var printerMessageFour = new TextWidget("or".Localize()' 0' 0' 10)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortOne,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortOne.cs,SetupStepComPortOne,The following statement contains a magic number: var skipConnectionLink = new LinkLabel("Skip Connection Setup".Localize()' theme)  			{  				Margin = new BorderDouble(0' 8)'  				TextColor = theme.TextColor  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: var container = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				VAnchor = VAnchor.Stretch'  				Margin = new BorderDouble(5)  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: var elementMargin = new BorderDouble(top: 5);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: var printerMessageOne = new TextWidget("MatterControl will now attempt to auto-detect printer.".Localize()' 0' 0' 10)  			{  				Margin = elementMargin'  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: var printerMessageFour = new TextWidget(string.Format("1.) {0}."' "Connect printer (make sure it is on)".Localize())' 0' 0' 12)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: var printerMessageFive = new TextWidget(string.Format("2.) {0} '{1}'."' "Press".Localize()' "Connect".Localize())' 0' 0' 12)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: printerErrorMessage = new TextWidget(""' 0' 0' 10)  			{  				AutoExpandBoundsToText = true'  				TextColor = Color.Red'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepComPortTwo,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepComPortTwo.cs,createPrinterConnectionMessageContainer,The following statement contains a magic number: container.AddChild(new ImageWidget(removeImage)  			{  				HAnchor = HAnchor.Center'  				Margin = new BorderDouble(0' 10)'  			});
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,SetupStepMakeModelName,The following statement contains a magic number: this.WindowSize = new VectorMath.Vector2(800' 600);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,SetupStepMakeModelName,The following statement contains a magic number: this.WindowSize = new VectorMath.Vector2(800' 600);
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,CreateSelectionContainer,The following statement contains a magic number: var sectionLabel = new TextWidget(labelText' 0' 0' 12)  			{  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,CreateSelectionContainer,The following statement contains a magic number: var validationTextWidget = new TextWidget(validationMessage' 0' 0' 10)  			{  				TextColor = theme.PrimaryAccentColor'  				HAnchor = HAnchor.Stretch'  				Margin = elementMargin  			};
Magic Number,MatterHackers.MatterControl.PrinterControls.PrinterConnections,SetupStepMakeModelName,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\PrinterConnections\SetupStepMakeModelName.cs,CreateSelectionContainer,The following statement contains a magic number: var container = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(0' 5)'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl.Tour,StepIndicator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\CarouselIndicators.cs,StepIndicator,The following statement contains a magic number: this.Width = 10;
Magic Number,MatterHackers.MatterControl.Tour,StepIndicator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\CarouselIndicators.cs,StepIndicator,The following statement contains a magic number: this.Height = 10;
Magic Number,MatterHackers.MatterControl.Tour,StepIndicator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\CarouselIndicators.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(this.LocalBounds.Center' (this.Width - 3) / 2' this.Color);
Magic Number,MatterHackers.MatterControl.Tour,StepIndicator,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\CarouselIndicators.cs,OnDraw,The following statement contains a magic number: graphics2D.Circle(this.LocalBounds.Center' (this.Width - 3) / 2' this.Color);
Magic Number,MatterHackers.MatterControl.Tour,TourOverlay,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourOverlay.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(overlayMinusTargetRect' new Color(Color.Black' 180));
Magic Number,MatterHackers.MatterControl.Tour,TourOverlay,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourOverlay.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(new Stroke(new RoundedRect(targetBounds' 0)' 2)' Color.White.WithAlpha(50));
Magic Number,MatterHackers.MatterControl.Tour,TourOverlay,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourOverlay.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(new Stroke(new RoundedRect(targetBounds' 0)' 2)' Color.White.WithAlpha(50));
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,TourPopover,The following statement contains a magic number: var row = new GuiWidget()  			{  				Margin = new BorderDouble(5)'  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit  			};
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,TourPopover,The following statement contains a magic number: var title = new TextWidget(productTour.ActiveItem.Title' pointSize: theme.DefaultFontSize' textColor: theme.PrimaryAccentColor)  			{  				HAnchor = HAnchor.Left'  				Margin = new BorderDouble(top: 4' left: 4)'  				VAnchor = VAnchor.Center'  			};
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,TourPopover,The following statement contains a magic number: var title = new TextWidget(productTour.ActiveItem.Title' pointSize: theme.DefaultFontSize' textColor: theme.PrimaryAccentColor)  			{  				HAnchor = HAnchor.Left'  				Margin = new BorderDouble(top: 4' left: 4)'  				VAnchor = VAnchor.Center'  			};
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,TourPopover,The following statement contains a magic number: var targetCenterX = targetWidget.Width / 2;
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,TourPopover,The following statement contains a magic number: var targetCenterY = targetWidget.Height / 2;
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,TourPopover,The following statement contains a magic number: targetBounds.Bottom < totalBounds.Height / 2
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,TourPopover,The following statement contains a magic number: this.TagColor = theme.ResolveColor(theme.BackgroundColor' theme.AccentMimimalOverlay.WithAlpha(50));
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,CreateBodyWidgets,The following statement contains a magic number: body.AddChild(new WrappedTextWidget(productTour.ActiveItem.Description' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  			{  				Margin = 5'  				HAnchor = HAnchor.Stretch  			});
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,CreateBodyWidgets,The following statement contains a magic number: var buttonRow = new FlowLayoutWidget()  			{  				HAnchor = HAnchor.Stretch'  				Margin = new BorderDouble(0' 0' 0' 5)  			};
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,CreateBodyWidgets,The following statement contains a magic number: var prevButton = new ArrowButton("Prev".Localize()' ArrowDirection.Left' theme' pointSize: theme.DefaultFontSize - 2)  			{  				Height = theme.ButtonHeight - 4'  				Padding = theme.TextButtonPadding.Clone(left: theme.TextButtonPadding.Left + 8)  			};
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,CreateBodyWidgets,The following statement contains a magic number: var prevButton = new ArrowButton("Prev".Localize()' ArrowDirection.Left' theme' pointSize: theme.DefaultFontSize - 2)  			{  				Height = theme.ButtonHeight - 4'  				Padding = theme.TextButtonPadding.Clone(left: theme.TextButtonPadding.Left + 8)  			};
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,CreateBodyWidgets,The following statement contains a magic number: var prevButton = new ArrowButton("Prev".Localize()' ArrowDirection.Left' theme' pointSize: theme.DefaultFontSize - 2)  			{  				Height = theme.ButtonHeight - 4'  				Padding = theme.TextButtonPadding.Clone(left: theme.TextButtonPadding.Left + 8)  			};
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,CreateBodyWidgets,The following statement contains a magic number: var nextButton = new ArrowButton("Next".Localize()' ArrowDirection.Right' theme' pointSize: theme.DefaultFontSize - 2)  			{  				Height = theme.ButtonHeight - 4'  				Padding = theme.TextButtonPadding.Clone(right: theme.TextButtonPadding.Right + 8)  			};
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,CreateBodyWidgets,The following statement contains a magic number: var nextButton = new ArrowButton("Next".Localize()' ArrowDirection.Right' theme' pointSize: theme.DefaultFontSize - 2)  			{  				Height = theme.ButtonHeight - 4'  				Padding = theme.TextButtonPadding.Clone(right: theme.TextButtonPadding.Right + 8)  			};
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,CreateBodyWidgets,The following statement contains a magic number: var nextButton = new ArrowButton("Next".Localize()' ArrowDirection.Right' theme' pointSize: theme.DefaultFontSize - 2)  			{  				Height = theme.ButtonHeight - 4'  				Padding = theme.TextButtonPadding.Clone(right: theme.TextButtonPadding.Right + 8)  			};
Magic Number,MatterHackers.MatterControl.Tour,TourPopover,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,CreateBodyWidgets,The following statement contains a magic number: body.Size = new Vector2(280' body.Height);
Magic Number,MatterHackers.MatterControl.Tour,ArrowButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,ArrowButton,The following statement contains a magic number: var rightArrow = AggContext.StaticData.LoadIcon("fa-angle-right_12.png"' 10' 10' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.Tour,ArrowButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,ArrowButton,The following statement contains a magic number: var rightArrow = AggContext.StaticData.LoadIcon("fa-angle-right_12.png"' 10' 10' theme.InvertIcons);
Magic Number,MatterHackers.MatterControl.Tour,ArrowButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,OnDraw,The following statement contains a magic number: var centerY = (this.Height / 2) - (this.Image.Height / 2) + bounds.Bottom;
Magic Number,MatterHackers.MatterControl.Tour,ArrowButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,OnDraw,The following statement contains a magic number: var centerY = (this.Height / 2) - (this.Image.Height / 2) + bounds.Bottom;
Magic Number,MatterHackers.MatterControl.Tour,ArrowButton,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\TourPopover.cs,OnDraw,The following statement contains a magic number: graphics2D.Render(this.Image' bounds.Left + 8' centerY);
Magic Number,MatterHackers.MatterControl.Tour,WelcomePage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WelcomePage.cs,WelcomePage,The following statement contains a magic number: this.WindowSize = new Vector2(400' 250);
Magic Number,MatterHackers.MatterControl.Tour,WelcomePage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WelcomePage.cs,WelcomePage,The following statement contains a magic number: this.WindowSize = new Vector2(400' 250);
Magic Number,MatterHackers.MatterControl.Tour,WelcomePage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WelcomePage.cs,WelcomePage,The following statement contains a magic number: var textWidget = new WrappedTextWidget(welcome)  			{  				Margin = new BorderDouble(left: 10' top: 10)'  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl.Tour,WelcomePage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WelcomePage.cs,WelcomePage,The following statement contains a magic number: var textWidget = new WrappedTextWidget(welcome)  			{  				Margin = new BorderDouble(left: 10' top: 10)'  				TextColor = theme.TextColor'  				HAnchor = HAnchor.Stretch  			};
Magic Number,MatterHackers.MatterControl.Tour,WelcomePage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WelcomePage.cs,WelcomePage,The following statement contains a magic number: var showWelcomePageCheckBox = new CheckBox("Don't remind me again".Localize())  			{  				TextColor = theme.TextColor'  				Margin = new BorderDouble(top: 6' left: 6)'  				HAnchor = Agg.UI.HAnchor.Left'  				Checked = ApplicationSettings.Instance.get(UserSettingsKey.ShownWelcomeMessage) == "false"  			};
Magic Number,MatterHackers.MatterControl.Tour,WelcomePage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\WelcomePage.cs,WelcomePage,The following statement contains a magic number: var showWelcomePageCheckBox = new CheckBox("Don't remind me again".Localize())  			{  				TextColor = theme.TextColor'  				Margin = new BorderDouble(top: 6' left: 6)'  				HAnchor = Agg.UI.HAnchor.Left'  				Checked = ApplicationSettings.Instance.get(UserSettingsKey.ShownWelcomeMessage) == "false"  			};
Magic Number,MatterHackers.MatterControl.SetupWizard,PrinterProfileHistoryPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\PrinterProfileHistoryPage.cs,LoadHistoryItems,The following statement contains a magic number: topToBottomStuff.AddChild(new TextWidget(RelativeTime.BlockDescriptions[group.Key]' textColor: theme.TextColor)  					{  						Margin = new BorderDouble(0' 0' 0' 5)'  					});
Magic Number,MatterHackers.MatterControl.SetupWizard,PrinterProfileHistoryPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\PrinterProfileHistoryPage.cs,LoadHistoryItems,The following statement contains a magic number: var profileVersionButton = new RadioButton(time.Value' textColor: theme.TextColor)  						{  							Margin = new BorderDouble(5' 0)'  						};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,EngineMappingsMatterSlice,The following statement contains a magic number: Exports = new Dictionary<string' ExportField>()  			{  				[SettingsKey.bottom_solid_layers] = new ExportField("numberOfBottomLayers")'  				[SettingsKey.perimeters] = new ExportField("numberOfPerimeters")'  				[SettingsKey.raft_extra_distance_around_part] = new ExportField("raftExtraDistanceAroundPart")'  				[SettingsKey.support_material_interface_layers] = new ExportField("supportInterfaceLayers")'  				[SettingsKey.top_solid_layers] = new ExportField("numberOfTopLayers")'  				[SettingsKey.external_perimeter_extrusion_width] = new ExportField("outsidePerimeterExtrusionWidth")'  				[SettingsKey.external_perimeter_speed] = new ExportField("outsidePerimeterSpeed")'  				[SettingsKey.first_layer_speed] = new ExportField("firstLayerSpeed")'  				[SettingsKey.number_of_first_layers] = new ExportField("numberOfFirstLayers")'  				[SettingsKey.raft_print_speed] = new ExportField("raftPrintSpeed")'  				[SettingsKey.top_solid_infill_speed] = new ExportField("topInfillSpeed")'  				[SettingsKey.first_layer_extrusion_width] = new ExportField("firstLayerExtrusionWidth")'  				[SettingsKey.first_layer_height] = new ExportField("firstLayerThickness")'  				[SettingsKey.end_gcode] = new ExportField("endCode")'  				[SettingsKey.retract_before_travel] = new ExportField("minimumTravelToCauseRetraction")'  				[SettingsKey.retract_length] = new ExportField("retractionOnTravel")'  				[SettingsKey.retract_lift] = new ExportField("retractionZHop")'  				[SettingsKey.retract_restart_extra] = new ExportField("unretractExtraExtrusion")'  				[SettingsKey.retract_restart_extra_time_to_apply] = new ExportField("retractRestartExtraTimeToApply")'  				[SettingsKey.retract_speed] = new ExportField("retractionSpeed")'  				[SettingsKey.bridge_speed] = new ExportField("bridgeSpeed")'  				[SettingsKey.air_gap_speed] = new ExportField("airGapSpeed")'  				[SettingsKey.bottom_infill_speed] = new ExportField("bottomInfillSpeed")'  				[SettingsKey.bridge_over_infill] = new ExportField("bridgeOverInfill")'  				[SettingsKey.extrusion_multiplier] = new ExportField("extrusionMultiplier")'  				[SettingsKey.fill_angle] = new ExportField("infillStartingAngle")'  				[SettingsKey.infill_overlap_perimeter] = new ExportField("infillExtendIntoPerimeter")'  				[SettingsKey.infill_speed] = new ExportField("infillSpeed")'  				[SettingsKey.infill_type] = new ExportField("infillType")'  				[SettingsKey.min_extrusion_before_retract] = new ExportField("minimumExtrusionBeforeRetraction")'  				[SettingsKey.min_print_speed] = new ExportField("minimumPrintingSpeed")'  				[SettingsKey.perimeter_speed] = new ExportField("insidePerimetersSpeed")'  				[SettingsKey.raft_air_gap] = new ExportField("raftAirGap")'  				[SettingsKey.max_acceleration] = new ExportField("maxAcceleration")'  				[SettingsKey.max_velocity] = new ExportField("maxVelocity")'  				[SettingsKey.jerk_velocity] = new ExportField("jerkVelocity")'  				[SettingsKey.print_time_estimate_multiplier] = new ExportField(  					"printTimeEstimateMultiplier"'  					(value' settings) =>  					{  						if (double.TryParse(value' out double infillRatio))  						{  							return $"{infillRatio * .01}";  						}    						return "0";  					})'  				// fan settings  				[SettingsKey.min_fan_speed] = new ExportField("fanSpeedMinPercent")'  				[SettingsKey.coast_at_end_distance] = new ExportField("coastAtEndDistance")'  				[SettingsKey.min_fan_speed_layer_time] = new ExportField("minFanSpeedLayerTime")'  				[SettingsKey.max_fan_speed] = new ExportField("fanSpeedMaxPercent")'  				[SettingsKey.max_fan_speed_layer_time] = new ExportField("maxFanSpeedLayerTime")'  				[SettingsKey.bridge_fan_speed] = new ExportField("bridgeFanSpeedPercent")'  				[SettingsKey.disable_fan_first_layers] = new ExportField("firstLayerToAllowFan")'  				// end fan  				[SettingsKey.retract_length_tool_change] = new ExportField("retractionOnExtruderSwitch")'  				[SettingsKey.retract_restart_extra_toolchange] = new ExportField("unretractExtraOnExtruderSwitch")'  				[SettingsKey.reset_long_extrusion] = new ExportField("resetLongExtrusion")'  				[SettingsKey.slowdown_below_layer_time] = new ExportField("minimumLayerTimeSeconds")'  				[SettingsKey.support_air_gap] = new ExportField("supportAirGap")'  				[SettingsKey.support_material_infill_angle] = new ExportField("supportInfillStartingAngle")'  				[SettingsKey.support_material_spacing] = new ExportField("supportLineSpacing")'  				[SettingsKey.support_material_speed] = new ExportField("supportMaterialSpeed")'  				[SettingsKey.interface_layer_speed] = new ExportField("interfaceLayerSpeed")'  				[SettingsKey.support_material_xy_distance] = new ExportField("supportXYDistanceFromObject")'  				[SettingsKey.support_type] = new ExportField("supportType")'  				[SettingsKey.travel_speed] = new ExportField("travelSpeed")'  				[SettingsKey.wipe_shield_distance] = new ExportField("wipeShieldDistanceFromObject")'  				[SettingsKey.wipe_tower_size] = new ExportField("wipeTowerSize")'  				[SettingsKey.filament_diameter] = new ExportField("filamentDiameter")'  				[SettingsKey.layer_height] = new ExportField("layerThickness")'  				[SettingsKey.nozzle_diameter] = new ExportField("extrusionWidth")'  				[SettingsKey.extruder_count] = new ExportField("extruderCount")'  				[SettingsKey.avoid_crossing_perimeters] = new ExportField("avoidCrossingPerimeters")'  				[SettingsKey.create_raft] = new ExportField("enableRaft")'  				[SettingsKey.external_perimeters_first] = new ExportField("outsidePerimetersFirst")'  				[SettingsKey.output_only_first_layer] = new ExportField("outputOnlyFirstLayer")'  				[SettingsKey.retract_when_changing_islands] = new ExportField("retractWhenChangingIslands")'  				[SettingsKey.support_material_create_perimeter] = new ExportField("generateSupportPerimeter")'  				[SettingsKey.expand_thin_walls] = new ExportField("expandThinWalls")'  				[SettingsKey.merge_overlapping_lines] = new ExportField("MergeOverlappingLines")'  				[SettingsKey.fill_thin_gaps] = new ExportField("fillThinGaps")'  				[SettingsKey.spiral_vase] = new ExportField("continuousSpiralOuterPerimeter")'  				[SettingsKey.start_gcode] = new ExportField(  					"startCode"'  					(value' settings) =>  					{  						return StartGCodeGenerator.BuildStartGCode(settings' value);  					})'  				[SettingsKey.layer_gcode] = new ExportField("layerChangeCode")'  				[SettingsKey.fill_density] = new ExportField(  					"infillPercent"'  					(value' settings) =>  					{  						if (double.TryParse(value' out double infillRatio))  						{  							return $"{infillRatio * 100}";  						}    						return "0";  					})'  				[SettingsKey.perimeter_start_end_overlap] = new ExportField(  					"perimeterStartEndOverlapRatio"'  					(value' settings) =>  					{  						if (double.TryParse(value' out double infillRatio))  						{  							return $"{infillRatio * .01}";  						}    						return "0";  					})'  				[SettingsKey.raft_extruder] = new ExportField("raftExtruder")'  				[SettingsKey.support_material_extruder] = new ExportField("supportExtruder")'  				[SettingsKey.support_material_interface_extruder] = new ExportField("supportInterfaceExtruder")'  				// Skirt settings  				[SettingsKey.skirts] = new ExportField("numberOfSkirtLoops")'  				[SettingsKey.skirt_distance] = new ExportField("skirtDistanceFromObject")'  				[SettingsKey.min_skirt_length] = new ExportField("skirtMinLength")'  				// Brim settings  				[SettingsKey.brims] = new ExportField("numberOfBrimLoops")  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,EngineMappingsMatterSlice,The following statement contains a magic number: Exports = new Dictionary<string' ExportField>()  			{  				[SettingsKey.bottom_solid_layers] = new ExportField("numberOfBottomLayers")'  				[SettingsKey.perimeters] = new ExportField("numberOfPerimeters")'  				[SettingsKey.raft_extra_distance_around_part] = new ExportField("raftExtraDistanceAroundPart")'  				[SettingsKey.support_material_interface_layers] = new ExportField("supportInterfaceLayers")'  				[SettingsKey.top_solid_layers] = new ExportField("numberOfTopLayers")'  				[SettingsKey.external_perimeter_extrusion_width] = new ExportField("outsidePerimeterExtrusionWidth")'  				[SettingsKey.external_perimeter_speed] = new ExportField("outsidePerimeterSpeed")'  				[SettingsKey.first_layer_speed] = new ExportField("firstLayerSpeed")'  				[SettingsKey.number_of_first_layers] = new ExportField("numberOfFirstLayers")'  				[SettingsKey.raft_print_speed] = new ExportField("raftPrintSpeed")'  				[SettingsKey.top_solid_infill_speed] = new ExportField("topInfillSpeed")'  				[SettingsKey.first_layer_extrusion_width] = new ExportField("firstLayerExtrusionWidth")'  				[SettingsKey.first_layer_height] = new ExportField("firstLayerThickness")'  				[SettingsKey.end_gcode] = new ExportField("endCode")'  				[SettingsKey.retract_before_travel] = new ExportField("minimumTravelToCauseRetraction")'  				[SettingsKey.retract_length] = new ExportField("retractionOnTravel")'  				[SettingsKey.retract_lift] = new ExportField("retractionZHop")'  				[SettingsKey.retract_restart_extra] = new ExportField("unretractExtraExtrusion")'  				[SettingsKey.retract_restart_extra_time_to_apply] = new ExportField("retractRestartExtraTimeToApply")'  				[SettingsKey.retract_speed] = new ExportField("retractionSpeed")'  				[SettingsKey.bridge_speed] = new ExportField("bridgeSpeed")'  				[SettingsKey.air_gap_speed] = new ExportField("airGapSpeed")'  				[SettingsKey.bottom_infill_speed] = new ExportField("bottomInfillSpeed")'  				[SettingsKey.bridge_over_infill] = new ExportField("bridgeOverInfill")'  				[SettingsKey.extrusion_multiplier] = new ExportField("extrusionMultiplier")'  				[SettingsKey.fill_angle] = new ExportField("infillStartingAngle")'  				[SettingsKey.infill_overlap_perimeter] = new ExportField("infillExtendIntoPerimeter")'  				[SettingsKey.infill_speed] = new ExportField("infillSpeed")'  				[SettingsKey.infill_type] = new ExportField("infillType")'  				[SettingsKey.min_extrusion_before_retract] = new ExportField("minimumExtrusionBeforeRetraction")'  				[SettingsKey.min_print_speed] = new ExportField("minimumPrintingSpeed")'  				[SettingsKey.perimeter_speed] = new ExportField("insidePerimetersSpeed")'  				[SettingsKey.raft_air_gap] = new ExportField("raftAirGap")'  				[SettingsKey.max_acceleration] = new ExportField("maxAcceleration")'  				[SettingsKey.max_velocity] = new ExportField("maxVelocity")'  				[SettingsKey.jerk_velocity] = new ExportField("jerkVelocity")'  				[SettingsKey.print_time_estimate_multiplier] = new ExportField(  					"printTimeEstimateMultiplier"'  					(value' settings) =>  					{  						if (double.TryParse(value' out double infillRatio))  						{  							return $"{infillRatio * .01}";  						}    						return "0";  					})'  				// fan settings  				[SettingsKey.min_fan_speed] = new ExportField("fanSpeedMinPercent")'  				[SettingsKey.coast_at_end_distance] = new ExportField("coastAtEndDistance")'  				[SettingsKey.min_fan_speed_layer_time] = new ExportField("minFanSpeedLayerTime")'  				[SettingsKey.max_fan_speed] = new ExportField("fanSpeedMaxPercent")'  				[SettingsKey.max_fan_speed_layer_time] = new ExportField("maxFanSpeedLayerTime")'  				[SettingsKey.bridge_fan_speed] = new ExportField("bridgeFanSpeedPercent")'  				[SettingsKey.disable_fan_first_layers] = new ExportField("firstLayerToAllowFan")'  				// end fan  				[SettingsKey.retract_length_tool_change] = new ExportField("retractionOnExtruderSwitch")'  				[SettingsKey.retract_restart_extra_toolchange] = new ExportField("unretractExtraOnExtruderSwitch")'  				[SettingsKey.reset_long_extrusion] = new ExportField("resetLongExtrusion")'  				[SettingsKey.slowdown_below_layer_time] = new ExportField("minimumLayerTimeSeconds")'  				[SettingsKey.support_air_gap] = new ExportField("supportAirGap")'  				[SettingsKey.support_material_infill_angle] = new ExportField("supportInfillStartingAngle")'  				[SettingsKey.support_material_spacing] = new ExportField("supportLineSpacing")'  				[SettingsKey.support_material_speed] = new ExportField("supportMaterialSpeed")'  				[SettingsKey.interface_layer_speed] = new ExportField("interfaceLayerSpeed")'  				[SettingsKey.support_material_xy_distance] = new ExportField("supportXYDistanceFromObject")'  				[SettingsKey.support_type] = new ExportField("supportType")'  				[SettingsKey.travel_speed] = new ExportField("travelSpeed")'  				[SettingsKey.wipe_shield_distance] = new ExportField("wipeShieldDistanceFromObject")'  				[SettingsKey.wipe_tower_size] = new ExportField("wipeTowerSize")'  				[SettingsKey.filament_diameter] = new ExportField("filamentDiameter")'  				[SettingsKey.layer_height] = new ExportField("layerThickness")'  				[SettingsKey.nozzle_diameter] = new ExportField("extrusionWidth")'  				[SettingsKey.extruder_count] = new ExportField("extruderCount")'  				[SettingsKey.avoid_crossing_perimeters] = new ExportField("avoidCrossingPerimeters")'  				[SettingsKey.create_raft] = new ExportField("enableRaft")'  				[SettingsKey.external_perimeters_first] = new ExportField("outsidePerimetersFirst")'  				[SettingsKey.output_only_first_layer] = new ExportField("outputOnlyFirstLayer")'  				[SettingsKey.retract_when_changing_islands] = new ExportField("retractWhenChangingIslands")'  				[SettingsKey.support_material_create_perimeter] = new ExportField("generateSupportPerimeter")'  				[SettingsKey.expand_thin_walls] = new ExportField("expandThinWalls")'  				[SettingsKey.merge_overlapping_lines] = new ExportField("MergeOverlappingLines")'  				[SettingsKey.fill_thin_gaps] = new ExportField("fillThinGaps")'  				[SettingsKey.spiral_vase] = new ExportField("continuousSpiralOuterPerimeter")'  				[SettingsKey.start_gcode] = new ExportField(  					"startCode"'  					(value' settings) =>  					{  						return StartGCodeGenerator.BuildStartGCode(settings' value);  					})'  				[SettingsKey.layer_gcode] = new ExportField("layerChangeCode")'  				[SettingsKey.fill_density] = new ExportField(  					"infillPercent"'  					(value' settings) =>  					{  						if (double.TryParse(value' out double infillRatio))  						{  							return $"{infillRatio * 100}";  						}    						return "0";  					})'  				[SettingsKey.perimeter_start_end_overlap] = new ExportField(  					"perimeterStartEndOverlapRatio"'  					(value' settings) =>  					{  						if (double.TryParse(value' out double infillRatio))  						{  							return $"{infillRatio * .01}";  						}    						return "0";  					})'  				[SettingsKey.raft_extruder] = new ExportField("raftExtruder")'  				[SettingsKey.support_material_extruder] = new ExportField("supportExtruder")'  				[SettingsKey.support_material_interface_extruder] = new ExportField("supportInterfaceExtruder")'  				// Skirt settings  				[SettingsKey.skirts] = new ExportField("numberOfSkirtLoops")'  				[SettingsKey.skirt_distance] = new ExportField("skirtDistanceFromObject")'  				[SettingsKey.min_skirt_length] = new ExportField("skirtMinLength")'  				// Brim settings  				[SettingsKey.brims] = new ExportField("numberOfBrimLoops")  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,EngineMappingsMatterSlice,The following statement contains a magic number: Exports = new Dictionary<string' ExportField>()  			{  				[SettingsKey.bottom_solid_layers] = new ExportField("numberOfBottomLayers")'  				[SettingsKey.perimeters] = new ExportField("numberOfPerimeters")'  				[SettingsKey.raft_extra_distance_around_part] = new ExportField("raftExtraDistanceAroundPart")'  				[SettingsKey.support_material_interface_layers] = new ExportField("supportInterfaceLayers")'  				[SettingsKey.top_solid_layers] = new ExportField("numberOfTopLayers")'  				[SettingsKey.external_perimeter_extrusion_width] = new ExportField("outsidePerimeterExtrusionWidth")'  				[SettingsKey.external_perimeter_speed] = new ExportField("outsidePerimeterSpeed")'  				[SettingsKey.first_layer_speed] = new ExportField("firstLayerSpeed")'  				[SettingsKey.number_of_first_layers] = new ExportField("numberOfFirstLayers")'  				[SettingsKey.raft_print_speed] = new ExportField("raftPrintSpeed")'  				[SettingsKey.top_solid_infill_speed] = new ExportField("topInfillSpeed")'  				[SettingsKey.first_layer_extrusion_width] = new ExportField("firstLayerExtrusionWidth")'  				[SettingsKey.first_layer_height] = new ExportField("firstLayerThickness")'  				[SettingsKey.end_gcode] = new ExportField("endCode")'  				[SettingsKey.retract_before_travel] = new ExportField("minimumTravelToCauseRetraction")'  				[SettingsKey.retract_length] = new ExportField("retractionOnTravel")'  				[SettingsKey.retract_lift] = new ExportField("retractionZHop")'  				[SettingsKey.retract_restart_extra] = new ExportField("unretractExtraExtrusion")'  				[SettingsKey.retract_restart_extra_time_to_apply] = new ExportField("retractRestartExtraTimeToApply")'  				[SettingsKey.retract_speed] = new ExportField("retractionSpeed")'  				[SettingsKey.bridge_speed] = new ExportField("bridgeSpeed")'  				[SettingsKey.air_gap_speed] = new ExportField("airGapSpeed")'  				[SettingsKey.bottom_infill_speed] = new ExportField("bottomInfillSpeed")'  				[SettingsKey.bridge_over_infill] = new ExportField("bridgeOverInfill")'  				[SettingsKey.extrusion_multiplier] = new ExportField("extrusionMultiplier")'  				[SettingsKey.fill_angle] = new ExportField("infillStartingAngle")'  				[SettingsKey.infill_overlap_perimeter] = new ExportField("infillExtendIntoPerimeter")'  				[SettingsKey.infill_speed] = new ExportField("infillSpeed")'  				[SettingsKey.infill_type] = new ExportField("infillType")'  				[SettingsKey.min_extrusion_before_retract] = new ExportField("minimumExtrusionBeforeRetraction")'  				[SettingsKey.min_print_speed] = new ExportField("minimumPrintingSpeed")'  				[SettingsKey.perimeter_speed] = new ExportField("insidePerimetersSpeed")'  				[SettingsKey.raft_air_gap] = new ExportField("raftAirGap")'  				[SettingsKey.max_acceleration] = new ExportField("maxAcceleration")'  				[SettingsKey.max_velocity] = new ExportField("maxVelocity")'  				[SettingsKey.jerk_velocity] = new ExportField("jerkVelocity")'  				[SettingsKey.print_time_estimate_multiplier] = new ExportField(  					"printTimeEstimateMultiplier"'  					(value' settings) =>  					{  						if (double.TryParse(value' out double infillRatio))  						{  							return $"{infillRatio * .01}";  						}    						return "0";  					})'  				// fan settings  				[SettingsKey.min_fan_speed] = new ExportField("fanSpeedMinPercent")'  				[SettingsKey.coast_at_end_distance] = new ExportField("coastAtEndDistance")'  				[SettingsKey.min_fan_speed_layer_time] = new ExportField("minFanSpeedLayerTime")'  				[SettingsKey.max_fan_speed] = new ExportField("fanSpeedMaxPercent")'  				[SettingsKey.max_fan_speed_layer_time] = new ExportField("maxFanSpeedLayerTime")'  				[SettingsKey.bridge_fan_speed] = new ExportField("bridgeFanSpeedPercent")'  				[SettingsKey.disable_fan_first_layers] = new ExportField("firstLayerToAllowFan")'  				// end fan  				[SettingsKey.retract_length_tool_change] = new ExportField("retractionOnExtruderSwitch")'  				[SettingsKey.retract_restart_extra_toolchange] = new ExportField("unretractExtraOnExtruderSwitch")'  				[SettingsKey.reset_long_extrusion] = new ExportField("resetLongExtrusion")'  				[SettingsKey.slowdown_below_layer_time] = new ExportField("minimumLayerTimeSeconds")'  				[SettingsKey.support_air_gap] = new ExportField("supportAirGap")'  				[SettingsKey.support_material_infill_angle] = new ExportField("supportInfillStartingAngle")'  				[SettingsKey.support_material_spacing] = new ExportField("supportLineSpacing")'  				[SettingsKey.support_material_speed] = new ExportField("supportMaterialSpeed")'  				[SettingsKey.interface_layer_speed] = new ExportField("interfaceLayerSpeed")'  				[SettingsKey.support_material_xy_distance] = new ExportField("supportXYDistanceFromObject")'  				[SettingsKey.support_type] = new ExportField("supportType")'  				[SettingsKey.travel_speed] = new ExportField("travelSpeed")'  				[SettingsKey.wipe_shield_distance] = new ExportField("wipeShieldDistanceFromObject")'  				[SettingsKey.wipe_tower_size] = new ExportField("wipeTowerSize")'  				[SettingsKey.filament_diameter] = new ExportField("filamentDiameter")'  				[SettingsKey.layer_height] = new ExportField("layerThickness")'  				[SettingsKey.nozzle_diameter] = new ExportField("extrusionWidth")'  				[SettingsKey.extruder_count] = new ExportField("extruderCount")'  				[SettingsKey.avoid_crossing_perimeters] = new ExportField("avoidCrossingPerimeters")'  				[SettingsKey.create_raft] = new ExportField("enableRaft")'  				[SettingsKey.external_perimeters_first] = new ExportField("outsidePerimetersFirst")'  				[SettingsKey.output_only_first_layer] = new ExportField("outputOnlyFirstLayer")'  				[SettingsKey.retract_when_changing_islands] = new ExportField("retractWhenChangingIslands")'  				[SettingsKey.support_material_create_perimeter] = new ExportField("generateSupportPerimeter")'  				[SettingsKey.expand_thin_walls] = new ExportField("expandThinWalls")'  				[SettingsKey.merge_overlapping_lines] = new ExportField("MergeOverlappingLines")'  				[SettingsKey.fill_thin_gaps] = new ExportField("fillThinGaps")'  				[SettingsKey.spiral_vase] = new ExportField("continuousSpiralOuterPerimeter")'  				[SettingsKey.start_gcode] = new ExportField(  					"startCode"'  					(value' settings) =>  					{  						return StartGCodeGenerator.BuildStartGCode(settings' value);  					})'  				[SettingsKey.layer_gcode] = new ExportField("layerChangeCode")'  				[SettingsKey.fill_density] = new ExportField(  					"infillPercent"'  					(value' settings) =>  					{  						if (double.TryParse(value' out double infillRatio))  						{  							return $"{infillRatio * 100}";  						}    						return "0";  					})'  				[SettingsKey.perimeter_start_end_overlap] = new ExportField(  					"perimeterStartEndOverlapRatio"'  					(value' settings) =>  					{  						if (double.TryParse(value' out double infillRatio))  						{  							return $"{infillRatio * .01}";  						}    						return "0";  					})'  				[SettingsKey.raft_extruder] = new ExportField("raftExtruder")'  				[SettingsKey.support_material_extruder] = new ExportField("supportExtruder")'  				[SettingsKey.support_material_interface_extruder] = new ExportField("supportInterfaceExtruder")'  				// Skirt settings  				[SettingsKey.skirts] = new ExportField("numberOfSkirtLoops")'  				[SettingsKey.skirt_distance] = new ExportField("skirtDistanceFromObject")'  				[SettingsKey.min_skirt_length] = new ExportField("skirtMinLength")'  				// Brim settings  				[SettingsKey.brims] = new ExportField("numberOfBrimLoops")  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,ValidateFile,The following statement contains a magic number: int bufferSize = 32000;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,ValidateFile,The following statement contains a magic number: int padding = 100;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,ValidateFile,The following statement contains a magic number: var buffer = new byte[bufferSize + 100];
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,Slice,The following statement contains a magic number: j < 4
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,Slice,The following statement contains a magic number: i < 4
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,Slice,The following statement contains a magic number: int bufferSize = 32000;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,HasCompletedSuccessfully,The following statement contains a magic number: int pageSize = 10000;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,EngineMappingsMatterSlice,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\EngineMappingsMatterSlice.cs,AddObjectsForExtruder,The following statement contains a magic number: var xyScale = (aabbForSize.XSize + 2 * SupportGenerator.ColumnReduceAmount) / aabbForSize.XSize;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,PresetSelectorWidget,The following statement contains a magic number: pullDownContainer = new GuiWidget()  			{  				HAnchor = createAsFit ? HAnchor.Fit : HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Border = new BorderDouble(left: 3)'  				BorderColor = accentColor'  				Margin = new BorderDouble(top: 6)'  				Padding = new BorderDouble(left: (accentColor != Color.Transparent) ? 6 : 0)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,PresetSelectorWidget,The following statement contains a magic number: pullDownContainer = new GuiWidget()  			{  				HAnchor = createAsFit ? HAnchor.Fit : HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Border = new BorderDouble(left: 3)'  				BorderColor = accentColor'  				Margin = new BorderDouble(top: 6)'  				Padding = new BorderDouble(left: (accentColor != Color.Transparent) ? 6 : 0)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,PresetSelectorWidget,The following statement contains a magic number: pullDownContainer = new GuiWidget()  			{  				HAnchor = createAsFit ? HAnchor.Fit : HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Border = new BorderDouble(left: 3)'  				BorderColor = accentColor'  				Margin = new BorderDouble(top: 6)'  				Padding = new BorderDouble(left: (accentColor != Color.Transparent) ? 6 : 0)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,GetPulldownContainer,The following statement contains a magic number: editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Edit Selected Setting".Localize()'  				Enabled = dropDownList.SelectedIndex != -1'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(left: 6)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,GetPulldownContainer,The following statement contains a magic number: editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Edit Selected Setting".Localize()'  				Enabled = dropDownList.SelectedIndex != -1'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(left: 6)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,GetPulldownContainer,The following statement contains a magic number: editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  			{  				ToolTipText = "Edit Selected Setting".Localize()'  				Enabled = dropDownList.SelectedIndex != -1'  				VAnchor = VAnchor.Center'  				Margin = new BorderDouble(left: 6)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,OnDrawBackground,The following statement contains a magic number: graphics2D.Render(new RoundedRect(this.LocalBounds' 5)' this.BackgroundColor);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,CreateDropdown,The following statement contains a magic number: var dropDownList = new MHDropDownList(defaultMenuItemText' theme' maxHeight: 300' useLeftIcons: true)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Center'  				MenuItemsPadding = new BorderDouble(10' 7' 7' 7)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,CreateDropdown,The following statement contains a magic number: var dropDownList = new MHDropDownList(defaultMenuItemText' theme' maxHeight: 300' useLeftIcons: true)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Center'  				MenuItemsPadding = new BorderDouble(10' 7' 7' 7)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,CreateDropdown,The following statement contains a magic number: var dropDownList = new MHDropDownList(defaultMenuItemText' theme' maxHeight: 300' useLeftIcons: true)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Center'  				MenuItemsPadding = new BorderDouble(10' 7' 7' 7)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,CreateDropdown,The following statement contains a magic number: var dropDownList = new MHDropDownList(defaultMenuItemText' theme' maxHeight: 300' useLeftIcons: true)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Center'  				MenuItemsPadding = new BorderDouble(10' 7' 7' 7)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,CreateDropdown,The following statement contains a magic number: var dropDownList = new MHDropDownList(defaultMenuItemText' theme' maxHeight: 300' useLeftIcons: true)  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Center'  				MenuItemsPadding = new BorderDouble(10' 7' 7' 7)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,CreateDropdown,The following statement contains a magic number: MenuItem addNewPreset = dropDownList.AddItem(  				AggContext.StaticData.LoadIcon("icon_plus.png"' 16' 16)'  				"Add New Setting".Localize() + "..."'  				"new"'  				pointSize: theme.DefaultFontSize);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetSelectorWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetSelectorWidget.cs,CreateDropdown,The following statement contains a magic number: MenuItem addNewPreset = dropDownList.AddItem(  				AggContext.StaticData.LoadIcon("icon_plus.png"' 16' 16)'  				"Add New Setting".Localize() + "..."'  				"new"'  				pointSize: theme.DefaultFontSize);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetsToolbar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetsToolbar.cs,PresetsToolbar,The following statement contains a magic number: this.AddChild(new GuiWidget(8' 0));
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,PresetsToolbar,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\PresetsToolbar.cs,PresetsToolbar,The following statement contains a magic number: this.Height = 60 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,ReloadActiveUser,The following statement contains a magic number: UiThread.RunOnIdle(() =>  				{  					// Delay then load user tabs  					ApplicationController.Instance.RestoreUserTabs().ConfigureAwait(false);  				}' .2);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,GetFirstValidHistoryItem,The following statement contains a magic number: recentProfileHistoryItems.OrderByDescending(kvp => kvp.Key).Skip(1).Take(5)
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicePresetsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SlicePresetsWindow\SlicePresetsPage.cs,SlicePresetsPage,The following statement contains a magic number: this.WindowSize = new Vector2(640' 480);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SlicePresetsPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SlicePresetsWindow\SlicePresetsPage.cs,SlicePresetsPage,The following statement contains a magic number: this.WindowSize = new Vector2(640' 480);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,SliceSettingsRow,The following statement contains a magic number: this.AddChild(unitsArea = new GuiWidget()  				{  					HAnchor = HAnchor.Absolute'  					VAnchor = VAnchor.Fit | VAnchor.Center'  					Width = 50 * GuiWidget.DeviceScale'  					DebugShowBounds = debugLayout  				});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,SliceSettingsRow,The following statement contains a magic number: unitsArea.AddChild(  						new WrappedTextWidget(settingData.Units.Localize()' pointSize: theme.FontSize8' textColor: theme.TextColor)  						{  							Margin = new BorderDouble(5' 0)'  						});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,SliceSettingsRow,The following statement contains a magic number: restoreArea = new GuiWidget()  				{  					HAnchor = HAnchor.Absolute'  					VAnchor = VAnchor.Fit | VAnchor.Center'  					Width = 20 * GuiWidget.DeviceScale'  					DebugShowBounds = debugLayout  				};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,ExtendPopover,The following statement contains a magic number: var column = new FlowLayoutWidget(FlowDirection.TopToBottom)  					{  						Margin = new BorderDouble(top: 8)'  						HAnchor = HAnchor.Stretch  					};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,ExtendPopover,The following statement contains a magic number: double ratio = (double)percent / 100;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,ExtendPopover,The following statement contains a magic number: var errorsPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  				{  					Padding = theme.DefaultContainerPadding / 2'  					HAnchor = HAnchor.Stretch'  					VAnchor = VAnchor.Fit  				};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,ExtendPopover,The following statement contains a magic number: var errorPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  					{  						Margin = new BorderDouble(0' 5)  					};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,ExtendPopover,The following statement contains a magic number: errorsPanel.AddChild(  						new WrappedTextWidget(item.Error' pointSize: theme.DefaultFontSize - 1' textColor: Color.Red)  						{  							Margin = new BorderDouble(bottom: 3)  						});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,ExtendPopover,The following statement contains a magic number: popover.AddChild(new TextWidget(settingData.SlicerConfigName + mapsTo' pointSize: theme.DefaultFontSize - 1' textColor: AppContext.Theme.TextColor)  			{  				Margin = new BorderDouble(top: 10)  			});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ValidationWrapper,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,ValidationWrapper,The following statement contains a magic number: this.Padding = new BorderDouble(left: 5);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: settingsControlBar = new PresetsToolbar(printer' theme)  			{  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(8' 12' 8' 8)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: settingsControlBar = new PresetsToolbar(printer' theme)  			{  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(8' 12' 8' 8)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: settingsControlBar = new PresetsToolbar(printer' theme)  			{  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(8' 12' 8' 8)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsWidget,The following statement contains a magic number: settingsControlBar = new PresetsToolbar(printer' theme)  			{  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(8' 12' 8' 8)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsTabView,The following statement contains a magic number: searchPanel.searchInput.Margin = new BorderDouble(3' 0);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,SliceSettingsTabView,The following statement contains a magic number: searchPanel.AddChild(filteredItemsHeading = new TextWidget(justMySettingsTitle' pointSize: theme.DefaultFontSize' textColor: theme.TextColor)  				{  					Margin = new BorderDouble(left: 10)'  					HAnchor = HAnchor.Left'  					VAnchor = VAnchor.Center'  					Visible = false  				}' 0);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateGroupSection,The following statement contains a magic number: var groupPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				VAnchor = VAnchor.Fit'  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(6' 4' 6' 0)'  				Name = "GroupPanel" + groupPanelCount++  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateGroupSection,The following statement contains a magic number: var groupPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				VAnchor = VAnchor.Fit'  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(6' 4' 6' 0)'  				Name = "GroupPanel" + groupPanelCount++  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateGroupSection,The following statement contains a magic number: var groupPanel = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				VAnchor = VAnchor.Fit'  				HAnchor = HAnchor.Stretch'  				Padding = new BorderDouble(6' 4' 6' 0)'  				Name = "GroupPanel" + groupPanelCount++  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateToggleFieldForSection,The following statement contains a magic number: uiField.Content.Margin = uiField.Content.Margin.Clone(right: 15);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: var row = new FlowLayoutWidget()  				{  					BackgroundColor = theme.SlightShade'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.Stretch'  				};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: var row = new FlowLayoutWidget()  				{  					BackgroundColor = theme.SlightShade'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.Stretch'  				};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: var row = new FlowLayoutWidget()  				{  					BackgroundColor = theme.SlightShade'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.Stretch'  				};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: var row = new FlowLayoutWidget()  				{  					BackgroundColor = theme.SlightShade'  					Padding = new BorderDouble(5)'  					Margin = new BorderDouble(3' 20' 3' 0)'  					HAnchor = HAnchor.Stretch'  				};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: row.AddChild(new TextWidget(title' pointSize: 9)  					{  						Margin = new BorderDouble(0' 4' 10' 4)'  						TextColor = theme.TextColor'  					});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: row.AddChild(new TextWidget(title' pointSize: 9)  					{  						Margin = new BorderDouble(0' 4' 10' 4)'  						TextColor = theme.TextColor'  					});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: row.AddChild(new TextWidget(title' pointSize: 9)  					{  						Margin = new BorderDouble(0' 4' 10' 4)'  						TextColor = theme.TextColor'  					});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: row.AddChild(new TextWidget(title' pointSize: 9)  					{  						Margin = new BorderDouble(0' 4' 10' 4)'  						TextColor = theme.TextColor'  					});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  					{  						Margin = new BorderDouble(0' 4' 10' 4)'  						TextColor = theme.TextColor'  					});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  					{  						Margin = new BorderDouble(0' 4' 10' 4)'  						TextColor = theme.TextColor'  					});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  					{  						Margin = new BorderDouble(0' 4' 10' 4)'  						TextColor = theme.TextColor'  					});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateOemProfileInfoRow,The following statement contains a magic number: row.AddChild(new TextWidget(lastUpdateTime' pointSize: 9)  					{  						Margin = new BorderDouble(0' 4' 10' 4)'  						TextColor = theme.TextColor'  					});
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateItemRow,The following statement contains a magic number: switch (settingData.DataEditType)  			{  				case SliceSettingData.DataEditTypes.INT:    					var intField = new IntField(theme);  					uiField = intField;    					if (settingData.SlicerConfigName == "extruder_count")  					{  						intField.MaxValue = 4;  						intField.MinValue = 0;  					}    					break;    				case SliceSettingData.DataEditTypes.DOUBLE:  				case SliceSettingData.DataEditTypes.OFFSET:  					uiField = new DoubleField(theme);  					break;    				case SliceSettingData.DataEditTypes.SLICE_ENGINE:  					uiField = new SliceEngineField(printer' theme);  					break;    				case SliceSettingData.DataEditTypes.POSITIVE_DOUBLE:  					if (settingData.SetSettingsOnChange.Count > 0)  					{  						uiField = new BoundDoubleField(settingsContext' settingData' theme);  					}  					else  					{  						uiField = new PositiveDoubleField(theme);  					}  					break;    				case SliceSettingData.DataEditTypes.DOUBLE_OR_PERCENT:  					uiField = new DoubleOrPercentField(theme);  					break;    				case SliceSettingData.DataEditTypes.INT_OR_MM:  					uiField = new IntOrMmField(theme);  					break;    				case SliceSettingData.DataEditTypes.CHECK_BOX:  					uiField = new ToggleboxField(theme);  					useDefaultSavePattern = false;  					uiField.ValueChanged += (s' e) =>  					{  						if (e.UserInitiated)  						{  							ICheckbox checkbox = uiField.Content as ICheckbox;  							string checkedKey = (checkbox.Checked) ? "OnValue" : "OffValue";    							// Linked settings should be updated in all cases (user clicked checkbox' user clicked clear)  							foreach (var setSettingsData in settingData.SetSettingsOnChange)  							{  								if (setSettingsData.TryGetValue(checkedKey' out string targetValue))  								{  									settingsContext.SetValue(setSettingsData["TargetSetting"]' targetValue);  								}  							}    							// Store actual field value  							settingsContext.SetValue(settingData.SlicerConfigName' uiField.Value);  						}  					};  					break;    				case SliceSettingData.DataEditTypes.READONLY_STRING:  					uiField = new ReadOnlyTextField(theme);  					break;    				case SliceSettingData.DataEditTypes.STRING:  				case SliceSettingData.DataEditTypes.WIDE_STRING:  					uiField = new TextField(theme);  					break;    				case SliceSettingData.DataEditTypes.MULTI_LINE_TEXT:  					uiField = new MultilineStringField(theme);  					placeFieldInDedicatedRow = true;  					break;    				case SliceSettingData.DataEditTypes.MARKDOWN_TEXT:  #if !__ANDROID__  					uiField = new MarkdownEditField(theme' settingData.PresentationName);  #endif  					break;    				case SliceSettingData.DataEditTypes.COM_PORT:  					useDefaultSavePattern = false;    					sliceSettingValue = printer.Settings.Helpers.ComPort();    					uiField = new ComPortField(printer' theme);  					uiField.ValueChanged += (s' e) =>  					{  						if (e.UserInitiated)  						{  							printer.Settings.Helpers.SetComPort(uiField.Value);  						}  					};    					break;    				case SliceSettingData.DataEditTypes.LIST:  					uiField = new ListField(theme)  					{  						ListItems = settingData.ListValues.Split(''').ToList()  					};  					break;    				case SliceSettingData.DataEditTypes.HARDWARE_PRESENT:  					uiField = new ToggleboxField(theme);  					break;    				case SliceSettingData.DataEditTypes.VECTOR2:  					uiField = new Vector2Field(theme);  					break;    				case SliceSettingData.DataEditTypes.VECTOR3:  					uiField = new Vector3Field(theme);  					break;    				case SliceSettingData.DataEditTypes.VECTOR4:  					uiField = new Vector4Field(theme);  					break;    				case SliceSettingData.DataEditTypes.BOUNDS:  					uiField = new BoundsField(theme);  					break;    				case SliceSettingData.DataEditTypes.OFFSET3:  					if (settingData.SlicerConfigName == "extruder_offset")  					{  						placeFieldInDedicatedRow = true;  						uiField = new ExtruderOffsetField(printer' settingsContext' settingData.SlicerConfigName' theme.TextColor' theme);  					}  					else  					{  						uiField = new Vector3Field(theme);  					}  					break;  #if !__ANDROID__  				case SliceSettingData.DataEditTypes.IP_LIST:  					uiField = new IpAddessField(printer' theme);  					break;  #endif    				default:  					// Missing Setting  					settingsRow.AddContent(new TextWidget($"Missing the setting for '{settingData.DataEditType}'.")  					{  						TextColor = theme.TextColor'  						BackgroundColor = Color.Red  					});  					break;  			}
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateItemRow,The following statement contains a magic number: var row = new FlowLayoutWidget()  					{  						Name = "row"'  						VAnchor = VAnchor.Fit'  						HAnchor = HAnchor.Stretch'  						MinimumSize = new Vector2(0' 28)'  						BackgroundColor = settingsRow.BackgroundColor'  						Border = settingsRow.Border'  						Padding = settingsRow.Padding'  						Margin = settingsRow.Margin'  					};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsTabView,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsWidget.cs,CreateItemRow,The following statement contains a magic number: var contentWrapper = new GuiWidget  					{  						Name = "contentWrapper"'  						HAnchor = HAnchor.Stretch'  						VAnchor = VAnchor.Fit'  						Padding = new BorderDouble(bottom: 10)'  					};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,BoundDoubleField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\BoundDoubleField.cs,FilterValue,The following statement contains a magic number: double.TryParse(setting.Substring(0' setting.Length - 2)' out double castValue);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ToggleboxField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\CheckboxField.cs,Initialize,The following statement contains a magic number: var pixelWidth = this.ControlWidth + 6;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ComPortField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ComPortField.cs,Initialize,The following statement contains a magic number: dropdownList = new MHDropDownList("None".Localize()' theme' maxHeight: 200)  			{  				ToolTipText = this.HelpText'  				Margin = new BorderDouble()'  				TabIndex = tabIndex'  				Name = "com_port Field"'  				// Prevent droplist interaction when connected  				Enabled = canChangeComPort'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,DropMenuWrappedField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\DropMenuWrappedField.cs,Initialize,The following statement contains a magic number: var selectableOptions = new MHDropDownList("Custom"' theme' maxHeight: 200)  			{  				Margin = new BorderDouble(0' 0' 10' 0)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,DropMenuWrappedField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\DropMenuWrappedField.cs,Initialize,The following statement contains a magic number: var selectableOptions = new MHDropDownList("Custom"' theme' maxHeight: 200)  			{  				Margin = new BorderDouble(0' 0' 10' 0)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ExtruderOffsetField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ExtruderOffsetField.cs,Initialize,The following statement contains a magic number: var column = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(20' 0' 0' 0)'  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ExtruderOffsetField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ExtruderOffsetField.cs,Initialize,The following statement contains a magic number: var row = new FlowLayoutWidget()  				{  					HAnchor = HAnchor.Fit | HAnchor.Right'  					VAnchor = VAnchor.Fit'  					MinimumSize = new Vector2(0' 28)  				};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ExtruderOffsetField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ExtruderOffsetField.cs,Initialize,The following statement contains a magic number: labelWidget.Margin = new BorderDouble(right: 60);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ExtruderOffsetField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ExtruderOffsetField.cs,Initialize,The following statement contains a magic number: field.Content.Margin = new BorderDouble(right: 55);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ExtruderOffsetField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ExtruderOffsetField.cs,ConvertValue,The following statement contains a magic number: xyz.Length == 2
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,IpAddessField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\IpAddessField.cs,Initialize,The following statement contains a magic number: dropdownList = new MHDropDownList(selectedMachine' theme' maxHeight: 200)  			{  				ToolTipText = HelpText'  				Margin = new BorderDouble()'  				TabIndex = tabIndex'    				Enabled = canChangeComPort'  				TextColor = canChangeComPort ? theme.TextColor : new Color(theme.TextColor' 150)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,IpAddessField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\IpAddessField.cs,Initialize,The following statement contains a magic number: dropdownList = new MHDropDownList(selectedMachine' theme' maxHeight: 200)  			{  				ToolTipText = HelpText'  				Margin = new BorderDouble()'  				TabIndex = tabIndex'    				Enabled = canChangeComPort'  				TextColor = canChangeComPort ? theme.TextColor : new Color(theme.TextColor' 150)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,IpAddessField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\IpAddessField.cs,Initialize,The following statement contains a magic number: refreshButton = new IconButton(AggContext.StaticData.LoadIcon("fa-refresh_14.png"' theme.InvertIcons)' theme)  			{  				Margin = new BorderDouble(left: 5)  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,IpAddessField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\IpAddessField.cs,RebuildMenuItems,The following statement contains a magic number: int port = exists ? service.Port:23;
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ListField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ListField.cs,Initialize,The following statement contains a magic number: dropdownList = new MHDropDownList("None".Localize()' theme' maxHeight: 200)  			{  				ToolTipText = this.HelpText'  				TabIndex = tabIndex'  				Margin = new BorderDouble()'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ListStringField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ListStringField.cs,Initialize,The following statement contains a magic number: this.Content = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(20' 0' 0' 0)'  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ListStringField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ListStringField.cs,Rebuild,The following statement contains a magic number: var addItem = new IconButton(AggContext.StaticData.LoadIcon("md-add-circle_18.png"' 18' 18' theme.InvertIcons)' theme)  			{  				HAnchor = HAnchor.Right | HAnchor.Absolute'  				Width = theme.ButtonHeight'  				Height = theme.ButtonHeight'  				VAnchor = VAnchor.Absolute'  				Margin = 3  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ListStringField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ListStringField.cs,Rebuild,The following statement contains a magic number: var addItem = new IconButton(AggContext.StaticData.LoadIcon("md-add-circle_18.png"' 18' 18' theme.InvertIcons)' theme)  			{  				HAnchor = HAnchor.Right | HAnchor.Absolute'  				Width = theme.ButtonHeight'  				Height = theme.ButtonHeight'  				VAnchor = VAnchor.Absolute'  				Margin = 3  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,ListStringField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\ListStringField.cs,Rebuild,The following statement contains a magic number: var addItem = new IconButton(AggContext.StaticData.LoadIcon("md-add-circle_18.png"' 18' 18' theme.InvertIcons)' theme)  			{  				HAnchor = HAnchor.Right | HAnchor.Absolute'  				Width = theme.ButtonHeight'  				Height = theme.ButtonHeight'  				VAnchor = VAnchor.Absolute'  				Margin = 3  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,MarkdownEditField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\MarkdownEditField.cs,Initialize,The following statement contains a magic number: var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  			{  				VAnchor = VAnchor.Top'  				ToolTipText = "Edit".Localize()'  				Name = "Edit Markdown Button"  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,MarkdownEditField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\MarkdownEditField.cs,Initialize,The following statement contains a magic number: var editButton = new IconButton(AggContext.StaticData.LoadIcon("icon_edit.png"' 16' 16' theme.InvertIcons)' theme)  			{  				VAnchor = VAnchor.Top'  				ToolTipText = "Edit".Localize()'  				Name = "Edit Markdown Button"  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,MultilineStringField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\MultilineStringField.cs,Initialize,The following statement contains a magic number: editWidget = new MHTextEditWidget(""' theme' pixelWidth: 320' multiLine: true' tabIndex: tabIndex' typeFace: ApplicationController.GetTypeFace(NamedTypeFace.Liberation_Mono))  			{  				HAnchor = HAnchor.Stretch'  				VAnchor = VAnchor.Fit'  				Name = this.Name  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,MultilineStringField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\MultilineStringField.cs,Initialize,The following statement contains a magic number: editWidget.ActualTextEditWidget.TextChanged += (s' e) =>  			{  				UiThread.RunOnIdle(() =>  				{  					editWidget.ActualTextEditWidget.Height = Math.Min(editWidget.ActualTextEditWidget.Printer.LocalBounds.Height' 500);  				});  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,MultilineStringField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\MultilineStringField.cs,OnValueChanged,The following statement contains a magic number: editWidget.ActualTextEditWidget.Height = Math.Min(editWidget.ActualTextEditWidget.Printer.LocalBounds.Height' 500);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SliceEngineField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\SliceEngineField.cs,Initialize,The following statement contains a magic number: dropdownList = new MHDropDownList("None".Localize()' theme' maxHeight: 200)  			{  				ToolTipText = this.HelpText'  				TabIndex = tabIndex'  				Name = "slice_engine Field"'  				// Prevent droplist interaction when connected  				Enabled = !printer.Connection.Printing'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,SurfacedEditorPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\SurfacedEditorPage.cs,SurfacedEditorPage,The following statement contains a magic number: var treeView = new TreeView(theme)  			{  				Margin = new BorderDouble(left: 18)'  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector2Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector2Field.cs,Initialize,The following statement contains a magic number: xyValueStrings == null  				|| xyValueStrings.Length != 2
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector2Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector2Field.cs,ConvertValue,The following statement contains a magic number: xyzwStrings.Length != 2
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector2Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector2Field.cs,OnValueChanged,The following statement contains a magic number: xyStrings.Length != 2
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector3Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector3Field.cs,Initialize,The following statement contains a magic number: xyzStrings == null  				|| xyzStrings.Length != 3
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector3Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector3Field.cs,Initialize,The following statement contains a magic number: double.TryParse(xyzStrings[2]' out double currentZValue);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector3Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector3Field.cs,ConvertValue,The following statement contains a magic number: xyzwStrings.Length != 3
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector3Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector3Field.cs,OnValueChanged,The following statement contains a magic number: xyzStrings.Length != 3
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector3Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector3Field.cs,OnValueChanged,The following statement contains a magic number: zEditWidget.Text = xyzStrings[2];
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,Initialize,The following statement contains a magic number: xyzValueStrings == null  				|| xyzValueStrings.Length != 4
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,Initialize,The following statement contains a magic number: double.TryParse(xyzValueStrings[2]' out double currentZValue);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,Initialize,The following statement contains a magic number: zEditWidget = new MHNumberEdit(currentZValue' theme' labels[2] /* Z */' allowNegatives: true' allowDecimals: true' pixelWidth: VectorXYZWEditWidth' tabIndex: tabIndex)  			{  				ToolTipText = this.HelpText'  				TabIndex = tabIndex + 1'  				SelectAllOnFocus = true'  				Margin = theme.ButtonSpacing  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,Initialize,The following statement contains a magic number: double.TryParse(xyzValueStrings[3]' out double currentWValue);
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,Initialize,The following statement contains a magic number: wEditWidget = new MHNumberEdit(currentZValue' theme' labels[3] /* W */' allowNegatives: true' allowDecimals: true' pixelWidth: VectorXYZWEditWidth' tabIndex: tabIndex)  			{  				ToolTipText = this.HelpText'  				TabIndex = tabIndex + 1'  				SelectAllOnFocus = true'  				Margin = theme.ButtonSpacing  			};
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,ConvertValue,The following statement contains a magic number: xyzwStrings.Length != 4
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,OnValueChanged,The following statement contains a magic number: xyzwStrings.Length != 4
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,OnValueChanged,The following statement contains a magic number: zEditWidget.Text = xyzwStrings[2];
Magic Number,MatterHackers.MatterControl.SlicerConfiguration,Vector4Field,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\Vector4Field.cs,OnValueChanged,The following statement contains a magic number: wEditWidget.Text = xyzwStrings[3];
Magic Number,MatterHackers.MatterControl.Slicing,SliceLayers,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Slicing\SliceLayers.cs,GetPerimetersForAllLayers,The following statement contains a magic number: int layerCount = (int)((heightWithoutFirstLayer / otherLayerHeights) + .5);
Magic Number,MatterHackers.MatterControl.FieldValidation,ValidationMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\FieldValidation.cs,StringLooksLikePhoneNumber,The following statement contains a magic number: value.Length == 10
Magic Number,MatterHackers.MatterControl.FieldValidation,ValidationMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\FieldValidation.cs,StringLooksLikeEmail,The following statement contains a magic number: lastAtPos < lastDotPos && lastAtPos > 0 && value.IndexOf("@@") == -1 && lastDotPos > 2 && (value.Length - lastDotPos) > 2
Magic Number,MatterHackers.MatterControl.FieldValidation,ValidationMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\FieldValidation.cs,StringLooksLikeEmail,The following statement contains a magic number: lastAtPos < lastDotPos && lastAtPos > 0 && value.IndexOf("@@") == -1 && lastDotPos > 2 && (value.Length - lastDotPos) > 2
Magic Number,JsonPath,JsonPathContext,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\JsonPath.cs,SelectNodes,The following statement contains a magic number: expr = expr.Substring(expr.Length >= 2 && expr[1] == ';' ? 2 : 1);
Magic Number,JsonPath,JsonPathContext,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\JsonPath.cs,SelectNodes,The following statement contains a magic number: expr = expr.Substring(expr.Length >= 2 && expr[1] == ';' ? 2 : 1);
Magic Number,JsonPath,Interpreter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\JsonPath.cs,Slice,The following statement contains a magic number: var step = parts.Length > 2 ? TryParseInt(parts[2]) ?? 1 : 1;
Magic Number,JsonPath,Interpreter,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\JsonPath.cs,Slice,The following statement contains a magic number: var step = parts.Length > 2 ? TryParseInt(parts[2]) ?? 1 : 1;
Magic Number,Markdig.Renderers.Agg,CodeBlockX,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\AggCodeBlockRenderer.cs,CodeBlockX,The following statement contains a magic number: this.Margin = 12;
Magic Number,Markdig.Renderers.Agg,CodeBlockX,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\AggCodeBlockRenderer.cs,CodeBlockX,The following statement contains a magic number: this.Padding = 6;
Magic Number,Markdig.Renderers.Agg,HeadingRowX,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\AggHeadingRenderer.cs,HeadingRowX,The following statement contains a magic number: this.Margin = new BorderDouble(0' 4' 0' 12);
Magic Number,Markdig.Renderers.Agg,HeadingRowX,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\AggHeadingRenderer.cs,HeadingRowX,The following statement contains a magic number: this.Margin = new BorderDouble(0' 4' 0' 12);
Magic Number,Markdig.Renderers.Agg,HeadingRowX,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\AggHeadingRenderer.cs,AddChild,The following statement contains a magic number: textWidget.PointSize = 14;
Magic Number,Markdig.Renderers.Agg,ListX,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\AggListRenderer.cs,AddChild,The following statement contains a magic number: textWidget.PointSize = 11;
Magic Number,Markdig.Renderers.Agg,ListItemX,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\AggListRenderer.cs,ListItemX,The following statement contains a magic number: base.AddChild(new ImageWidget(AggContext.StaticData.LoadIcon("bullet.png"' theme.InvertIcons))  			{  				Margin = new BorderDouble(top: 1' left: 10)'  				VAnchor = VAnchor.Top'  			});
Magic Number,Markdig.Renderers.Agg,AggParagraphRenderer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\AggParagraphRenderer.cs,Write,The following statement contains a magic number: var paragraph = new ParagraphX()  			{  				RowMargin = 0'  				RowPadding = 3  			};
Magic Number,Markdig.Agg,MarkdownWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\MarkdownWidget.cs,MarkdownWidget,The following statement contains a magic number: this.ScrollArea.Margin = new BorderDouble(0' 0' 15' 0);
Magic Number,Markdig.Renderers,AggRenderer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\AggRenderer.cs,AggRenderer,The following statement contains a magic number: buffer = new char[1024];
Magic Number,Markdig.Renderers.Agg.Inlines,CodeInlineX,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Utilities\MarkdigAgg\Inlines\AggCodeInlineRenderer.cs,CodeInlineX,The following statement contains a magic number: this.Padding = 4;
Duplicate Code,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,FindDescendants,The method contains a code clone-set at the following line numbers (starting from the method definition): ((5' 28)' (60' 83))
Missing Default,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,BindBedOptions,The following switch statement is missing a default case: switch (e.PropertyName)  				{  					case nameof(renderOptions.RenderBed):  						bedButton.Checked = renderOptions.RenderBed;  						break;    					case nameof(renderOptions.RenderBuildVolume) when printAreaButton != null:  						printAreaButton.Checked = renderOptions.RenderBuildVolume;  						break;  				}
Missing Default,MatterHackers.MatterControl,ApplicationController,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,ConnectToPrinter,The following switch statement is missing a default case: switch (e.Reason)  				{  					case ConnectionFailure.ConnectionTimeout:  						UiThread.RunOnIdle(() =>  						{  							StyledMessageBox.ShowMessageBox(  								@"MatterControl tried to communicate with your printer' but never received a response.    Make sure that your printer is turned on. Some printers will appear to be connected' even when they are turned off.".Localize()'  								"Connection Timeout".Localize()'  								useMarkdown: true);  						});  						break;    					case ConnectionFailure.Unknown:  						UiThread.RunOnIdle(() =>  						{  							StyledMessageBox.ShowMessageBox(e.Message' e.ExceptionType);  						});  						break;    					case ConnectionFailure.IOException:  						if (AggContext.OperatingSystem == OSType.X11 && e.Message == "Permission denied")  						{  							UiThread.RunOnIdle(() =>  							{  								string message =  @"In order for MatterControl to access the serial ports on Linux' you will need to give your user account the appropriate permissions. Run these commands in a terminal to add yourself to the correct group.    Ubuntu/Debian  --------------    ```  # sudo gpasswd -a $USER dialout  ```    Arch  ----    ```  # sudo gpasswd -a $USER uucp  # sudo gpasswd -a $USER lock  ```    You will then need to logout and log back in to the computer for the changes to take effect. ";  								StyledMessageBox.ShowMessageBox(message' "Permission Denied".Localize()' useMarkdown: true);  							});  						}  						else if (e.Message == "The semaphore timeout period has expired." || e.Message == "A device attached to the system is not functioning.")  						{  							UiThread.RunOnIdle(() =>   							{  								string message =  @"The operating system has reported that your printer is malfunctioning. MatterControl cannot communicate with it. Contact your printer's manufacturer for assistance.    Details  -------    " + e.Message;  								StyledMessageBox.ShowMessageBox(message' "Hardware Error".Localize()' useMarkdown: true);  							});  						}  						else  						{  							UiThread.RunOnIdle(() =>  							{  								StyledMessageBox.ShowMessageBox(e.Message' e.ExceptionType);  							});  						}    						break;    					case ConnectionFailure.UnsupportedBaudRate:  						UiThread.RunOnIdle(() =>  						{  							string message = "The chosen baud rate is not supported by your operating system. Use a different baud rate' if possible.";  							if (AggContext.OperatingSystem == OSType.X11)  							{  								message += "On Linux' MatterControl requires a serial helper library in order to use certain baud rates. It is possible that this component is missing or not installed properly. ";  							}    							StyledMessageBox.ShowMessageBox(message' "Unsupported Baud Rate".Localize()' useMarkdown: true);  						});  						break;    					case ConnectionFailure.PortInUse:  						UiThread.RunOnIdle(() =>  						{  							StyledMessageBox.ShowMessageBox(  								"MatterControl cannot connect to your printer because another program on your computer is already connected. Close any other 3D printing programs or other other programs which access serial ports and try again."'  								"Port In Use".Localize()'  								useMarkdown: true);  						});  						break;  				}
Missing Default,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following switch statement is missing a default case: switch (keyEvent.KeyChar)  					{  						case 'w':  						case 'W':  							view3D.ResetView();  							keyEvent.Handled = true;  							break;    						case ' ':  							view3D.Scene.ClearSelection();  							keyEvent.Handled = true;  							break;  					}
Missing Default,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following switch statement is missing a default case: switch (keyEvent.KeyCode)  					{  						case Keys.Oemplus:  						case Keys.Add:  							if (keyEvent.Control)  							{  								// Zoom out  								gcode2D.Zoom(1.2);  								keyEvent.Handled = true;  							}    							break;    						case Keys.OemMinus:  						case Keys.Subtract:  							if (keyEvent.Control)  							{  								// Zoom in  								gcode2D.Zoom(.8);  								keyEvent.Handled = true;  							}    							break;  					}
Missing Default,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,LoadRootWindow,The following switch statement is missing a default case: switch (keyEvent.KeyCode)  					{  						case Keys.C:  							if (keyEvent.Control)  							{  								view3D.Scene.Copy();  								keyEvent.Handled = true;  							}    							break;    						case Keys.P:  							if (keyEvent.Control)  							{  								view3D.PushToPrinterAndPrint();  							}    							break;    						case Keys.X:  							if (keyEvent.Control)  							{  								view3D.Scene.Cut();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Y:  							if (keyEvent.Control)  							{  								view3D.Scene.UndoBuffer.Redo();  								keyEvent.Handled = true;  							}    							break;    						case Keys.A:  							if (keyEvent.Control)  							{  								view3D.SelectAll();  								keyEvent.Handled = true;  							}    							break;    						case Keys.S:  							if (keyEvent.Control)  							{  								view3D.Save();  								keyEvent.Handled = true;  							}    							break;    						case Keys.V:  							if (keyEvent.Control)  							{  								view3D.sceneContext.Paste();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Oemplus:  						case Keys.Add:  							if (keyEvent.Control)  							{  								// Zoom out  								Offset3DView(view3D' new Vector2(0' offsetDist)' TrackBallTransformType.Scale);  								keyEvent.Handled = true;  							}    							break;    						case Keys.OemMinus:  						case Keys.Subtract:  							if (keyEvent.Control)  							{  								// Zoom in  								Offset3DView(view3D' new Vector2(0' -offsetDist)' TrackBallTransformType.Scale);  								keyEvent.Handled = true;  							}    							break;    						case Keys.Z:  							if (keyEvent.Control)  							{  								if (keyEvent.Shift)  								{  									view3D.Scene.Redo();  								}  								else  								{  									// undo last operation  									view3D.Scene.Undo();  								}    								keyEvent.Handled = true;  							}    							break;    						case Keys.Insert:  							if (keyEvent.Shift)  							{  								view3D.sceneContext.Paste();  								keyEvent.Handled = true;  							}    							break;    						case Keys.Delete:  						case Keys.Back:  							view3D.Scene.DeleteSelection();  							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Escape:  							if (view3D.CurrentSelectInfo.DownOnPart)  							{  								view3D.CurrentSelectInfo.DownOnPart = false;    								view3D.Scene.SelectedItem.Matrix = view3D.TransformOnMouseDown;    								keyEvent.Handled = true;  								keyEvent.SuppressKeyPress = true;  							}    							foreach (var interactionVolume in view3D.InteractionLayer.InteractionVolumes)  							{  								interactionVolume.CancelOperation();  							}    							break;    						case Keys.Left:  							if (keyEvent.Control  								&& printerTabPage != null  								&& !printerTabPage.sceneContext.ViewState.ModelView)  							{  								// Decrement slider  								printerTabPage.LayerFeaturesIndex -= 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Left' keyEvent);  								}  								else  								{  									// move or rotate view left  									Offset3DView(view3D' new Vector2(-offsetDist' 0)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Right:  							if (keyEvent.Control  								&& printerTabPage != null  								&& !printerTabPage.sceneContext.ViewState.ModelView)  							{  								// Increment slider  								printerTabPage.LayerFeaturesIndex += 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Right' keyEvent);  								}  								else  								{  									// move or rotate view right  									Offset3DView(view3D' new Vector2(offsetDist' 0)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Up:  							if (view3D.Printer != null  								&& printerTabPage != null  								&& view3D.Printer.ViewState.ViewMode != PartViewMode.Model)  							{  								printerTabPage.LayerScrollbar.Value += 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Up' keyEvent);  								}  								else  								{  									Offset3DView(view3D' new Vector2(0' offsetDist)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;    						case Keys.Down:  							if (view3D.Printer != null  								&& printerTabPage != null  								&& view3D.Printer.ViewState.ViewMode != PartViewMode.Model)  							{  								printerTabPage.LayerScrollbar.Value -= 1;  							}  							else  							{  								if (view3D.sceneContext.Scene.SelectedItem is IObject3D object3D)  								{  									NudgeItem(view3D' object3D' ArrowDirection.Down' keyEvent);  								}  								else  								{  									Offset3DView(view3D' new Vector2(0' -offsetDist)' arrowKeyOperation);  								}  							}    							keyEvent.Handled = true;  							keyEvent.SuppressKeyPress = true;  							break;  					}
Missing Default,MatterHackers.MatterControl,Application,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\ApplicationController.cs,NudgeItem,The following switch statement is missing a default case: switch (arrowDirection)  			{  				case ArrowDirection.Left:  					vector3 = new Vector3(-view3D.InteractionLayer.SnapGridDistance' 0' 0);  					break;    				case ArrowDirection.Right:  					vector3 = new Vector3(view3D.InteractionLayer.SnapGridDistance' 0' 0);  					break;    				case ArrowDirection.Up:  					if (keyEvent.Control)  					{  						vector3 = new Vector3(0' 0' view3D.InteractionLayer.SnapGridDistance);  					}  					else  					{  						vector3 = new Vector3(0' view3D.InteractionLayer.SnapGridDistance' 0);  					}    					break;    				case ArrowDirection.Down:  					if (keyEvent.Control)  					{  						vector3 = new Vector3(0' 0' -view3D.InteractionLayer.SnapGridDistance);  					}  					else  					{  						vector3 = new Vector3(0' -view3D.InteractionLayer.SnapGridDistance' 0);  					}    					break;  			}
Missing Default,MatterHackers.MatterControl,PrinterExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\PrinterExtensionMethods.cs,InsideBuildVolume,The following switch statement is missing a default case: switch (bed.BedShape)  			{  				case BedShape.Rectangular:  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						return false;  					}  					break;    				case BedShape.Circular:  					// This could be much better if it checked the actual vertex data of the mesh against the cylinder  					// first check if any of it is outside the bed rect  					if (aabb.MinXYZ.X < bed.BedCenter.X - bed.ViewerVolume.X / 2  						|| aabb.MaxXYZ.X > bed.BedCenter.X + bed.ViewerVolume.X / 2  						|| aabb.MinXYZ.Y < bed.BedCenter.Y - bed.ViewerVolume.Y / 2  						|| aabb.MaxXYZ.Y > bed.BedCenter.Y + bed.ViewerVolume.Y / 2)  					{  						// TODO: then check if all of it is outside the bed circle  						return false;  					}  					break;  			}
Missing Default,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,ApplyPrimaryActionStyle,The following switch statement is missing a default case: switch (guiWidget)  			{  				case PopupMenuButton menuButton:  					menuButton.HoverColor = hoverColor;  					break;  				case SimpleFlowButton flowButton:  					flowButton.HoverColor = hoverColor;  					break;  				case SimpleButton button:  					button.HoverColor = hoverColor;  					break;  			}
Missing Default,MatterHackers.MatterControl,ThemeConfig,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ApplicationView\Themes\ThemeConfig.cs,RemovePrimaryActionStyle,The following switch statement is missing a default case: switch (guiWidget)  			{  				case SimpleFlowButton flowButton:  					flowButton.HoverColor = parentIsToolbar ? this.ToolbarButtonHover : Color.Transparent;  					break;  				case SimpleButton button:  					button.HoverColor = parentIsToolbar ? this.ToolbarButtonHover : Color.Transparent;  					break;  			}
Missing Default,MatterHackers.MatterControl,SvgWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\SvgWidget.cs,ProcTree,The following switch statement is missing a default case: switch (elem.Name.LocalName)  				{  					case "path":  					case "polygon":    						string htmlColor = ((string)elem.Attribute("style"))?.Replace("fill:"' "").Replace(";"' "") ?? "#999";    						if (elem.Name.LocalName == "polygon")  						{  							var path = new VertexStorage();    							string pointsLine = ((string)elem.Attribute("points"))?.Trim();    							var segments = pointsLine.Split(' ');    							bool firstMove = true;  							foreach(var segment in segments)  							{  								var point = segment.Split(''');    								if (firstMove)  								{  									path.MoveTo(new Vector2(double.Parse(point[0])' double.Parse(point[1])));  									firstMove = false;  								}  								else  								{  									path.LineTo(new Vector2(double.Parse(point[0])' double.Parse(point[1])));  								}  							}    							path.ClosePolygon();    							items.Add(new ColoredVertexSource()  							{  								VertexSource = path'  								Color = new Color(htmlColor)  							});    						}  						else  						{  							string dString = (string)elem.Attribute("d");  							items.Add(new ColoredVertexSource()  							{  								VertexSource = new VertexStorage(dString)'  								Color = new Color(htmlColor)  							});  						}    						break;    					case "g":  						ProcTree(elem);  						break;  				}
Missing Default,MatterHackers.MatterControl,XyCalibrationDataRecieved,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationDataRecieved.cs,XyCalibrationDataRecieved,The following switch statement is missing a default case: switch (calibrationWizard.Quality)  				{  					case QualityType.Coarse:  						// if we are on coarse calibration offer to move down to normal  						contentRow.AddChild(new TextWidget("Coarse calibration complete' we will now do a normal calibration to improve accuracy.".Localize()' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  						{  							Margin = new Agg.BorderDouble(0' 15' 0' 0)  						});    						// switch to normal calibration  						calibrationWizard.Quality = QualityType.Normal;  						calibrationWizard.PrintAgain = true;  						break;    					case QualityType.Normal:  						// let the user know they are done with calibration' but if they would like they can print a fine calibration for even better results  						// add a button to request fine calibration  						var normalMessage = "Your nozzles should now be calibrated.".Localize();  						normalMessage += "\n\n" + "You can continue to ultra fine calibration' but for most uses this is not necessary.".Localize();  						contentRow.AddChild(new TextWidget(normalMessage' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  						{  							Margin = new Agg.BorderDouble(0' 15' 0' 0)  						});    						var startFineCalibratingButton = theme.CreateDialogButton("Print Ultra Fine Calibration".Localize());  						startFineCalibratingButton.HAnchor = HAnchor.Fit | HAnchor.Right;  						startFineCalibratingButton.VAnchor = VAnchor.Absolute;  						startFineCalibratingButton.Name = "Fine Calibration Print";  						startFineCalibratingButton.Click += (s' e) =>  						{  							// switch to fine  							calibrationWizard.Quality = QualityType.Fine;  							// start up at the print window  							calibrationWizard.PrintAgain = true;  							this.NextButton.InvokeClick();  						};  						contentRow.AddChild(startFineCalibratingButton);  						break;    					case QualityType.Fine:  						// done!  						contentRow.AddChild(new TextWidget("Offset Calibration complete.".Localize()' textColor: theme.TextColor' pointSize: theme.DefaultFontSize)  						{  							Margin = new Agg.BorderDouble(0' 15' 0' 0)  						});  						break;  				}
Missing Default,MatterHackers.MatterControl,XyCalibrationSelectPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\XyCalibrationSelectPage.cs,Connection_CommunicationStateChanged,The following switch statement is missing a default case: switch (printer.Connection.CommunicationState)  			{  				case CommunicationStates.Disconnected:  				case CommunicationStates.AttemptingToConnect:  				case CommunicationStates.FailedToConnect:  				case CommunicationStates.ConnectionLost:  				case CommunicationStates.PrintingFromSd:  				case CommunicationStates.FinishedPrint:  					// We are no longer printing' exit and return to where we started  					this.ReturnToCalibrationWizard();    					break;  			}
Missing Default,MatterHackers.MatterControl,TerminalWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TerminalWidget.cs,TerminalWidget,The following switch statement is missing a default case: switch (lineData.Direction)  					{  						case TerminalLine.MessageDirection.FromPrinter:  							outputLine = "→ " + outputLine;  							break;  						case TerminalLine.MessageDirection.ToPrinter:  							outputLine = "← " + outputLine;  							break;  						case TerminalLine.MessageDirection.ToTerminal:  							outputLine = "* " + outputLine;  							break;  					}
Missing Default,MatterHackers.MatterControl,TextScrollWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PrinterControls\TerminalWindow\TextScrollWidget.cs,OnKeyDown,The following switch statement is missing a default case: switch (keyEvent.KeyCode)  				{  					case Keys.PageDown:  						newPos -= scrollDelta;  						break;  					case Keys.PageUp:  						newPos += scrollDelta;  						break;  					case Keys.Home:  						newPos = 1;  						break;  					case Keys.End:  						newPos = 0;  						break;  				}
Missing Default,MatterHackers.MatterControl,DialogWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SetupWizard\DialogWindow.cs,Show,The following switch statement is missing a default case: switch (e.KeyCode)  				{  					// Auto-advance to next page on enter key  					case Keys.Enter:  						if (setupWizard.Current is WizardPage currentPage && currentPage.NextButton.Enabled)  						{  							UiThread.RunOnIdle(() => currentPage.NextButton.InvokeClick());  						}  						break;  				}
Missing Default,MatterHackers.MatterControl.ActionBar,ControlContentExtruder,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ActionBar\TemperatureWidgetExtruder.cs,ControlContentExtruder,The following switch statement is missing a default case: switch (moveAmount)  			{  				case 1:  					oneButton.Checked = true;  					break;  				case 10:  					tenButton.Checked = true;  					break;  				case 100:  					oneHundredButton.Checked = true;  					break;  			}
Missing Default,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,DoneLoadingPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\SetupWizards\LoadFilamentWizard.cs,OnLoad,The following switch statement is missing a default case: switch (extruderIndex)  			{  				case 0:  					printer.Settings.SetValue(SettingsKey.filament_has_been_loaded' "1");  					break;    				case 1:  					printer.Settings.SetValue(SettingsKey.filament_1_has_been_loaded' "1");  					break;  			}
Missing Default,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,FindBedHeight,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\FindBedHeight.cs,TopWindowKeyDown,The following switch statement is missing a default case: switch (keyEvent.KeyCode)  			{  				case Keys.Up:  					ZPlusControl_Click(null' null);  					NextButton.Enabled = true;  					break;    				case Keys.Down:  					ZMinusControl_Click(null' null);  					NextButton.Enabled = true;  					break;    				case Keys.Right:  					if (NextButton.Enabled)  					{  						UiThread.RunOnIdle(() => NextButton.InvokeClick());  					}    					break;  			}
Missing Default,MatterHackers.MatterControl.ConfigurationPage.PrintLeveling,SelectMaterialPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\ConfigurationPage\PrintLeveling\WizardPages\SelectMaterialPage.cs,SelectMaterialPage,The following switch statement is missing a default case: switch (extruderIndex)  					{  						case 0:  							printer.Settings.SetValue(SettingsKey.filament_has_been_loaded' "1");  							break;    						case 1:  							printer.Settings.SetValue(SettingsKey.filament_1_has_been_loaded' "1");  							break;  					}
Missing Default,MatterHackers.MatterControl.CustomWidgets.ColorPicker,RadialColorPicker,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\CustomWidgets\ColorPicker\RadialColorPicker.cs,GetTrianglePoint,The following switch statement is missing a default case: switch (index)  			{  				case 0:  					return GetAtAngle(pontingAngle' radius);    				case 1:  					return GetAtAngle(pontingAngle + MathHelper.DegreesToRadians(120)' radius);    				case 2:  					return GetAtAngle(pontingAngle + MathHelper.DegreesToRadians(240)' radius);  			}
Missing Default,MatterHackers.MatterControl.CustomWidgets,RowViewItem,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\ListView\RowListView.cs,UpdateHoverState,The following switch statement is missing a default case: switch (UnderMouseState)  			{  				case UnderMouseState.NotUnderMouse:  					IsHoverItem = false;  					break;    				case UnderMouseState.FirstUnderMouse:  					IsHoverItem = true;  					break;    				case UnderMouseState.UnderMouseNotFirst:  					IsHoverItem = ContainsFirstUnderMouseRecursive();  					break;  			}
Missing Default,MatterHackers.MatterControl.DesignTools,BrailleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Braille\BrailleObject3D.cs,Rebuild,The following switch statement is missing a default case: switch (vertex.command)  								{  									case Agg.ShapePath.FlagsAndCommand.Stop:  									case Agg.ShapePath.FlagsAndCommand.EndPoly:  									case Agg.ShapePath.FlagsAndCommand.FlagClose:  									case Agg.ShapePath.FlagsAndCommand.MoveTo:  										if (vertexCount > 0)  										{  											var center = positionSum / vertexCount;  											double radius = 1.44 / 2;// (center - lastPosition).Length;  											var sphere = new HalfSphereObject3D(radius * 2' 15)  											{  												Color = Color.LightBlue  											};  											sphere.Translate(center.X' center.Y);  											letterObject.Children.Add(sphere);  										}  										vertexCount = 0;  										positionSum = Vector2.Zero;  										break;  									case Agg.ShapePath.FlagsAndCommand.Curve3:  									case Agg.ShapePath.FlagsAndCommand.Curve4:  									case Agg.ShapePath.FlagsAndCommand.LineTo:  										vertexCount++;  										lastPosition = vertex.position;  										positionSum += lastPosition;  										break;  								}
Missing Default,MatterHackers.MatterControl.DesignTools,MirrorObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\MirrorObject3D.cs,Rebuild,The following switch statement is missing a default case: switch (MirrorOn)  				{  					case MirrorAxis.X_Axis:  						mirrorMatrix = this.ApplyAtBoundsCenter(Matrix4X4.CreateScale(-1' 1' 1));  						break;    					case MirrorAxis.Y_Axis:  						mirrorMatrix = this.ApplyAtBoundsCenter(Matrix4X4.CreateScale(1' -1' 1));  						break;    					case MirrorAxis.Z_Axis:  						mirrorMatrix = this.ApplyAtBoundsCenter(Matrix4X4.CreateScale(1' 1' -1));  						break;  				}
Missing Default,MatterHackers.MatterControl.DesignTools,MirrorObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\MirrorObject3D_2.cs,Rebuild,The following switch statement is missing a default case: switch (MirrorOn)  					{  						case MirrorAxis.X_Axis:  							mirrorMatrix = this.ApplyAtBoundsCenter(Matrix4X4.CreateScale(-1' 1' 1));  							break;    						case MirrorAxis.Y_Axis:  							mirrorMatrix = this.ApplyAtBoundsCenter(Matrix4X4.CreateScale(1' -1' 1));  							break;    						case MirrorAxis.Z_Axis:  							mirrorMatrix = this.ApplyAtBoundsCenter(Matrix4X4.CreateScale(1' 1' -1));  							break;  					}
Missing Default,MatterHackers.MatterControl.DesignTools,BaseObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\BaseObject3D.cs,GenerateBase,The following switch statement is missing a default case: switch (BaseType)  				{  					case BaseTypes.Rectangle:  						polysToOffset.Add(GetBoundingPolygon(polygonShape));  						break;    					case BaseTypes.Circle:  						polysToOffset.Add(GetBoundingCircle(polygonShape));  						break;    					case BaseTypes.Outline:  						PolyTree polyTreeForBase = GetPolyTree(polygonShape);  						foreach (PolyNode polyToOffset in polyTreeForBase.Childs)  						{  							polysToOffset.Add(polyToOffset.Contour);  						}  						break;  				}
Missing Default,MatterHackers.MatterControl.DesignTools,CylinderObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\CylinderObject3D.cs,Create,The following switch statement is missing a default case: switch (alignment)  			{  				case Alignment.X:  					item.Matrix = Matrix4X4.CreateRotationY(MathHelper.Tau / 4);  					break;  				case Alignment.Y:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 4);  					break;  				case Alignment.Z:  					// This is the natural case (how it was modeled)  					break;  				case Alignment.negX:  					item.Matrix = Matrix4X4.CreateRotationY(-MathHelper.Tau / 4);  					break;  				case Alignment.negY:  					item.Matrix = Matrix4X4.CreateRotationX(-MathHelper.Tau / 4);  					break;  				case Alignment.negZ:  					item.Matrix = Matrix4X4.CreateRotationX(MathHelper.Tau / 2);  					break;  			}
Missing Default,MatterHackers.MatterControl.DesignTools,TextObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Primitives\TextObject3D.cs,MapIfSymbol,The following switch statement is missing a default case: switch(newName)  			{  				case " ":  					return "space";  			}
Missing Default,MatterHackers.MatterControl.Library,FileSystemContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\FileSystem\FileSystemContainer.cs,Add,The following switch statement is missing a default case: switch (item)  					{  						case CreateFolderItem newFolder:  							string targetFolderPath = Path.Combine(this.FullPath' newFolder.Name);    							// TODO: write adaption of GetNonCollidingName for directories  							Directory.CreateDirectory(targetFolderPath);  							this.isDirty = true;    							break;    						case ILibraryAssetStream streamItem:  							string targetPath = Path.Combine(this.FullPath' streamItem.FileName);    							try  							{  								if (File.Exists(targetPath))  								{  									targetPath = GetNonCollidingName(Path.GetFileName(targetPath));  								}    								using (var outputStream = File.OpenWrite(targetPath))  								using (var contentStream = await streamItem.GetStream(null))  								{  									contentStream.Stream.CopyTo(outputStream);  								}    								this.Items.Add(new FileSystemFileItem(targetPath));  								this.isDirty = true;  							}  							catch (Exception ex)  							{  								UiThread.RunOnIdle(() =>  								{  									ApplicationController.Instance.LogError($"Error adding file: {targetPath}\r\n{ex.Message}");  								});  							}  							break;  					}
Missing Default,MatterHackers.MatterControl.Library,PrintQueueContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\PrintQueueContainer.cs,AddAllItems,The following switch statement is missing a default case: switch (item)  					{  						case ILibraryAssetStream streamItem:  							string itemPath;    							if (streamItem is FileSystemFileItem fileItem)  							{  								// Get existing file path  								itemPath = fileItem.Path;  							}  							else  							{  								// Copy stream to library path  								itemPath = ApplicationDataStorage.Instance.GetNewLibraryFilePath("." + streamItem.ContentType);    								using (var outputStream = File.OpenWrite(itemPath))  								using (var streamInteface = await streamItem.GetStream(null))  								{  									streamInteface.Stream.CopyTo(outputStream);  								}  							}    							// Add to Queue  							if (File.Exists(itemPath))  							{  								QueueData.Instance.AddItem(  									new PrintItemWrapper(  										new PrintItem(streamItem.Name' itemPath))'  									0);  							}  							break;  					}
Missing Default,MatterHackers.MatterControl.Library,SqliteLibraryContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\MatterControl\SqliteLibraryContainer.cs,Add,The following switch statement is missing a default case: switch (item)  					{  						case CreateFolderItem newFolder:  							var newFolderCollection = new PrintItemCollection(newFolder.Name' "");  							newFolderCollection.ParentCollectionID = this.CollectionID;  							newFolderCollection.Commit();    							break;    						case ILibraryContainerLink containerInfo:  							var newCollection = new PrintItemCollection(containerInfo.Name' "");  							newCollection.ParentCollectionID = this.CollectionID;  							newCollection.Commit();    							break;    						case ILibraryAssetStream streamItem:    							var fileName = (streamItem as ILibraryAssetStream)?.FileName;    							using (var streamInfo = await streamItem.GetStream(null))  							{  								// If the passed in item name equals the fileName' perform friendly name conversion' otherwise use supplied value  								string name = streamItem.Name;  								if (name == fileName)  								{  									name = PrintItemWrapperExtensionMethods.GetFriendlyName(Path.GetFileNameWithoutExtension(fileName));  								}    								AddItem(streamInfo.Stream' streamItem.ContentType' name);  							}    							break;  					}
Missing Default,MatterHackers.MatterControl.Library,SDCardContainer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Providers\SDCard\SDCardContainer.cs,SDCardContainer,The following switch statement is missing a default case: switch (printer.Connection.CommunicationState)  				{  					case CommunicationStates.Connected:  						Task.Run(() =>  						{  							this.Load();    							UiThread.RunOnIdle(this.OnContentChanged);  						});  						break;    					case CommunicationStates.Disconnected:  						this.Items.Clear();  						this.OnContentChanged();  						break;  				}
Missing Default,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetCornerPosition,The following switch statement is missing a default case: switch (RotationAxis)  			{  				case 0:  					cornerIndexOut = xCornerIndex;  					return bestXCornerPosition;    				case 1:  					cornerIndexOut = yCornerIndex;  					return bestYCornerPosition;    				case 2:  					cornerIndexOut = zCornerIndex;  					return bestZCornerPosition;  			}
Missing Default,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,SetPosition,The following switch statement is missing a default case: switch (RotationAxis)  			{  				case 0:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 1:  					if (cornerIndexOut == 1 || cornerIndexOut == 3)  					{  						centerMatrix *= Matrix4X4.CreateRotationY(MathHelper.DegreesToRadians(-90));  					}  					else  					{  						centerMatrix *= Matrix4X4.CreateRotationX(MathHelper.DegreesToRadians(90));  					}    					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;    				case 2:  					centerMatrix *= Matrix4X4.CreateRotationZ(MathHelper.DegreesToRadians(90) * cornerIndexOut);  					break;  			}
Missing Default,MatterHackers.Plugins.EditorTools,RotateCornerControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\EditorTools\RotateControls\RotateCornerControl.cs,GetRotationTransform,The following switch statement is missing a default case: switch (RotationAxis)  			{  				case 0:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(0' -MathHelper.Tau / 4' 0))  							* Matrix4X4.CreateRotation(new Vector3(-MathHelper.Tau / 4' 0' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 1:  					{  						rotationCenterTransform =  							Matrix4X4.CreateTranslation(-center)  							* Matrix4X4.CreateRotation(new Vector3(MathHelper.Tau / 4' 0' 0))  							* Matrix4X4.CreateRotation(new Vector3(0' MathHelper.Tau / 4' 0))  							* rotationCenterTransform;    						var center2 = Vector3Ex.Transform(Vector3.Zero' rotationCenterTransform);  						rotationCenterTransform *= Matrix4X4.CreateTranslation(center - center2);  					}    					break;    				case 2:  					break;  			}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow.View3D,BooleanProcessing,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Actions\BooleanProcessing.cs,Do,The following switch statement is missing a default case: switch (operation)  			{  				case 0:  					return PolygonMesh.Csg.CsgOperations.Union(meshA'  						meshB'  						(status' progress0To1) =>  						{  							// Abort if flagged  							cancellationToken.ThrowIfCancellationRequested();    							progressStatus.Status = status;  							progressStatus.Progress0To1 = percentCompleted + (amountPerOperation * progress0To1);  							reporter?.Report(progressStatus);  						}'  						cancellationToken);    				case 1:  					return PolygonMesh.Csg.CsgOperations.Subtract(meshA'  						meshB'  						(status' progress0To1) =>  						{  							// Abort if flagged  							cancellationToken.ThrowIfCancellationRequested();    							progressStatus.Status = status;  							progressStatus.Progress0To1 = percentCompleted + (amountPerOperation * progress0To1);  							reporter?.Report(progressStatus);  						}'  						cancellationToken);    				case 2:  					return PolygonMesh.Csg.CsgOperations.Intersect(meshA'  						meshB'  						(status' progress0To1) =>  						{  							// Abort if flagged  							cancellationToken.ThrowIfCancellationRequested();    							progressStatus.Status = status;  							progressStatus.Progress0To1 = percentCompleted + (amountPerOperation * progress0To1);  							reporter.Report(progressStatus);  						}'  						cancellationToken);  			}
Missing Default,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Obsolete\FitToBoundsObject3D.cs,AdjustChildSize,The following switch statement is missing a default case: switch (MaintainRatio)  			{  				case MaintainRatio.None:  					break;  				case MaintainRatio.X_Y:  					var minXy = Math.Min(scale.X' scale.Y);  					scale.X = minXy;  					scale.Y = minXy;  					break;  				case MaintainRatio.X_Y_Z:  					var minXyz = Math.Min(Math.Min(scale.X' scale.Y)' scale.Z);  					scale.X = minXyz;  					scale.Y = minXyz;  					scale.Z = minXyz;  					break;  			}
Missing Default,MatterHackers.MatterControl.DesignTools.Operations,AlignObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\AlignObject3D.cs,AlignAxis,The following switch statement is missing a default case: switch (align)  			{  				case Align.Min:  					translate[axis] = alignTo - aabb.MinXYZ[axis] + offset;  					break;    				case Align.Center:  					translate[axis] = alignTo - aabb.Center[axis] + offset;  					break;    				case Align.Max:  					translate[axis] = alignTo - aabb.MaxXYZ[axis] + offset;  					break;    				case Align.Origin:  					// find the origin in world space of the item  					var itemOrigin = Vector3Ex.Transform(Vector3.Zero' item.WorldMatrix());  					translate[axis] = alignTo - itemOrigin[axis] + offset;  					break;  			}
Missing Default,MatterHackers.MatterControl.DesignTools.Operations,FitToBoundsObject3D_2,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\FitToBoundsObject3D_2.cs,AdjustChildSize,The following switch statement is missing a default case: switch (MaintainRatio)  				{  					case MaintainRatio.None:  						break;    					case MaintainRatio.X_Y:  						var minXy = Math.Min(scale.X' scale.Y);  						scale.X = minXy;  						scale.Y = minXy;  						break;    					case MaintainRatio.X_Y_Z:  						var minXyz = Math.Min(Math.Min(scale.X' scale.Y)' scale.Z);  						scale.X = minXyz;  						scale.Y = minXyz;  						scale.Z = minXyz;  						break;  				}
Missing Default,MatterHackers.MatterControl.DesignTools.Operations,ScaleObject3D,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\DesignTools\Operations\ScaleObject3D.cs,UpdateControls,The following switch statement is missing a default case: switch (Operation)  				{  					case ScaleType.Inches_to_mm:  						scale = 25.4;  						break;  					case ScaleType.mm_to_Inches:  						scale = .0393;  						break;  					case ScaleType.mm_to_cm:  						scale = .1;  						break;  					case ScaleType.cm_to_mm:  						scale = 10;  						break;  				}
Missing Default,MatterHackers.MatterControl.EeProm,EePromMarlinSettings,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\EeProm\EePromMarlinSettings.cs,Export,The following switch statement is missing a default case: switch (field.FieldType.Name)  					{  						case "Int32":  						case "Double":  						case "Boolean":  						case "FMatrix3x3":  						case "String":  							// all these setting just output correctly with ToString() so we don't have to do anything special.  							sw.WriteLine("{0}|{1}".FormatWith(name' value));  							break;  					}
Missing Default,MatterHackers.MatterControl.PrintQueue,QueueData,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Queue\QueueData.cs,GetEstimatedMemoryUse,The following switch statement is missing a default case: switch (Path.GetExtension(fileLocation).ToUpper())  			{  				case ".STL":  					return StlProcessing.GetEstimatedMemoryUse(fileLocation);    				case ".AMF":  					return AmfDocument.GetEstimatedMemoryUse(fileLocation);    				case ".OBJ":  					throw new NotImplementedException();  			}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow.PlusTab,ExplorePanel,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\Library\Widgets\StorePage\ExplorePanel.cs,AddContentItem,The following switch statement is missing a default case: switch (content.content_type)  			{  				case "headline":  					{  						break;    						// use the Golden Ratio to calculate an attractive size relative to the banner  						var image = new ImageBuffer(1520' (int)(170 / 1.618));  						var imageWidget = new ResponsiveImageWidget(image)  						{  							Margin = new BorderDouble(5)'  							Cursor = Cursors.Hand  						};    						var graphics2D = image.NewGraphics2D();  						image.SetRecieveBlender(new BlenderPreMultBGRA());  						graphics2D.Clear(theme.AccentMimimalOverlay);    						// use the Golden Ratio to calculate an attractive size for the text relative to the text banner  						var pixelsPerPoint = 96.0 / 72.0;  						var goalPointSize = image.Height / pixelsPerPoint / 1.618;    						var printer = new TypeFacePrinter(content.text' goalPointSize);    						graphics2D.DrawString(content.text' image.Width/2' image.Height/2 + printer.TypeFaceStyle.EmSizeInPixels / 2' goalPointSize'  							Justification.Center' Baseline.BoundsTop'  							theme.TextColor);    						if (content.link != null)  						{  							imageWidget.Cursor = Cursors.Hand;  							imageWidget.Click += (s' e) =>  							{  								if (e.Button == MouseButtons.Left)  								{  									ApplicationController.Instance.LaunchBrowser(content.link);  								}  							};  						}    						this.AddChild(imageWidget);  					}  					break;    				case "banner_rotate":  					// TODO: make this make a carousel rather than add the first item and rotate between all the items  					var rand = new Random();  					AddContentItem(content.banner_list[rand.Next(content.banner_list.Count)]);  					break;    				case "banner_image":  					{  						// Our banners seem to end with something like "=w1520-h170"  						// if present use that to get the right width and height  						int expectedWidth = 1520;  						GCodeFile.GetFirstNumberAfter("=w"' content.image_url' ref expectedWidth);  						int expectedHeight = 170;  						GCodeFile.GetFirstNumberAfter("-h"' content.image_url' ref expectedHeight);  						if ((content.theme_filter == "dark" && theme.IsDarkTheme)  							|| (content.theme_filter == "light" && !theme.IsDarkTheme)  							|| (content.theme_filter == "all"))  						{  							var image = new ImageBuffer(expectedWidth' expectedHeight);  							var imageWidget = new ResponsiveImageWidget(image)  							{  								Margin = new BorderDouble(5)'  								Cursor = Cursors.Hand  							};    							if (content.link != null)  							{  								imageWidget.Cursor = Cursors.Hand;  								imageWidget.Click += (s' e) =>  								{  									if (e.Button == MouseButtons.Left)  									{  										ApplicationController.Instance.LaunchBrowser(content.link);  									}  								};  							}    							imageWidget.Load += (s' e) => WebCache.RetrieveImageAsync(image' content.image_url' false' new BlenderPreMultBGRA());  							this.AddChild(imageWidget);  						}  					}  					break;    				case "article_group":  				case "product_group":  					if(currentContentContainer == null)  					{  						currentContentContainer = new FlowLeftRightWithWrapping();  						this.AddChild(currentContentContainer);  					}  					currentContentContainer.AddChild(new ExploreSection(content' theme));  					break;  			}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,PrinterTabPage,The following switch statement is missing a default case: switch (e.TransformMode)  				{  					case ViewControls3DButtons.Translate:  						if (gcode2DWidget != null)  						{  							gcode2DWidget.TransformState = GCode2DWidget.ETransformState.Move;  						}    						break;    					case ViewControls3DButtons.Scale:  						if (gcode2DWidget != null)  						{  							gcode2DWidget.TransformState = GCode2DWidget.ETransformState.Scale;  						}    						break;  				}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,PrinterTabPage,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\PrinterTabPage.cs,SetViewMode,The following switch statement is missing a default case: switch (viewMode)  			{  				case PartViewMode.Layers2D:  					UserSettings.Instance.set(UserSettingsKey.LayerViewDefault' "2D Layer");  					gcode2DWidget.Visible = true;  					break;    				case PartViewMode.Layers3D:  					UserSettings.Instance.set(UserSettingsKey.LayerViewDefault' "3D Layer");  					break;    				case PartViewMode.Model:  					break;  			}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,PrimitivesExtensions,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\SceneViewer\ItemTraceDataDrawable.cs,FilterX,The following switch statement is missing a default case: switch (context.BvhItem)  					{  						case Transform transform:  							items.Push((transform.Child' transform.AxisToWorld * context.Matrix));  							break;    						case UnboundCollection unboundCollection:  							foreach (var item in unboundCollection.Items)  							{  								items.Push((item' context.Matrix));  							}  							break;  					}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,ColorSwatchSelector,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\ColorSwatchSelector.cs,ColorSwatchSelector,The following switch statement is missing a default case: switch(rowIndex)  				{  					case 0:  						var resetButton = new IconButton(AggContext.StaticData.LoadIcon("transparent_grid.png")' theme)  						{  							Width = scaledButtonSize'  							Height = scaledButtonSize'  							Margin = buttonSpacing'  							VAnchor = VAnchor.Absolute  						};  						resetButton.Click += (s' e) =>  						{  							// The colorChanged action displays the given color - use .MinimalHighlight rather than no color  							colorChanged(Color.Transparent);  						};  						colorRow.AddChild(resetButton);  						break;    					case 1:  						colorRow.AddChild(MakeColorButton(new Color("#555")' scaledButtonSize' buttonSpacing' colorChanged));  						break;    					case 2:  						colorRow.AddChild(MakeColorButton(new Color("#222")' scaledButtonSize' buttonSpacing' colorChanged));  						break;  				}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,SnappingIndicators,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\Gui3D\SnapingIndicator.cs,SetPosition,The following switch statement is missing a default case: switch (meshSelectInfo.HitQuadrant)  			{  				case HitQuadrant.LB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.LT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MinXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint - new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint - new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RB:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MinXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint - new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint - new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;    				case HitQuadrant.RT:  					{  						Vector3 cornerPoint = new Vector3(selectedBounds.MaxXYZ.X' selectedBounds.MaxXYZ.Y' 0);  						double distBetweenPixelsWorldSpace = world.GetWorldUnitsPerScreenPixelAtPosition(cornerPoint);    						lines[0] = world.GetScreenPosition(cornerPoint + new Vector3(distToStart * distBetweenPixelsWorldSpace' 0' 0));  						lines[1] = world.GetScreenPosition(cornerPoint + new Vector3((distToStart + lineLength) * distBetweenPixelsWorldSpace' 0' 0));    						lines[2] = world.GetScreenPosition(cornerPoint + new Vector3(0' distToStart * distBetweenPixelsWorldSpace' 0));  						lines[3] = world.GetScreenPosition(cornerPoint + new Vector3(0' (distToStart + lineLength) * distBetweenPixelsWorldSpace' 0));  					}  					break;  			}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,InteractionLayer,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\InteractionLayer.cs,DrawGlContent,The following switch statement is missing a default case: switch (modelRenderStyle)  			{  				case ModelRenderStyle.Wireframe:  					wireColor = darkWireframe;  					break;    				case ModelRenderStyle.WireframeAndSolid:  					wireColor = lightWireframe;  					break;  			}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,DrawMouseHover,The following switch statement is missing a default case: switch (tileIndex)  					{  						case 0: // top  							hitGraphics.FillRectangle(0'  								0'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4'  								theme.AccentMimimalOverlay);  							break;    						case 1:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 2:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 0'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 1'  								theme.AccentMimimalOverlay);  							break;    						case 3:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4'  								hitTexture.source.Width / 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 4:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4'  									hitTexture.source.Height / 4'  									hitTexture.source.Width / 4 * 3'  									hitTexture.source.Height / 4 * 3'  									theme.AccentMimimalOverlay);  							break;    						case 5:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 1'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 3'  								theme.AccentMimimalOverlay);  							break;    						case 6:  							hitGraphics.FillRectangle(0'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4'  								hitTexture.source.Height'  								theme.AccentMimimalOverlay);  							break;    						case 7:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 1'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;    						case 8:  							hitGraphics.FillRectangle(hitTexture.source.Width / 4 * 3'  								hitTexture.source.Height / 4 * 3'  								hitTexture.source.Width / 4 * 4'  								hitTexture.source.Height / 4 * 4'  								theme.AccentMimimalOverlay);  							break;  					}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,TumbleCubeControl,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\TumbleCubeControl.cs,GetDirectionForFace,The following switch statement is missing a default case: switch (faceIndex)  				{  					case -1:  						count--;  						break;    					case 0:  						// top  						normal += -Vector3.UnitZ;  						if (count == 1)  						{  							up = (hitData.TileIndex[0] == 4) ? Vector3.UnitY : Vector3.UnitZ;  						}    						break;    					case 1:  						// Left  						normal += Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 2:  						// Right  						normal += -Vector3.UnitX;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 3:  						// Bottom  						normal += Vector3.UnitZ;  						if (count == 1)  						{  							up = -Vector3.UnitY;  						}    						break;    					case 4:  						// Back  						normal += -Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;    					case 5:  						// Front  						normal += Vector3.UnitY;  						if (count == 1)  						{  							up = Vector3.UnitZ;  						}    						break;  				}
Missing Default,MatterHackers.MatterControl.PartPreviewWindow,View3DWidget,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\PartPreviewWindow\View3D\View3DWidget.cs,ViewControls3D_TransformStateChanged,The following switch statement is missing a default case: switch (e.TransformMode)  			{  				case ViewControls3DButtons.Rotate:  					TrackballTumbleWidget.TransformState = TrackBallTransformType.Rotation;  					break;    				case ViewControls3DButtons.Translate:  					TrackballTumbleWidget.TransformState = TrackBallTransformType.Translation;  					break;    				case ViewControls3DButtons.Scale:  					TrackballTumbleWidget.TransformState = TrackBallTransformType.Scale;  					break;    				case ViewControls3DButtons.PartSelect:  					TrackballTumbleWidget.TransformState = TrackBallTransformType.None;  					break;  			}
Missing Default,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,ImportFromExisting,The following switch statement is missing a default case: switch (importType)  			{  				case ProfileManager.ProfileExtension:  					// Add the Settings as a profile before performing any actions on it to ensure file paths resolve  					{  						Instance.Profiles.Add(printerInfo);    						var printerSettings = PrinterSettings.LoadFile(settingsFilePath);  						printerSettings.ID = printerInfo.ID;  						printerSettings.ClearValue(SettingsKey.device_token);  						printerInfo.DeviceToken = "";    						// TODO: Resolve name conflicts  						printerSettings.Helpers.SetName(printerInfo.Name);    						if (printerSettings.OemLayer.ContainsKey(SettingsKey.make))  						{  							printerInfo.Make = printerSettings.OemLayer[SettingsKey.make];  						}    						if (printerSettings.OemLayer.ContainsKey(SettingsKey.model))  						{  							printerInfo.Model = printerSettings.OemLayer[SettingsKey.model] ?? "Other";  						}    						if (clearBlackList)  						{  							printerSettings.ClearBlackList();  						}    						printerSettings.Save(userDrivenChange: false);  						importSuccessful = true;  					}  					break;    				case ".ini":  					//Scope variables  					{  						var settingsToImport = PrinterSettingsLayer.LoadFromIni(settingsFilePath);  						var printerSettings = new PrinterSettings()  						{  							ID = printerInfo.ID'  						};    						bool containsValidSetting = false;    						printerSettings.OemLayer = new PrinterSettingsLayer();    						printerSettings.OemLayer[SettingsKey.make] = "Other";  						printerSettings.OemLayer[SettingsKey.model] = "Other";    						foreach (var item in settingsToImport)  						{  							if (printerSettings.Contains(item.Key))  							{  								containsValidSetting = true;  								string currentValue = printerSettings.GetValue(item.Key).Trim();  								// Compare the value to import to the layer cascade value and only set if different  								if (currentValue != item.Value)  								{  									printerSettings.OemLayer[item.Key] = item.Value;  								}  							}  						}    						if (containsValidSetting)  						{  							printerSettings.UserLayer[SettingsKey.printer_name] = printerInfo.Name;    							printerSettings.ClearValue(SettingsKey.device_token);  							printerInfo.DeviceToken = "";    							printerInfo.Make = printerSettings.OemLayer[SettingsKey.make] ?? "Other";  							printerInfo.Model = printerSettings.OemLayer[SettingsKey.model] ?? "Other";    							Instance.Profiles.Add(printerInfo);    							printerSettings.Helpers.SetName(printerInfo.Name);    							if (clearBlackList)  							{  								printerSettings.ClearBlackList();  							}    							printerSettings.Save(userDrivenChange: false);  							importSuccessful = true;  						}  					}    					break;  			}
Missing Default,MatterHackers.MatterControl.SlicerConfiguration,ProfileManager,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\Settings\ProfileManager.cs,Printer_SettingsChanged,The following switch statement is missing a default case: switch (settingsKey)  			{  				case SettingsKey.printer_name:  					profile.Name = settings.GetValue(SettingsKey.printer_name);  					Instance.Save();  					break;    				case SettingsKey.com_port:  					profile.ComPort = settings.Helpers.ComPort();  					Instance.Save();  					break;  			}
Missing Default,MatterHackers.MatterControl.SlicerConfiguration,SliceSettingsRow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\SliceSettingsRow.cs,UpdateStyle,The following switch statement is missing a default case: switch (settingsContext.ViewFilter)  				{  					case NamedSettingsLayers.All:  						if (settingData.ShowAsOverride)  						{  							var defaultCascade = printer.Settings.GetDefaultLayerCascade();  							var firstParentValue = printer.Settings.GetValueAndLayerName(settingData.SlicerConfigName' defaultCascade.Skip(1));  							var (currentValue' layerName) = printer.Settings.GetValueAndLayerName(settingData.SlicerConfigName' defaultCascade);    							if (printer.Settings.IsOverride(settingData.SlicerConfigName))  							{  								if (firstParentValue.Item1 == currentValue)  								{  									if (layerName.StartsWith("Material"))  									{  										this.HighlightColor = theme.PresetColors.MaterialPreset;  									}  									else if (layerName.StartsWith("Quality"))  									{  										this.HighlightColor = theme.PresetColors.QualityPreset;  									}  									else  									{  										this.HighlightColor = Color.Transparent;  									}    									if (restoreButton != null)  									{  										restoreButton.Visible = false;  									}  								}  								else  								{  									this.HighlightColor = theme.PresetColors.UserOverride;  									if (restoreButton != null) restoreButton.Visible = true;  								}  							}  							else  							{  								this.HighlightColor = Color.Transparent;  								if (restoreButton != null) restoreButton.Visible = false;  							}  						}  						break;  					case NamedSettingsLayers.Material:  						this.HighlightColor = theme.PresetColors.MaterialPreset;  						if (restoreButton != null) restoreButton.Visible = true;  						break;  					case NamedSettingsLayers.Quality:  						this.HighlightColor = theme.PresetColors.QualityPreset;  						if (restoreButton != null) restoreButton.Visible = true;  						break;  				}
Missing Default,MatterHackers.MatterControl.SlicerConfiguration,CharField,D:\research\architectureSmells\repos\MatterHackers_MatterControl\MatterControlLib\SlicerConfiguration\UIFields\CharField.cs,Initialize,The following switch statement is missing a default case: switch(e.KeyCode)  				{  					case Keys.Back:  						this.SetValue(" "' true);  						break;  				}
