Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The length of the statement  "								aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[i].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[i].WorldMatrix())); " is 129.
Long Statement,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The length of the statement  "							TypeFacePrinter typeFacePrinter = new TypeFacePrinter(item.Name' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter); " is 128.
Long Statement,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The length of the statement  "								PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' meshGroup.Mesh' meshGroup.WorldMatrix()' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' Color.Black); " is 226.
Long Statement,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The length of the statement  "						plateGraphics.Render(partsOnLine[0].image' plateInventoryImage.Width / 2 - partsOnLine[0].image.Width / 2' offset.Y - tallestHeight); " is 133.
Long Statement,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The length of the statement  "			TypeFacePrinter printer = new TypeFacePrinter(string.Format("{0}"' Path.GetFileNameWithoutExtension(pathAndFileToSaveTo))' 32' justification: Justification.Center); " is 164.
Long Statement,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,PrintTopOfPage,The length of the statement  "			var lineBounds = new RectangleDouble(0' 0' plateInventoryImage.Width - PageMarginPixels.Left * 2' underlineHeightMM * PixelPerMM); " is 130.
Empty Catch Block,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The method has an empty catch block.
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,PartsSheet,The following statement contains a magic number: SheetDpi = 300;
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,PartsSheet,The following statement contains a magic number: SheetSizeInches = new Vector2(8.5' 11);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,PartsSheet,The following statement contains a magic number: SheetSizeInches = new Vector2(8.5' 11);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Export Part Sheet".Localize()'  				null'  				async (reporter' cancelationToken) =>  				{  					var progressStatus = new ProgressStatus();    					var processCount = 0.0;  					currentlySaving = true;  					// first create images for all the parts  					foreach (var item in itemSource)  					{  						progressStatus.Status = item.Name;  						reporter.Report(progressStatus);    						var xxx = itemSource.Count();  						var yyy = itemSource.FirstOrDefault()?.Name;    						var object3D = await item.CreateContent();    						var loadedMeshGroups = object3D.VisibleMeshes().ToList();  						if (loadedMeshGroups?.Count > 0)  						{  							AxisAlignedBoundingBox aabb = loadedMeshGroups[0].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[0].WorldMatrix());    							for (int i = 1; i < loadedMeshGroups.Count; i++)  							{  								aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[i].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[i].WorldMatrix()));  							}    							RectangleDouble bounds2D = new RectangleDouble(aabb.MinXYZ.X' aabb.MinXYZ.Y' aabb.MaxXYZ.X' aabb.MaxXYZ.Y);  							double widthInMM = bounds2D.Width + PartMarginMM * 2;  							double textSpaceMM = 5;  							double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    							TypeFacePrinter typeFacePrinter = new TypeFacePrinter(item.Name' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  							double sizeOfNameX = typeFacePrinter.GetSize().X + PartMarginPixels * 2;  							Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    							ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.X))' (int)(sizeOfRender.Y));  							typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    							Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    							RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  							double strokeWidth = .5 * PixelPerMM;  							rectBounds.Inflate(-strokeWidth / 2);  							RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  							partGraphics2D.Render(rect' Color.LightGray);  							Stroke rectOutline = new Stroke(rect' strokeWidth);  							partGraphics2D.Render(rectOutline' Color.DarkGray);    							foreach (var meshGroup in loadedMeshGroups)  							{  								PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' meshGroup.Mesh' meshGroup.WorldMatrix()' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' Color.Black);  							}  							partGraphics2D.Render(typeFacePrinter' Color.Black);    							partImagesToPrint.Add(new PartImage(imageOfPart));  						}    						progressStatus.Progress0To1 = Math.Min(processCount / itemSource.Count' .95);  						reporter.Report(progressStatus);  						processCount++;  					}    					progressStatus.Status = "Saving".Localize();  					reporter.Report(progressStatus);    					partImagesToPrint.Sort(BiggestToLittlestImages);    					PdfDocument document = new PdfDocument();  					document.Info.Title = "MatterHackers Parts Sheet";  					document.Info.Author = "MatterHackers Inc.";  					document.Info.Subject = "This is a list of the parts that are in a queue from MatterControl.";  					document.Info.Keywords = "MatterControl' STL' 3D Printing";    					int nextPartToPrintIndex = 0;  					int plateNumber = 1;  					bool done = false;    					while (!done && nextPartToPrintIndex < partImagesToPrint.Count)  					{  						PdfPage pdfPage = document.AddPage();  						CreateOnePage(plateNumber++' ref nextPartToPrintIndex' pdfPage);  					}    					try  					{  						// save the final document  						document.Save(pathAndFileToSaveTo);    						// Now try and open the document. This will launch whatever PDF viewer is on the system and ask it  						// to show the file (at least on Windows).  						Process.Start(pathAndFileToSaveTo);  					}  					catch (Exception)  					{  					}    					currentlySaving = false;    					progressStatus.Progress0To1 = 1;  					reporter.Report(progressStatus);  				});
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Export Part Sheet".Localize()'  				null'  				async (reporter' cancelationToken) =>  				{  					var progressStatus = new ProgressStatus();    					var processCount = 0.0;  					currentlySaving = true;  					// first create images for all the parts  					foreach (var item in itemSource)  					{  						progressStatus.Status = item.Name;  						reporter.Report(progressStatus);    						var xxx = itemSource.Count();  						var yyy = itemSource.FirstOrDefault()?.Name;    						var object3D = await item.CreateContent();    						var loadedMeshGroups = object3D.VisibleMeshes().ToList();  						if (loadedMeshGroups?.Count > 0)  						{  							AxisAlignedBoundingBox aabb = loadedMeshGroups[0].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[0].WorldMatrix());    							for (int i = 1; i < loadedMeshGroups.Count; i++)  							{  								aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[i].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[i].WorldMatrix()));  							}    							RectangleDouble bounds2D = new RectangleDouble(aabb.MinXYZ.X' aabb.MinXYZ.Y' aabb.MaxXYZ.X' aabb.MaxXYZ.Y);  							double widthInMM = bounds2D.Width + PartMarginMM * 2;  							double textSpaceMM = 5;  							double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    							TypeFacePrinter typeFacePrinter = new TypeFacePrinter(item.Name' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  							double sizeOfNameX = typeFacePrinter.GetSize().X + PartMarginPixels * 2;  							Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    							ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.X))' (int)(sizeOfRender.Y));  							typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    							Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    							RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  							double strokeWidth = .5 * PixelPerMM;  							rectBounds.Inflate(-strokeWidth / 2);  							RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  							partGraphics2D.Render(rect' Color.LightGray);  							Stroke rectOutline = new Stroke(rect' strokeWidth);  							partGraphics2D.Render(rectOutline' Color.DarkGray);    							foreach (var meshGroup in loadedMeshGroups)  							{  								PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' meshGroup.Mesh' meshGroup.WorldMatrix()' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' Color.Black);  							}  							partGraphics2D.Render(typeFacePrinter' Color.Black);    							partImagesToPrint.Add(new PartImage(imageOfPart));  						}    						progressStatus.Progress0To1 = Math.Min(processCount / itemSource.Count' .95);  						reporter.Report(progressStatus);  						processCount++;  					}    					progressStatus.Status = "Saving".Localize();  					reporter.Report(progressStatus);    					partImagesToPrint.Sort(BiggestToLittlestImages);    					PdfDocument document = new PdfDocument();  					document.Info.Title = "MatterHackers Parts Sheet";  					document.Info.Author = "MatterHackers Inc.";  					document.Info.Subject = "This is a list of the parts that are in a queue from MatterControl.";  					document.Info.Keywords = "MatterControl' STL' 3D Printing";    					int nextPartToPrintIndex = 0;  					int plateNumber = 1;  					bool done = false;    					while (!done && nextPartToPrintIndex < partImagesToPrint.Count)  					{  						PdfPage pdfPage = document.AddPage();  						CreateOnePage(plateNumber++' ref nextPartToPrintIndex' pdfPage);  					}    					try  					{  						// save the final document  						document.Save(pathAndFileToSaveTo);    						// Now try and open the document. This will launch whatever PDF viewer is on the system and ask it  						// to show the file (at least on Windows).  						Process.Start(pathAndFileToSaveTo);  					}  					catch (Exception)  					{  					}    					currentlySaving = false;    					progressStatus.Progress0To1 = 1;  					reporter.Report(progressStatus);  				});
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Export Part Sheet".Localize()'  				null'  				async (reporter' cancelationToken) =>  				{  					var progressStatus = new ProgressStatus();    					var processCount = 0.0;  					currentlySaving = true;  					// first create images for all the parts  					foreach (var item in itemSource)  					{  						progressStatus.Status = item.Name;  						reporter.Report(progressStatus);    						var xxx = itemSource.Count();  						var yyy = itemSource.FirstOrDefault()?.Name;    						var object3D = await item.CreateContent();    						var loadedMeshGroups = object3D.VisibleMeshes().ToList();  						if (loadedMeshGroups?.Count > 0)  						{  							AxisAlignedBoundingBox aabb = loadedMeshGroups[0].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[0].WorldMatrix());    							for (int i = 1; i < loadedMeshGroups.Count; i++)  							{  								aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[i].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[i].WorldMatrix()));  							}    							RectangleDouble bounds2D = new RectangleDouble(aabb.MinXYZ.X' aabb.MinXYZ.Y' aabb.MaxXYZ.X' aabb.MaxXYZ.Y);  							double widthInMM = bounds2D.Width + PartMarginMM * 2;  							double textSpaceMM = 5;  							double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    							TypeFacePrinter typeFacePrinter = new TypeFacePrinter(item.Name' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  							double sizeOfNameX = typeFacePrinter.GetSize().X + PartMarginPixels * 2;  							Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    							ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.X))' (int)(sizeOfRender.Y));  							typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    							Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    							RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  							double strokeWidth = .5 * PixelPerMM;  							rectBounds.Inflate(-strokeWidth / 2);  							RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  							partGraphics2D.Render(rect' Color.LightGray);  							Stroke rectOutline = new Stroke(rect' strokeWidth);  							partGraphics2D.Render(rectOutline' Color.DarkGray);    							foreach (var meshGroup in loadedMeshGroups)  							{  								PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' meshGroup.Mesh' meshGroup.WorldMatrix()' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' Color.Black);  							}  							partGraphics2D.Render(typeFacePrinter' Color.Black);    							partImagesToPrint.Add(new PartImage(imageOfPart));  						}    						progressStatus.Progress0To1 = Math.Min(processCount / itemSource.Count' .95);  						reporter.Report(progressStatus);  						processCount++;  					}    					progressStatus.Status = "Saving".Localize();  					reporter.Report(progressStatus);    					partImagesToPrint.Sort(BiggestToLittlestImages);    					PdfDocument document = new PdfDocument();  					document.Info.Title = "MatterHackers Parts Sheet";  					document.Info.Author = "MatterHackers Inc.";  					document.Info.Subject = "This is a list of the parts that are in a queue from MatterControl.";  					document.Info.Keywords = "MatterControl' STL' 3D Printing";    					int nextPartToPrintIndex = 0;  					int plateNumber = 1;  					bool done = false;    					while (!done && nextPartToPrintIndex < partImagesToPrint.Count)  					{  						PdfPage pdfPage = document.AddPage();  						CreateOnePage(plateNumber++' ref nextPartToPrintIndex' pdfPage);  					}    					try  					{  						// save the final document  						document.Save(pathAndFileToSaveTo);    						// Now try and open the document. This will launch whatever PDF viewer is on the system and ask it  						// to show the file (at least on Windows).  						Process.Start(pathAndFileToSaveTo);  					}  					catch (Exception)  					{  					}    					currentlySaving = false;    					progressStatus.Progress0To1 = 1;  					reporter.Report(progressStatus);  				});
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Export Part Sheet".Localize()'  				null'  				async (reporter' cancelationToken) =>  				{  					var progressStatus = new ProgressStatus();    					var processCount = 0.0;  					currentlySaving = true;  					// first create images for all the parts  					foreach (var item in itemSource)  					{  						progressStatus.Status = item.Name;  						reporter.Report(progressStatus);    						var xxx = itemSource.Count();  						var yyy = itemSource.FirstOrDefault()?.Name;    						var object3D = await item.CreateContent();    						var loadedMeshGroups = object3D.VisibleMeshes().ToList();  						if (loadedMeshGroups?.Count > 0)  						{  							AxisAlignedBoundingBox aabb = loadedMeshGroups[0].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[0].WorldMatrix());    							for (int i = 1; i < loadedMeshGroups.Count; i++)  							{  								aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[i].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[i].WorldMatrix()));  							}    							RectangleDouble bounds2D = new RectangleDouble(aabb.MinXYZ.X' aabb.MinXYZ.Y' aabb.MaxXYZ.X' aabb.MaxXYZ.Y);  							double widthInMM = bounds2D.Width + PartMarginMM * 2;  							double textSpaceMM = 5;  							double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    							TypeFacePrinter typeFacePrinter = new TypeFacePrinter(item.Name' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  							double sizeOfNameX = typeFacePrinter.GetSize().X + PartMarginPixels * 2;  							Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    							ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.X))' (int)(sizeOfRender.Y));  							typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    							Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    							RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  							double strokeWidth = .5 * PixelPerMM;  							rectBounds.Inflate(-strokeWidth / 2);  							RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  							partGraphics2D.Render(rect' Color.LightGray);  							Stroke rectOutline = new Stroke(rect' strokeWidth);  							partGraphics2D.Render(rectOutline' Color.DarkGray);    							foreach (var meshGroup in loadedMeshGroups)  							{  								PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' meshGroup.Mesh' meshGroup.WorldMatrix()' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' Color.Black);  							}  							partGraphics2D.Render(typeFacePrinter' Color.Black);    							partImagesToPrint.Add(new PartImage(imageOfPart));  						}    						progressStatus.Progress0To1 = Math.Min(processCount / itemSource.Count' .95);  						reporter.Report(progressStatus);  						processCount++;  					}    					progressStatus.Status = "Saving".Localize();  					reporter.Report(progressStatus);    					partImagesToPrint.Sort(BiggestToLittlestImages);    					PdfDocument document = new PdfDocument();  					document.Info.Title = "MatterHackers Parts Sheet";  					document.Info.Author = "MatterHackers Inc.";  					document.Info.Subject = "This is a list of the parts that are in a queue from MatterControl.";  					document.Info.Keywords = "MatterControl' STL' 3D Printing";    					int nextPartToPrintIndex = 0;  					int plateNumber = 1;  					bool done = false;    					while (!done && nextPartToPrintIndex < partImagesToPrint.Count)  					{  						PdfPage pdfPage = document.AddPage();  						CreateOnePage(plateNumber++' ref nextPartToPrintIndex' pdfPage);  					}    					try  					{  						// save the final document  						document.Save(pathAndFileToSaveTo);    						// Now try and open the document. This will launch whatever PDF viewer is on the system and ask it  						// to show the file (at least on Windows).  						Process.Start(pathAndFileToSaveTo);  					}  					catch (Exception)  					{  					}    					currentlySaving = false;    					progressStatus.Progress0To1 = 1;  					reporter.Report(progressStatus);  				});
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Export Part Sheet".Localize()'  				null'  				async (reporter' cancelationToken) =>  				{  					var progressStatus = new ProgressStatus();    					var processCount = 0.0;  					currentlySaving = true;  					// first create images for all the parts  					foreach (var item in itemSource)  					{  						progressStatus.Status = item.Name;  						reporter.Report(progressStatus);    						var xxx = itemSource.Count();  						var yyy = itemSource.FirstOrDefault()?.Name;    						var object3D = await item.CreateContent();    						var loadedMeshGroups = object3D.VisibleMeshes().ToList();  						if (loadedMeshGroups?.Count > 0)  						{  							AxisAlignedBoundingBox aabb = loadedMeshGroups[0].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[0].WorldMatrix());    							for (int i = 1; i < loadedMeshGroups.Count; i++)  							{  								aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[i].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[i].WorldMatrix()));  							}    							RectangleDouble bounds2D = new RectangleDouble(aabb.MinXYZ.X' aabb.MinXYZ.Y' aabb.MaxXYZ.X' aabb.MaxXYZ.Y);  							double widthInMM = bounds2D.Width + PartMarginMM * 2;  							double textSpaceMM = 5;  							double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    							TypeFacePrinter typeFacePrinter = new TypeFacePrinter(item.Name' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  							double sizeOfNameX = typeFacePrinter.GetSize().X + PartMarginPixels * 2;  							Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    							ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.X))' (int)(sizeOfRender.Y));  							typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    							Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    							RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  							double strokeWidth = .5 * PixelPerMM;  							rectBounds.Inflate(-strokeWidth / 2);  							RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  							partGraphics2D.Render(rect' Color.LightGray);  							Stroke rectOutline = new Stroke(rect' strokeWidth);  							partGraphics2D.Render(rectOutline' Color.DarkGray);    							foreach (var meshGroup in loadedMeshGroups)  							{  								PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' meshGroup.Mesh' meshGroup.WorldMatrix()' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' Color.Black);  							}  							partGraphics2D.Render(typeFacePrinter' Color.Black);    							partImagesToPrint.Add(new PartImage(imageOfPart));  						}    						progressStatus.Progress0To1 = Math.Min(processCount / itemSource.Count' .95);  						reporter.Report(progressStatus);  						processCount++;  					}    					progressStatus.Status = "Saving".Localize();  					reporter.Report(progressStatus);    					partImagesToPrint.Sort(BiggestToLittlestImages);    					PdfDocument document = new PdfDocument();  					document.Info.Title = "MatterHackers Parts Sheet";  					document.Info.Author = "MatterHackers Inc.";  					document.Info.Subject = "This is a list of the parts that are in a queue from MatterControl.";  					document.Info.Keywords = "MatterControl' STL' 3D Printing";    					int nextPartToPrintIndex = 0;  					int plateNumber = 1;  					bool done = false;    					while (!done && nextPartToPrintIndex < partImagesToPrint.Count)  					{  						PdfPage pdfPage = document.AddPage();  						CreateOnePage(plateNumber++' ref nextPartToPrintIndex' pdfPage);  					}    					try  					{  						// save the final document  						document.Save(pathAndFileToSaveTo);    						// Now try and open the document. This will launch whatever PDF viewer is on the system and ask it  						// to show the file (at least on Windows).  						Process.Start(pathAndFileToSaveTo);  					}  					catch (Exception)  					{  					}    					currentlySaving = false;    					progressStatus.Progress0To1 = 1;  					reporter.Report(progressStatus);  				});
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Export Part Sheet".Localize()'  				null'  				async (reporter' cancelationToken) =>  				{  					var progressStatus = new ProgressStatus();    					var processCount = 0.0;  					currentlySaving = true;  					// first create images for all the parts  					foreach (var item in itemSource)  					{  						progressStatus.Status = item.Name;  						reporter.Report(progressStatus);    						var xxx = itemSource.Count();  						var yyy = itemSource.FirstOrDefault()?.Name;    						var object3D = await item.CreateContent();    						var loadedMeshGroups = object3D.VisibleMeshes().ToList();  						if (loadedMeshGroups?.Count > 0)  						{  							AxisAlignedBoundingBox aabb = loadedMeshGroups[0].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[0].WorldMatrix());    							for (int i = 1; i < loadedMeshGroups.Count; i++)  							{  								aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[i].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[i].WorldMatrix()));  							}    							RectangleDouble bounds2D = new RectangleDouble(aabb.MinXYZ.X' aabb.MinXYZ.Y' aabb.MaxXYZ.X' aabb.MaxXYZ.Y);  							double widthInMM = bounds2D.Width + PartMarginMM * 2;  							double textSpaceMM = 5;  							double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    							TypeFacePrinter typeFacePrinter = new TypeFacePrinter(item.Name' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  							double sizeOfNameX = typeFacePrinter.GetSize().X + PartMarginPixels * 2;  							Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    							ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.X))' (int)(sizeOfRender.Y));  							typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    							Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    							RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  							double strokeWidth = .5 * PixelPerMM;  							rectBounds.Inflate(-strokeWidth / 2);  							RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  							partGraphics2D.Render(rect' Color.LightGray);  							Stroke rectOutline = new Stroke(rect' strokeWidth);  							partGraphics2D.Render(rectOutline' Color.DarkGray);    							foreach (var meshGroup in loadedMeshGroups)  							{  								PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' meshGroup.Mesh' meshGroup.WorldMatrix()' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' Color.Black);  							}  							partGraphics2D.Render(typeFacePrinter' Color.Black);    							partImagesToPrint.Add(new PartImage(imageOfPart));  						}    						progressStatus.Progress0To1 = Math.Min(processCount / itemSource.Count' .95);  						reporter.Report(progressStatus);  						processCount++;  					}    					progressStatus.Status = "Saving".Localize();  					reporter.Report(progressStatus);    					partImagesToPrint.Sort(BiggestToLittlestImages);    					PdfDocument document = new PdfDocument();  					document.Info.Title = "MatterHackers Parts Sheet";  					document.Info.Author = "MatterHackers Inc.";  					document.Info.Subject = "This is a list of the parts that are in a queue from MatterControl.";  					document.Info.Keywords = "MatterControl' STL' 3D Printing";    					int nextPartToPrintIndex = 0;  					int plateNumber = 1;  					bool done = false;    					while (!done && nextPartToPrintIndex < partImagesToPrint.Count)  					{  						PdfPage pdfPage = document.AddPage();  						CreateOnePage(plateNumber++' ref nextPartToPrintIndex' pdfPage);  					}    					try  					{  						// save the final document  						document.Save(pathAndFileToSaveTo);    						// Now try and open the document. This will launch whatever PDF viewer is on the system and ask it  						// to show the file (at least on Windows).  						Process.Start(pathAndFileToSaveTo);  					}  					catch (Exception)  					{  					}    					currentlySaving = false;    					progressStatus.Progress0To1 = 1;  					reporter.Report(progressStatus);  				});
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Export Part Sheet".Localize()'  				null'  				async (reporter' cancelationToken) =>  				{  					var progressStatus = new ProgressStatus();    					var processCount = 0.0;  					currentlySaving = true;  					// first create images for all the parts  					foreach (var item in itemSource)  					{  						progressStatus.Status = item.Name;  						reporter.Report(progressStatus);    						var xxx = itemSource.Count();  						var yyy = itemSource.FirstOrDefault()?.Name;    						var object3D = await item.CreateContent();    						var loadedMeshGroups = object3D.VisibleMeshes().ToList();  						if (loadedMeshGroups?.Count > 0)  						{  							AxisAlignedBoundingBox aabb = loadedMeshGroups[0].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[0].WorldMatrix());    							for (int i = 1; i < loadedMeshGroups.Count; i++)  							{  								aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[i].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[i].WorldMatrix()));  							}    							RectangleDouble bounds2D = new RectangleDouble(aabb.MinXYZ.X' aabb.MinXYZ.Y' aabb.MaxXYZ.X' aabb.MaxXYZ.Y);  							double widthInMM = bounds2D.Width + PartMarginMM * 2;  							double textSpaceMM = 5;  							double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    							TypeFacePrinter typeFacePrinter = new TypeFacePrinter(item.Name' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  							double sizeOfNameX = typeFacePrinter.GetSize().X + PartMarginPixels * 2;  							Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    							ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.X))' (int)(sizeOfRender.Y));  							typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    							Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    							RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  							double strokeWidth = .5 * PixelPerMM;  							rectBounds.Inflate(-strokeWidth / 2);  							RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  							partGraphics2D.Render(rect' Color.LightGray);  							Stroke rectOutline = new Stroke(rect' strokeWidth);  							partGraphics2D.Render(rectOutline' Color.DarkGray);    							foreach (var meshGroup in loadedMeshGroups)  							{  								PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' meshGroup.Mesh' meshGroup.WorldMatrix()' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' Color.Black);  							}  							partGraphics2D.Render(typeFacePrinter' Color.Black);    							partImagesToPrint.Add(new PartImage(imageOfPart));  						}    						progressStatus.Progress0To1 = Math.Min(processCount / itemSource.Count' .95);  						reporter.Report(progressStatus);  						processCount++;  					}    					progressStatus.Status = "Saving".Localize();  					reporter.Report(progressStatus);    					partImagesToPrint.Sort(BiggestToLittlestImages);    					PdfDocument document = new PdfDocument();  					document.Info.Title = "MatterHackers Parts Sheet";  					document.Info.Author = "MatterHackers Inc.";  					document.Info.Subject = "This is a list of the parts that are in a queue from MatterControl.";  					document.Info.Keywords = "MatterControl' STL' 3D Printing";    					int nextPartToPrintIndex = 0;  					int plateNumber = 1;  					bool done = false;    					while (!done && nextPartToPrintIndex < partImagesToPrint.Count)  					{  						PdfPage pdfPage = document.AddPage();  						CreateOnePage(plateNumber++' ref nextPartToPrintIndex' pdfPage);  					}    					try  					{  						// save the final document  						document.Save(pathAndFileToSaveTo);    						// Now try and open the document. This will launch whatever PDF viewer is on the system and ask it  						// to show the file (at least on Windows).  						Process.Start(pathAndFileToSaveTo);  					}  					catch (Exception)  					{  					}    					currentlySaving = false;    					progressStatus.Progress0To1 = 1;  					reporter.Report(progressStatus);  				});
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Export Part Sheet".Localize()'  				null'  				async (reporter' cancelationToken) =>  				{  					var progressStatus = new ProgressStatus();    					var processCount = 0.0;  					currentlySaving = true;  					// first create images for all the parts  					foreach (var item in itemSource)  					{  						progressStatus.Status = item.Name;  						reporter.Report(progressStatus);    						var xxx = itemSource.Count();  						var yyy = itemSource.FirstOrDefault()?.Name;    						var object3D = await item.CreateContent();    						var loadedMeshGroups = object3D.VisibleMeshes().ToList();  						if (loadedMeshGroups?.Count > 0)  						{  							AxisAlignedBoundingBox aabb = loadedMeshGroups[0].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[0].WorldMatrix());    							for (int i = 1; i < loadedMeshGroups.Count; i++)  							{  								aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[i].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[i].WorldMatrix()));  							}    							RectangleDouble bounds2D = new RectangleDouble(aabb.MinXYZ.X' aabb.MinXYZ.Y' aabb.MaxXYZ.X' aabb.MaxXYZ.Y);  							double widthInMM = bounds2D.Width + PartMarginMM * 2;  							double textSpaceMM = 5;  							double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    							TypeFacePrinter typeFacePrinter = new TypeFacePrinter(item.Name' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  							double sizeOfNameX = typeFacePrinter.GetSize().X + PartMarginPixels * 2;  							Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    							ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.X))' (int)(sizeOfRender.Y));  							typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    							Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    							RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  							double strokeWidth = .5 * PixelPerMM;  							rectBounds.Inflate(-strokeWidth / 2);  							RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  							partGraphics2D.Render(rect' Color.LightGray);  							Stroke rectOutline = new Stroke(rect' strokeWidth);  							partGraphics2D.Render(rectOutline' Color.DarkGray);    							foreach (var meshGroup in loadedMeshGroups)  							{  								PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' meshGroup.Mesh' meshGroup.WorldMatrix()' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' Color.Black);  							}  							partGraphics2D.Render(typeFacePrinter' Color.Black);    							partImagesToPrint.Add(new PartImage(imageOfPart));  						}    						progressStatus.Progress0To1 = Math.Min(processCount / itemSource.Count' .95);  						reporter.Report(progressStatus);  						processCount++;  					}    					progressStatus.Status = "Saving".Localize();  					reporter.Report(progressStatus);    					partImagesToPrint.Sort(BiggestToLittlestImages);    					PdfDocument document = new PdfDocument();  					document.Info.Title = "MatterHackers Parts Sheet";  					document.Info.Author = "MatterHackers Inc.";  					document.Info.Subject = "This is a list of the parts that are in a queue from MatterControl.";  					document.Info.Keywords = "MatterControl' STL' 3D Printing";    					int nextPartToPrintIndex = 0;  					int plateNumber = 1;  					bool done = false;    					while (!done && nextPartToPrintIndex < partImagesToPrint.Count)  					{  						PdfPage pdfPage = document.AddPage();  						CreateOnePage(plateNumber++' ref nextPartToPrintIndex' pdfPage);  					}    					try  					{  						// save the final document  						document.Save(pathAndFileToSaveTo);    						// Now try and open the document. This will launch whatever PDF viewer is on the system and ask it  						// to show the file (at least on Windows).  						Process.Start(pathAndFileToSaveTo);  					}  					catch (Exception)  					{  					}    					currentlySaving = false;    					progressStatus.Progress0To1 = 1;  					reporter.Report(progressStatus);  				});
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Export Part Sheet".Localize()'  				null'  				async (reporter' cancelationToken) =>  				{  					var progressStatus = new ProgressStatus();    					var processCount = 0.0;  					currentlySaving = true;  					// first create images for all the parts  					foreach (var item in itemSource)  					{  						progressStatus.Status = item.Name;  						reporter.Report(progressStatus);    						var xxx = itemSource.Count();  						var yyy = itemSource.FirstOrDefault()?.Name;    						var object3D = await item.CreateContent();    						var loadedMeshGroups = object3D.VisibleMeshes().ToList();  						if (loadedMeshGroups?.Count > 0)  						{  							AxisAlignedBoundingBox aabb = loadedMeshGroups[0].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[0].WorldMatrix());    							for (int i = 1; i < loadedMeshGroups.Count; i++)  							{  								aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[i].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[i].WorldMatrix()));  							}    							RectangleDouble bounds2D = new RectangleDouble(aabb.MinXYZ.X' aabb.MinXYZ.Y' aabb.MaxXYZ.X' aabb.MaxXYZ.Y);  							double widthInMM = bounds2D.Width + PartMarginMM * 2;  							double textSpaceMM = 5;  							double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    							TypeFacePrinter typeFacePrinter = new TypeFacePrinter(item.Name' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  							double sizeOfNameX = typeFacePrinter.GetSize().X + PartMarginPixels * 2;  							Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    							ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.X))' (int)(sizeOfRender.Y));  							typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    							Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    							RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  							double strokeWidth = .5 * PixelPerMM;  							rectBounds.Inflate(-strokeWidth / 2);  							RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  							partGraphics2D.Render(rect' Color.LightGray);  							Stroke rectOutline = new Stroke(rect' strokeWidth);  							partGraphics2D.Render(rectOutline' Color.DarkGray);    							foreach (var meshGroup in loadedMeshGroups)  							{  								PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' meshGroup.Mesh' meshGroup.WorldMatrix()' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' Color.Black);  							}  							partGraphics2D.Render(typeFacePrinter' Color.Black);    							partImagesToPrint.Add(new PartImage(imageOfPart));  						}    						progressStatus.Progress0To1 = Math.Min(processCount / itemSource.Count' .95);  						reporter.Report(progressStatus);  						processCount++;  					}    					progressStatus.Status = "Saving".Localize();  					reporter.Report(progressStatus);    					partImagesToPrint.Sort(BiggestToLittlestImages);    					PdfDocument document = new PdfDocument();  					document.Info.Title = "MatterHackers Parts Sheet";  					document.Info.Author = "MatterHackers Inc.";  					document.Info.Subject = "This is a list of the parts that are in a queue from MatterControl.";  					document.Info.Keywords = "MatterControl' STL' 3D Printing";    					int nextPartToPrintIndex = 0;  					int plateNumber = 1;  					bool done = false;    					while (!done && nextPartToPrintIndex < partImagesToPrint.Count)  					{  						PdfPage pdfPage = document.AddPage();  						CreateOnePage(plateNumber++' ref nextPartToPrintIndex' pdfPage);  					}    					try  					{  						// save the final document  						document.Save(pathAndFileToSaveTo);    						// Now try and open the document. This will launch whatever PDF viewer is on the system and ask it  						// to show the file (at least on Windows).  						Process.Start(pathAndFileToSaveTo);  					}  					catch (Exception)  					{  					}    					currentlySaving = false;    					progressStatus.Progress0To1 = 1;  					reporter.Report(progressStatus);  				});
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,SaveSheets,The following statement contains a magic number: return ApplicationController.Instance.Tasks.Execute(  				"Export Part Sheet".Localize()'  				null'  				async (reporter' cancelationToken) =>  				{  					var progressStatus = new ProgressStatus();    					var processCount = 0.0;  					currentlySaving = true;  					// first create images for all the parts  					foreach (var item in itemSource)  					{  						progressStatus.Status = item.Name;  						reporter.Report(progressStatus);    						var xxx = itemSource.Count();  						var yyy = itemSource.FirstOrDefault()?.Name;    						var object3D = await item.CreateContent();    						var loadedMeshGroups = object3D.VisibleMeshes().ToList();  						if (loadedMeshGroups?.Count > 0)  						{  							AxisAlignedBoundingBox aabb = loadedMeshGroups[0].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[0].WorldMatrix());    							for (int i = 1; i < loadedMeshGroups.Count; i++)  							{  								aabb = AxisAlignedBoundingBox.Union(aabb' loadedMeshGroups[i].Mesh.GetAxisAlignedBoundingBox(loadedMeshGroups[i].WorldMatrix()));  							}    							RectangleDouble bounds2D = new RectangleDouble(aabb.MinXYZ.X' aabb.MinXYZ.Y' aabb.MaxXYZ.X' aabb.MaxXYZ.Y);  							double widthInMM = bounds2D.Width + PartMarginMM * 2;  							double textSpaceMM = 5;  							double heightMM = textSpaceMM + bounds2D.Height + PartMarginMM * 2;    							TypeFacePrinter typeFacePrinter = new TypeFacePrinter(item.Name' 28' Vector2.Zero' Justification.Center' Baseline.BoundsCenter);  							double sizeOfNameX = typeFacePrinter.GetSize().X + PartMarginPixels * 2;  							Vector2 sizeOfRender = new Vector2(widthInMM * PixelPerMM' heightMM * PixelPerMM);    							ImageBuffer imageOfPart = new ImageBuffer((int)(Math.Max(sizeOfNameX' sizeOfRender.X))' (int)(sizeOfRender.Y));  							typeFacePrinter.Origin = new Vector2(imageOfPart.Width / 2' (textSpaceMM / 2) * PixelPerMM);    							Graphics2D partGraphics2D = imageOfPart.NewGraphics2D();    							RectangleDouble rectBounds = new RectangleDouble(0' 0' imageOfPart.Width' imageOfPart.Height);  							double strokeWidth = .5 * PixelPerMM;  							rectBounds.Inflate(-strokeWidth / 2);  							RoundedRect rect = new RoundedRect(rectBounds' PartMarginMM * PixelPerMM);  							partGraphics2D.Render(rect' Color.LightGray);  							Stroke rectOutline = new Stroke(rect' strokeWidth);  							partGraphics2D.Render(rectOutline' Color.DarkGray);    							foreach (var meshGroup in loadedMeshGroups)  							{  								PolygonMesh.Rendering.OrthographicZProjection.DrawTo(partGraphics2D' meshGroup.Mesh' meshGroup.WorldMatrix()' new Vector2(-bounds2D.Left + PartMarginMM' -bounds2D.Bottom + textSpaceMM + PartMarginMM)' PixelPerMM' Color.Black);  							}  							partGraphics2D.Render(typeFacePrinter' Color.Black);    							partImagesToPrint.Add(new PartImage(imageOfPart));  						}    						progressStatus.Progress0To1 = Math.Min(processCount / itemSource.Count' .95);  						reporter.Report(progressStatus);  						processCount++;  					}    					progressStatus.Status = "Saving".Localize();  					reporter.Report(progressStatus);    					partImagesToPrint.Sort(BiggestToLittlestImages);    					PdfDocument document = new PdfDocument();  					document.Info.Title = "MatterHackers Parts Sheet";  					document.Info.Author = "MatterHackers Inc.";  					document.Info.Subject = "This is a list of the parts that are in a queue from MatterControl.";  					document.Info.Keywords = "MatterControl' STL' 3D Printing";    					int nextPartToPrintIndex = 0;  					int plateNumber = 1;  					bool done = false;    					while (!done && nextPartToPrintIndex < partImagesToPrint.Count)  					{  						PdfPage pdfPage = document.AddPage();  						CreateOnePage(plateNumber++' ref nextPartToPrintIndex' pdfPage);  					}    					try  					{  						// save the final document  						document.Save(pathAndFileToSaveTo);    						// Now try and open the document. This will launch whatever PDF viewer is on the system and ask it  						// to show the file (at least on Windows).  						Process.Start(pathAndFileToSaveTo);  					}  					catch (Exception)  					{  					}    					currentlySaving = false;    					progressStatus.Progress0To1 = 1;  					reporter.Report(progressStatus);  				});
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: ImageBuffer plateInventoryImage = new ImageBuffer((int)(300 * 8.5)' 300 * 11);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: ImageBuffer plateInventoryImage = new ImageBuffer((int)(300 * 8.5)' 300 * 11);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: ImageBuffer plateInventoryImage = new ImageBuffer((int)(300 * 8.5)' 300 * 11);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: ImageBuffer plateInventoryImage = new ImageBuffer((int)(300 * 8.5)' 300 * 11);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: plateGraphics.Render(partsOnLine[0].image' plateInventoryImage.Width / 2 - partsOnLine[0].image.Width / 2' offset.Y - tallestHeight);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: plateGraphics.Render(partsOnLine[0].image' plateInventoryImage.Width / 2 - partsOnLine[0].image.Width / 2' offset.Y - tallestHeight);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: offset.Y -= (tallestHeight + PartPaddingPixels * 2);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: TypeFacePrinter printer = new TypeFacePrinter(string.Format("{0}"' Path.GetFileNameWithoutExtension(pathAndFileToSaveTo))' 32' justification: Justification.Center);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: printer.Origin = new Vector2(plateGraphics.DestImage.Width / 2' 110);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: printer.Origin = new Vector2(plateGraphics.DestImage.Width / 2' 110);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: printer = new TypeFacePrinter(string.Format("Page {0}"' plateNumber)' 28' justification: Justification.Center);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: printer.Origin = new Vector2(plateGraphics.DestImage.Width / 2' 60);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,CreateOnePage,The following statement contains a magic number: printer.Origin = new Vector2(plateGraphics.DestImage.Width / 2' 60);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,PrintTopOfPage,The following statement contains a magic number: plateGraphics.Render(logoImage' (plateInventoryImage.Width - logoImage.Width) / 2' currentlyPrintingHeightPixels);
Magic Number,MatterHackers.MatterControl.Plugins,PartsSheet,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Plugins\MatterControl.PartSheet\PartsSheetCreator.cs,PrintTopOfPage,The following statement contains a magic number: var lineBounds = new RectangleDouble(0' 0' plateInventoryImage.Width - PageMarginPixels.Left * 2' underlineHeightMM * PixelPerMM);
