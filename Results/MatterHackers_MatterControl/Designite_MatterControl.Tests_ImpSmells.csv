Implementation smell,Namespace,Class,File,Method,Description
Long Method,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The method has 232 lines of code.
Long Method,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The method has 173 lines of code.
Long Method,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,CheckIfShouldBeShownParseTests,The method has 100 lines of code.
Long Method,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The method has 223 lines of code.
Long Method,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The method has 166 lines of code.
Long Method,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The method has 109 lines of code.
Long Method,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The method has 487 lines of code.
Complex Method,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,ValidateStreamResponse,Cyclomatic complexity of the method is 9
Complex Method,MatterHackers.PolygonMesh.UnitTests,DebugFace,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshCsgTests.cs,Classify2,Cyclomatic complexity of the method is 8
Long Parameter List,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,AnchorTests,The method has 6 parameters. Parameters: systemWindow' anchor' popup' button' validator' rowAdjuster
Long Parameter List,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ParseTempAndValidate,The method has 5 parameters. Parameters: gcodeString' extruder0' extruder1' extruder2' bedTemp
Long Parameter List,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The method has 7 parameters. Parameters: testMethod' staticDataPathOverride' maxTimeToRun' queueItemFolderToAdd' overrideWidth' overrideHeight' defaultTestImages
Long Identifier,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,SmoothieDualExtruderM105Response,The length of the parameter smoothieDualExtruderM105Response is 32.
Long Identifier,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,FirstLayerHeightLessThanNozzleDiameterXExtrusionMultiplier,The length of the parameter firstLayerExtrusionWidthString is 30.
Long Identifier,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,FirstLayerExtrusionWidthGreaterThanNozzleDiameterIfSet,The length of the parameter firstLayerExtrusionWidthString is 30.
Long Identifier,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,SupportInterfaceMaterialAssignedToExtruderOne,The length of the parameter supportMaterialInterfaceExtruder is 32.
Long Identifier,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerHeightLessThanNozzleDiameter,The length of the parameter convertedFirstLayerHeightValue is 30.
Long Identifier,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerExtrusionWidthAcceptableValue,The length of the parameter convertedFirstLayerExtrusionWidth is 33.
Long Identifier,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerExtrusionWidthAcceptableValue,The length of the parameter reformatFirstLayerExtrusionWidth is 32.
Long Identifier,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerExtrusionWidthNotZero,The length of the parameter convertedFirstLayerExtrusionWidth is 33.
Long Identifier,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerExtrusionWidthNotZero,The length of the parameter reformatFirstLayerExtrusionWidth is 32.
Long Statement,MatterControl.Tests.MatterControl,ApplicationControllerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ApplicationControllerTests.cs,LoadCachableShouldFallbackToStaticData,The length of the statement  "			AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "StaticData")); " is 130.
Long Statement,MatterControl.Tests.MatterControl,ApplicationControllerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ApplicationControllerTests.cs,LoadCachableShouldFallbackToStaticData,The length of the statement  "			Assert.IsFalse(File.Exists(cachePath)' "After fall back to StaticData content' cache should not contain fall back content"); " is 124.
Long Statement,MatterControl.Tests.MatterControl,ApplicationControllerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ApplicationControllerTests.cs,LoadCachableShouldStoreCollectedResults,The length of the statement  "			AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "StaticData")); " is 130.
Long Statement,MatterControl.Tests.MatterControl,ApplicationControllerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ApplicationControllerTests.cs,LoadCachableShouldStoreCollectedResults,The length of the statement  "			Assert.IsTrue(File.ReadAllText(cachePath).Contains("HelloFromCollector")' "Cached content should equal collected content"); " is 123.
Long Statement,MatterControl.Tests.MatterControl,BoundDropListTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BoundDropListTests.cs,BoundDropListHonorsWhitelist,The length of the statement  "			var manufacturers = new string[] { "3D Factory"' "3D Stuffmaker"' "Airwolf 3D"' "BCN3D"' "BeeVeryCreative"' "Blue Eagle Labs"' "Deezmaker"' "FlashForge"' "gCreate"' "IRA3D"' "JumpStart"' "Leapfrog"' "Lulzbot"' "MAKEiT"' "Maker's Tool Works"' "MakerBot"' "MakerGear"' "Me3D"' "OpenBeam"' "Organic Thinking System"' "Other"' "Portabee"' "Printrbot"' "PrintSpace"' "Revolution 3D Printers"' "ROBO 3D"' "SeeMeCNC"' "Solidoodle"' "Tosingraf"' "Type A Machines"' "Ultimaker"' "Velleman"' "Wanhao" }; " is 493.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("test that will show our conformance with braille") == "te/ t w %{ |r 3=m.e ) brl"); " is 126.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("so we can create some strings and then this gives us the output that is expected") == "s we c cr1te \"s /r+s & !n ? gives u ! |tput t is expect$"); " is 190.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("Waltz' bad nymph' for quick jigs vex.") == "'waltz1 bad nymph1 = qk jigs vex4"); " is 123.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("Quick zephyrs blow' vexing daft Jim.") == "'qk zephyrs bl{1 vex+ daft 'jim4"); " is 121.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("Sphinx of black quartz' judge my vow.") == "'sph9x ( black qu>tz1 judge my v{4"); " is 124.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("Two driven jocks help fax my big quiz.") == "'two driv5 jocks help fax my big quiz4"); " is 129.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			//				Assert.IsTrue(BrailleGrade2.ConvertString("Five quacking zephyrs jolt my wax bed.") == "'five quack+ zephyrs jolt my wax b$4"); " is 133.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("The five boxing wizards jump quickly.") == "'! five box+ wiz>ds jump qkly4"); " is 120.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("Pack my box with five dozen liquor jugs.") == "'pack my box ) five doz5 liquor jugs4"); " is 130.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("The quick brown fox jumps over the lazy dog.") == "'! qk br{n fox jumps ov} ! lazy dog4"); " is 133.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("Jinxed wizards pluck ivy from the big quilt.") == "'j9x$ wiz>ds pluck ivy f ! big quilt4"); " is 134.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("Crazy Fredrick bought many very exquisite opal jewels.") == "'crazy 'fr$rick b\"| _m v exquisite opal jewels4"); " is 155.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("We promptly judged antique ivory buckles for the next prize.") == "'we promptly judg$ antique ivory buckles =! next prize4"); " is 168.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("A mad boxer shot a quick' gloved jab to the jaw of his dizzy opponent.") == "'a mad box} %ot a qk1 glov$ jab 6! jaw ( 8 dizzy opp\"ont4"); " is 181.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("Jaded zombies acted quaintly but kept driving their oxen forward.") == "'jad$ zombies act$ qua9tly b kept driv+ _! ox5 =w>d4"); " is 170.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("14. The job requires extra pluck and zeal from every young wage earner.") == "#ad4 '! job requires extra pluck & z1l f e \"y wage e>n}4"); " is 181.
Long Statement,MatterControl.Tests.MatterControl,BrailleGrade2Tests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BrailleGrade2Tests.cs,ConvertBrailleText,The length of the statement  "			Assert.IsTrue(BrailleGrade2.ConvertString("Just wanting to put together some more tests to show the effectiveness of our converter.") == "'j want+ 6put tgr \"s m te/s 6%{ ! e6ective;s ( |r 3v}t}4"); " is 198.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The length of the statement  "				Assert.AreEqual(5' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 cubeB' 4 offset cubeB' 5 offset sourceItem"); " is 131.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The length of the statement  "				Assert.AreEqual(7' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 offset cubeB' 6 offset sourceItem' wrapped cubeB"); " is 163.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The length of the statement  "				Assert.AreEqual(7' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 offset cubeB' 6 offset sourceItem' wrapped cubeB"); " is 163.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The length of the statement  "				Assert.AreEqual(5' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 wrapped cubeB"); " is 128.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The length of the statement  "				Assert.AreEqual(5' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 wrapped cubeB"); " is 128.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The length of the statement  "				Assert.AreEqual(5' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 cubeB' 4 offset cubeB' 5 offset sourceItem"); " is 131.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The length of the statement  "				Assert.AreEqual(7' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 offset cubeB' 6 offset sourceItem' wrapped cubeB"); " is 163.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The length of the statement  "				Assert.AreEqual(4' root.Descendants().Count()' "Should have the 1 cubeA' 2 cubeB' 3 offset cubeB' 4 offset sourceItem"); " is 120.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The length of the statement  "				Assert.AreEqual(7' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 offset cubeB' 6 offset sourceItem' wrapped cubeB"); " is 163.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The length of the statement  "				Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001)); " is 142.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The length of the statement  "				Assert.AreNotEqual(cube' scaleObject.UntransformedChildren.First()' "There is an undo buffer' there should have been a clone"); " is 127.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The length of the statement  "				Assert.AreEqual(cube' scaleObject.UntransformedChildren.First()' "There is no undo buffer' there should not have been a clone"); " is 128.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The length of the statement  "				Assert.AreEqual(cube' scaleObject.UntransformedChildren.First()' "There is no undo buffer' there should not have been a clone"); " is 128.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The length of the statement  "				Assert.AreEqual(cube' rotateScaleObject.UntransformedChildren.First()' "There is no undo buffer' there should not have been a clone"); " is 134.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The length of the statement  "				Assert.AreEqual(cube' rotateObject.UntransformedChildren.First()' "There is no undo buffer' there should not have been a clone"); " is 129.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The length of the statement  "			Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-5' -5' -10)' new Vector3(5' 5' -4))' .01)); " is 136.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The length of the statement  "			Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .01)); " is 144.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The length of the statement  "			Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01)); " is 137.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The length of the statement  "			Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(40' 40' 40))' .01)); " is 138.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The length of the statement  "			Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(60' 70' 40))' 1.0)); " is 136.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The length of the statement  "			Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 0' 0)' new Vector3(80' 70' 40))' 1.0)); " is 137.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The length of the statement  "			Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(60' 70' 40))' 1.0)); " is 136.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The length of the statement  "			Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 0' 0)' new Vector3(80' 70' 40))' 1.0)); " is 137.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The length of the statement  "			Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01)); " is 137.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The length of the statement  "			Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(40' 40' 40))' .01)); " is 138.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The length of the statement  "			Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' 1.0)); " is 140.
Long Statement,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The length of the statement  "			Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-17.5' -9.9' -10)' new Vector3(17.5' 11.97' 10))' 1.0)); " is 125.
Long Statement,MatterControl.Tests.MatterControl,ImportSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ImportSettingsTests.cs,MergeDropsFieldsIfValueAlreadySet,The length of the statement  "			Assert.IsFalse(printerSettings.UserLayer.ContainsKey(SettingsKey.layer_height)' "User layer should not contain layer_height after merge"); " is 138.
Long Statement,MatterControl.Tests.MatterControl,ImportSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ImportSettingsTests.cs,MergeDropsFieldsIfValueAlreadySet,The length of the statement  "			Assert.AreEqual(2' printerSettings.UserLayer.Count' "User layer should contain two items after import (start_gcode' cancel_gcode)"); " is 132.
Long Statement,MatterControl.Tests.MatterControl,PrinterSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterSettingsTests.cs,StartGCodeHasHeating,The length of the statement  "			Assert.IsFalse(beforeAndAfter[1].Contains($"M109 T0 S{extruderTemp}")' "M109 already in gcode' should not be in after."); " is 121.
Long Statement,MatterControl.Tests.MatterControl,PrinterSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterSettingsTests.cs,ExpectedPropertiesOnlyTest,The length of the statement  "				Assert.IsTrue(expectedProperties.Contains(item.Key)' $"Unexpected property ({item.Key}) in PrinterSettings - add to list or use @JsonIgnore"); " is 142.
Long Statement,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,CheckIfShouldBeShownParseTests,The length of the statement  "				string[] settings = new string[] { SettingsKey.has_heated_bed' "1"' SettingsKey.auto_connect' "1"' SettingsKey.has_fan' "1" }; " is 126.
Long Statement,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,CheckIfShouldBeShownParseTests,The length of the statement  "				Assert.IsTrue(profile.ParseShowString("!has_hardware_leveling&print_leveling_solution=3 Point Plane|print_leveling_solution=3x3 Mesh")); " is 136.
Long Statement,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,CheckIfShouldBeShownParseTests,The length of the statement  "				Assert.IsTrue(profile.ParseShowString("!has_hardware_leveling&print_leveling_solution=3x3 Mesh|print_leveling_solution=3 Point Plane")); " is 136.
Long Statement,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,CheckIfShouldBeShownParseTests,The length of the statement  "				Assert.IsFalse(profile.ParseShowString("!has_hardware_leveling&print_leveling_solution=3 Point Plane&extruder_count>2")); " is 121.
Long Statement,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,CheckIfShouldBeShownParseTests,The length of the statement  "				Assert.IsFalse(profile.ParseShowString("!has_hardware_leveling&print_leveling_solution=3 Point Plane&extruder_count>2")); " is 121.
Long Statement,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,CheckIfShouldBeShownParseTests,The length of the statement  "				Assert.IsTrue(profile.ParseShowString("!has_hardware_leveling&print_leveling_solution=3 Point Plane&extruder_count>1")); " is 120.
Long Statement,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,CheckIfShouldBeShownParseTests,The length of the statement  "				Assert.IsTrue(profile.ParseShowString("!has_hardware_leveling&print_leveling_solution=3 Point Plane&extruder_count>0")); " is 120.
Long Statement,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,SupportInterfaceMaterialAssignedToExtruderOne,The length of the statement  "					string[] settings = new string[] { SettingsKey.first_layer_extrusion_width' "%150"' SettingsKey.nozzle_diameter' ".4" }; " is 120.
Long Statement,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,LinkedSettingsExist,The length of the statement  "					Assert.IsTrue(linkedSetting.TryGetValue("TargetSetting"' out string targetSettingSource)' "TargetSetting field should exist"); " is 126.
Long Statement,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,PresentationNamesLackColon,The length of the statement  "				Assert.IsFalse(setting.PresentationName.Trim().EndsWith(":")' $"Presentation name should not end with trailing colon: '{setting.PresentationName}'"); " is 149.
Long Statement,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,StartGCodeWithExtrudesMustFollowM109Heatup,The length of the statement  "					var lines = startGcode.Split(new string[] { "\\n" }' StringSplitOptions.RemoveEmptyEntries).Select(l => l.ToUpper().Trim()).ToList(); " is 133.
Long Statement,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,CsvBedSizeExistsAndHasTwoValues,The length of the statement  "				Assert.AreEqual(2' segments.Length' "[bed_size] should have two values separated by a comma: " + printer.RelativeFilePath); " is 123.
Long Statement,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,CsvPrintCenterExistsAndHasTwoValues,The length of the statement  "				Assert.AreEqual(2' segments.Length' "[print_center] should have two values separated by a comma: " + printer.RelativeFilePath); " is 127.
Long Statement,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,NoFirstLayerBedTempInStartGcode,The length of the statement  "				Assert.False(startGcode.Contains(SettingsKey.first_layer_bed_temperature)' "[start_gcode] should not contain [first_layer_bed_temperature]" + printer.RelativeFilePath); " is 168.
Long Statement,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,FirstLayerHeightLessThanNozzleDiameterXExtrusionMultiplier,The length of the statement  "					Assert.Less(firstLayerHeight' maximumLayerHeight' "[first_layer_height] must be less than [firstLayerExtrusionWidth]: " + printer.RelativeFilePath); " is 148.
Long Statement,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,LayerHeightLessThanNozzleDiameter,The length of the statement  "				Assert.Less(layerHeight' maximumLayerHeight' "[layer_height] must be less than [minimumLayerHeight]: " + printer.RelativeFilePath); " is 131.
Long Statement,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,FirstLayerExtrusionWidthGreaterThanNozzleDiameterIfSet,The length of the statement  "					Assert.GreaterOrEqual(firstLayerExtrusionWidth' nozzleDiameter' "[first_layer_extrusion_width] must be nozzle diameter or greater: " + printer.RelativeFilePath); " is 161.
Long Statement,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,SupportMaterialAssignedToExtruderOne,The length of the statement  "					Assert.AreEqual("1"' supportMaterialExtruder' "[support_material_extruder] must be assigned to extruder 1: " + printer.RelativeFilePath); " is 137.
Long Statement,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,SupportInterfaceMaterialAssignedToExtruderOne,The length of the statement  "					Assert.AreEqual("1"' supportMaterialInterfaceExtruder' "[support_material_interface_extruder] must be assigned to extruder 1: " + printer.RelativeFilePath); " is 156.
Long Statement,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,ValidateOnAllPrinters,The length of the statement  "				string.Format("One or more printers violate this rule: \r\n\r\n{0}\r\n"' string.Join("\r\n"' ruleViolations.ToArray()))); " is 121.
Long Statement,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerHeightLessThanNozzleDiameter,The length of the statement  "			Assert.LessOrEqual(convertedFirstLayerHeightValue' float.Parse(nozzleDiameter)' "Unexpected firstLayerHeightLessThanNozzleDiameter value: " + sourceFile); " is 154.
Long Statement,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerExtrusionWidthAcceptableValue,The length of the statement  "			Assert.LessOrEqual(convertedFirstLayerExtrusionWidth' acceptableValue' "Unexpected firstLayerExtrusionWidthAcceptableValue value: " + sourceFile); " is 146.
Long Statement,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerExtrusionWidthNotZero,The length of the statement  "			Assert.AreNotEqual(0' convertedFirstLayerExtrusionWidth' "Unexpected firstLayerExtrusionWidthNotZero value: " + sourceFile); " is 124.
Long Statement,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,layerHeightLessThanNozzleDiameter,The length of the statement  "			Assert.LessOrEqual(convertedLayerHeight' convertedNozzleDiameterValue' "Unexpected layerHeightLessThanNozzleDiameter value: " + sourceFile); " is 140.
Long Statement,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,printCenterFormatSeparatedByComma,The length of the statement  "			Assert.AreEqual(2' settingValueToTest.Length' "print_center should have two values separated by a comma: " + sourceFile); " is 121.
Long Statement,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,testRetractLengthLessThanTwenty,The length of the statement  "			Assert.Less(float.Parse(settingValue' CultureInfo.InvariantCulture.NumberFormat)' 20' "retract_length should be less than 20: " + sourceFile); " is 142.
Long Statement,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,testFirstLayerTempNotInStartGcode,The length of the statement  "			Assert.False(settingValue.Contains(SettingsKey.first_layer_temperature)' "start_gcode should not contain first_layer_temperature: " + sourceFile); " is 146.
Long Statement,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,testFirstLayerBedTemperatureNotInStartGcode,The length of the statement  "			Assert.False(settingValue.Contains(SettingsKey.first_layer_bed_temperature)' "start_gcode should not contain first_layer_bed_temperature: " + sourceFile); " is 154.
Long Statement,MatterControl.Tests.MatterControl,PrinterWhiteListTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterWhiteListTests.cs,DesktopCalibrationPartsInSettings,The length of the statement  "			string settingsJsonPath = TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"' "OEMSettings"' "Settings.json"); " is 121.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,MaxLengthStreamTests,The length of the statement  "			// We should go back to the above code when possible. It requires making pause part and move while paused part of the stream. " is 125.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,MaxLengthStreamTests,The length of the statement  "			// All communication should go through stream to minimize the difference between printing and controlling while not printing (all printing in essence). " is 151.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,ExportStreamG30Tests,The length of the statement  "			// We should go back to the above code when possible. It requires making pause part and move while paused part of the stream. " is 125.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,ExportStreamG30Tests,The length of the statement  "			// All communication should go through stream to minimize the difference between printing and controlling while not printing (all printing in essence). " is 151.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,SmoothieRewriteTest,The length of the statement  "			// We should go back to the above code when possible. It requires making pause part and move while paused part of the stream. " is 125.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,SmoothieRewriteTest,The length of the statement  "			// All communication should go through stream to minimize the difference between printing and controlling while not printing (all printing in essence). " is 151.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,LineCuttingOffWhenNoLevelingTest,The length of the statement  "			// We should go back to the above code when possible. It requires making pause part and move while paused part of the stream. " is 125.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,LineCuttingOffWhenNoLevelingTest,The length of the statement  "			// All communication should go through stream to minimize the difference between printing and controlling while not printing (all printing in essence). " is 151.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,RegexReplacementStreamIsLast,The length of the statement  "			Assert.IsTrue(streamProcessors.First() is ProcessWriteRegexStream' "ProcessWriteRegexStream should be the last stream in the stack"); " is 133.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,CorrectEOutputPositions,The length of the statement  "			// We should go back to the above code when possible. It requires making pause part and move while paused part of the stream. " is 125.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,CorrectEOutputPositions,The length of the statement  "			// All communication should go through stream to minimize the difference between printing and controlling while not printing (all printing in essence). " is 151.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,CorrectZOutputPositions,The length of the statement  "			// We should go back to the above code when possible. It requires making pause part and move while paused part of the stream. " is 125.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,CorrectZOutputPositions,The length of the statement  "			// All communication should go through stream to minimize the difference between printing and controlling while not printing (all printing in essence). " is 151.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,PauseHandlingStreamTests,The length of the statement  "			// We should go back to the above code when possible. It requires making pause part and move while paused part of the stream. " is 125.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,PauseHandlingStreamTests,The length of the statement  "			// All communication should go through stream to minimize the difference between printing and controlling while not printing (all printing in essence). " is 151.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,SoftwareEndstopstreamTests,The length of the statement  "			// We should go back to the above code when possible. It requires making pause part and move while paused part of the stream. " is 125.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,SoftwareEndstopstreamTests,The length of the statement  "			// All communication should go through stream to minimize the difference between printing and controlling while not printing (all printing in essence). " is 151.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,MorePauseHandlingStreamTests,The length of the statement  "			// We should go back to the above code when possible. It requires making pause part and move while paused part of the stream. " is 125.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,MorePauseHandlingStreamTests,The length of the statement  "			// All communication should go through stream to minimize the difference between printing and controlling while not printing (all printing in essence). " is 151.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,FeedRateRatioChangesFeedRate,The length of the statement  "			var gcodeStream = new FeedRateMultiplierStream(printer' new TestGCodeStream(printer' new string[] { "G1 X10 F1000"' "G1 Y5 F1000" })); " is 134.
Long Statement,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,ExtrusionRatioChangesExtrusionAmount,The length of the statement  "			var gcodeStream = new ExtrusionMultiplierStream(printer' new TestGCodeStream(printer' new string[] { "G1 E10"' "G1 E0 ; Move back to 0"' "G1 E12" })); " is 150.
Long Statement,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The length of the statement  "					Assert.AreEqual(15' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed"); " is 127.
Long Statement,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The length of the statement  "					Assert.AreEqual(5' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed"); " is 126.
Long Statement,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The length of the statement  "					Assert.AreEqual(15' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed"); " is 127.
Long Statement,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The length of the statement  "					Assert.AreEqual(5' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed"); " is 126.
Long Statement,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,ComplexPartNoSupport,The length of the statement  "			var meshPath = TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "TestData"' "TestParts"' "NoSupportNeeded.stl"); " is 121.
Long Statement,MatterHackers.PolygonMesh.UnitTests,MeshCsgTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshCsgTests.cs,CsgCylinderMinusCylinder,The length of the statement  "			//AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "StaticData")); " is 132.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldColorBasicTest,The length of the statement  "			Assert.AreEqual(Color.Pink' greenItem.WorldColor(greenItem.Parent)' "WorldColor on Green up to parent node should be Pink"); " is 124.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldColorBasicTest,The length of the statement  "			Assert.AreEqual(Color.Violet' greenItem.WorldColor(superGroup)' "WorldColor on Green up to supergroup should be Violet"); " is 121.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldColorBasicTest,The length of the statement  "			Assert.AreEqual(Color.Pink' blueItem.WorldColor(blueItem.Parent)' "WorldColor on Blue up to parent node should be Pink"); " is 121.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldColorBasicTest,The length of the statement  "			Assert.AreEqual(Color.Black' redItem.WorldColor(null)' "WorldColor on Red with null param should be root color (Black)"); " is 121.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.RootMaterialIndex' scene.MaterialIndex' "MaterialIndex property on root should be RootMaterialIndex"); " is 123.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.RootMaterialIndex' scene.WorldMaterialIndex()' "WorldMaterialIndex on root should be RootMaterialIndex"); " is 126.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.RedMaterialIndex' redItem.MaterialIndex' "MaterialIndex property on node should be RedMaterialIndex"); " is 123.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.GroupMaterialIndex' redItem.WorldMaterialIndex(redItem.Parent)' "WorldMaterialIndex on Red up to parent node should be GroupMaterialIndex"); " is 161.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.SuperGroupMaterialIndex' redItem.WorldMaterialIndex(superGroup)' "WorldMaterialIndex on Red up to supergroup should be SuperGroupMaterialIndex"); " is 166.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.GreenMaterialIndex' greenItem.MaterialIndex' "MaterialIndex property on node should be GreenMaterialIndex"); " is 129.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.GroupMaterialIndex' greenItem.WorldMaterialIndex(greenItem.Parent)' "WorldMaterialIndex on Green up to parent node should be GroupMaterialIndex"); " is 167.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.SuperGroupMaterialIndex' greenItem.WorldMaterialIndex(superGroup)' "WorldMaterialIndex on Green up to supergroup should be SuperGroupMaterialIndex"); " is 170.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.BlueMaterialIndex' blueItem.MaterialIndex' "MaterialIndex property on node should be BlueMaterialIndex"); " is 126.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.GroupMaterialIndex' blueItem.WorldMaterialIndex(blueItem.Parent)' "WorldMaterialIndex on Blue up to parent node should be GroupMaterialIndex"); " is 164.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.SuperGroupMaterialIndex' blueItem.WorldMaterialIndex(superGroup)' "WorldMaterialIndex on Blue up to supergroup should be SuperGroupMaterialIndex"); " is 168.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMaterialIndexBasicTest,The length of the statement  "			Assert.AreEqual(this.RootMaterialIndex' redItem.WorldMaterialIndex(null)' "WorldMaterialIndex on Red with null param should be root color (RootMaterialIndex)"); " is 160.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMatrixBasicTest,The length of the statement  "			Assert.AreEqual(redItem.Matrix * this.GroupMatrix' redItem.WorldMatrix(redItem.Parent)' "WorldMatrix on Red up to parent node should be GroupMatrix"); " is 150.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMatrixBasicTest,The length of the statement  "			Assert.AreEqual(this.RedMatrix * this.GroupMatrix * this.SuperGroupMatrix' redItem.WorldMatrix(superGroup)' "WorldMatrix on Red up to supergroup invalid"); " is 155.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMatrixBasicTest,The length of the statement  "			Assert.AreEqual(this.GreenMatrix * this.GroupMatrix' greenItem.WorldMatrix(greenItem.Parent)' "WorldMatrix on Green up to parent node should be GroupMatrix"); " is 158.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMatrixBasicTest,The length of the statement  "			Assert.AreEqual(this.GreenMatrix * this.GroupMatrix * this.SuperGroupMatrix' greenItem.WorldMatrix(superGroup)' "WorldMatrix on Green up to supergroup should be SuperGroupMatrix"); " is 180.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMatrixBasicTest,The length of the statement  "			Assert.AreEqual(this.BlueMatrix * this.GroupMatrix' blueItem.WorldMatrix(blueItem.Parent)' "WorldMatrix on Blue up to parent node should be GroupMatrix"); " is 154.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMatrixBasicTest,The length of the statement  "			Assert.AreEqual(this.BlueMatrix * this.GroupMatrix * this.SuperGroupMatrix' blueItem.WorldMatrix(superGroup)' "WorldMatrix on Blue up to supergroup should be SuperGroupMatrix"); " is 177.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldMatrixBasicTest,The length of the statement  "			Assert.AreEqual(this.RedMatrix * this.GroupMatrix * this.SuperGroupMatrix' redItem.WorldMatrix(null)' "WorldMatrix on Red with null param should be root color (RootMatrix)"); " is 174.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldOutputTypeBasicTest,The length of the statement  "			Assert.AreEqual(this.GroupOutputType' redItem.WorldOutputType(redItem.Parent)' "WorldOutputType on Red up to parent node should be GroupOutputType"); " is 149.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldOutputTypeBasicTest,The length of the statement  "			Assert.AreEqual(this.SuperGroupOutputType' redItem.WorldOutputType(superGroup)' "WorldOutputType on Red up to supergroup should be SuperGroupOutputType"); " is 154.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldOutputTypeBasicTest,The length of the statement  "			Assert.AreEqual(this.GroupOutputType' greenItem.WorldOutputType(greenItem.Parent)' "WorldOutputType on Green up to parent node should be GroupOutputType"); " is 155.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldOutputTypeBasicTest,The length of the statement  "			Assert.AreEqual(this.SuperGroupOutputType' greenItem.WorldOutputType(superGroup)' "WorldOutputType on Green up to supergroup should be SuperGroupOutputType"); " is 158.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldOutputTypeBasicTest,The length of the statement  "			Assert.AreEqual(this.GroupOutputType' blueItem.WorldOutputType(blueItem.Parent)' "WorldOutputType on Blue up to parent node should be GroupOutputType"); " is 152.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldOutputTypeBasicTest,The length of the statement  "			Assert.AreEqual(this.SuperGroupOutputType' blueItem.WorldOutputType(superGroup)' "WorldOutputType on Blue up to supergroup should be SuperGroupOutputType"); " is 156.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldOutputTypeBasicTest,The length of the statement  "			Assert.AreEqual(this.RootOutputType' redItem.WorldOutputType(null)' "WorldOutputType on Red with null param should be root color (RootOutputType)"); " is 148.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldFunctionNonExistingAncestorOverride,The length of the statement  "			Assert.AreEqual(Color.Black' redItem.WorldColor(nonAncestor)' "WorldColor on Red with non-ancestor should be root color (Black)"); " is 130.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldFunctionNonExistingAncestorOverride,The length of the statement  "			Assert.AreEqual(this.RootMaterialIndex' scene.MaterialIndex' "MaterialIndex property on root should be RootMaterialIndex"); " is 123.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldFunctionNonExistingAncestorOverride,The length of the statement  "			Assert.AreEqual(this.RootMaterialIndex' scene.WorldMaterialIndex()' "WorldMaterialIndex on root should be RootMaterialIndex"); " is 126.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldFunctionNonExistingAncestorOverride,The length of the statement  "			Assert.AreEqual(this.RootMaterialIndex' redItem.WorldMaterialIndex(nonAncestor)' "WorldMaterialIndex on Red with non-ancestor should be RootMaterialIndex"); " is 156.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldFunctionNonExistingAncestorOverride,The length of the statement  "			Assert.AreEqual(this.RedMatrix * this.GroupMatrix * this.SuperGroupMatrix' redItem.WorldMatrix(nonAncestor)' "WorldMatrix on Red with non-ancestor should be RootMaterialIndex"); " is 177.
Long Statement,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,WorldFunctionNonExistingAncestorOverride,The length of the statement  "			Assert.AreEqual(this.RootOutputType' redItem.WorldOutputType(nonAncestor)' "WorldOutputType on Red with non-ancestor should be RootOutputType"); " is 144.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Select3DPart,The length of the statement  "			testRunner.DragDropByName("InteractionLayer"' "InteractionLayer"' offsetDrop: new Agg.Point2D(10' 15)' mouseButtons: MouseButtons.Right); " is 137.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,LaunchAndConnectToPrinterEmulator,The length of the statement  "			testRunner.WaitFor(() => serialPortDropDown.Enabled); // Wait until the serialPortDropDown is ready to click it. Ensures the printer is loaded. " is 143.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForLayer,The length of the statement  "				// Wait for print to start' then slow down the emulator and continue. Failing to slow down frequently causes a timing issue where the print " is 139.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForLayer,The length of the statement  "				// finishes before we make it down to 'CloseMatterControlViaUi' and thus no prompt to close appears and the test fails when clicking 'Yes Button' " is 145.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddItemsToQueue,The length of the statement  "			string queueItemsDirectory = TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "Tests"' "TestData"' "QueueItems"' queueItemFolderToLoad); " is 153.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,FirstPrinter,The length of the statement  "			Assert.AreEqual(1' ApplicationController.Instance.ActivePrinters.Count()' "FirstPrinter() is only valid in single printer scenarios"); " is 134.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "			//Debug.WriteLine("\r\n ***** Running automation test: {0} {1} "' st.GetFrames().Skip(1).First().GetMethod().Name' DateTime.Now); " is 129.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "				// Popping one directory above MatterControl' then back down into MatterControl ensures this works in MCCentral as well and MatterControl " is 137.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "			Environment.CurrentDirectory = TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "bin"' outputDirectory); " is 121.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "			//AggContext.Config.ProviderTypes.SystemWindowProvider = "MatterHackers.Agg.UI.OpenGLWinformsWindowProvider' agg_platform_win32"; " is 129.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "			AggContext.Config.ProviderTypes.SystemWindowProvider = "MatterHackers.MatterControl.WinformsSingleWindowProvider' MatterControl.Winforms"; " is 138.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The length of the statement  "			// Popping one directory above MatterControl' then back down into MatterControl ensures this works in MCCentral as well and MatterControl " is 137.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddTestAssetsToLibrary,The length of the statement  "				Assert.IsFalse(testRunner.WaitForName($"Row Item {friendlyName}"' .1)' $"{friendlyName} part should not exist at test start"); " is 126.
Long Statement,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddTestAssetsToLibrary,The length of the statement  "			string fullQuotedAssetPaths = string.Join(" "' assetNames.Select(name => $"\"{MatterControlUtilities.GetTestItemPath(name)}\"")); " is 129.
Long Statement,MatterControl.Tests,ReleaseBuildTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ReleaseBuildTests.cs,rebuildDependencies,The length of the statement  "			var items = elem.Descendants().Where(e => e.Name == "target" && "CopyFilesToOutputDirectory" == (string)e.Attribute("name")).SelectMany(e => e.Elements("message").Select(e2 => e2.Value.TrimEnd('.')).Where(s => s.Contains("Copying") && s.Contains(".dll"))); " is 256.
Long Statement,MatterControl.Tests,ReleaseBuildTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ReleaseBuildTests.cs,IsAssemblyOptimized,The length of the statement  "				Assert.Inconclusive("Symbols likely missing from Release build: " + assemblyName.FullName + ". \r\n\r\nTo resolve the issue' switch Project Properties -> Build -> Advanced -> Debug Info property to 'pdb-only'"); " is 211.
Long Statement,MatterHackers.MatterControl.Slicing.Tests,SliceLayersTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\Slicing\SliceLayersTests.cs,SliceLayersGeneratingCorrectSegments,The length of the statement  "			string meshFileName = TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "TestData"' "TestMeshes"' "SliceLayers"' "Box20x20x10.stl"); " is 140.
Empty Catch Block,MatterHackers.MatterControl.Tests.Automation,PrintEmulatorProcess,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Dispose,The method has an empty catch block.
Magic Number,MatterControl.Tests.MatterControl,ApplicationControllerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ApplicationControllerTests.cs,LoadCachableShouldFallbackToStaticData,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,ApplicationControllerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ApplicationControllerTests.cs,LoadCachableShouldFallbackToStaticData,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(5));
Magic Number,MatterControl.Tests.MatterControl,ApplicationControllerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ApplicationControllerTests.cs,LoadCachableShouldStoreCollectedResults,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,ApplicationControllerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ApplicationControllerTests.cs,LoadCachableShouldStoreCollectedResults,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(5));
Magic Number,MatterControl.Tests.MatterControl,BoundDropListTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BoundDropListTests.cs,BoundDropListHonorsWhitelist,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,BoundDropListTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BoundDropListTests.cs,BoundDropListHonorsWhitelist,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,BoundDropListTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BoundDropListTests.cs,BoundDropListHonorsWhitelist,The following statement contains a magic number: Assert.Greater(dropList.MenuItems.Count' 20);
Magic Number,MatterControl.Tests.MatterControl,BoundDropListTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\BoundDropListTests.cs,BoundDropListHonorsWhitelist,The following statement contains a magic number: Assert.AreEqual(2' dropList.MenuItems.Count);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,TestSetup,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,TestSetup,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(700' 300)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "General Popup"'  					["Expected"] = "Popup should appear on click"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(700' 300)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "General Popup"'  					["Expected"] = "Popup should appear on click"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				systemWindow.Padding = systemWindow.Padding.Clone(bottom: 180);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  					HAnchor = HAnchor.Left'  				};  				systemWindow.AddChild(button);    				var color = Color.LightBlue;    				button.Click += (s' e) =>  				{  					systemWindow.ShowPopup(  						new MatePoint()  						{  							Widget = button  						}'  						new MatePoint()  						{  							Widget = new GuiWidget(180d' 100d)  							{  								BackgroundColor = color'  								Border = 2'  								BorderColor = color.Blend(Color.Black' 0.4)  							}  						});  				};    				testRunner.ClickByName("targetA");    				testRunner.Delay();    				return Task.CompletedTask;  			}' 30);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				systemWindow.Padding = systemWindow.Padding.Clone(bottom: 180);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  					HAnchor = HAnchor.Left'  				};  				systemWindow.AddChild(button);    				var color = Color.LightBlue;    				button.Click += (s' e) =>  				{  					systemWindow.ShowPopup(  						new MatePoint()  						{  							Widget = button  						}'  						new MatePoint()  						{  							Widget = new GuiWidget(180d' 100d)  							{  								BackgroundColor = color'  								Border = 2'  								BorderColor = color.Blend(Color.Black' 0.4)  							}  						});  				};    				testRunner.ClickByName("targetA");    				testRunner.Delay();    				return Task.CompletedTask;  			}' 30);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				systemWindow.Padding = systemWindow.Padding.Clone(bottom: 180);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  					HAnchor = HAnchor.Left'  				};  				systemWindow.AddChild(button);    				var color = Color.LightBlue;    				button.Click += (s' e) =>  				{  					systemWindow.ShowPopup(  						new MatePoint()  						{  							Widget = button  						}'  						new MatePoint()  						{  							Widget = new GuiWidget(180d' 100d)  							{  								BackgroundColor = color'  								Border = 2'  								BorderColor = color.Blend(Color.Black' 0.4)  							}  						});  				};    				testRunner.ClickByName("targetA");    				testRunner.Delay();    				return Task.CompletedTask;  			}' 30);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				systemWindow.Padding = systemWindow.Padding.Clone(bottom: 180);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  					HAnchor = HAnchor.Left'  				};  				systemWindow.AddChild(button);    				var color = Color.LightBlue;    				button.Click += (s' e) =>  				{  					systemWindow.ShowPopup(  						new MatePoint()  						{  							Widget = button  						}'  						new MatePoint()  						{  							Widget = new GuiWidget(180d' 100d)  							{  								BackgroundColor = color'  								Border = 2'  								BorderColor = color.Blend(Color.Black' 0.4)  							}  						});  				};    				testRunner.ClickByName("targetA");    				testRunner.Delay();    				return Task.CompletedTask;  			}' 30);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				systemWindow.Padding = systemWindow.Padding.Clone(bottom: 180);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  					HAnchor = HAnchor.Left'  				};  				systemWindow.AddChild(button);    				var color = Color.LightBlue;    				button.Click += (s' e) =>  				{  					systemWindow.ShowPopup(  						new MatePoint()  						{  							Widget = button  						}'  						new MatePoint()  						{  							Widget = new GuiWidget(180d' 100d)  							{  								BackgroundColor = color'  								Border = 2'  								BorderColor = color.Blend(Color.Black' 0.4)  							}  						});  				};    				testRunner.ClickByName("targetA");    				testRunner.Delay();    				return Task.CompletedTask;  			}' 30);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				systemWindow.Padding = systemWindow.Padding.Clone(bottom: 180);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  					HAnchor = HAnchor.Left'  				};  				systemWindow.AddChild(button);    				var color = Color.LightBlue;    				button.Click += (s' e) =>  				{  					systemWindow.ShowPopup(  						new MatePoint()  						{  							Widget = button  						}'  						new MatePoint()  						{  							Widget = new GuiWidget(180d' 100d)  							{  								BackgroundColor = color'  								Border = 2'  								BorderColor = color.Blend(Color.Black' 0.4)  							}  						});  				};    				testRunner.ClickByName("targetA");    				testRunner.Delay();    				return Task.CompletedTask;  			}' 30);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,TopBottomPopupTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup bottoms should align with button top"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,TopBottomPopupTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup bottoms should align with button top"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,TopTopPopupTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup tops should align with button top"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,TopTopPopupTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup tops should align with button top"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,BottomTopPopupTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup tops should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,BottomTopPopupTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup tops should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,BottomBottomPopupTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Bottom-Bottom Tests"'  					["Expected"] = "Popup bottoms should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,BottomBottomPopupTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Bottom-Bottom Tests"'  					["Expected"] = "Popup bottoms should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,BottomTopUpRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup tops should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,BottomTopUpRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup tops should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,TopTopUpRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup tops should align with button top"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,TopTopUpRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup tops should align with button top"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,BottomTopDownRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup bottoms should align with button top"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,BottomTopDownRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup bottoms should align with button top"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,TopTopDownRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Bottom-Bottom Tests"'  					["Expected"] = "Popup bottoms should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,TopTopDownRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Bottom-Bottom Tests"'  					["Expected"] = "Popup bottoms should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,LeftRightRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup tops should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,LeftRightRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Bottom Tests"'  					["Expected"] = "Popup tops should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,LeftRightRedirectTest,The following statement contains a magic number: await AnchorTests(  				systemWindow'  				new MatePoint()  				{  					Mate = new MateOptions(MateEdge.Left' MateEdge.Bottom)'  					AltMate = new MateOptions(MateEdge.Left' MateEdge.Top)  				}'  				new MatePoint()  				{  					Mate = new MateOptions(MateEdge.Left' MateEdge.Top)'  					AltMate = new MateOptions(MateEdge.Left' MateEdge.Bottom)  				}'  				new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "buttonA"'  					VAnchor = VAnchor.Bottom'  				}'  				(buttonWidget' popupWidget) =>  				{  					double buttonPosition = buttonWidget.TransformToScreenSpace(buttonWidget.LocalBounds).Left;  					double popupPosition = popupWidget.TransformToScreenSpace(popupWidget.LocalBounds).Left;    					if (i++ > 2)  					{  						// Switch to anchor right aligned for the last case  						buttonPosition = buttonWidget.TransformToScreenSpace(buttonWidget.LocalBounds).Right;  					}    					Assert.AreEqual(buttonPosition' popupPosition);  				}'  				(row) =>  				{  					// Clear left margin so menus clip  					row.Margin = 2;  				});
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,LeftRightRedirectTest,The following statement contains a magic number: await AnchorTests(  				systemWindow'  				new MatePoint()  				{  					Mate = new MateOptions(MateEdge.Left' MateEdge.Bottom)'  					AltMate = new MateOptions(MateEdge.Left' MateEdge.Top)  				}'  				new MatePoint()  				{  					Mate = new MateOptions(MateEdge.Left' MateEdge.Top)'  					AltMate = new MateOptions(MateEdge.Left' MateEdge.Bottom)  				}'  				new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "buttonA"'  					VAnchor = VAnchor.Bottom'  				}'  				(buttonWidget' popupWidget) =>  				{  					double buttonPosition = buttonWidget.TransformToScreenSpace(buttonWidget.LocalBounds).Left;  					double popupPosition = popupWidget.TransformToScreenSpace(popupWidget.LocalBounds).Left;    					if (i++ > 2)  					{  						// Switch to anchor right aligned for the last case  						buttonPosition = buttonWidget.TransformToScreenSpace(buttonWidget.LocalBounds).Right;  					}    					Assert.AreEqual(buttonPosition' popupPosition);  				}'  				(row) =>  				{  					// Clear left margin so menus clip  					row.Margin = 2;  				});
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,RightLeftRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Bottom-Bottom Tests"'  					["Expected"] = "Popup bottoms should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,RightLeftRedirectTest,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Bottom-Bottom Tests"'  					["Expected"] = "Popup bottoms should align with button bottom"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,RightLeftRedirectTest,The following statement contains a magic number: await AnchorTests(  				systemWindow'  				new MatePoint()  				{  					Mate = new MateOptions(MateEdge.Left' MateEdge.Bottom)'  					AltMate = new MateOptions(MateEdge.Left' MateEdge.Top)'  				}'  				new MatePoint()  				{  					Mate = new MateOptions(MateEdge.Left' MateEdge.Bottom)'  					AltMate = new MateOptions(MateEdge.Right' MateEdge.Top)'  				}'  				new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "buttonA"'  					VAnchor = VAnchor.Bottom'  				}'  				(buttonWidget' popupWidget) =>  				{  					double buttonPosition = buttonWidget.TransformToScreenSpace(buttonWidget.LocalBounds).Left;  					double popupPosition = popupWidget.TransformToScreenSpace(popupWidget.LocalBounds).Right;    					if (i++ == 2)  					{  						// Switch to anchor right aligned for the last case  						buttonPosition = buttonWidget.TransformToScreenSpace(buttonWidget.LocalBounds).Right;  					}    					Assert.AreEqual(buttonPosition' popupPosition);  				}'  				(row) =>  				{  					row.HAnchor = HAnchor.Right | HAnchor.Fit;  					row.VAnchor = VAnchor.Center | VAnchor.Fit;  				});
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,AnchorTests,The following statement contains a magic number: return systemWindow.RunTest(testRunner =>  			{  				button.BackgroundColor = Color.LightGray;  				button.HoverColor = Color.LightBlue;  				button.MouseDownColor = Color.Magenta;    				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Center | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				row.AddChild(button);    				rowAdjuster?.Invoke(row);    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				anchor.Widget = button;    				for (var i = 0; i < 4; i++)  				{  					switch (i)  					{  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;  					}    					testRunner.ClickByName("buttonA");  					testRunner.Delay();    					validator.Invoke(button' popup.Widget);    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 25);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,AnchorTests,The following statement contains a magic number: return systemWindow.RunTest(testRunner =>  			{  				button.BackgroundColor = Color.LightGray;  				button.HoverColor = Color.LightBlue;  				button.MouseDownColor = Color.Magenta;    				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Center | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				row.AddChild(button);    				rowAdjuster?.Invoke(row);    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				anchor.Widget = button;    				for (var i = 0; i < 4; i++)  				{  					switch (i)  					{  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;  					}    					testRunner.ClickByName("buttonA");  					testRunner.Delay();    					validator.Invoke(button' popup.Widget);    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 25);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,AnchorTests,The following statement contains a magic number: return systemWindow.RunTest(testRunner =>  			{  				button.BackgroundColor = Color.LightGray;  				button.HoverColor = Color.LightBlue;  				button.MouseDownColor = Color.Magenta;    				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Center | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				row.AddChild(button);    				rowAdjuster?.Invoke(row);    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				anchor.Widget = button;    				for (var i = 0; i < 4; i++)  				{  					switch (i)  					{  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;  					}    					testRunner.ClickByName("buttonA");  					testRunner.Delay();    					validator.Invoke(button' popup.Widget);    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 25);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,AnchorTests,The following statement contains a magic number: return systemWindow.RunTest(testRunner =>  			{  				button.BackgroundColor = Color.LightGray;  				button.HoverColor = Color.LightBlue;  				button.MouseDownColor = Color.Magenta;    				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Center | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				row.AddChild(button);    				rowAdjuster?.Invoke(row);    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				anchor.Widget = button;    				for (var i = 0; i < 4; i++)  				{  					switch (i)  					{  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;  					}    					testRunner.ClickByName("buttonA");  					testRunner.Delay();    					validator.Invoke(button' popup.Widget);    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 25);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,AnchorTests,The following statement contains a magic number: return systemWindow.RunTest(testRunner =>  			{  				button.BackgroundColor = Color.LightGray;  				button.HoverColor = Color.LightBlue;  				button.MouseDownColor = Color.Magenta;    				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Center | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				row.AddChild(button);    				rowAdjuster?.Invoke(row);    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				anchor.Widget = button;    				for (var i = 0; i < 4; i++)  				{  					switch (i)  					{  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;  					}    					testRunner.ClickByName("buttonA");  					testRunner.Delay();    					validator.Invoke(button' popup.Widget);    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 25);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,AnchorTests,The following statement contains a magic number: return systemWindow.RunTest(testRunner =>  			{  				button.BackgroundColor = Color.LightGray;  				button.HoverColor = Color.LightBlue;  				button.MouseDownColor = Color.Magenta;    				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Center | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				row.AddChild(button);    				rowAdjuster?.Invoke(row);    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				anchor.Widget = button;    				for (var i = 0; i < 4; i++)  				{  					switch (i)  					{  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;  					}    					testRunner.ClickByName("buttonA");  					testRunner.Delay();    					validator.Invoke(button' popup.Widget);    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 25);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,AnchorTests,The following statement contains a magic number: return systemWindow.RunTest(testRunner =>  			{  				button.BackgroundColor = Color.LightGray;  				button.HoverColor = Color.LightBlue;  				button.MouseDownColor = Color.Magenta;    				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Center | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				row.AddChild(button);    				rowAdjuster?.Invoke(row);    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				anchor.Widget = button;    				for (var i = 0; i < 4; i++)  				{  					switch (i)  					{  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;  					}    					testRunner.ClickByName("buttonA");  					testRunner.Delay();    					validator.Invoke(button' popup.Widget);    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 25);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,AnchorTests,The following statement contains a magic number: return systemWindow.RunTest(testRunner =>  			{  				button.BackgroundColor = Color.LightGray;  				button.HoverColor = Color.LightBlue;  				button.MouseDownColor = Color.Magenta;    				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Center | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				row.AddChild(button);    				rowAdjuster?.Invoke(row);    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				anchor.Widget = button;    				for (var i = 0; i < 4; i++)  				{  					switch (i)  					{  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;  					}    					testRunner.ClickByName("buttonA");  					testRunner.Delay();    					validator.Invoke(button' popup.Widget);    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 25);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,AnchorTests,The following statement contains a magic number: return systemWindow.RunTest(testRunner =>  			{  				button.BackgroundColor = Color.LightGray;  				button.HoverColor = Color.LightBlue;  				button.MouseDownColor = Color.Magenta;    				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Center | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				row.AddChild(button);    				rowAdjuster?.Invoke(row);    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				anchor.Widget = button;    				for (var i = 0; i < 4; i++)  				{  					switch (i)  					{  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;  					}    					testRunner.ClickByName("buttonA");  					testRunner.Delay();    					validator.Invoke(button' popup.Widget);    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 25);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Left Anchor : Bottom-Left Popup"'  					["Expected"] = "Popup should appear above left of anchor click"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: var systemWindow = new PopupsTestWindow(800' 600)  			{  				Details = new Dictionary<string' string>()  				{  					["Task"] = "Top-Left Anchor : Bottom-Left Popup"'  					["Expected"] = "Popup should appear above left of anchor click"  				}  			};
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: systemWindow.Padding = systemWindow.Padding.Clone(bottom: 180);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following statement contains a magic number: await systemWindow.RunTest(testRunner =>  			{  				var row = new FlowLayoutWidget()  				{  					VAnchor = VAnchor.Top | VAnchor.Fit'  					HAnchor = HAnchor.Left | HAnchor.Fit'  					Margin = new BorderDouble(left: 120)  				};  				systemWindow.AddChild(row);    				var button = new TextButton("Popup"' systemWindow.Theme)  				{  					Name = "targetA"'  					VAnchor = VAnchor.Bottom'  				};  				row.AddChild(button);    				var spacer = new GuiWidget()  				{  					Width = 100'  				};  				row.AddChild(spacer);    				var button2 = new GuiWidget(140' 140)  				{  					BackgroundColor = Color.Blue'  					Name = "targetB"  				};    				var hitBounds = new RectangleDouble(65' 45' 65 + 32' 45 + 32);    				button2.AfterDraw += (s' e) =>  				{  					e.Graphics2D.Rectangle(hitBounds' Color.White);  				};  				row.AddChild(button2);    				var anchor = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Right'  						VerticalEdge = MateEdge.Bottom'  					}'  					Widget = button'  				};    				var popup = new MatePoint()  				{  					Mate = new MateOptions()  					{  						HorizontalEdge = MateEdge.Left'  						VerticalEdge = MateEdge.Top'  					}  				};    				button.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup);  				};    				button2.Click += (s' e) =>  				{  					popup.Widget = new GuiWidget(180d' 100d)  					{  						BackgroundColor = Color.LightBlue'  						Border = 2'  						BorderColor = Color.LightBlue.Blend(Color.Black' 0.4)  					};    					systemWindow.ShowPopup(anchor' popup' hitBounds);  				};    				bool firstPass = true;    				for (var i = 0; i < 16; i++)  				{  					switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}    					testRunner.ClickByName(targetWidget);  					testRunner.Delay(1);    					if (i == 15 && firstPass)  					{  						firstPass = false;  						i = -1;  						targetWidget = "targetB";  						anchor.Widget = button2;  					}    					popup.Widget.Unfocus();  				}    				testRunner.Delay();    				return Task.CompletedTask;  			}' 95);
Magic Number,MatterControl.Tests.MatterControl,PopupsTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,PopupsTestWindow,The following statement contains a magic number: this.BackgroundColor = new Color(56' 56' 56);
Magic Number,MatterControl.Tests.MatterControl,PopupsTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,PopupsTestWindow,The following statement contains a magic number: this.BackgroundColor = new Color(56' 56' 56);
Magic Number,MatterControl.Tests.MatterControl,PopupsTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,PopupsTestWindow,The following statement contains a magic number: this.BackgroundColor = new Color(56' 56' 56);
Magic Number,MatterControl.Tests.MatterControl,PopupsTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,PopupsTestWindow,The following statement contains a magic number: this.Padding = new BorderDouble(left: 120' bottom: 10' right: 10' top: 10);
Magic Number,MatterControl.Tests.MatterControl,PopupsTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,PopupsTestWindow,The following statement contains a magic number: this.Padding = new BorderDouble(left: 120' bottom: 10' right: 10' top: 10);
Magic Number,MatterControl.Tests.MatterControl,PopupsTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,PopupsTestWindow,The following statement contains a magic number: this.Padding = new BorderDouble(left: 120' bottom: 10' right: 10' top: 10);
Magic Number,MatterControl.Tests.MatterControl,PopupsTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,PopupsTestWindow,The following statement contains a magic number: this.Padding = new BorderDouble(left: 120' bottom: 10' right: 10' top: 10);
Magic Number,MatterControl.Tests.MatterControl,PopupsTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,ShowDetails,The following statement contains a magic number: row.AddChild(new TextWidget(heading + ":"' textColor: Color.White' pointSize: 9)  				{  					MinimumSize = new Vector2(80' 0)  				});
Magic Number,MatterControl.Tests.MatterControl,PopupsTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,ShowDetails,The following statement contains a magic number: row.AddChild(new TextWidget(heading + ":"' textColor: Color.White' pointSize: 9)  				{  					MinimumSize = new Vector2(80' 0)  				});
Magic Number,MatterControl.Tests.MatterControl,PopupsTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,ShowDetails,The following statement contains a magic number: row.AddChild(new TextWidget(text' textColor: Color.White' pointSize: 9));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var offsetCubeB = new TranslateObject3D(cubeB' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(offsetCubeB.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					0' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(offsetCubeB.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					0' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(offsetCubeB.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					0' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(offsetCubeB.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					0' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(offsetCubeB.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					0' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(offsetCubeB.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					0' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(union.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10)' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(5' root.Descendants().Count());
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var offsetCubeB = new TranslateObject3D(cubeB' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(7' root.Descendants().Count());
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var offsetCubeB = new TranslateObject3D(cubeB' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(5' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 cubeB' 4 offset cubeB' 5 offset sourceItem");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(7' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 offset cubeB' 6 offset sourceItem' wrapped cubeB");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(7' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 offset cubeB' 6 offset sourceItem' wrapped cubeB");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(3' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 cubeB");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(5' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 wrapped cubeB");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(2' root.Descendants().Count()' "Should have the 1 cubeA' 2 cubeB");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					10' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(5' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 wrapped cubeB");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var offsetCubeB = new TranslateObject3D(cubeB' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(5' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 cubeB' 4 offset cubeB' 5 offset sourceItem");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(7' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 offset cubeB' 6 offset sourceItem' wrapped cubeB");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(4' root.Descendants().Count()' "Should have the 1 cubeA' 2 cubeB' 3 offset cubeB' 4 offset sourceItem");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(7' root.Descendants().Count()' "Should have the 1 combine' 2 cubeA' 3 wrapped cubeA' 4 cubeB' 5 offset cubeB' 6 offset sourceItem' wrapped cubeB");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var offsetCubeB = new TranslateObject3D(cubeB' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: var offsetCubeB = new TranslateObject3D(cubeB' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.AreEqual(8' root.Descendants().Count()' "group' union' wa' a' wtb' tb' b");
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					20' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var offsetCubeB = new TranslateObject3D(cubeB' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(rootAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeA = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var cubeB = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: var offsetCubeB = new TranslateObject3D(cubeB' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,SubtractTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(  					-10' -10' -10'  					0' 10' 10).Equals(aabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(root.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: fit.SizeX = 50;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: fit.SizeY = 20;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: fit.SizeZ = 20;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: fit.SizeX = 50;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: fit.SizeY = 20;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: fit.SizeZ = 20;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var translate = new TranslateObject3D(cube' 11' 0' 0);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var translate = new TranslateObject3D(cube' 11' 0' 0);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: fit.SizeX = 50;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: fit.SizeY = 20;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: fit.SizeZ = 20;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: var translate = new TranslateObject3D(fit' 11' 0' 0);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForPinchedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(1' -10' -10)' new Vector3(21' 10' 10))' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: Assert.AreEqual(2' root.DescendantsAndSelf().Count());
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: Assert.AreEqual(4' root.DescendantsAndSelf().Count());
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: Assert.IsTrue(preScaleAabb.Equals(postScaleAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: Assert.AreEqual(2' root.DescendantsAndSelf().Count());
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: Assert.AreEqual(4' root.DescendantsAndSelf().Count());
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleObjectMaintainsCorrectAabb,The following statement contains a magic number: Assert.IsTrue(preScaleAabb.Equals(postScaleAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The following statement contains a magic number: Assert.AreEqual(2' root.DescendantsAndSelf().Count());
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The following statement contains a magic number: Assert.AreEqual(4' root.DescendantsAndSelf().Count());
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The following statement contains a magic number: Assert.IsTrue(preScaleAabb.Equals(postScaleAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The following statement contains a magic number: Assert.AreEqual(6' root.DescendantsAndSelf().Count());
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,ScaleAndRotateMaintainsCorrectAabb,The following statement contains a magic number: Assert.IsTrue(preScaleAabb.Equals(postRotateScaleAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: Assert.AreEqual(2' root.DescendantsAndSelf().Count());
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: Assert.IsTrue(rotateObject.RotateAbout.Origin.Equals(new Vector3(50' 60' 10)));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: Assert.IsTrue(rotateObject.RotateAbout.Origin.Equals(new Vector3(50' 60' 10)));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: Assert.IsTrue(rotateObject.RotateAbout.Origin.Equals(new Vector3(50' 60' 10)));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: Assert.AreEqual(4' root.DescendantsAndSelf().Count());
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,RotateMaintainsCorrectAabb,The following statement contains a magic number: Assert.IsTrue(preRotateAabb.Equals(postRotateAabb' .001));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: fit.SizeX = 10;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: fit.SizeY = 10;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: fit.SizeZ = 6;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-5' -5' -10)' new Vector3(5' 5' -4))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-5' -5' -10)' new Vector3(5' 5' -4))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-5' -5' -10)' new Vector3(5' 5' -4))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-5' -5' -10)' new Vector3(5' 5' -4))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-5' -5' -10)' new Vector3(5' 5' -4))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-5' -5' -10)' new Vector3(5' 5' -4))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-5' -5' -10)' new Vector3(5' 5' -4))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: var bigCube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: var bigCube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: var bigCube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 10))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(alignAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(alignAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(alignAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(alignAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(alignAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(alignAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(alignAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForAlignedFitObject,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-10' -10' -10)' new Vector3(10' 10' 11))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(50' 60' 10);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: var bigCube = await CubeObject3D.Create(40' 40' 40);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: var bigCube = await CubeObject3D.Create(40' 40' 40);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: var bigCube = await CubeObject3D.Create(40' 40' 40);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: bigCube.Matrix = Matrix4X4.CreateTranslation(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: bigCube.Matrix = Matrix4X4.CreateTranslation(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: bigCube.Matrix = Matrix4X4.CreateTranslation(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(40' 40' 40))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(40' 40' 40))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(40' 40' 40))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(40' 40' 40))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.AreEqual(2' align.Children.Count);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(60' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(60' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(60' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 0' 0)' new Vector3(80' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 0' 0)' new Vector3(80' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 0' 0)' new Vector3(80' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 0' 0)' new Vector3(80' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(60' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(60' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(60' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 0' 0)' new Vector3(80' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 0' 0)' new Vector3(80' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 0' 0)' new Vector3(80' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(align.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 0' 0)' new Vector3(80' 70' 40))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(cube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(40' 50' 0)' new Vector3(60' 70' 20))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(40' 40' 40))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(40' 40' 40))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(40' 40' 40))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AlignObjectHasCorrectPositionsOnXAxis,The following statement contains a magic number: Assert.IsTrue(bigCube.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(0' 0' 0)' new Vector3(40' 40' 40))' .01));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: fit.SizeX = 50;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: fit.SizeY = 20;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: fit.SizeZ = 20;
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(fit.GetAxisAlignedBoundingBox().Equals(new AxisAlignedBoundingBox(new Vector3(-25' -10' -10)' new Vector3(25' 10' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-17.5' -9.9' -10)' new Vector3(17.5' 11.97' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-17.5' -9.9' -10)' new Vector3(17.5' 11.97' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-17.5' -9.9' -10)' new Vector3(17.5' 11.97' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-17.5' -9.9' -10)' new Vector3(17.5' 11.97' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-17.5' -9.9' -10)' new Vector3(17.5' 11.97' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,AabbCalculatedCorrectlyForCurvedFitObjects,The following statement contains a magic number: Assert.IsTrue(rootAabb.Equals(new AxisAlignedBoundingBox(new Vector3(-17.5' -9.9' -10)' new Vector3(17.5' 11.97' 10))' 1.0));
Magic Number,MatterControl.Tests.MatterControl,ImportSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ImportSettingsTests.cs,CheckImportPrinterSettingsToPrinter,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,ImportSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ImportSettingsTests.cs,CheckImportPrinterSettingsToPrinter,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,ImportSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ImportSettingsTests.cs,MergeDropsFieldsIfValueAlreadySet,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,ImportSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ImportSettingsTests.cs,MergeDropsFieldsIfValueAlreadySet,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,ImportSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ImportSettingsTests.cs,MergeDropsFieldsIfValueAlreadySet,The following statement contains a magic number: Assert.AreEqual(2' printerSettings.UserLayer.Count' "User layer should contain two items after import (start_gcode' cancel_gcode)");
Magic Number,MatterControl.Tests.MatterControl,AssetManagerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\AssetManagerTests.cs,StoreAssetFile,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,AssetManagerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\AssetManagerTests.cs,StoreAssetFile,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,AssetManagerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\AssetManagerTests.cs,StoreAsset,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,AssetManagerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\AssetManagerTests.cs,StoreAsset,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,AssetManagerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\AssetManagerTests.cs,StoreMesh,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,AssetManagerTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\AssetManagerTests.cs,StoreMesh,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,PrinterSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterSettingsTests.cs,StartGCodeHasHeating,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,PrinterSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterSettingsTests.cs,StartGCodeHasHeating,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,PrinterSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterSettingsTests.cs,StartGCodeHasHeating,The following statement contains a magic number: Assert.AreEqual(2' beforeAndAfter.Length);
Magic Number,MatterControl.Tests.MatterControl,PrinterSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterSettingsTests.cs,StartGCodeHasHeating,The following statement contains a magic number: Assert.AreEqual(2' beforeAndAfter.Length);
Magic Number,MatterControl.Tests.MatterControl,PrinterSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterSettingsTests.cs,ExpectedPropertiesOnlyTest,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,PrinterSettingsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterSettingsTests.cs,ExpectedPropertiesOnlyTest,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,SliceSettingsFieldTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SliceSettingsFieldTests.cs,TestSetup,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,SliceSettingsFieldTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SliceSettingsFieldTests.cs,TestSetup,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,SliceSettingsFieldTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SliceSettingsFieldTests.cs,Vector4FieldTest,The following statement contains a magic number: Vector4Field.VectorXYZWEditWidth = 50;
Magic Number,MatterControl.Tests.MatterControl,SliceSettingsFieldTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SliceSettingsFieldTests.cs,ValidateAgainstValueMap,The following statement contains a magic number: var perItemDelay = (investigateDebugTests) ? 1000 : 0;
Magic Number,MatterControl.Tests.MatterControl,SliceSettingsFieldTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SliceSettingsFieldTests.cs,ValidateAgainstValueMap,The following statement contains a magic number: var testsWindow = new UIFieldTestWindow(500' 200' field' theme);
Magic Number,MatterControl.Tests.MatterControl,SliceSettingsFieldTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SliceSettingsFieldTests.cs,ValidateAgainstValueMap,The following statement contains a magic number: var testsWindow = new UIFieldTestWindow(500' 200' field' theme);
Magic Number,MatterControl.Tests.MatterControl,SliceSettingsFieldTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SliceSettingsFieldTests.cs,ValidateAgainstValueMap,The following statement contains a magic number: return testsWindow.RunTest((testRunner) =>  			{  				foreach (var item in valuesMap)  				{  					testsWindow.SetAndValidateValues(item.ExpectedValue' item.InputValue' collectValueFromWidget' perItemDelay);  				}    				return Task.CompletedTask;  			}' 30);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,Check3PointLevelingPositions,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,Check3PointLevelingPositions,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,Check3PointLevelingPositions,The following statement contains a magic number: Assert.AreEqual(new Vector2(20' 20)' samples[0]);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,Check3PointLevelingPositions,The following statement contains a magic number: Assert.AreEqual(new Vector2(20' 20)' samples[0]);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,Check3PointLevelingPositions,The following statement contains a magic number: Assert.AreEqual(new Vector2(180' 20)' samples[1]);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,Check3PointLevelingPositions,The following statement contains a magic number: Assert.AreEqual(new Vector2(180' 20)' samples[1]);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,Check3PointLevelingPositions,The following statement contains a magic number: Assert.AreEqual(new Vector2(100' 180)' samples[2]);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,Check3PointLevelingPositions,The following statement contains a magic number: Assert.AreEqual(new Vector2(100' 180)' samples[2]);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,Check3PointLevelingPositions,The following statement contains a magic number: Assert.AreEqual(new Vector2(100' 180)' samples[2]);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,CheckIfShouldBeShownParseTests,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,CheckIfShouldBeShownParseTests,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,SupportInterfaceMaterialAssignedToExtruderOne,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,SupportInterfaceMaterialAssignedToExtruderOne,The following statement contains a magic number: Assert.AreEqual(GetProfile(settings).GetValue<double>(SettingsKey.first_layer_extrusion_width)' .6' .0001);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,SupportInterfaceMaterialAssignedToExtruderOne,The following statement contains a magic number: Assert.AreEqual(GetProfile(settings).GetValue<double>(SettingsKey.first_layer_extrusion_width)' .6' .0001);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,SupportInterfaceMaterialAssignedToExtruderOne,The following statement contains a magic number: Assert.AreEqual(GetProfile(settings).GetValue<double>(SettingsKey.first_layer_extrusion_width)' .75' .0001);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,SupportInterfaceMaterialAssignedToExtruderOne,The following statement contains a magic number: Assert.AreEqual(GetProfile(settings).GetValue<double>(SettingsKey.first_layer_extrusion_width)' .75' .0001);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,SupportInterfaceMaterialAssignedToExtruderOne,The following statement contains a magic number: Assert.AreEqual(GetProfile(settings).GetValue<double>(SettingsKey.first_layer_extrusion_width)' .4' .0001);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,SupportInterfaceMaterialAssignedToExtruderOne,The following statement contains a magic number: Assert.AreEqual(GetProfile(settings).GetValue<double>(SettingsKey.first_layer_extrusion_width)' .4' .0001);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,SupportInterfaceMaterialAssignedToExtruderOne,The following statement contains a magic number: Assert.AreEqual(GetProfile(settings).GetValue<int>(SettingsKey.extruder_count)' 2);
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,LinkedSettingsExist,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,LinkedSettingsExist,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,PresentationNamesLackColon,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,SettingsParseTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SettingsParseTests.cs,PresentationNamesLackColon,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ReadTemperaturesCorrectly,The following statement contains a magic number: ParseTempAndValidate("ok B:12.0 /0.0 T0:12.8 /0.0 T1:12.8 /0.0 T2:12.8 /0.0 @:0 B@:0"' 12.8' 12.8' 12.8' 12.0);
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ReadTemperaturesCorrectly,The following statement contains a magic number: ParseTempAndValidate("ok B:12.0 /0.0 T0:12.8 /0.0 T1:12.8 /0.0 T2:12.8 /0.0 @:0 B@:0"' 12.8' 12.8' 12.8' 12.0);
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ReadTemperaturesCorrectly,The following statement contains a magic number: ParseTempAndValidate("ok B:12.0 /0.0 T0:12.8 /0.0 T1:12.8 /0.0 T2:12.8 /0.0 @:0 B@:0"' 12.8' 12.8' 12.8' 12.0);
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ReadTemperaturesCorrectly,The following statement contains a magic number: ParseTempAndValidate("ok B:12.0 /0.0 T0:12.8 /0.0 T1:12.8 /0.0 T2:12.8 /0.0 @:0 B@:0"' 12.8' 12.8' 12.8' 12.0);
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ReadTemperaturesCorrectly,The following statement contains a magic number: ParseTempAndValidate("ok T:139.6 /0.0 @:0.00W"' 139.6' 0' 0' 0.0);
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ReadTemperaturesCorrectly,The following statement contains a magic number: ParseTempAndValidate("ok T:139.6 B:136.2 /0.0 @:0.00W"' 139.6' 0' 0' 136.2);
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ReadTemperaturesCorrectly,The following statement contains a magic number: ParseTempAndValidate("ok T:139.6 B:136.2 /0.0 @:0.00W"' 139.6' 0' 0' 136.2);
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ParseTempAndValidate,The following statement contains a magic number: double[] extruders = new double[16];
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ParseTempAndValidate,The following statement contains a magic number: Assert.IsTrue(extruders[2] == extruder2);
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,SmoothieDualExtruderM105Response,The following statement contains a magic number: double[] extruders = new double[16];
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ReplaceMacroValuesWorking,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,GCodeProcessingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeProcessingTests.cs,ReplaceMacroValuesWorking,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,OemProfileTests,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,OemProfileTests,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,CsvBedSizeExistsAndHasTwoValues,The following statement contains a magic number: ValidateOnAllPrinters((printer' settings) =>  			{  				// Bed size is not required in slice files  				if (printer.RelativeFilePath.IndexOf(".slice"' StringComparison.OrdinalIgnoreCase) != -1)  				{  					return;  				}    				string bedSize = settings.GetValue(SettingsKey.bed_size);    				// Must exist in all configs  				Assert.IsTrue(!string.IsNullOrEmpty(bedSize)' "[bed_size] must exist: " + printer.RelativeFilePath);    				string[] segments = bedSize.Trim().Split(''');    				// Must be a CSV and have two values  				Assert.AreEqual(2' segments.Length' "[bed_size] should have two values separated by a comma: " + printer.RelativeFilePath);  			});
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,CsvPrintCenterExistsAndHasTwoValues,The following statement contains a magic number: ValidateOnAllPrinters((printer' settings) =>  			{  				// Printer center is not required in slice files  				if (printer.RelativeFilePath.IndexOf(".slice"' StringComparison.OrdinalIgnoreCase) != -1)  				{  					return;  				}    				string printCenter = settings.GetValue(SettingsKey.print_center);    				// Must exist in all configs  				Assert.IsTrue(!string.IsNullOrEmpty(printCenter)' "[print_center] must exist: " + printer.RelativeFilePath);    				string[] segments = printCenter.Trim().Split(''');    				// Must be a CSV and have only two values  				Assert.AreEqual(2' segments.Length' "[print_center] should have two values separated by a comma: " + printer.RelativeFilePath);  			});
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,RetractLengthIsLessThanTwenty,The following statement contains a magic number: ValidateOnAllPrinters((printer' settings) =>  			{  				string retractLengthString = settings.GetValue(SettingsKey.retract_length);  				if (!string.IsNullOrEmpty(retractLengthString))  				{  					float retractLength;  					if (!float.TryParse(retractLengthString' out retractLength))  					{  						Assert.Fail("Invalid [retract_length] value (float parse failed): " + printer.RelativeFilePath);  					}    					Assert.Less(retractLength' 20' "[retract_length]: " + printer.RelativeFilePath);  				}  			});
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,MinFanSpeedOneHundredOrLess,The following statement contains a magic number: ValidateOnAllPrinters((printer' settings) =>  			{  				string fanSpeedString = settings.GetValue(SettingsKey.min_fan_speed);  				if (!string.IsNullOrEmpty(fanSpeedString))  				{  					// Must be valid int data  					int minFanSpeed;  					if (!int.TryParse(fanSpeedString' out minFanSpeed))  					{  						Assert.Fail("Invalid [min_fan_speed] value (int parse failed): " + printer.RelativeFilePath);  					}    					// Must be less than or equal to 100  					Assert.LessOrEqual(minFanSpeed' 100' "[min_fan_speed]: " + printer.RelativeFilePath);  				}  			});
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,PlaAndAbsDensitySetCorrectly,The following statement contains a magic number: ValidateOnAllPrinters((printer' settings) =>  			{  				if (settings.OemLayer.ContainsKey(SettingsKey.layer_name))  				{  					if (settings.OemLayer[SettingsKey.layer_name].ToUpper() == "ABS")  					{  						double absDensity = settings.GetValue<double>(SettingsKey.filament_density);  						if (absDensity != 1.04)  						{  							Assert.Fail("[filament_density] value should be set to ABS 1.04: " + printer.RelativeFilePath);  						}  					}  					else if (settings.OemLayer[SettingsKey.layer_name].ToUpper() == "PLA")  					{  						double absDensity = settings.GetValue<double>(SettingsKey.filament_density);  						if (absDensity != 1.24)  						{  							Assert.Fail("[filament_density] value should be set to PLA 1.24: " + printer.RelativeFilePath);  						}  					}  				}  			});
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,PlaAndAbsDensitySetCorrectly,The following statement contains a magic number: ValidateOnAllPrinters((printer' settings) =>  			{  				if (settings.OemLayer.ContainsKey(SettingsKey.layer_name))  				{  					if (settings.OemLayer[SettingsKey.layer_name].ToUpper() == "ABS")  					{  						double absDensity = settings.GetValue<double>(SettingsKey.filament_density);  						if (absDensity != 1.04)  						{  							Assert.Fail("[filament_density] value should be set to ABS 1.04: " + printer.RelativeFilePath);  						}  					}  					else if (settings.OemLayer[SettingsKey.layer_name].ToUpper() == "PLA")  					{  						double absDensity = settings.GetValue<double>(SettingsKey.filament_density);  						if (absDensity != 1.24)  						{  							Assert.Fail("[filament_density] value should be set to PLA 1.24: " + printer.RelativeFilePath);  						}  					}  				}  			});
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,MaxFanSpeedOneHundredOrLess,The following statement contains a magic number: ValidateOnAllPrinters((printer' settings) =>  			{  				string fanSpeedString = settings.GetValue(SettingsKey.max_fan_speed);  				if (!string.IsNullOrEmpty(fanSpeedString))  				{  					// Must be valid int data  					int maxFanSpeed;  					if (!int.TryParse(fanSpeedString' out maxFanSpeed))  					{  						Assert.Fail("Invalid [max_fan_speed] value (int parse failed): " + printer.RelativeFilePath);  					}    					// Must be less than or equal to 100  					Assert.LessOrEqual(maxFanSpeed' 100' "[max_fan_speed]: " + printer.RelativeFilePath);  				}  			});
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,FirstLayerHeightLessThanNozzleDiameterXExtrusionMultiplier,The following statement contains a magic number: ValidateOnAllPrinters((printer' settings) =>  			{  				if (settings.GetValue(SettingsKey.output_only_first_layer) == "1")  				{  					return;  				}    				float nozzleDiameter = float.Parse(settings.GetValue(SettingsKey.nozzle_diameter));  				float layerHeight = float.Parse(settings.GetValue(SettingsKey.layer_height));      				float firstLayerExtrusionWidth;    				string firstLayerExtrusionWidthString = settings.GetValue(SettingsKey.first_layer_extrusion_width);  				if (!string.IsNullOrEmpty(firstLayerExtrusionWidthString) && firstLayerExtrusionWidthString.Trim() != "0")  				{  					firstLayerExtrusionWidth = ValueOrPercentageOf(firstLayerExtrusionWidthString' nozzleDiameter);  				}  				else  				{  					firstLayerExtrusionWidth = nozzleDiameter;  				}    				string firstLayerHeightString = settings.GetValue(SettingsKey.first_layer_height);  				if (!string.IsNullOrEmpty(firstLayerHeightString))  				{  					float firstLayerHeight = ValueOrPercentageOf(firstLayerHeightString' layerHeight);    					double maximumLayerHeight = firstLayerExtrusionWidth * 0.85;    					// TODO: Remove once validated and resolved  					if (firstLayerHeight >= maximumLayerHeight)  					{  						printer.RuleViolated = true;  						return;  					}    					Assert.Less(firstLayerHeight' maximumLayerHeight' "[first_layer_height] must be less than [firstLayerExtrusionWidth]: " + printer.RelativeFilePath);  				}    			});
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,LayerHeightLessThanNozzleDiameter,The following statement contains a magic number: ValidateOnAllPrinters((printer' settings) =>  			{  				if (settings.GetValue(SettingsKey.output_only_first_layer) == "1")  				{  					return;  				}    				float nozzleDiameter = float.Parse(settings.GetValue(SettingsKey.nozzle_diameter));  				float layerHeight = float.Parse(settings.GetValue(SettingsKey.layer_height));    				double maximumLayerHeight = nozzleDiameter * 85;    				// TODO: Remove once validated and resolved  				if (layerHeight >= maximumLayerHeight)  				{  					printer.RuleViolated = true;  					return;  				}    				Assert.Less(layerHeight' maximumLayerHeight' "[layer_height] must be less than [minimumLayerHeight]: " + printer.RelativeFilePath);  			});
Magic Number,MatterControl.Tests.MatterControl,OemProfileTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\OemProfileTests.cs,ValueOrPercentageOf,The following statement contains a magic number: float percentage = float.Parse(valueOrPercent.Replace("%"' "")) / 100;
Magic Number,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,PrinterConfigTests,The following statement contains a magic number: string staticDataPath = TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "StaticData");
Magic Number,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerSpeedEqualsAcceptableValue,The following statement contains a magic number: firstLayerSpeed = FirstLayerSpeedPercent * infillSpeed / 100.0;
Magic Number,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerSpeedEqualsAcceptableValue,The following statement contains a magic number: Assert.Greater(firstLayerSpeed' 5' "Unexpected firstLayerSpeedEqualsAcceptableValue value: " + sourceFile);
Magic Number,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerHeightLessThanNozzleDiameter,The following statement contains a magic number: convertedFirstLayerHeightValue = float.Parse(reFormatLayerHeight) / 100;
Magic Number,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerExtrusionWidthAcceptableValue,The following statement contains a magic number: float acceptableValue = float.Parse(nozzleDiameter) * 4;
Magic Number,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,firstLayerExtrusionWidthAcceptableValue,The following statement contains a magic number: convertedFirstLayerExtrusionWidth = float.Parse(reformatFirstLayerExtrusionWidth) / 100;
Magic Number,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,bedSizeXYSeparatedByComma,The following statement contains a magic number: Assert.AreEqual(2' settingValueToTest.Length' "bed_size should have two values separated by a comma: " + sourceFile);
Magic Number,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,printCenterFormatSeparatedByComma,The following statement contains a magic number: Assert.AreEqual(2' settingValueToTest.Length' "print_center should have two values separated by a comma: " + sourceFile);
Magic Number,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,testRetractLengthLessThanTwenty,The following statement contains a magic number: Assert.Less(float.Parse(settingValue' CultureInfo.InvariantCulture.NumberFormat)' 20' "retract_length should be less than 20: " + sourceFile);
Magic Number,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,minimumFanSpeedLessThanOrEqualToOneHundred,The following statement contains a magic number: Assert.LessOrEqual(int.Parse(settingValue)' 100' "min_fan_speed should be less than or equal to 100: " + sourceFile);
Magic Number,MatterControl.Tests.MatterControl,PrinterConfigurationTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterConfigurationTests.cs,maxFanSpeedNotGreaterThanOneHundred,The following statement contains a magic number: Assert.LessOrEqual(int.Parse(settingValue)' 100' "max_fan_speed should be less than or equal to 100: " + sourceFile);
Magic Number,MatterControl.Tests.MatterControl,PrinterWhiteListTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterWhiteListTests.cs,DesktopCalibrationPartsInSettings,The following statement contains a magic number: string settingsJsonPath = TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"' "OEMSettings"' "Settings.json");
Magic Number,MatterControl.Tests.MatterControl,PrinterWhiteListTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PrinterWhiteListTests.cs,DesktopCalibrationPartsExist,The following statement contains a magic number: string samplePartsPath = TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"' "OEMSettings"' "SampleParts");
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 0' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 0' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(0' 10' 0));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 10' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 10' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 10' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 0)' new Vector3(10' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 0)' new Vector3(10' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 0)' new Vector3(10' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 0)' new Vector3(10' 10' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 0)' new Vector3(10' 10' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 0)' new Vector3(10' 10' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 0)' new Vector3(10' 10' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 0)' new Vector3(10' 10' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 0)' new Vector3(0' 10' 0)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 0)' new Vector3(0' 10' 0)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 0' 5)' new Vector3(0' 0' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 0' 5)' new Vector3(0' 0' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 5)' new Vector3(10' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 5)' new Vector3(10' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 5)' new Vector3(10' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 5)' new Vector3(10' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 5)' new Vector3(0' 10' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 5)' new Vector3(0' 10' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 5)' new Vector3(0' 10' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 5)' new Vector3(0' 10' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 0)' new Vector3(5' 0' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 0)' new Vector3(5' 0' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 0)' new Vector3(5' 0' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 5)' new Vector3(5' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 5)' new Vector3(5' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 5)' new Vector3(5' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 5)' new Vector3(5' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 0)' new Vector3(-5' 0' -5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 0)' new Vector3(-5' 0' -5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 0)' new Vector3(-5' 0' -5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 5)' new Vector3(-5' 0' 0)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 5)' new Vector3(-5' 0' 0)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 5)' new Vector3(-5' 0' 0)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 0)' new Vector3(15' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 0)' new Vector3(15' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 0)' new Vector3(15' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 5)' new Vector3(15' 0' 20)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 5)' new Vector3(15' 0' 20)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 5)' new Vector3(15' 0' 20)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 5)' new Vector3(15' 0' 20)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(5' 0' 5));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(5' 0' 5));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 0' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 0' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(0' 5' 0));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(5' 5' 5));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(5' 5' 5));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(5' 5' 5));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 5' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 5' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 5' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(0' 10' 0));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(5' 10' 5));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(5' 10' 5));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(5' 10' 5));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 10' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 10' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: levelingData.SampledPositions.Add(new Vector3(10' 10' 10));
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 0)' new Vector3(10' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 0)' new Vector3(10' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 0)' new Vector3(10' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 0)' new Vector3(10' 10' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 0)' new Vector3(10' 10' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 0)' new Vector3(10' 10' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 0)' new Vector3(10' 10' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 0)' new Vector3(10' 10' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 0)' new Vector3(0' 10' 0)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 0)' new Vector3(0' 10' 0)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 0' 5)' new Vector3(0' 0' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 0' 5)' new Vector3(0' 0' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 5)' new Vector3(10' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 5)' new Vector3(10' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 5)' new Vector3(10' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 0' 5)' new Vector3(10' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(10' 10' 5)' new Vector3(10' 10' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 5)' new Vector3(0' 10' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 5)' new Vector3(0' 10' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 5)' new Vector3(0' 10' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(0' 10' 5)' new Vector3(0' 10' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 0)' new Vector3(5' 0' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 0)' new Vector3(5' 0' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 0)' new Vector3(5' 0' 5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 5)' new Vector3(5' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 5)' new Vector3(5' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 5)' new Vector3(5' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(5' 0' 5)' new Vector3(5' 0' 10)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 0)' new Vector3(-5' 0' -5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 0)' new Vector3(-5' 0' -5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 0)' new Vector3(-5' 0' -5)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 5)' new Vector3(-5' 0' 0)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 5)' new Vector3(-5' 0' 0)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(-5' 0' 5)' new Vector3(-5' 0' 0)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 0)' new Vector3(15' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 0)' new Vector3(15' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 0)' new Vector3(15' 0' 15)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 5)' new Vector3(15' 0' 20)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 5)' new Vector3(15' 0' 20)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 5)' new Vector3(15' 0' 20)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The following statement contains a magic number: AssertMeshLevelPoint(new Vector3(15' 0' 5)' new Vector3(15' 0' 20)' levelingFunctionsMesh2x2);
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,AssertMeshLevelPoint,The following statement contains a magic number: Assert.AreEqual(testLeveled.X' testUnleveled.X' .001' "We don't adjust the x or y on mesh leveling");
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,AssertMeshLevelPoint,The following statement contains a magic number: Assert.AreEqual(testLeveled.X' controlLeveled.X' .001' "We don't adjust the x or y on mesh leveling");
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,AssertMeshLevelPoint,The following statement contains a magic number: Assert.AreEqual(testLeveled.Y' testUnleveled.Y' .001' "We don't adjust the x or y on mesh leveling");
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,AssertMeshLevelPoint,The following statement contains a magic number: Assert.AreEqual(testLeveled.Y' controlLeveled.Y' .001' "We don't adjust the x or y on mesh leveling");
Magic Number,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,AssertMeshLevelPoint,The following statement contains a magic number: Assert.AreEqual(testLeveled.Z' controlLeveled.Z' .001);
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,TestSetup,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,TestSetup,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,MaxLengthStreamTests,The following statement contains a magic number: MaxLengthStream maxLengthStream = new MaxLengthStream(printer' new TestGCodeStream(printer' lines)' 6);
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,LineCuttingOnWhenLevelingOnWithProbeTest,The following statement contains a magic number: var levelingData = new PrintLevelingData()  			{  				SampledPositions = new List<Vector3>()  				{  					new Vector3(0' 0' 0)'  					new Vector3(10' 0' 0)'  					new Vector3(5' 10' 0)  				}  			};
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,LineCuttingOnWhenLevelingOnWithProbeTest,The following statement contains a magic number: var levelingData = new PrintLevelingData()  			{  				SampledPositions = new List<Vector3>()  				{  					new Vector3(0' 0' 0)'  					new Vector3(10' 0' 0)'  					new Vector3(5' 10' 0)  				}  			};
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,LineCuttingOnWhenLevelingOnWithProbeTest,The following statement contains a magic number: var levelingData = new PrintLevelingData()  			{  				SampledPositions = new List<Vector3>()  				{  					new Vector3(0' 0' 0)'  					new Vector3(10' 0' 0)'  					new Vector3(5' 10' 0)  				}  			};
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,LineCuttingOnWhenLevelingOnNoProbeTest,The following statement contains a magic number: var levelingData = new PrintLevelingData()  			{  				SampledPositions = new List<Vector3>()  				{  					new Vector3(0' 0' -.1)'  					new Vector3(10' 0' -.1)'  					new Vector3(5' 10' -.1)  				}  			};
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,LineCuttingOnWhenLevelingOnNoProbeTest,The following statement contains a magic number: var levelingData = new PrintLevelingData()  			{  				SampledPositions = new List<Vector3>()  				{  					new Vector3(0' 0' -.1)'  					new Vector3(10' 0' -.1)'  					new Vector3(5' 10' -.1)  				}  			};
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,LineCuttingOnWhenLevelingOnNoProbeTest,The following statement contains a magic number: var levelingData = new PrintLevelingData()  			{  				SampledPositions = new List<Vector3>()  				{  					new Vector3(0' 0' -.1)'  					new Vector3(10' 0' -.1)'  					new Vector3(5' 10' -.1)  				}  			};
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,LineCuttingOnWhenLevelingOnNoProbeTest,The following statement contains a magic number: var levelingData = new PrintLevelingData()  			{  				SampledPositions = new List<Vector3>()  				{  					new Vector3(0' 0' -.1)'  					new Vector3(10' 0' -.1)'  					new Vector3(5' 10' -.1)  				}  			};
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,LineCuttingOnWhenLevelingOnNoProbeTest,The following statement contains a magic number: var levelingData = new PrintLevelingData()  			{  				SampledPositions = new List<Vector3>()  				{  					new Vector3(0' 0' -.1)'  					new Vector3(10' 0' -.1)'  					new Vector3(5' 10' -.1)  				}  			};
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,LineCuttingOnWhenLevelingOnNoProbeTest,The following statement contains a magic number: var levelingData = new PrintLevelingData()  			{  				SampledPositions = new List<Vector3>()  				{  					new Vector3(0' 0' -.1)'  					new Vector3(10' 0' -.1)'  					new Vector3(5' 10' -.1)  				}  			};
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,PauseHandlingStreamTests,The following statement contains a magic number: int readX = 50;
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,PauseHandlingStreamTests,The following statement contains a magic number: Assert.AreEqual(50' readX' "Don't change the x if it is after a comment");
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,PauseHandlingStreamTests,The following statement contains a magic number: Assert.AreEqual(50' readX' "Don't change the x if it is after a comment");
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,PauseHandlingStreamTests,The following statement contains a magic number: Assert.AreEqual(33' readX' "not in a comment' do a change");
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,ValidateStreamResponse,The following statement contains a magic number: testStream.SetPrinterPosition(new PrinterMove(new Vector3()' 0' 300));
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,KnownLayerLinesTest,The following statement contains a magic number: Assert.AreEqual(8' GCodeFile.GetLayerNumber("; layer 8' Z = 0.800")' "Simplify3D ~ 2019");
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,KnownLayerLinesTest,The following statement contains a magic number: Assert.AreEqual(7' GCodeFile.GetLayerNumber(";LAYER:7")' "Slic3r Prusa Edition 1.38.7-prusa3d on 2018-04-25");
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,FeedRateRatioChangesFeedRate,The following statement contains a magic number: FeedRateMultiplierStream.FeedRateRatio = 2;
Magic Number,MatterControl.Tests.MatterControl,GCodeStreamTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\GCodeStreamTests.cs,ExtrusionRatioChangesExtrusionAmount,The following statement contains a magic number: ExtrusionMultiplierStream.ExtrusionRatio = 2;
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var minimumSupportHeight = .05;
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabb.MinXYZ.Z + 15);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: Assert.AreEqual(0' support.GetAxisAlignedBoundingBox().MinXYZ.Z' .001' "Support columns are all on the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: Assert.AreEqual(15' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: Assert.AreEqual(15' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabb.MinXYZ.Z - 5);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: cubeInAir.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabbAir.MinXYZ.Z + 25);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: Assert.AreEqual(2' scene.Children.Count' "We should not have added support");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: cubeOnBed.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabbBed.MinXYZ.Z - 5);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: cubeInAir.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabbAir.MinXYZ.Z + 25);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: Assert.AreEqual(2' scene.Children.Count' "We should not have added support");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: cubeInAir.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabbAir.MinXYZ.Z + 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: Assert.AreEqual(2' scene.Children.Count' "We should not have added support");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: cubeInAir.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabbAir.MinXYZ.Z + 15);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: Assert.AreEqual(2' scene.Children.Count' "We should not have added support");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: cubeInAir.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabbAir.MinXYZ.Z + 15);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: Assert.AreEqual(2' scene.Children.Count' "We should not have added support");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube5AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube5AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube5AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: cube5AboveBed.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabb5Above.MinXYZ.Z + 5);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube30AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube30AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: var cube30AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: cube30AboveBed.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabb30Above.MinXYZ.Z + 30);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: Assert.AreEqual(0' support.GetAxisAlignedBoundingBox().MinXYZ.Z' .001' "Support columns are all on the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: Assert.AreEqual(5' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The following statement contains a magic number: Assert.AreEqual(5' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var minimumSupportHeight = .05;
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cube = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: cube.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabb.MinXYZ.Z + 15);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.AreEqual(0' support.GetAxisAlignedBoundingBox().MinXYZ.Z' .001' "Support columns are all on the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.AreEqual(15' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.AreEqual(15' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: cubeInAir.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabbAir.MinXYZ.Z + 25);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.Greater(scene.Children.Count' 2' "We should have added some support");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.AreEqual(20' support.GetAxisAlignedBoundingBox().MinXYZ.Z' .001' "Support columns are all on the first cube");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.AreEqual(20' support.GetAxisAlignedBoundingBox().MinXYZ.Z' .001' "Support columns are all on the first cube");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.AreEqual(5' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.AreEqual(5' support.GetAxisAlignedBoundingBox().ZSize' .02' "Support columns should be the right height from the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: cubeInAir.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabbAir.MinXYZ.Z + 15);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.AreEqual(2' scene.Children.Count' "We should not have added support");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeOnBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cubeInAir = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: cubeInAir.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabbAir.MinXYZ.Z + 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.AreEqual(2' scene.Children.Count' "We should not have added support");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cube5AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cube5AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cube5AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: cube5AboveBed.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabb5Above.MinXYZ.Z + 5);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cube30AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cube30AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: var cube30AboveBed = await CubeObject3D.Create(20' 20' 20);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: cube30AboveBed.Matrix = Matrix4X4.CreateTranslation(0' 0' -aabb30Above.MinXYZ.Z + 30);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.Greater(scene.Children.Count' 2' "We should have added some support");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.AreEqual(5' aabb.ZSize' .001' "Support columns should be the right height from the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsEverywhereTests,The following statement contains a magic number: Assert.AreEqual(5' aabb.ZSize' .001' "Support columns should be the right height from the bed");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,ComplexPartNoSupport,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,ComplexPartNoSupport,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,ComplexPartNoSupport,The following statement contains a magic number: var minimumSupportHeight = .05;
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,ComplexPartNoSupport,The following statement contains a magic number: var meshPath = TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "TestData"' "TestParts"' "NoSupportNeeded.stl");
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.2)  				{  					new SupportGenerator.HitPlane(.178' true)'  					new SupportGenerator.HitPlane(10.787' true)'  					new SupportGenerator.HitPlane(10.787' false)'  					new SupportGenerator.HitPlane(13.085' true)'  					new SupportGenerator.HitPlane(13.085' false)'  					new SupportGenerator.HitPlane(15.822' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.2)  				{  					new SupportGenerator.HitPlane(.178' true)'  					new SupportGenerator.HitPlane(10.787' true)'  					new SupportGenerator.HitPlane(10.787' false)'  					new SupportGenerator.HitPlane(13.085' true)'  					new SupportGenerator.HitPlane(13.085' false)'  					new SupportGenerator.HitPlane(15.822' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.2)  				{  					new SupportGenerator.HitPlane(.178' true)'  					new SupportGenerator.HitPlane(10.787' true)'  					new SupportGenerator.HitPlane(10.787' false)'  					new SupportGenerator.HitPlane(13.085' true)'  					new SupportGenerator.HitPlane(13.085' false)'  					new SupportGenerator.HitPlane(15.822' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.2)  				{  					new SupportGenerator.HitPlane(.178' true)'  					new SupportGenerator.HitPlane(10.787' true)'  					new SupportGenerator.HitPlane(10.787' false)'  					new SupportGenerator.HitPlane(13.085' true)'  					new SupportGenerator.HitPlane(13.085' false)'  					new SupportGenerator.HitPlane(15.822' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.2)  				{  					new SupportGenerator.HitPlane(.178' true)'  					new SupportGenerator.HitPlane(10.787' true)'  					new SupportGenerator.HitPlane(10.787' false)'  					new SupportGenerator.HitPlane(13.085' true)'  					new SupportGenerator.HitPlane(13.085' false)'  					new SupportGenerator.HitPlane(15.822' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.2)  				{  					new SupportGenerator.HitPlane(.178' true)'  					new SupportGenerator.HitPlane(10.787' true)'  					new SupportGenerator.HitPlane(10.787' false)'  					new SupportGenerator.HitPlane(13.085' true)'  					new SupportGenerator.HitPlane(13.085' false)'  					new SupportGenerator.HitPlane(15.822' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.2)  				{  					new SupportGenerator.HitPlane(.178' true)'  					new SupportGenerator.HitPlane(10.787' true)'  					new SupportGenerator.HitPlane(10.787' false)'  					new SupportGenerator.HitPlane(13.085' true)'  					new SupportGenerator.HitPlane(13.085' false)'  					new SupportGenerator.HitPlane(15.822' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(planes' .2);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((10.787' 13.085)' column0[0]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((10.787' 13.085)' column0[0]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual(2' column0.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((0' 5)' column0[0]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((25' 30)' column0[1]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((25' 30)' column0[1]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual(2' column0.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual(5' column0[0].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual(25' column0[1].start);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual(30' column0[1].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual(2' column0.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((0' 5)' column0[0]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((25' 30)' column0[1]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((25' 30)' column0[1]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(5' 25)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(5' 25)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(5' 25)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((0' 30)' column0[0]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(.1)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(6' 24)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(6' 24)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(.1)  				{  					(6' 24)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual(3' column0.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((0' 5)' column0[0]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((6' 24)' column0[1]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((6' 24)' column0[1]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((25' 30)' column0[2]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((25' 30)' column0[2]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((25' 30)' column0[2]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(2)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(2)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(2)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column0 = new SupportGenerator.SupportColumn(2)  				{  					(0' 5)'  					(25' 30)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(2)  				{  					(6' 24)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(2)  				{  					(6' 24)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: var column1 = new SupportGenerator.SupportColumn(2)  				{  					(6' 24)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportColumnTests,The following statement contains a magic number: Assert.AreEqual((0' 30)' column0[0]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  // top at 0 (the bed)  					new SupportGenerator.HitPlane(5' true)'   // bottom at 5 (the bottom of a box)  					new SupportGenerator.HitPlane(10' false)' // top at 10 (the top of the box)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  // top at 0 (the bed)  					new SupportGenerator.HitPlane(5' true)'   // bottom at 5 (the bottom of a box)  					new SupportGenerator.HitPlane(10' false)' // top at 10 (the top of the box)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(5' supports[0].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  // top at 0 (the bed)  					new SupportGenerator.HitPlane(0' true)'  // bottom at 0 (box a on bed)  					new SupportGenerator.HitPlane(10' false)' // top at 10 (box a top)  					new SupportGenerator.HitPlane(10' true)' // bottom at 10 (box b bottom)  					new SupportGenerator.HitPlane(20' false) // top at 20 (box b top)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  // top at 0 (the bed)  					new SupportGenerator.HitPlane(0' true)'  // bottom at 0 (box a on bed)  					new SupportGenerator.HitPlane(10' false)' // top at 10 (box a top)  					new SupportGenerator.HitPlane(10' true)' // bottom at 10 (box b bottom)  					new SupportGenerator.HitPlane(20' false) // top at 20 (box b top)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  // top at 0 (the bed)  					new SupportGenerator.HitPlane(0' true)'  // bottom at 0 (box a on bed)  					new SupportGenerator.HitPlane(10' false)' // top at 10 (box a top)  					new SupportGenerator.HitPlane(10' true)' // bottom at 10 (box b bottom)  					new SupportGenerator.HitPlane(20' false) // top at 20 (box b top)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  // top at 0 (the bed)  					new SupportGenerator.HitPlane(0' true)'  // bottom at 0 (box a on bed)  					new SupportGenerator.HitPlane(5' true)' // bottom at 5 (box b bottom)  					new SupportGenerator.HitPlane(10' false)' // top at 10 (box a top)  					new SupportGenerator.HitPlane(20' false) // top at 20 (box b top)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  // top at 0 (the bed)  					new SupportGenerator.HitPlane(0' true)'  // bottom at 0 (box a on bed)  					new SupportGenerator.HitPlane(5' true)' // bottom at 5 (box b bottom)  					new SupportGenerator.HitPlane(10' false)' // top at 10 (box a top)  					new SupportGenerator.HitPlane(20' false) // top at 20 (box b top)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  // top at 0 (the bed)  					new SupportGenerator.HitPlane(0' true)'  // bottom at 0 (box a on bed)  					new SupportGenerator.HitPlane(5' true)' // bottom at 5 (box b bottom)  					new SupportGenerator.HitPlane(10' false)' // top at 10 (box a top)  					new SupportGenerator.HitPlane(20' false) // top at 20 (box b top)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(10' false)'  					new SupportGenerator.HitPlane(20' false)'  					new SupportGenerator.HitPlane(25' true)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(10' false)'  					new SupportGenerator.HitPlane(20' false)'  					new SupportGenerator.HitPlane(25' true)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(10' false)'  					new SupportGenerator.HitPlane(20' false)'  					new SupportGenerator.HitPlane(25' true)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(0)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(10' false)'  					new SupportGenerator.HitPlane(20' false)'  					new SupportGenerator.HitPlane(25' true)  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(3' top);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' supports.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(5' supports[0].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' supports[1].start);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(25' supports[1].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' planes.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' planes[0].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20.1' planes[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(22' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(22' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(22' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' planes.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' planes[0].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(22.1' planes[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20.001' true)'  					new SupportGenerator.HitPlane(20.002' true)'  					new SupportGenerator.HitPlane(20.003' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20.001' true)'  					new SupportGenerator.HitPlane(20.002' true)'  					new SupportGenerator.HitPlane(20.003' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20.001' true)'  					new SupportGenerator.HitPlane(20.002' true)'  					new SupportGenerator.HitPlane(20.003' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20.001' true)'  					new SupportGenerator.HitPlane(20.002' true)'  					new SupportGenerator.HitPlane(20.003' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20.001' true)'  					new SupportGenerator.HitPlane(20.002' true)'  					new SupportGenerator.HitPlane(20.003' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(20.001' true)'  					new SupportGenerator.HitPlane(20.002' true)'  					new SupportGenerator.HitPlane(20.003' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' planes.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' planes[0].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20.103' planes[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					// bad extra top  					new SupportGenerator.HitPlane(22' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					// bad extra top  					new SupportGenerator.HitPlane(22' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					// bad extra top  					new SupportGenerator.HitPlane(22' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' planes.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' planes[0].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(22' planes[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(1' false)'  					new SupportGenerator.HitPlane(2' false)'  					new SupportGenerator.HitPlane(3' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					// bad extra top  					new SupportGenerator.HitPlane(22' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(1' false)'  					new SupportGenerator.HitPlane(2' false)'  					new SupportGenerator.HitPlane(3' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					// bad extra top  					new SupportGenerator.HitPlane(22' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(1' false)'  					new SupportGenerator.HitPlane(2' false)'  					new SupportGenerator.HitPlane(3' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					// bad extra top  					new SupportGenerator.HitPlane(22' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(1' false)'  					new SupportGenerator.HitPlane(2' false)'  					new SupportGenerator.HitPlane(3' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					// bad extra top  					new SupportGenerator.HitPlane(22' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(1' false)'  					new SupportGenerator.HitPlane(2' false)'  					new SupportGenerator.HitPlane(3' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					// bad extra top  					new SupportGenerator.HitPlane(22' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' planes.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' planes[0].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(22.1' planes[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual((0' 20)' supports[0]);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' false)'  					// bad extra top  					new SupportGenerator.HitPlane(22' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' false)'  					// bad extra top  					new SupportGenerator.HitPlane(22' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' false)'  					// bad extra top  					new SupportGenerator.HitPlane(22' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// bottom at 0  					new SupportGenerator.HitPlane(0' true)'  					// bottom at 20  					new SupportGenerator.HitPlane(20' true)'  					// bottom at 22  					new SupportGenerator.HitPlane(22' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// bottom at 0  					new SupportGenerator.HitPlane(0' true)'  					// bottom at 20  					new SupportGenerator.HitPlane(20' true)'  					// bottom at 22  					new SupportGenerator.HitPlane(22' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// bottom at 0  					new SupportGenerator.HitPlane(0' true)'  					// bottom at 20  					new SupportGenerator.HitPlane(20' true)'  					// bottom at 22  					new SupportGenerator.HitPlane(22' true)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' planes.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(22.1' planes[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					// area needing support  					new SupportGenerator.HitPlane(20' true)'  					new SupportGenerator.HitPlane(25' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(4' planes.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(16' planes[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.IsTrue(planes[2].Bottom());
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' planes[2].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' planes[2].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.IsTrue(planes[3].Top());
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(25' planes[3].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(25' planes[3].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(16' supports[0].start);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' supports[0].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' true)'  					new SupportGenerator.HitPlane(0' false)'  					new SupportGenerator.HitPlane(0.0302' true)'  					new SupportGenerator.HitPlane(0.0497' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' true)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(0.762' false)'  					new SupportGenerator.HitPlane(15.95' false)'  					new SupportGenerator.HitPlane(15.9697' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  					new SupportGenerator.HitPlane(16' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' planes.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(16' planes[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9966' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9961' true)' // last plane below bed is a top  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9966' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9961' true)' // last plane below bed is a top  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9966' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9961' true)' // last plane below bed is a top  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9966' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9961' true)' // last plane below bed is a top  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9966' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9961' true)' // last plane below bed is a top  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9966' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9961' true)' // last plane below bed is a top  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9966' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9961' true)' // last plane below bed is a top  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9966' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9961' true)' // last plane below bed is a top  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9966' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9961' true)' // last plane below bed is a top  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9966' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9961' true)' // last plane below bed is a top  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' planes.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(14.242' planes[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9961' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9966' true)' // last plane below bed is a bottom (no support needed)  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9961' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9966' true)' // last plane below bed is a bottom (no support needed)  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9961' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9966' true)' // last plane below bed is a bottom (no support needed)  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9961' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9966' true)' // last plane below bed is a bottom (no support needed)  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9961' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9966' true)' // last plane below bed is a bottom (no support needed)  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9961' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9966' true)' // last plane below bed is a bottom (no support needed)  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9961' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9966' true)' // last plane below bed is a bottom (no support needed)  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9961' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9966' true)' // last plane below bed is a bottom (no support needed)  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9961' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9966' true)' // last plane below bed is a bottom (no support needed)  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(-.9961' true)'  					new SupportGenerator.HitPlane(-.9962' false)'  					new SupportGenerator.HitPlane(-.9963' true)'  					new SupportGenerator.HitPlane(-.9964' false)'  					new SupportGenerator.HitPlane(-.9965' true)'  					new SupportGenerator.HitPlane(-.9966' true)' // last plane below bed is a bottom (no support needed)  					new SupportGenerator.HitPlane(13.48' true)'  					new SupportGenerator.HitPlane(13.48' false)'  					new SupportGenerator.HitPlane(14.242' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' planes.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(14.242' planes[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes = new SupportGenerator.HitPlanes(.1)  				{  					// top at 0  					new SupportGenerator.HitPlane(0' false)'  					// bottom at 5  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					new SupportGenerator.HitPlane(5' true)'  					// top at 25  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					new SupportGenerator.HitPlane(25' false)'  					// bottom at 30  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					new SupportGenerator.HitPlane(30' true)'  					// top at 50  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  					new SupportGenerator.HitPlane(50' false)'  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(4' planes.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(5' planes[0].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(25' planes[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.IsTrue(planes[2].Bottom());
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(30' planes[2].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(30' planes[2].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.IsTrue(planes[3].Top());
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(50' planes[3].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(50' planes[3].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' supports.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(5' supports[0].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(25' supports[1].start);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(30' supports[1].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes0 = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(0' true)' // bottom of part  					new SupportGenerator.HitPlane(15' false)' // top of part  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes0 = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(0' true)' // bottom of part  					new SupportGenerator.HitPlane(15' false)' // top of part  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support0 = new SupportGenerator.SupportColumn(planes0' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes1 = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(20' true)' // bottom of part  					new SupportGenerator.HitPlane(30' false)' // top of part  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes1 = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(20' true)' // bottom of part  					new SupportGenerator.HitPlane(30' false)' // top of part  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes1 = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(20' true)' // bottom of part  					new SupportGenerator.HitPlane(30' false)' // top of part  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support1 = new SupportGenerator.SupportColumn(planes1' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' support1[0].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' support0[0].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes0 = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(10' true)' // bottom of part  					new SupportGenerator.HitPlane(20' false)' // top of part  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes0 = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(10' true)' // bottom of part  					new SupportGenerator.HitPlane(20' false)' // top of part  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes0 = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(10' true)' // bottom of part  					new SupportGenerator.HitPlane(20' false)' // top of part  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' planes0.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(10' planes0[0].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(20' planes0[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support0 = new SupportGenerator.SupportColumn(planes0' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes1 = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(0' true)' // bottom of part  					new SupportGenerator.HitPlane(15' false)' // top of part  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var planes1 = new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(0' true)' // bottom of part  					new SupportGenerator.HitPlane(15' false)' // top of part  				};
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(2' planes1.Count);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(15' planes1[1].Z);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support1 = new SupportGenerator.SupportColumn(planes1' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(10' support0[0].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support0 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(10' true)' // bottom of part  					new SupportGenerator.HitPlane(20' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support0 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(10' true)' // bottom of part  					new SupportGenerator.HitPlane(20' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support0 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(10' true)' // bottom of part  					new SupportGenerator.HitPlane(20' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support0 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(10' true)' // bottom of part  					new SupportGenerator.HitPlane(20' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support1 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(0' true)' // bottom of part  					new SupportGenerator.HitPlane(15' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support1 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(0' true)' // bottom of part  					new SupportGenerator.HitPlane(15' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support1 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(0' true)' // bottom of part  					new SupportGenerator.HitPlane(15' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(10' support0[0].end);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support0 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(10' true)' // bottom of part  					new SupportGenerator.HitPlane(20' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support0 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(10' true)' // bottom of part  					new SupportGenerator.HitPlane(20' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support0 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(10' true)' // bottom of part  					new SupportGenerator.HitPlane(20' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support0 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(10' true)' // bottom of part  					new SupportGenerator.HitPlane(20' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support1 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(0' true)' // bottom of part  					new SupportGenerator.HitPlane(15' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support1 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(0' true)' // bottom of part  					new SupportGenerator.HitPlane(15' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: var support1 = new SupportGenerator.SupportColumn(new SupportGenerator.HitPlanes(.1)  				{  					new SupportGenerator.HitPlane(0' false)' // bed  					new SupportGenerator.HitPlane(0' true)' // bottom of part  					new SupportGenerator.HitPlane(15' false)' // top of part  				}' .1);
Magic Number,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The following statement contains a magic number: Assert.AreEqual(10' support1[0].end);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime testTime = nowTime.AddMinutes(-63);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: testTime = nowTime.AddHours(-25);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: testTime = nowTime.AddDays(-4);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: testTime = nowTime.AddDays(-6);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: testTime = nowTime.AddDays(-7);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: testTime = nowTime.AddDays(-37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: testTime = nowTime.AddDays(-364);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: DateTime nowTime = new DateTime(2016' 05' 28' 15' 13' 37);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: List<DateTime> allTimes = new List<DateTime>()  				{  					nowTime.AddMinutes(-63)'  					nowTime.AddMinutes(-82)'  					nowTime.AddHours(-25)'  					nowTime.AddHours(-31)'  					nowTime.AddDays(-4)'  					nowTime.AddDays(-6)'  					nowTime.AddDays(-7)'  					nowTime.AddDays(-37)'  					nowTime.AddDays(-364)'  				};
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: List<DateTime> allTimes = new List<DateTime>()  				{  					nowTime.AddMinutes(-63)'  					nowTime.AddMinutes(-82)'  					nowTime.AddHours(-25)'  					nowTime.AddHours(-31)'  					nowTime.AddDays(-4)'  					nowTime.AddDays(-6)'  					nowTime.AddDays(-7)'  					nowTime.AddDays(-37)'  					nowTime.AddDays(-364)'  				};
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: List<DateTime> allTimes = new List<DateTime>()  				{  					nowTime.AddMinutes(-63)'  					nowTime.AddMinutes(-82)'  					nowTime.AddHours(-25)'  					nowTime.AddHours(-31)'  					nowTime.AddDays(-4)'  					nowTime.AddDays(-6)'  					nowTime.AddDays(-7)'  					nowTime.AddDays(-37)'  					nowTime.AddDays(-364)'  				};
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: List<DateTime> allTimes = new List<DateTime>()  				{  					nowTime.AddMinutes(-63)'  					nowTime.AddMinutes(-82)'  					nowTime.AddHours(-25)'  					nowTime.AddHours(-31)'  					nowTime.AddDays(-4)'  					nowTime.AddDays(-6)'  					nowTime.AddDays(-7)'  					nowTime.AddDays(-37)'  					nowTime.AddDays(-364)'  				};
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: List<DateTime> allTimes = new List<DateTime>()  				{  					nowTime.AddMinutes(-63)'  					nowTime.AddMinutes(-82)'  					nowTime.AddHours(-25)'  					nowTime.AddHours(-31)'  					nowTime.AddDays(-4)'  					nowTime.AddDays(-6)'  					nowTime.AddDays(-7)'  					nowTime.AddDays(-37)'  					nowTime.AddDays(-364)'  				};
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: List<DateTime> allTimes = new List<DateTime>()  				{  					nowTime.AddMinutes(-63)'  					nowTime.AddMinutes(-82)'  					nowTime.AddHours(-25)'  					nowTime.AddHours(-31)'  					nowTime.AddDays(-4)'  					nowTime.AddDays(-6)'  					nowTime.AddDays(-7)'  					nowTime.AddDays(-37)'  					nowTime.AddDays(-364)'  				};
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: List<DateTime> allTimes = new List<DateTime>()  				{  					nowTime.AddMinutes(-63)'  					nowTime.AddMinutes(-82)'  					nowTime.AddHours(-25)'  					nowTime.AddHours(-31)'  					nowTime.AddDays(-4)'  					nowTime.AddDays(-6)'  					nowTime.AddDays(-7)'  					nowTime.AddDays(-37)'  					nowTime.AddDays(-364)'  				};
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: List<DateTime> allTimes = new List<DateTime>()  				{  					nowTime.AddMinutes(-63)'  					nowTime.AddMinutes(-82)'  					nowTime.AddHours(-25)'  					nowTime.AddHours(-31)'  					nowTime.AddDays(-4)'  					nowTime.AddDays(-6)'  					nowTime.AddDays(-7)'  					nowTime.AddDays(-37)'  					nowTime.AddDays(-364)'  				};
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: List<DateTime> allTimes = new List<DateTime>()  				{  					nowTime.AddMinutes(-63)'  					nowTime.AddMinutes(-82)'  					nowTime.AddHours(-25)'  					nowTime.AddHours(-31)'  					nowTime.AddDays(-4)'  					nowTime.AddDays(-6)'  					nowTime.AddDays(-7)'  					nowTime.AddDays(-37)'  					nowTime.AddDays(-364)'  				};
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: Assert.IsTrue(orderedForDisplay.Count == 6);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: Assert.IsTrue(orderedForDisplay[TimeBlock.Today].Count == 2);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: Assert.IsTrue(orderedForDisplay[TimeBlock.Yesterday].Count == 2);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,RelativeFriendlyDatesTest,The following statement contains a magic number: Assert.IsTrue(orderedForDisplay[TimeBlock.SameWeek].Count == 2);
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,EnglishLinesOnlyContainEnglishCharachters,The following statement contains a magic number: string fullPath = TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"' "Translations");
Magic Number,MatterControl.Tests.MatterControl,TranslationsTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\TranslationsTests.cs,checkForInvalidCharacters,The following statement contains a magic number: i > 127
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: this.BackgroundColor = new Color(56' 56' 56);
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: this.BackgroundColor = new Color(56' 56' 56);
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: this.BackgroundColor = new Color(56' 56' 56);
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: double pixelWidth = 70;
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: column = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(0' 10)'  			};
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: column.AddChild(new TextWidget("Input:"' textColor: Color.White)  			{  				Margin = new BorderDouble(right: 10' bottom: 2)'  			});
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: column.AddChild(new TextWidget("Input:"' textColor: Color.White)  			{  				Margin = new BorderDouble(right: 10' bottom: 2)'  			});
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: this.InputText = new MHTextEditWidget(""' theme' pixelWidth: pixelWidth)  			{  				Margin = new BorderDouble(right: 8)  			};
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: column = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(0' 10)'  			};
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: column.AddChild(new TextWidget("Expected:"' textColor: Color.White)  			{  				Margin = new BorderDouble(right: 10' bottom: 2)  			});
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: column.AddChild(new TextWidget("Expected:"' textColor: Color.White)  			{  				Margin = new BorderDouble(right: 10' bottom: 2)  			});
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: this.ExpectedText = new MHTextEditWidget(""' theme' pixelWidth: pixelWidth)  			{  				Margin = new BorderDouble(right: 8)  			};
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: column = new FlowLayoutWidget(FlowDirection.TopToBottom)  			{  				Margin = new BorderDouble(0' 10)'  			};
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: column.AddChild(new TextWidget("Actual:"' textColor: Color.White)  			{  				Margin = new BorderDouble(right: 10' bottom: 2)  			});
Magic Number,MatterControl.Tests.MatterControl,UIFieldTestWindow,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\UIFieldTestWindow.cs,UIFieldTestWindow,The following statement contains a magic number: column.AddChild(new TextWidget("Actual:"' textColor: Color.White)  			{  				Margin = new BorderDouble(right: 10' bottom: 2)  			});
Magic Number,MatterControl.Tests.MatterControl,PathTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PathTests.cs,CacheablePathTest,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,PathTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PathTests.cs,CacheDirectoryTest,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl,PathTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PathTests.cs,TempPathTest,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterHackers.PolygonMesh.UnitTests,MeshRebuildTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshRebuildTests.cs,PinchChangesMesh,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterHackers.PolygonMesh.UnitTests,MeshRebuildTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshRebuildTests.cs,PinchChangesMesh,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterHackers.PolygonMesh.UnitTests,MeshRebuildTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshRebuildTests.cs,RunTest,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterHackers.PolygonMesh.UnitTests,MeshRebuildTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshRebuildTests.cs,RunTest,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterHackers.PolygonMesh.UnitTests,MeshRebuildTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshRebuildTests.cs,RunTest,The following statement contains a magic number: Assert.AreEqual(3' root.Descendants().Count());
Magic Number,MatterHackers.PolygonMesh.UnitTests,DebugFace,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshCsgTests.cs,FaceAtXy,The following statement contains a magic number: !AreEqual(face[2].X' x)  				|| !AreEqual(face[2].Y' y)
Magic Number,MatterHackers.PolygonMesh.UnitTests,DebugFace,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshCsgTests.cs,FaceAtXy,The following statement contains a magic number: !AreEqual(face[2].X' x)  				|| !AreEqual(face[2].Y' y)
Magic Number,MatterHackers.PolygonMesh.UnitTests,DebugFace,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshCsgTests.cs,GetCoords,The following statement contains a magic number: return GetCoords(face' Color.Black' new Color(Color.Red' 100));
Magic Number,MatterHackers.PolygonMesh.UnitTests,DebugFace,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshCsgTests.cs,HasPosition,The following statement contains a magic number: face[0].Equals(position' .0001)
Magic Number,MatterHackers.PolygonMesh.UnitTests,DebugFace,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshCsgTests.cs,HasPosition,The following statement contains a magic number: face[1].Equals(position' .0001)
Magic Number,MatterHackers.PolygonMesh.UnitTests,DebugFace,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshCsgTests.cs,HasPosition,The following statement contains a magic number: face[2].Equals(position' .0001)
Magic Number,MatterHackers.PolygonMesh.UnitTests,DebugFace,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshCsgTests.cs,HasPosition,The following statement contains a magic number: face[2].Equals(position' .0001)
Magic Number,MatterHackers.PolygonMesh.UnitTests,DebugFace,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshCsgTests.cs,Classify1,The following statement contains a magic number: color = new Color(color' 100);
Magic Number,MatterHackers.PolygonMesh.UnitTests,DebugFace,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MeshCsgTests.cs,Classify2,The following statement contains a magic number: color = new Color(color' 100);
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(-10' -10' 0' 10' 10' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(-10' -10' 0' 10' 10' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(-10' -10' 0' 10' 10' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(-10' -10' 0' 10' 10' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(-10' -10' 0' 10' 10' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(-10' -10' 0' 10' 10' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(cube1 = new Object3D()  				{  					Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  					Matrix = Matrix4X4.CreateTranslation(34' 22' 10)  				});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(24' 12' 0' 44' 32' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: await scene.AutoArrangeChildren(new Vector3(100' 100' 0));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: await scene.AutoArrangeChildren(new Vector3(100' 100' 0));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(90' 90' 0' 110' 110' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(90' 90' 0' 110' 110' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(90' 90' 0' 110' 110' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(90' 90' 0' 110' 110' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(90' 90' 0' 110' 110' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.IsTrue(new AxisAlignedBoundingBox(90' 90' 0' 110' 110' 20).Equals(cube1.GetAxisAlignedBoundingBox()' .001));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.Greater(sceneAabb.XSize' 60);
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.Greater(sceneAabb.YSize' 60);
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.Less(sceneAabb.XSize' 60);
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.Less(sceneAabb.YSize' 60);
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(child = new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(child = new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(child = new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(child = new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(child = new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: scene.Children.Add(child = new Object3D()  					{  						Mesh = PlatonicSolids.CreateCube(20' 20' 20)'  						Matrix = Matrix4X4.CreateTranslation(i * 134' i * -122' 10)  					});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.Greater(sceneAabb.XSize' 60);
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.Greater(sceneAabb.YSize' 60);
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.Less(sceneAabb.XSize' 60);
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,AutoArrangeChildrenTests,The following statement contains a magic number: Assert.Less(sceneAabb.YSize' 60);
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,CreatesAndLinksAmfsForUnsavedMeshes,The following statement contains a magic number: scene.Children.Add(new Object3D  			{  				Mesh = PlatonicSolids.CreateCube(20' 20' 20)  			});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,CreatesAndLinksAmfsForUnsavedMeshes,The following statement contains a magic number: scene.Children.Add(new Object3D  			{  				Mesh = PlatonicSolids.CreateCube(20' 20' 20)  			});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,CreatesAndLinksAmfsForUnsavedMeshes,The following statement contains a magic number: scene.Children.Add(new Object3D  			{  				Mesh = PlatonicSolids.CreateCube(20' 20' 20)  			});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,ResavedSceneRemainsConsistent,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,ResavedSceneRemainsConsistent,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,ResavedSceneRemainsConsistent,The following statement contains a magic number: scene.Children.Add(new Object3D  			{  				Mesh = PlatonicSolids.CreateCube(20' 20' 20)  			});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,ResavedSceneRemainsConsistent,The following statement contains a magic number: scene.Children.Add(new Object3D  			{  				Mesh = PlatonicSolids.CreateCube(20' 20' 20)  			});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,ResavedSceneRemainsConsistent,The following statement contains a magic number: scene.Children.Add(new Object3D  			{  				Mesh = PlatonicSolids.CreateCube(20' 20' 20)  			});
Magic Number,MatterHackers.PolygonMesh.UnitTests,SceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\SceneTests.cs,GetSceneTempPath,The following statement contains a magic number: string tempPath = TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "temp"' "scenetests");
Magic Number,MatterHackers.MatterControl.UI,MatterControlUiFeatures,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUiFeatures.cs,TopToBottomContainerAppliesExpectedMarginToToggleView,The following statement contains a magic number: int marginSize = 40;
Magic Number,MatterHackers.MatterControl.UI,MatterControlUiFeatures,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUiFeatures.cs,TopToBottomContainerAppliesExpectedMarginToToggleView,The following statement contains a magic number: int dimensions = 300;
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,ClickSignOut,The following statement contains a magic number: testRunner.Delay(.5);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForReloadAll,The following statement contains a magic number: resetEvent.WaitOne(10 * 1000);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForReloadAll,The following statement contains a magic number: resetEvent.WaitOne(10 * 1000);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForReloadAll,The following statement contains a magic number: testRunner.Delay(.2);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,GetTestItemPath,The following statement contains a magic number: return TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "TestData"' "QueueItems"' queueItemToLoad);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Select3DPart,The following statement contains a magic number: testRunner.NameExists("3D View Edit"' .2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Select3DPart,The following statement contains a magic number: testRunner.DragDropByName("InteractionLayer"' "InteractionLayer"' offsetDrop: new Agg.Point2D(10' 15)' mouseButtons: MouseButtons.Right);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Select3DPart,The following statement contains a magic number: testRunner.DragDropByName("InteractionLayer"' "InteractionLayer"' offsetDrop: new Agg.Point2D(10' 15)' mouseButtons: MouseButtons.Right);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForFirstDraw,The following statement contains a magic number: testRunner.GetWidgetByName("PartPreviewContent"' out SystemWindow systemWindow' 10);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,OpenEmptyPartTab,The following statement contains a magic number: testRunner.GetWidgetByName("Hardware Tab"' out systemWindow' 10);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,OpenEmptyPartTab,The following statement contains a magic number: testRunner.NameExists("Cancel Wizard Button"' 10)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,LaunchAndConnectToPrinterEmulator,The following statement contains a magic number: var hardwareTab = testRunner.GetWidgetByName("Hardware Tab"' out SystemWindow systemWindow' 10);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,CancelPrint,The following statement contains a magic number: testRunner.WaitForName("Stop Task Button"' .2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,WaitForLayer,The following statement contains a magic number: resetEvent.WaitOne((int) (secondsToWait * 1000));
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddAndSelectPrinter,The following statement contains a magic number: testRunner.GetWidgetByName("PartPreviewContent"' out SystemWindow systemWindow' 10);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddAndSelectPrinter,The following statement contains a magic number: !testRunner.NameExists("Create Printer"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddAndSelectPrinter,The following statement contains a magic number: !testRunner.NameExists("AddPrinterWidget"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddItemsToQueue,The following statement contains a magic number: string queueItemsDirectory = TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "Tests"' "TestData"' "QueueItems"' queueItemFolderToLoad);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,EnsureFoldersVisible,The following statement contains a magic number: var checkBox = (ExpandCheckboxButton)testRunner.GetWidgetByName("Show Folders Toggle"' out _' secondsToWait: 0.2);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,EnsureContentMenuOpen,The following statement contains a magic number: !testRunner.WaitForName("FolderBreadCrumbWidget"' secondsToWait: 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,NavigateToLibraryHome,The following statement contains a magic number: testRunner.Delay(.5);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,CompleteDialog,The following statement contains a magic number: var widget = testRunner.GetWidgetByName("Automation Dialog TextEdit"' out _' 5);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,CompleteDialog,The following statement contains a magic number: testRunner.WaitForWidgetDisappear("Automation Dialog TextEdit"' 5);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddItemToBedplate,The following statement contains a magic number: testRunner.WaitFor(() => scene.Children.LastOrDefault() as InsertionGroupObject3D != null' 10);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,SaveBedplateToFolder,The following statement contains a magic number: testRunner.ClickByName("Save Menu SplitButton"' offset: new Point2D(8' 0));
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,SaveBedplateToFolder,The following statement contains a magic number: testRunner.Delay(2);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The following statement contains a magic number: staticDataPathOverride = TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "StaticData");
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The following statement contains a magic number: Environment.CurrentDirectory = TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"' "bin"' outputDirectory);
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(5' "MatterControl"));
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,RunTest,The following statement contains a magic number: defaultTestImages = TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "TestData"' "TestImages");
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,OpenPrintPopupAdvanced,The following statement contains a magic number: !testRunner.NameExists("Layer(s) To Pause Field"' .2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Complete9StepLeveling,The following statement contains a magic number: var section = (i * 3) + 1;
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Complete9StepLeveling,The following statement contains a magic number: testRunner.WaitForPage($"Step {section + 2} of 9");
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Complete9StepLeveling,The following statement contains a magic number: i < 3
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,Complete9StepLeveling,The following statement contains a magic number: testRunner.NameExists("Already Loaded Button"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,SwitchToPrinterSettings,The following statement contains a magic number: !testRunner.NameExists("Printer Tab"' 0.1)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,SwitchToControlsTab,The following statement contains a magic number: !testRunner.NameExists("Controls Tab"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,SwitchToTerminalTab,The following statement contains a magic number: !testRunner.NameExists("Terminal Tab"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,EnsurePrinterSidebarOpen,The following statement contains a magic number: testRunner.WaitForName("Slice Settings Sidebar"' 0.2)
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddTestAssetsToLibrary,The following statement contains a magic number: Assert.IsFalse(testRunner.WaitForName($"Row Item {friendlyName}"' .1)' $"{friendlyName} part should not exist at test start");
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddTestAssetsToLibrary,The following statement contains a magic number: Assert.IsTrue(  					testRunner.WaitForName($"Row Item {friendlyName}"' 2)  					|| testRunner.WaitForName($"Row Item {fileName}"' 2)'  					$"{friendlyName} part should exist after adding");
Magic Number,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,AddTestAssetsToLibrary,The following statement contains a magic number: Assert.IsTrue(  					testRunner.WaitForName($"Row Item {friendlyName}"' 2)  					|| testRunner.WaitForName($"Row Item {fileName}"' 2)'  					$"{friendlyName} part should exist after adding");
Magic Number,MatterControl.Tests,ReleaseBuildTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ReleaseBuildTests.cs,MatterControlKnownAssembliesAreOptimized,The following statement contains a magic number: var assemblyPath = TestContext.CurrentContext.ResolveProjectPath(4' "bin"' configuration' assemblyName);
Magic Number,MatterHackers.MatterControl.Slicing.Tests,SliceLayersTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\Slicing\SliceLayersTests.cs,SliceLayersGeneratingCorrectSegments,The following statement contains a magic number: string meshFileName = TestContext.CurrentContext.ResolveProjectPath(4' "Tests"' "TestData"' "TestMeshes"' "SliceLayers"' "Box20x20x10.stl");
Magic Number,MatterHackers.MatterControl.Slicing.Tests,SliceLayersTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\Slicing\SliceLayersTests.cs,SliceLayersGeneratingCorrectSegments,The following statement contains a magic number: Assert.IsTrue(bounds.ZSize == 10);
Magic Number,MatterHackers.MatterControl.Slicing.Tests,SliceLayersTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\Slicing\SliceLayersTests.cs,SliceLayersGeneratingCorrectSegments,The following statement contains a magic number: layers.GetPerimetersForAllLayers(cubeMesh' .2' .2);
Magic Number,MatterHackers.MatterControl.Slicing.Tests,SliceLayersTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\Slicing\SliceLayersTests.cs,SliceLayersGeneratingCorrectSegments,The following statement contains a magic number: layers.GetPerimetersForAllLayers(cubeMesh' .2' .2);
Magic Number,MatterHackers.MatterControl.Slicing.Tests,SliceLayersTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\Slicing\SliceLayersTests.cs,SliceLayersGeneratingCorrectSegments,The following statement contains a magic number: Assert.IsTrue(layers.AllLayers.Count == 50);
Magic Number,MatterHackers.MatterControl.Slicing.Tests,SliceLayersTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\Slicing\SliceLayersTests.cs,SliceLayersGeneratingCorrectSegments,The following statement contains a magic number: Assert.IsTrue(layer.UnorderedSegments.Count == 8);
Magic Number,MatterHackers.MatterControl.Slicing.Tests,SliceLayersTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\Slicing\SliceLayersTests.cs,SliceLayersGeneratingCorrectSegments,The following statement contains a magic number: layers.GetPerimetersForAllLayers(cubeMesh' .2' .1);
Magic Number,MatterHackers.MatterControl.Slicing.Tests,SliceLayersTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\Slicing\SliceLayersTests.cs,SliceLayersGeneratingCorrectSegments,The following statement contains a magic number: layers.GetPerimetersForAllLayers(cubeMesh' .2' .1);
Magic Number,MatterHackers.MatterControl.Slicing.Tests,SliceLayersTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\Slicing\SliceLayersTests.cs,SliceLayersGeneratingCorrectSegments,The following statement contains a magic number: Assert.IsTrue(layers.AllLayers.Count == 99);
Magic Number,MatterControl.Tests.MatterControl.ToolChanges,ToolChangeTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ToolChangeTests.cs,TestSetup,The following statement contains a magic number: AggContext.StaticData = new FileSystemStaticData(TestContext.CurrentContext.ResolveProjectPath(4' "StaticData"));
Magic Number,MatterControl.Tests.MatterControl.ToolChanges,ToolChangeTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ToolChangeTests.cs,TestSetup,The following statement contains a magic number: MatterControlUtilities.OverrideAppDataLocation(TestContext.CurrentContext.ResolveProjectPath(4));
Magic Number,MatterControl.Tests.MatterControl.ToolChanges,ToolChangeTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ToolChangeTests.cs,ToolChangeWithCoolDown,The following statement contains a magic number: printer.Settings.SetValue(SettingsKey.inactive_cool_down' $"{30}");
Magic Number,MatterControl.Tests.MatterControl.ToolChanges,ToolChangeTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ToolChangeTests.cs,CreatePrinter,The following statement contains a magic number: printer.Settings.Helpers.SetExtruderOffset(1' new Vector3(1' 2' 3));
Magic Number,MatterControl.Tests.MatterControl.ToolChanges,ToolChangeTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ToolChangeTests.cs,CreatePrinter,The following statement contains a magic number: printer.Settings.Helpers.SetExtruderOffset(1' new Vector3(1' 2' 3));
Magic Number,MatterControl.Tests.MatterControl.ToolChanges,ExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ToolChangeTests.cs,RunSimulatedPrint,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MatterControl.Tests.MatterControl.ToolChanges,ExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ToolChangeTests.cs,RunSimulatedPrint,The following statement contains a magic number: !printer.Connection.IsConnected  				&& timer.ElapsedMilliseconds < (1000 * 40)
Magic Number,MatterControl.Tests.MatterControl.ToolChanges,ExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ToolChangeTests.cs,RunSimulatedPrint,The following statement contains a magic number: !printer.Connection.IsConnected  				&& timer.ElapsedMilliseconds < (1000 * 40)
Magic Number,MatterControl.Tests.MatterControl.ToolChanges,ExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ToolChangeTests.cs,RunSimulatedPrint,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MatterControl.Tests.MatterControl.ToolChanges,ExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ToolChangeTests.cs,RunSimulatedPrint,The following statement contains a magic number: printer.Connection.Printing  				&& timer.ElapsedMilliseconds < (1000 * 40)
Magic Number,MatterControl.Tests.MatterControl.ToolChanges,ExtensionMethods,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\ToolChangeTests.cs,RunSimulatedPrint,The following statement contains a magic number: printer.Connection.Printing  				&& timer.ElapsedMilliseconds < (1000 * 40)
Duplicate Code,MatterControl.Tests.MatterControl,InteractiveSceneTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\InteractiveSceneTests.cs,CombineTests,The method contains a code clone-set at the following line numbers (starting from the method definition): ((69' 88)' (137' 156))
Duplicate Code,MatterControl.Tests.MatterControl,LevelingTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\LevelingTests.cs,LevelingMesh3x3CorectInterpolation,The method contains a code clone-set at the following line numbers (starting from the method definition): ((19' 45)' (60' 86))
Duplicate Code,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,SupportsFromBedTests,The method contains a code clone-set at the following line numbers (starting from the method definition): ((155' 175)' (187' 207))
Duplicate Code,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The method contains a code clone-set at the following line numbers (starting from the method definition): ((82' 103)' (294' 315))
Duplicate Code,MatterControl.Tests.MatterControl,SupportGeneratorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\SupportGeneratorTests.cs,TopBottomWalkingTest,The method contains a code clone-set at the following line numbers (starting from the method definition): ((496' 519)' (519' 542))
Missing Default,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,AnchorTests,The following switch statement is missing a default case: switch (i)  					{  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;  							break;  					}
Missing Default,MatterControl.Tests.MatterControl,PopupAnchorTests,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\PopupAnchorTests.cs,WindowTest3,The following switch statement is missing a default case: switch (i)  					{  						// Bottom-Top positions  						case 0:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;    							break;  						case 1:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 2:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						case 3:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Top;  							break;    						// Top-Top positions  						case 4:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 5:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 6:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 7:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Top;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Bottom;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Bottom positions  						case 8:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 9:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 10:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 11:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Bottom;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						// Bottom-Top positions  						case 12:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 13:  							anchor.Mate.HorizontalEdge = MateEdge.Left;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 14:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Right;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;    						case 15:  							anchor.Mate.HorizontalEdge = MateEdge.Right;  							popup.Mate.HorizontalEdge = MateEdge.Left;    							anchor.Mate.VerticalEdge = MateEdge.Bottom;  							popup.Mate.VerticalEdge = MateEdge.Top;    							anchor.AltMate.VerticalEdge = MateEdge.Top;  							popup.AltMate.VerticalEdge = MateEdge.Bottom;  							break;  					}
Missing Default,MatterHackers.MatterControl.Tests.Automation,MatterControlUtilities,D:\research\architectureSmells\repos\MatterHackers_MatterControl\Tests\MatterControl.Tests\MatterControl\MatterControlUtilities.cs,NavigateToFolder,The following switch statement is missing a default case: switch (libraryRowItemName)  			{  				case "SD Card Row Item Collection":  					if (ApplicationController.Instance.DragDropData.View3DWidget?.Printer is PrinterConfig printer)  					{  						testRunner.DoubleClickByName($"{printer.Settings.GetValue(SettingsKey.printer_name)} Row Item Collection");    						testRunner.Delay();    						testRunner.ClickByName(libraryRowItemName);  					}    					break;    				case "Calibration Parts Row Item Collection":  				case "Cloud Library Row Item Collection":  				case "Print Queue Row Item Collection":  				case "Local Library Row Item Collection":  					if (!testRunner.NameExists("Library Row Item Collection"))  					{  						testRunner.ClickByName("Bread Crumb Button Home");  						testRunner.Delay();  					}    					// If visible' navigate into Libraries container before opening target  					if (testRunner.NameExists("Library Row Item Collection"))  					{  						testRunner.DoubleClickByName("Library Row Item Collection");  						testRunner.Delay();  					}    					break;  			}
