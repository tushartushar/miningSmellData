Implementation smell,Namespace,Class,File,Method,Description
Long Method,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The method has 100 lines of code.
Complex Method,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleGrade2.cs,ConvertWord,Cyclomatic complexity of the method is 20
Complex Method,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,FindMeshGroupHitPosition,Cyclomatic complexity of the method is 8
Long Identifier,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,FindMeshGroupHitPosition,The length of the parameter meshViewerWidgetScreenPosition is 30.
Long Identifier,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,SetWordSize,The length of the parameter unscaledStartPositionRelCenter is 30.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleGrade2.cs,ConvertWord,The length of the statement  "							converted = converted.Substring(0' 1) + tempMiddleCharacters.Replace(keyValue.Key' keyValue.Value) + converted.Substring(converted.Length-1' 1);						 " is 144.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleGrade2.cs,compareStringIgnoringPunctuation,The length of the statement  "				punctuationStrippedString = punctuationStrippedString.TrimEnd(punctuationStrippedString[punctuationStrippedString.Length - 1]); " is 127.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleGrade2.cs,ConvertMappingStringToList,The length of the statement  "					if(keyConversionPair.Length == 2 && keyConversionPair[0] != null && keyConversionPair[0].Length > 0 && keyConversionPair[1] != null && keyConversionPair[1].Length >0) " is 166.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,SetWordPositions,The length of the statement  "					meshTransforms[meshIndex] *= Matrix4X4.CreateTranslation(new Vector3(newX' newY' startPosition.z) + new Vector3(MeshViewerWidget.BedCenter)); " is 141.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddCharacterMeshes,The length of the statement  "					// create the polygons from the inner loop to a center point so that there is the rest of an approximation of the bubble " is 120.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateBase,The length of the statement  "				Mesh baseMeshResult = VertexSourceToMesh.Extrude(baseRoundedRect' unscaledBaseHeight / 2 * roundingScale * sizeScrollBar.Value * heightScrollBar.Value); " is 152.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The length of the statement  "						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor)); " is 126.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The length of the statement  "						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor)); " is 123.
Long Statement,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddLetterControls,The length of the statement  "			MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360); " is 134.
Complex Conditional,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleGrade2.cs,ConvertMappingStringToList,The conditional expression  "keyConversionPair.Length == 2 && keyConversionPair[0] != null && keyConversionPair[0].Length > 0 && keyConversionPair[1] != null && keyConversionPair[1].Length >0"  is complex.
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleGrade2.cs,ConvertWord,The following statement contains a magic number: if(converted[0] != '#')  			{   				    				// put in commas before capitals  				converted = Regex.Replace(converted' "([A-Z])"' "'$1");  				converted = converted.ToLower();    				// do the replacements that must be the complete word by itself  				foreach (TextMapping keyValue in exactTextMappings)  				{  					if (compareStringIgnoringPunctuation(converted' keyValue.Key))  					{  						converted = converted.Replace(keyValue.Key' keyValue.Value);  						return converted;  					}  				}    				// do the replacements that must come after other characters  				string tempAfterFirstCharacter = converted.Substring(1);  				foreach (TextMapping keyValue in afterTextMappings)  				{  					if (tempAfterFirstCharacter.Contains(keyValue.Key))  					{  						converted = converted.Substring(0' 1) + tempAfterFirstCharacter.Replace(keyValue.Key' keyValue.Value);  						tempAfterFirstCharacter = converted.Substring(1);  					}  				}    				// do the replacements that must come after other characters  				string tempBeforeLastCharacter = converted.Substring(0'converted.Length-1);  				foreach (TextMapping keyValue in beforeTextMappings)  				{  					if (tempBeforeLastCharacter.Contains(keyValue.Key))  					{  						converted = tempBeforeLastCharacter.Replace(keyValue.Key' keyValue.Value) + converted[converted.Length-1];  						tempBeforeLastCharacter = converted.Substring(0' converted.Length - 1);  					}  				}    				// do the replacements that can go anywhere  				foreach (TextMapping keyValue in anyPositionMappings)  				{  					if (converted.Contains(keyValue.Key))  					{  						converted = converted.Replace(keyValue.Key' keyValue.Value);  					}  				}    				if (converted.Length > 2)  				{  					// do the replacements that must come after and before other characters  					string tempMiddleCharacters = converted.Substring(1' converted.Length - 2);  					foreach (TextMapping keyValue in betweenTextMappings)  					{  						if (tempMiddleCharacters.Contains(keyValue.Key))  						{  							converted = converted.Substring(0' 1) + tempMiddleCharacters.Replace(keyValue.Key' keyValue.Value) + converted.Substring(converted.Length-1' 1);						  						}  					}  				}    				if (!isLastWord)  				{  					foreach (TextMapping keyValue in beforeWordsMappings)  					{  						if (converted == keyValue.Key)  						{  							converted = keyValue.Value;  							return converted;  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleGrade2.cs,ConvertWord,The following statement contains a magic number: if(converted[0] != '#')  			{   				    				// put in commas before capitals  				converted = Regex.Replace(converted' "([A-Z])"' "'$1");  				converted = converted.ToLower();    				// do the replacements that must be the complete word by itself  				foreach (TextMapping keyValue in exactTextMappings)  				{  					if (compareStringIgnoringPunctuation(converted' keyValue.Key))  					{  						converted = converted.Replace(keyValue.Key' keyValue.Value);  						return converted;  					}  				}    				// do the replacements that must come after other characters  				string tempAfterFirstCharacter = converted.Substring(1);  				foreach (TextMapping keyValue in afterTextMappings)  				{  					if (tempAfterFirstCharacter.Contains(keyValue.Key))  					{  						converted = converted.Substring(0' 1) + tempAfterFirstCharacter.Replace(keyValue.Key' keyValue.Value);  						tempAfterFirstCharacter = converted.Substring(1);  					}  				}    				// do the replacements that must come after other characters  				string tempBeforeLastCharacter = converted.Substring(0'converted.Length-1);  				foreach (TextMapping keyValue in beforeTextMappings)  				{  					if (tempBeforeLastCharacter.Contains(keyValue.Key))  					{  						converted = tempBeforeLastCharacter.Replace(keyValue.Key' keyValue.Value) + converted[converted.Length-1];  						tempBeforeLastCharacter = converted.Substring(0' converted.Length - 1);  					}  				}    				// do the replacements that can go anywhere  				foreach (TextMapping keyValue in anyPositionMappings)  				{  					if (converted.Contains(keyValue.Key))  					{  						converted = converted.Replace(keyValue.Key' keyValue.Value);  					}  				}    				if (converted.Length > 2)  				{  					// do the replacements that must come after and before other characters  					string tempMiddleCharacters = converted.Substring(1' converted.Length - 2);  					foreach (TextMapping keyValue in betweenTextMappings)  					{  						if (tempMiddleCharacters.Contains(keyValue.Key))  						{  							converted = converted.Substring(0' 1) + tempMiddleCharacters.Replace(keyValue.Key' keyValue.Value) + converted.Substring(converted.Length-1' 1);						  						}  					}  				}    				if (!isLastWord)  				{  					foreach (TextMapping keyValue in beforeWordsMappings)  					{  						if (converted == keyValue.Key)  						{  							converted = keyValue.Value;  							return converted;  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleGrade2,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleGrade2.cs,ConvertMappingStringToList,The following statement contains a magic number: foreach(string inLine in conversions)  			{  				string line = inLine.Replace("\r"' "").Trim();  				if(line != null && line.Length>0)  				{  					string[] keyConversionPair = line.Split(' ');  					if(keyConversionPair.Length == 2 && keyConversionPair[0] != null && keyConversionPair[0].Length > 0 && keyConversionPair[1] != null && keyConversionPair[1].Length >0)  					{  						if(keyConversionPair[0] != "//")  						{  							TextMapping mapping = new TextMapping(keyConversionPair[0]'keyConversionPair[1]);    							if(IsNumeric(mapping.Key))  							{  								numberMappngs.Add(mapping);  							}							  							else if(mapping.Key == mapping.Key.ToUpper())//if in all caps it is an exact match  							{  								mapping.Key = mapping.Key.ToLower();  								if (mapping.Key.Contains("*"))  								{  									if (mapping.Key[0] == '*')  									{  										mapping.Key = mapping.Key.Trim('*');  										postWordPunctuationMappings.Add(mapping);  									}  									else  									{  										mapping.Key = mapping.Key.Trim('*');  										beforeWordsMappings.Add(mapping);  									}  								}  								else  								{  									exactTextMappings.Add(mapping);  								}  								  							}  							else if(mapping.Key[0] == '+' && mapping.Key[mapping.Key.Length-1] == '+')//check between  							{  								mapping.Key = mapping.Key.Trim('+');  								betweenTextMappings.Add(mapping);  							}  							else if (mapping.Key[0] == '+')   							{  								mapping.Key = mapping.Key.Trim('+');  								afterTextMappings.Add(mapping);  							}  							else if(mapping.Key[mapping.Key.Length-1] == '+')  							{  								mapping.Key = mapping.Key.Trim('+');  								beforeTextMappings.Add(mapping);  							}  							else if(mapping.Key.Contains("*"))  							{								  								if(mapping.Key[0] == '*')  								{  									mapping.Key = mapping.Key.Trim('*');  									postWordPunctuationMappings.Add(mapping);  								}  								else  								{  									mapping.Key = mapping.Key.Trim('*');  									beforeWordsMappings.Add(mapping);  								}  								  							}  							else//if not a special type then it is an anyPositionMapping  							{  								anyPositionMappings.Add(mapping);  							}  						}  					}  				}  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleBuilderMainWindow,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleBuilderMainWindow.cs,BrailleBuilderMainWindow,The following statement contains a magic number: Width = 640;
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleBuilderMainWindow,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleBuilderMainWindow.cs,BrailleBuilderMainWindow,The following statement contains a magic number: Height = 480;
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleBuilderMainWindow,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleBuilderMainWindow.cs,BrailleBuilderMainWindow,The following statement contains a magic number: MinimumSize = new Vector2(400' 300);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,BrailleBuilderMainWindow,C:\repos\MatterHackers_MatterControl\BrailleBuilder\BrailleBuilderMainWindow.cs,BrailleBuilderMainWindow,The following statement contains a magic number: MinimumSize = new Vector2(400' 300);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,View3DBrailleBuilder,The following statement contains a magic number: buttonBottomPanel.Padding = new BorderDouble(3' 3);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,View3DBrailleBuilder,The following statement contains a magic number: buttonBottomPanel.Padding = new BorderDouble(3' 3);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,View3DBrailleBuilder,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				processingProgressControl = new ProgressControl("Finding Parts:".Localize()' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;    				editPlateButtonsContainer = new FlowLayoutWidget();    				textToAddWidget = new MHTextEditWidget(""' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter Text Here".Localize());  				textToAddWidget.VAnchor = VAnchor.ParentCenter;  				textToAddWidget.Margin = new BorderDouble(5);  				editPlateButtonsContainer.AddChild(textToAddWidget);  				textToAddWidget.ActualTextEditWidget.EnterPressed += (object sender' KeyEventArgs keyEvent) =>  				{  					InsertTextNow(textToAddWidget.Text);  				};    				Button insertTextButton = textImageButtonFactory.Generate("Insert".Localize());  				editPlateButtonsContainer.AddChild(insertTextButton);  				insertTextButton.Click += (sender' e) =>  				{  					InsertTextNow(textToAddWidget.Text);  				};    				editToolBar.AddChild(editPlateButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,View3DBrailleBuilder,The following statement contains a magic number: {  				FlowLayoutWidget editToolBar = new FlowLayoutWidget();    				processingProgressControl = new ProgressControl("Finding Parts:".Localize()' ActiveTheme.Instance.PrimaryTextColor' ActiveTheme.Instance.PrimaryAccentColor);  				processingProgressControl.VAnchor = Agg.UI.VAnchor.ParentCenter;  				editToolBar.AddChild(processingProgressControl);  				editToolBar.VAnchor |= Agg.UI.VAnchor.ParentCenter;    				editPlateButtonsContainer = new FlowLayoutWidget();    				textToAddWidget = new MHTextEditWidget(""' pixelWidth: 300' messageWhenEmptyAndNotSelected: "Enter Text Here".Localize());  				textToAddWidget.VAnchor = VAnchor.ParentCenter;  				textToAddWidget.Margin = new BorderDouble(5);  				editPlateButtonsContainer.AddChild(textToAddWidget);  				textToAddWidget.ActualTextEditWidget.EnterPressed += (object sender' KeyEventArgs keyEvent) =>  				{  					InsertTextNow(textToAddWidget.Text);  				};    				Button insertTextButton = textImageButtonFactory.Generate("Insert".Localize());  				editPlateButtonsContainer.AddChild(insertTextButton);  				insertTextButton.Click += (sender' e) =>  				{  					InsertTextNow(textToAddWidget.Text);  				};    				editToolBar.AddChild(editPlateButtonsContainer);  				buttonBottomPanel.AddChild(editToolBar);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,View3DBrailleBuilder,The following statement contains a magic number: buttonRightPanelDisabledCover.BackgroundColor = new RGBA_Bytes(ActiveTheme.Instance.PrimaryBackgroundColor' 150);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,InsertTextDoWork,The following statement contains a magic number: TypeFacePrinter brailPrinter = new TypeFacePrinter(brailleText' new StyledTypeFace(brailTypeFace' 12));
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,InsertTextDoWork,The following statement contains a magic number: StyledTypeFace boldStyled = new StyledTypeFace(monoSpacedTypeFace' 12);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,InsertTextDoWork,The following statement contains a magic number: for (int i = 0; i < firstNewCharacter; i++)  			{  				asyncPlatingDatas[i].spacing = asyncPlatingDatas[i].spacing + new Vector2(0' boldStyled.CapHeightInPixels * 1.5);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,InsertTextDoWork,The following statement contains a magic number: processingProgressControl.PercentComplete = 95;
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddCharacterMeshes,The following statement contains a magic number: for (int i = 0; i < currentText.Length; i++)  			{  				string letter = currentText[i].ToString();  				TypeFacePrinter letterPrinter = new TypeFacePrinter(letter' typeFace);    				if (CharacterHasMesh(letterPrinter' letter))  				{  #if true  					Mesh textMesh = VertexSourceToMesh.Extrude(letterPrinter' unscaledLetterHeight / 2);  #else  					Mesh textMesh = VertexSourceToMesh.Extrude(letterPrinter' unscaledLetterHeight / 2);  					// this is the code to make rounded tops  					// convert the letterPrinter to clipper polygons  					List<List<IntPoint>> insetPoly = VertexSourceToPolygon.CreatePolygons(letterPrinter);  					// inset them  					ClipperOffset clipper = new ClipperOffset();  					clipper.AddPaths(insetPoly' JoinType.jtMiter' EndType.etClosedPolygon);  					List<List<IntPoint>> solution = new List<List<IntPoint>>();  					clipper.Execute(solution' 5.0);  					// convert them back into a vertex source  					// merge both the inset and original vertex sources together  					// convert the new vertex source into a mesh (triangulate them)  					// offset the inner loop in z  					// create the polygons from the inner loop to a center point so that there is the rest of an approximation of the bubble  					// make the mesh for the bottom   					// add the top and bottom together  					// done  #endif    					asyncMeshGroups.Add(new MeshGroup(textMesh));    					PlatingMeshGroupData newMeshInfo = new PlatingMeshGroupData();    					newMeshInfo.spacing = printer.GetOffsetLeftOfCharacterIndex(i);  					asyncPlatingDatas.Add(newMeshInfo);  					asyncMeshGroupTransforms.Add(Matrix4X4.Identity);    					PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' newIndex' null);  					asyncMeshGroupTransforms[newIndex] *= Matrix4X4.CreateTranslation(new Vector3(0' 0' unscaledLetterHeight / 2));    					newIndex++;  				}    				processingProgressControl.PercentComplete = ((i + 1) * 95 / currentText.Length);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddCharacterMeshes,The following statement contains a magic number: for (int i = 0; i < currentText.Length; i++)  			{  				string letter = currentText[i].ToString();  				TypeFacePrinter letterPrinter = new TypeFacePrinter(letter' typeFace);    				if (CharacterHasMesh(letterPrinter' letter))  				{  #if true  					Mesh textMesh = VertexSourceToMesh.Extrude(letterPrinter' unscaledLetterHeight / 2);  #else  					Mesh textMesh = VertexSourceToMesh.Extrude(letterPrinter' unscaledLetterHeight / 2);  					// this is the code to make rounded tops  					// convert the letterPrinter to clipper polygons  					List<List<IntPoint>> insetPoly = VertexSourceToPolygon.CreatePolygons(letterPrinter);  					// inset them  					ClipperOffset clipper = new ClipperOffset();  					clipper.AddPaths(insetPoly' JoinType.jtMiter' EndType.etClosedPolygon);  					List<List<IntPoint>> solution = new List<List<IntPoint>>();  					clipper.Execute(solution' 5.0);  					// convert them back into a vertex source  					// merge both the inset and original vertex sources together  					// convert the new vertex source into a mesh (triangulate them)  					// offset the inner loop in z  					// create the polygons from the inner loop to a center point so that there is the rest of an approximation of the bubble  					// make the mesh for the bottom   					// add the top and bottom together  					// done  #endif    					asyncMeshGroups.Add(new MeshGroup(textMesh));    					PlatingMeshGroupData newMeshInfo = new PlatingMeshGroupData();    					newMeshInfo.spacing = printer.GetOffsetLeftOfCharacterIndex(i);  					asyncPlatingDatas.Add(newMeshInfo);  					asyncMeshGroupTransforms.Add(Matrix4X4.Identity);    					PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' newIndex' null);  					asyncMeshGroupTransforms[newIndex] *= Matrix4X4.CreateTranslation(new Vector3(0' 0' unscaledLetterHeight / 2));    					newIndex++;  				}    				processingProgressControl.PercentComplete = ((i + 1) * 95 / currentText.Length);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddCharacterMeshes,The following statement contains a magic number: for (int i = 0; i < currentText.Length; i++)  			{  				string letter = currentText[i].ToString();  				TypeFacePrinter letterPrinter = new TypeFacePrinter(letter' typeFace);    				if (CharacterHasMesh(letterPrinter' letter))  				{  #if true  					Mesh textMesh = VertexSourceToMesh.Extrude(letterPrinter' unscaledLetterHeight / 2);  #else  					Mesh textMesh = VertexSourceToMesh.Extrude(letterPrinter' unscaledLetterHeight / 2);  					// this is the code to make rounded tops  					// convert the letterPrinter to clipper polygons  					List<List<IntPoint>> insetPoly = VertexSourceToPolygon.CreatePolygons(letterPrinter);  					// inset them  					ClipperOffset clipper = new ClipperOffset();  					clipper.AddPaths(insetPoly' JoinType.jtMiter' EndType.etClosedPolygon);  					List<List<IntPoint>> solution = new List<List<IntPoint>>();  					clipper.Execute(solution' 5.0);  					// convert them back into a vertex source  					// merge both the inset and original vertex sources together  					// convert the new vertex source into a mesh (triangulate them)  					// offset the inner loop in z  					// create the polygons from the inner loop to a center point so that there is the rest of an approximation of the bubble  					// make the mesh for the bottom   					// add the top and bottom together  					// done  #endif    					asyncMeshGroups.Add(new MeshGroup(textMesh));    					PlatingMeshGroupData newMeshInfo = new PlatingMeshGroupData();    					newMeshInfo.spacing = printer.GetOffsetLeftOfCharacterIndex(i);  					asyncPlatingDatas.Add(newMeshInfo);  					asyncMeshGroupTransforms.Add(Matrix4X4.Identity);    					PlatingHelper.CreateITraceableForMeshGroup(asyncPlatingDatas' asyncMeshGroups' newIndex' null);  					asyncMeshGroupTransforms[newIndex] *= Matrix4X4.CreateTranslation(new Vector3(0' 0' unscaledLetterHeight / 2));    					newIndex++;  				}    				processingProgressControl.PercentComplete = ((i + 1) * 95 / currentText.Length);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateBase,The following statement contains a magic number: if (meshesList.Count > 0)  			{  				AxisAlignedBoundingBox bounds = meshesList[0].GetAxisAlignedBoundingBox(meshTransforms[0]);  				for (int i = 1; i < meshesList.Count; i++)  				{  					bounds = AxisAlignedBoundingBox.Union(bounds' meshesList[i].GetAxisAlignedBoundingBox(meshTransforms[i]));  				}    				double roundingScale = 20;  				RectangleDouble baseRect = new RectangleDouble(bounds.minXYZ.x' bounds.minXYZ.y' bounds.maxXYZ.x' bounds.maxXYZ.y);  				baseRect.Inflate(2);  				baseRect *= roundingScale;  				RoundedRect baseRoundedRect = new RoundedRect(baseRect' 1 * roundingScale);    				Mesh baseMeshResult = VertexSourceToMesh.Extrude(baseRoundedRect' unscaledBaseHeight / 2 * roundingScale * sizeScrollBar.Value * heightScrollBar.Value);    				baseMeshResult.Transform(Matrix4X4.CreateScale(1 / roundingScale));    				meshesList.Add(new MeshGroup(baseMeshResult));  				platingDataList.Add(new PlatingMeshGroupData());  				meshTransforms.Add(Matrix4X4.CreateTranslation(0' 0' 0));  				PlatingHelper.CreateITraceableForMeshGroup(platingDataList' meshesList' meshesList.Count - 1' null);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateBase,The following statement contains a magic number: if (meshesList.Count > 0)  			{  				AxisAlignedBoundingBox bounds = meshesList[0].GetAxisAlignedBoundingBox(meshTransforms[0]);  				for (int i = 1; i < meshesList.Count; i++)  				{  					bounds = AxisAlignedBoundingBox.Union(bounds' meshesList[i].GetAxisAlignedBoundingBox(meshTransforms[i]));  				}    				double roundingScale = 20;  				RectangleDouble baseRect = new RectangleDouble(bounds.minXYZ.x' bounds.minXYZ.y' bounds.maxXYZ.x' bounds.maxXYZ.y);  				baseRect.Inflate(2);  				baseRect *= roundingScale;  				RoundedRect baseRoundedRect = new RoundedRect(baseRect' 1 * roundingScale);    				Mesh baseMeshResult = VertexSourceToMesh.Extrude(baseRoundedRect' unscaledBaseHeight / 2 * roundingScale * sizeScrollBar.Value * heightScrollBar.Value);    				baseMeshResult.Transform(Matrix4X4.CreateScale(1 / roundingScale));    				meshesList.Add(new MeshGroup(baseMeshResult));  				platingDataList.Add(new PlatingMeshGroupData());  				meshTransforms.Add(Matrix4X4.CreateTranslation(0' 0' 0));  				PlatingHelper.CreateITraceableForMeshGroup(platingDataList' meshesList' meshesList.Count - 1' null);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateBase,The following statement contains a magic number: if (meshesList.Count > 0)  			{  				AxisAlignedBoundingBox bounds = meshesList[0].GetAxisAlignedBoundingBox(meshTransforms[0]);  				for (int i = 1; i < meshesList.Count; i++)  				{  					bounds = AxisAlignedBoundingBox.Union(bounds' meshesList[i].GetAxisAlignedBoundingBox(meshTransforms[i]));  				}    				double roundingScale = 20;  				RectangleDouble baseRect = new RectangleDouble(bounds.minXYZ.x' bounds.minXYZ.y' bounds.maxXYZ.x' bounds.maxXYZ.y);  				baseRect.Inflate(2);  				baseRect *= roundingScale;  				RoundedRect baseRoundedRect = new RoundedRect(baseRect' 1 * roundingScale);    				Mesh baseMeshResult = VertexSourceToMesh.Extrude(baseRoundedRect' unscaledBaseHeight / 2 * roundingScale * sizeScrollBar.Value * heightScrollBar.Value);    				baseMeshResult.Transform(Matrix4X4.CreateScale(1 / roundingScale));    				meshesList.Add(new MeshGroup(baseMeshResult));  				platingDataList.Add(new PlatingMeshGroupData());  				meshTransforms.Add(Matrix4X4.CreateTranslation(0' 0' 0));  				PlatingHelper.CreateITraceableForMeshGroup(platingDataList' meshesList' meshesList.Count - 1' null);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Width = 200;
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: {  				BorderDouble buttonMargin = new BorderDouble(top: 3);    				// put in the word editing menu  				{  					CheckBox expandWordOptions = ExpandMenuOptionFactory.GenerateCheckBoxButton("Word Edit".Localize()'  					View3DWidget.ArrowRight'  					View3DWidget.ArrowDown);  					expandWordOptions.Margin = new BorderDouble(bottom: 2);  					buttonRightPanel.AddChild(expandWordOptions);    					FlowLayoutWidget wordOptionContainer = new FlowLayoutWidget(FlowDirection.TopToBottom);  					wordOptionContainer.HAnchor = HAnchor.ParentLeftRight;  					wordOptionContainer.Visible = false;  					buttonRightPanel.AddChild(wordOptionContainer);    					sizeScrollBar = InsertUiForSlider(wordOptionContainer' "Size:".Localize()' .3' 2);  					{  						sizeScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordSize(MeshGroups' MeshGroupTransforms);    							//SetWordSpacing(MeshGroups' MeshGroupTransforms' MeshGroupExtraData);  							RebuildBase();  						};  					}    					heightScrollBar = InsertUiForSlider(wordOptionContainer' "Height:".Localize()' .05' 1);  					{  						heightScrollBar.ValueChanged += (sender' e) =>  						{  							SetWordHeight(MeshGroups' MeshGroupTransforms);  							RebuildBase();  						};  					}    					// put in the user alpha check box  					{  						includeText = new CheckBox(new CheckBoxViewText("Include Text".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						includeText.ToolTipText = "Show normal text above the braille".Localize();  						includeText.Checked = false;  						includeText.Margin = new BorderDouble(10' 5);  						includeText.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(includeText);  						includeText.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in the user alpha check box  					{  						useGrade2 = new CheckBox(new CheckBoxViewText("Use Grade 2".Localize()' textColor: ActiveTheme.Instance.PrimaryTextColor));  						useGrade2.ToolTipText = "Experimental support for Braille grade 2 (contractions)".Localize();  						useGrade2.Checked = false;  						useGrade2.Margin = new BorderDouble(10' 5);  						useGrade2.HAnchor = HAnchor.ParentLeft;  						wordOptionContainer.AddChild(useGrade2);  						useGrade2.CheckedStateChanged += (sender' e) =>  						{  							InsertTextNow(this.word);  						};  					}    					// put in a link to the wikipedia article  					{  						LinkButtonFactory linkButtonFactory = new LinkButtonFactory();  						linkButtonFactory.fontSize = 10;  						linkButtonFactory.textColor = ActiveTheme.Instance.PrimaryTextColor;    						Button moreAboutBrailleLink = linkButtonFactory.Generate("About Braille".Localize());  						moreAboutBrailleLink.Margin = new BorderDouble(10' 5);  						moreAboutBrailleLink.HAnchor = HAnchor.ParentLeft;  						moreAboutBrailleLink.Click += (sender' e) =>  						{  							UiThread.RunOnIdle(() =>  							{  								MatterControlApplication.Instance.LaunchBrowser("https://en.wikipedia.org/wiki/Braille");  							});  						};    						wordOptionContainer.AddChild(moreAboutBrailleLink);  					}    					expandWordOptions.CheckedStateChanged += (sender' e) =>  					{  						wordOptionContainer.Visible = expandWordOptions.Checked;  					};    					expandWordOptions.Checked = true;  				}    				GuiWidget verticalSpacer = new GuiWidget();  				verticalSpacer.VAnchor = VAnchor.ParentBottomTop;  				buttonRightPanel.AddChild(verticalSpacer);    				saveButton = WhiteButtonFactory.Generate("Save".Localize()' centerText: true);  				saveButton.Visible = false;  				saveButton.Cursor = Cursors.Hand;    				saveAndExitButton = WhiteButtonFactory.Generate("Save & Exit".Localize()' centerText: true);  				saveAndExitButton.Visible = false;  				saveAndExitButton.Cursor = Cursors.Hand;    				//buttonRightPanel.AddChild(saveButton);  				buttonRightPanel.AddChild(saveAndExitButton);  			}
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Padding = new BorderDouble(6' 6);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,CreateRightButtonPanel,The following statement contains a magic number: buttonRightPanel.Padding = new BorderDouble(6' 6);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddLetterControls,The following statement contains a magic number: textImageButtonFactory.FixedWidth = 44 * GuiWidget.DeviceScale;
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddLetterControls,The following statement contains a magic number: degreesContainer.Padding = new BorderDouble(5);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddLetterControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddLetterControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddLetterControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddLetterControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,AddLetterControls,The following statement contains a magic number: MHNumberEdit degreesControl = new MHNumberEdit(45' pixelWidth: 40' allowNegatives: true' increment: 5' minValue: -360' maxValue: 360);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,generateHorizontalRule,The following statement contains a magic number: horizontalRule.Margin = new BorderDouble(0' 1' 0' 3);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,generateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,generateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,generateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,generateHorizontalRule,The following statement contains a magic number: horizontalRule.BackgroundColor = new RGBA_Bytes(255' 255' 255' 200);
Magic Number,MatterHackers.MatterControl.Plugins.BrailleBuilder,View3DBrailleBuilder,C:\repos\MatterHackers_MatterControl\BrailleBuilder\View3DBrailleBuilder.cs,MergeAndSavePartsDoWork,The following statement contains a magic number: try  			{  				// push all the transforms into the meshes  				for (int i = 0; i < asyncMeshGroups.Count; i++)  				{  					asyncMeshGroups[i].Transform(MeshGroupTransforms[i]);    					processingProgressControl.RatioComplete = (double)i / asyncMeshGroups.Count * .1;  				}    				MeshFileIo.Save(asyncMeshGroups' filePath);  			}  			catch (System.UnauthorizedAccessException)  			{  				//Do something special when unauthorized?  				StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes.".Localize()' "Unable to save".Localize());  			}  			catch  			{  				StyledMessageBox.ShowMessageBox(null' "Oops! Unable to save changes.".Localize()' "Unable to save".Localize());  			}
